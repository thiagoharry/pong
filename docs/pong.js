
var Module;

if (typeof Module === 'undefined') Module = {};

if (!Module.expectedDataFileDownloads) {
  Module.expectedDataFileDownloads = 0;
  Module.finishedDataFileDownloads = 0;
}
Module.expectedDataFileDownloads++;
(function() {
 var loadPackage = function(metadata) {

    var PACKAGE_PATH;
    if (typeof window === 'object') {
      PACKAGE_PATH = window['encodeURIComponent'](window.location.pathname.toString().substring(0, window.location.pathname.toString().lastIndexOf('/')) + '/');
    } else if (typeof location !== 'undefined') {
      // worker
      PACKAGE_PATH = encodeURIComponent(location.pathname.toString().substring(0, location.pathname.toString().lastIndexOf('/')) + '/');
    } else {
      throw 'using preloaded data can only be done on a web page or in a web worker';
    }
    var PACKAGE_NAME = 'web/pong.data';
    var REMOTE_PACKAGE_BASE = 'pong.data';
    if (typeof Module['locateFilePackage'] === 'function' && !Module['locateFile']) {
      Module['locateFile'] = Module['locateFilePackage'];
      Module.printErr('warning: you defined Module.locateFilePackage, that has been renamed to Module.locateFile (using your locateFilePackage for now)');
    }
    var REMOTE_PACKAGE_NAME = typeof Module['locateFile'] === 'function' ?
                              Module['locateFile'](REMOTE_PACKAGE_BASE) :
                              ((Module['filePackagePrefixURL'] || '') + REMOTE_PACKAGE_BASE);
  
      var REMOTE_PACKAGE_SIZE = 62059;
      var PACKAGE_UUID = '16005ed1-ff57-4a98-8681-b36f0e7bc3c4';
    
    function fetchRemotePackage(packageName, packageSize, callback, errback) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', packageName, true);
      xhr.responseType = 'arraybuffer';
      xhr.onprogress = function(event) {
        var url = packageName;
        var size = packageSize;
        if (event.total) size = event.total;
        if (event.loaded) {
          if (!xhr.addedTotal) {
            xhr.addedTotal = true;
            if (!Module.dataFileDownloads) Module.dataFileDownloads = {};
            Module.dataFileDownloads[url] = {
              loaded: event.loaded,
              total: size
            };
          } else {
            Module.dataFileDownloads[url].loaded = event.loaded;
          }
          var total = 0;
          var loaded = 0;
          var num = 0;
          for (var download in Module.dataFileDownloads) {
          var data = Module.dataFileDownloads[download];
            total += data.total;
            loaded += data.loaded;
            num++;
          }
          total = Math.ceil(total * Module.expectedDataFileDownloads/num);
          if (Module['setStatus']) Module['setStatus']('Downloading data... (' + loaded + '/' + total + ')');
        } else if (!Module.dataFileDownloads) {
          if (Module['setStatus']) Module['setStatus']('Downloading data...');
        }
      };
      xhr.onload = function(event) {
        var packageData = xhr.response;
        callback(packageData);
      };
      xhr.send(null);
    };

    function handleError(error) {
      console.error('package error:', error);
    };
  
      var fetched = null, fetchedCallback = null;
      fetchRemotePackage(REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE, function(data) {
        if (fetchedCallback) {
          fetchedCallback(data);
          fetchedCallback = null;
        } else {
          fetched = data;
        }
      }, handleError);
    
  function runWithFS() {

    function assert(check, msg) {
      if (!check) throw msg + new Error().stack;
    }
Module['FS_createPath']('/', 'shaders', true, true);
Module['FS_createPath']('/shaders', '1-title', true, true);
Module['FS_createPath']('/shaders', '2-p1', true, true);
Module['FS_createPath']('/shaders', '3-exit', true, true);
Module['FS_createPath']('/shaders', '4-initial', true, true);
Module['FS_createPath']('/shaders', '5-screen', true, true);
Module['FS_createPath']('/shaders', '6-paddle', true, true);
Module['FS_createPath']('/shaders', '7-ball', true, true);
Module['FS_createPath']('/shaders', '8-score', true, true);
Module['FS_createPath']('/shaders', '9-item', true, true);

    function DataRequest(start, end, crunched, audio) {
      this.start = start;
      this.end = end;
      this.crunched = crunched;
      this.audio = audio;
    }
    DataRequest.prototype = {
      requests: {},
      open: function(mode, name) {
        this.name = name;
        this.requests[name] = this;
        Module['addRunDependency']('fp ' + this.name);
      },
      send: function() {},
      onload: function() {
        var byteArray = this.byteArray.subarray(this.start, this.end);

          this.finish(byteArray);

      },
      finish: function(byteArray) {
        var that = this;
        Module['FS_createPreloadedFile'](this.name, null, byteArray, true, true, function() {
          Module['removeRunDependency']('fp ' + that.name);
        }, function() {
          if (that.audio) {
            Module['removeRunDependency']('fp ' + that.name); // workaround for chromium bug 124926 (still no audio with this, but at least we don't hang)
          } else {
            Module.printErr('Preloading file ' + that.name + ' failed');
          }
        }, false, true); // canOwn this data in the filesystem, it is a slide into the heap that will never change
        this.requests[this.name] = null;
      },
    };

      new DataRequest(0, 3039, 0, 0).open('GET', '/shaders/1-title/fragment.glsl');
    new DataRequest(3039, 3694, 0, 0).open('GET', '/shaders/1-title/vertex.glsl');
    new DataRequest(3694, 11814, 0, 0).open('GET', '/shaders/2-p1/fragment.glsl');
    new DataRequest(11814, 12383, 0, 0).open('GET', '/shaders/2-p1/vertex.glsl');
    new DataRequest(12383, 16146, 0, 0).open('GET', '/shaders/3-exit/fragment.glsl');
    new DataRequest(16146, 16715, 0, 0).open('GET', '/shaders/3-exit/vertex.glsl');
    new DataRequest(16715, 23672, 0, 0).open('GET', '/shaders/4-initial/fragment.glsl');
    new DataRequest(23672, 24239, 0, 0).open('GET', '/shaders/4-initial/vertex.glsl');
    new DataRequest(24239, 33084, 0, 0).open('GET', '/shaders/5-screen/fragment.glsl');
    new DataRequest(33084, 33809, 0, 0).open('GET', '/shaders/5-screen/vertex.glsl');
    new DataRequest(33809, 35724, 0, 0).open('GET', '/shaders/6-paddle/fragment.glsl');
    new DataRequest(35724, 36115, 0, 0).open('GET', '/shaders/6-paddle/vertex.glsl');
    new DataRequest(36115, 37627, 0, 0).open('GET', '/shaders/7-ball/fragment.glsl');
    new DataRequest(37627, 38128, 0, 0).open('GET', '/shaders/7-ball/vertex.glsl');
    new DataRequest(38128, 43240, 0, 0).open('GET', '/shaders/8-score/fragment.glsl');
    new DataRequest(43240, 43762, 0, 0).open('GET', '/shaders/8-score/vertex.glsl');
    new DataRequest(43762, 61520, 0, 0).open('GET', '/shaders/9-item/fragment.glsl');
    new DataRequest(61520, 62059, 0, 0).open('GET', '/shaders/9-item/vertex.glsl');

    function processPackageData(arrayBuffer) {
      Module.finishedDataFileDownloads++;
      assert(arrayBuffer, 'Loading data file failed.');
      var byteArray = new Uint8Array(arrayBuffer);
      var curr;
      
      // copy the entire loaded file into a spot in the heap. Files will refer to slices in that. They cannot be freed though
      // (we may be allocating before malloc is ready, during startup).
      var ptr = Module['getMemory'](byteArray.length);
      Module['HEAPU8'].set(byteArray, ptr);
      DataRequest.prototype.byteArray = Module['HEAPU8'].subarray(ptr, ptr+byteArray.length);
          DataRequest.prototype.requests["/shaders/1-title/fragment.glsl"].onload();
          DataRequest.prototype.requests["/shaders/1-title/vertex.glsl"].onload();
          DataRequest.prototype.requests["/shaders/2-p1/fragment.glsl"].onload();
          DataRequest.prototype.requests["/shaders/2-p1/vertex.glsl"].onload();
          DataRequest.prototype.requests["/shaders/3-exit/fragment.glsl"].onload();
          DataRequest.prototype.requests["/shaders/3-exit/vertex.glsl"].onload();
          DataRequest.prototype.requests["/shaders/4-initial/fragment.glsl"].onload();
          DataRequest.prototype.requests["/shaders/4-initial/vertex.glsl"].onload();
          DataRequest.prototype.requests["/shaders/5-screen/fragment.glsl"].onload();
          DataRequest.prototype.requests["/shaders/5-screen/vertex.glsl"].onload();
          DataRequest.prototype.requests["/shaders/6-paddle/fragment.glsl"].onload();
          DataRequest.prototype.requests["/shaders/6-paddle/vertex.glsl"].onload();
          DataRequest.prototype.requests["/shaders/7-ball/fragment.glsl"].onload();
          DataRequest.prototype.requests["/shaders/7-ball/vertex.glsl"].onload();
          DataRequest.prototype.requests["/shaders/8-score/fragment.glsl"].onload();
          DataRequest.prototype.requests["/shaders/8-score/vertex.glsl"].onload();
          DataRequest.prototype.requests["/shaders/9-item/fragment.glsl"].onload();
          DataRequest.prototype.requests["/shaders/9-item/vertex.glsl"].onload();
          Module['removeRunDependency']('datafile_web/pong.data');

    };
    Module['addRunDependency']('datafile_web/pong.data');
  
    if (!Module.preloadResults) Module.preloadResults = {};
  
      Module.preloadResults[PACKAGE_NAME] = {fromCache: false};
      if (fetched) {
        processPackageData(fetched);
        fetched = null;
      } else {
        fetchedCallback = processPackageData;
      }
    
  }
  if (Module['calledRun']) {
    runWithFS();
  } else {
    if (!Module['preRun']) Module['preRun'] = [];
    Module["preRun"].push(runWithFS); // FS is not initialized yet, wait for it
  }

 }
 loadPackage();

})();

// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB;
// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) { var success = enlargeMemory(); if (!success) { DYNAMICTOP = ret; return 0; } }; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;



//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
      assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
    }
    if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }

  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    funcstr += "if (typeof EmterpreterAsync === 'object') { assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling cwrap') }";
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["cwrap"] = cwrap;
Module["ccall"] = ccall;


function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if ((typeof _sbrk !== 'undefined' && !_sbrk.called) || !runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module['getMemory'] = getMemory;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module['Pointer_stringify'] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module['AsciiToString'] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module['stringToAscii'] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

function UTF8ArrayToString(u8Array, idx) {
  var u0, u1, u2, u3, u4, u5;

  var str = '';
  while (1) {
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    u0 = u8Array[idx++];
    if (!u0) return str;
    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
    u1 = u8Array[idx++] & 63;
    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
    u2 = u8Array[idx++] & 63;
    if ((u0 & 0xF0) == 0xE0) {
      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
    } else {
      u3 = u8Array[idx++] & 63;
      if ((u0 & 0xF8) == 0xF0) {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
      } else {
        u4 = u8Array[idx++] & 63;
        if ((u0 & 0xFC) == 0xF8) {
          u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
        } else {
          u5 = u8Array[idx++] & 63;
          u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
        }
      }
    }
    if (u0 < 0x10000) {
      str += String.fromCharCode(u0);
    } else {
      var ch = u0 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    }
  }
}
Module['UTF8ArrayToString'] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8, ptr);
}
Module['UTF8ToString'] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module['stringToUTF8Array'] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
}
Module['stringToUTF8'] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module['lengthBytesUTF8'] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}
Module['stringToUTF16'] = stringToUTF16;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}
Module['lengthBytesUTF16'] = lengthBytesUTF16;

function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}
Module['stringToUTF32'] = stringToUTF32;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}
Module['lengthBytesUTF32'] = lengthBytesUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var parsed = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    parsed = parse();
  } catch(e) {
    parsed += '?';
  }
  if (parsed.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return parsed;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module['stackTrace'] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk


function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 135266304;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec (and given that TOTAL_STACK=' + TOTAL_STACK + ')');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer;
buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer++)>>0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;



// === Body ===

var ASM_CONSTS = [function() { var el= document.getElementById("canvas"); el.style.position= "absolute"; el.style.top= "0px"; el.style.left= "0px"; el= document.getElementById("output"); el.style.display= "none"; el= document.getElementsByTagName("BODY")[0]; el.style.overflow= "hidden"; }];

function _emscripten_asm_const_0(code) {
 return ASM_CONSTS[code]() | 0;
}



STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 653232;
  /* global initializers */  __ATINIT__.push();
  

/* memory initializer */ allocate([], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([114,138,14,62,143,228,242,189,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,166,155,4,62,40,15,11,190,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,252,169,241,61,209,34,27,190,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,208,213,214,61,158,94,41,190,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,89,134,184,61,198,220,53,190,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,116,36,151,61,18,131,64,190,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,66,96,101,61,131,81,73,190,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,189,82,22,61,23,72,80,190,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,38,228,131,60,152,76,85,190,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,237,13,190,187,208,68,88,190,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,104,145,237,188,245,74,89,190,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,177,225,105,189,80,141,87,190,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,49,153,170,189,97,84,82,190,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,246,40,220,189,204,238,73,190,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,221,181,4,190,91,66,62,190,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,80,252,24,190,123,131,47,190,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,12,2,43,190,100,204,29,190,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,108,120,58,190,76,55,9,190,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,167,121,71,190,65,241,227,189,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,23,183,81,190,50,85,176,189,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,190,48,89,190,215,52,111,189,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,45,178,93,190,30,167,232,188,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,100,59,95,190,108,9,121,59,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,246,151,93,190,112,206,8,61,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,227,199,88,190,254,67,122,61,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,96,229,80,190,197,143,177,61,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,166,10,70,190,28,124,225,61,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,34,108,56,190,130,115,6,62,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,213,9,40,190,208,179,25,62,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,97,50,21,190,140,74,42,62,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,0,190,126,29,56,62,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,96,229,208,189,165,44,67,62,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,191,125,157,189,95,41,75,62,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,241,99,76,189,169,19,80,62,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,49,8,172,188,23,183,81,62,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,82,73,157,185,96,229,80,62,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,192,236,158,60,205,59,78,62,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,8,61,27,61,204,238,73,62,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,101,25,98,61,93,254,67,62,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,188,5,146,61,127,106,60,62,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,50,85,176,61,106,77,51,62,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,22,251,203,61,176,114,40,62,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,102,247,228,61,246,40,28,62,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,181,21,251,61,4,86,14,62,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,203,16,7,62,182,243,253,61,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,132,13,15,62,100,93,220,61,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,6,129,21,62,16,233,183,61,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,88,57,180,61,8,61,155,61,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,48,42,169,61,125,208,179,61,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,8,172,156,61,58,35,202,61,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,114,138,142,61,173,105,222,61,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,182,243,125,61,215,163,240,61,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,172,139,91,61,165,78,0,62,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,162,69,54,61,57,69,7,62,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,187,184,13,61,113,27,13,62,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,166,155,196,60,133,235,17,62,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,59,112,78,60,61,155,21,62,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,111,18,3,58,208,68,24,62,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,95,41,75,188,62,232,25,62,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,244,253,212,188,81,107,26,62,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,198,220,53,189,135,22,25,62,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,72,80,124,189,152,76,21,62,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,192,236,158,189,77,243,14,62,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,91,211,188,189,75,89,6,62,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,135,167,215,189,34,253,246,61,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,178,157,239,189,173,250,220,61,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,129,38,2,190,18,20,191,61,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,131,192,10,190,228,20,157,61,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,224,156,17,190,215,52,111,61,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,43,135,22,190,82,73,29,61,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,154,153,25,190,39,160,137,60,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,190,159,26,190,95,41,203,187,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,154,153,25,190,67,28,235,188,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,153,187,22,190,131,192,74,189,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,78,209,17,190,150,178,140,189,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,95,41,11,190,160,137,176,189,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,147,169,2,190,133,124,208,189,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,69,216,240,189,177,191,236,189,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,135,22,217,189,37,117,2,190,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,237,13,190,189,40,126,12,190,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,119,190,159,189,225,122,20,190,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,255,33,125,189,227,54,26,190,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,52,162,52,189,45,178,29,190,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,205,204,204,188,192,236,30,190,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,88,57,52,188,9,27,30,190,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,195,100,42,59,81,218,27,190,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,182,243,125,60,98,16,24,190,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,211,188,227,60,170,241,18,190,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,229,97,33,61,40,126,12,190,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,168,53,77,61,221,181,4,190,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,143,194,117,61,254,101,247,189,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,113,27,141,61,138,31,227,189,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,228,20,157,61,95,152,204,189,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,159,205,170,61,88,57,180,189,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,198,220,181,61,154,153,153,189,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,201,118,190,61,218,172,122,189,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,8,172,28,62,156,51,162,189,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,81,218,155,189,54,205,187,190,128,130,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,36,40,254,189,180,200,182,190,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,159,171,45,190,196,177,174,190,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,190,48,89,190,239,201,163,190,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,73,157,128,190,134,56,150,190,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,33,176,146,190,20,63,134,190,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,120,156,162,190,66,62,104,190,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,169,19,176,190,0,0,64,190,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,127,251,186,190,170,96,20,190,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,83,5,195,190,58,146,203,189,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,213,9,200,190,243,31,82,189,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,94,186,201,190,82,73,157,186,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,213,9,200,190,94,75,72,61,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,83,5,195,190,130,115,198,61,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,127,251,186,190,78,209,17,62,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,169,19,176,190,109,86,61,62,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,120,156,162,190,66,96,101,62,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,33,176,146,190,248,194,132,62,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,73,157,128,190,79,175,148,62,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,190,48,89,190,129,38,162,62,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,159,171,45,190,86,14,173,62,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,36,40,254,189,43,24,181,62,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,81,218,155,189,172,28,186,62,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,244,253,212,188,54,205,187,62,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,93,109,197,60,172,28,186,62,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,152,221,147,61,43,24,181,62,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,179,12,241,61,86,14,173,62,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,175,37,36,62,129,38,162,62,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,241,99,76,62,79,175,148,62,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,215,163,112,62,248,194,132,62,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,94,75,136,62,66,96,101,62,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,198,220,149,62,109,86,61,62,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,156,196,160,62,78,209,17,62,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,140,219,168,62,130,115,198,61,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,13,224,173,62,94,75,72,61,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,178,157,175,62,82,73,157,186,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,13,224,173,62,243,31,82,189,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,140,219,168,62,58,146,203,189,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,156,196,160,62,170,96,20,190,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,198,220,149,62,0,0,64,190,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,94,75,136,62,66,62,104,190,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,215,163,112,62,20,63,134,190,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,241,99,76,62,134,56,150,190,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,175,37,36,62,239,201,163,190,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,179,12,241,61,196,177,174,190,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,152,221,147,61,180,200,182,190,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,93,109,197,60,54,205,187,190,128,130,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,244,253,212,188,219,138,189,190,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,186,218,138,189,209,34,155,62,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,63,198,220,189,34,253,150,62,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,97,50,21,190,251,58,144,62,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,71,114,57,190,2,43,135,62,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,99,238,90,190,217,206,119,62,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,108,9,121,190,82,73,93,62,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,149,212,137,190,18,20,63,62,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,43,24,149,190,246,151,29,62,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,36,40,158,190,33,176,242,61,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,75,234,164,190,157,17,165,61,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,249,15,169,190,48,76,38,61,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,250,126,170,190,82,73,157,186,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,249,15,169,190,197,32,48,189,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,75,234,164,190,231,251,169,189,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,36,40,158,190,217,206,247,189,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,43,24,149,190,192,91,32,190,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,149,212,137,190,19,242,65,190,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,108,9,121,190,82,39,96,190,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,99,238,90,190,72,225,122,190,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,71,114,57,190,85,193,136,190,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,97,50,21,190,133,235,145,190,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,63,198,220,189,172,173,152,190,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,186,218,138,189,118,224,156,190,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,244,253,212,188,118,79,158,190,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,111,129,60,118,224,156,190,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,138,142,100,61,172,173,152,190,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,55,26,192,61,133,235,145,190,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,111,129,4,62,85,193,136,190,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,194,23,38,62,72,225,122,190,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,56,103,68,62,82,39,96,190,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,247,6,95,62,19,242,65,190,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,88,168,117,62,192,91,32,190,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,93,254,131,62,217,206,247,189,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,131,192,138,62,231,251,169,189,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,77,243,142,62,197,32,48,189,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,78,98,144,62,82,73,157,186,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,77,243,142,62,48,76,38,61,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,131,192,138,62,157,17,165,61,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,93,254,131,62,33,176,242,61,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,88,168,117,62,246,151,29,62,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,247,6,95,62,18,20,63,62,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,56,103,68,62,82,73,93,62,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,194,23,38,62,217,206,119,62,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,111,129,4,62,2,43,135,62,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,55,26,192,61,251,58,144,62,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,138,142,100,61,34,253,150,62,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,111,129,60,209,34,155,62,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,244,253,212,188,209,145,156,62,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,43,135,22,62,131,47,204,189,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,114,138,14,62,143,228,242,189,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,166,155,4,62,40,15,11,190,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,252,169,241,61,209,34,27,190,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,208,213,214,61,158,94,41,190,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,89,134,184,61,198,220,53,190,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,116,36,151,61,18,131,64,190,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,66,96,101,61,131,81,73,190,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,189,82,22,61,23,72,80,190,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,38,228,131,60,152,76,85,190,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,237,13,190,187,208,68,88,190,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,104,145,237,188,245,74,89,190,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,177,225,105,189,80,141,87,190,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,49,153,170,189,97,84,82,190,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,246,40,220,189,204,238,73,190,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,221,181,4,190,91,66,62,190,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,80,252,24,190,123,131,47,190,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,12,2,43,190,100,204,29,190,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,108,120,58,190,76,55,9,190,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,167,121,71,190,65,241,227,189,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,23,183,81,190,50,85,176,189,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,190,48,89,190,215,52,111,189,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,45,178,93,190,30,167,232,188,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,100,59,95,190,108,9,121,59,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,246,151,93,190,112,206,8,61,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,227,199,88,190,254,67,122,61,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,96,229,80,190,197,143,177,61,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,166,10,70,190,28,124,225,61,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,34,108,56,190,130,115,6,62,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,213,9,40,190,208,179,25,62,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,97,50,21,190,140,74,42,62,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,0,0,0,190,126,29,56,62,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,96,229,208,189,165,44,67,62,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,191,125,157,189,95,41,75,62,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,241,99,76,189,169,19,80,62,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,49,8,172,188,23,183,81,62,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,82,73,157,185,96,229,80,62,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,192,236,158,60,205,59,78,62,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,8,61,27,61,204,238,73,62,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,101,25,98,61,93,254,67,62,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,188,5,146,61,127,106,60,62,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,50,85,176,61,106,77,51,62,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,22,251,203,61,176,114,40,62,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,102,247,228,61,246,40,28,62,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,181,21,251,61,4,86,14,62,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,203,16,7,62,182,243,253,61,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,132,13,15,62,100,93,220,61,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,6,129,21,62,16,233,183,61,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,88,57,180,61,8,61,155,61,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,48,42,169,61,125,208,179,61,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,8,172,156,61,58,35,202,61,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,114,138,142,61,173,105,222,61,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,182,243,125,61,215,163,240,61,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,172,139,91,61,165,78,0,62,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,162,69,54,61,57,69,7,62,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,187,184,13,61,113,27,13,62,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,166,155,196,60,133,235,17,62,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,59,112,78,60,61,155,21,62,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,111,18,3,58,208,68,24,62,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,95,41,75,188,62,232,25,62,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,244,253,212,188,81,107,26,62,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,198,220,53,189,135,22,25,62,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,72,80,124,189,152,76,21,62,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,192,236,158,189,77,243,14,62,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,91,211,188,189,75,89,6,62,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,135,167,215,189,34,253,246,61,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,178,157,239,189,173,250,220,61,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,129,38,2,190,18,20,191,61,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,131,192,10,190,228,20,157,61,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,224,156,17,190,215,52,111,61,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,43,135,22,190,82,73,29,61,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,154,153,25,190,39,160,137,60,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,190,159,26,190,95,41,203,187,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,154,153,25,190,67,28,235,188,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,153,187,22,190,131,192,74,189,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,78,209,17,190,150,178,140,189,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,95,41,11,190,160,137,176,189,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,147,169,2,190,133,124,208,189,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,69,216,240,189,177,191,236,189,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,135,22,217,189,37,117,2,190,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,237,13,190,189,40,126,12,190,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,119,190,159,189,225,122,20,190,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,255,33,125,189,227,54,26,190,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,52,162,52,189,45,178,29,190,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,205,204,204,188,192,236,30,190,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,88,57,52,188,9,27,30,190,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,195,100,42,59,81,218,27,190,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,182,243,125,60,98,16,24,190,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,211,188,227,60,170,241,18,190,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,229,97,33,61,40,126,12,190,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,168,53,77,61,221,181,4,190,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,143,194,117,61,254,101,247,189,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,113,27,141,61,138,31,227,189,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,228,20,157,61,95,152,204,189,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,159,205,170,61,88,57,180,189,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,198,220,181,61,154,153,153,189,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,201,118,190,61,218,172,122,189,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,8,172,28,62,156,51,162,189,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,81,218,155,189,19,213,187,190,143,194,245,188,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,51,51,179,63,36,40,254,189,180,200,182,190,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,159,171,45,190,196,177,174,190,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,190,48,89,190,239,201,163,190,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,73,157,128,190,134,56,150,190,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,33,176,146,190,20,63,134,190,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,120,156,162,190,66,62,104,190,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,169,19,176,190,0,0,64,190,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,127,251,186,190,170,96,20,190,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,83,5,195,190,58,146,203,189,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,213,9,200,190,243,31,82,189,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,94,186,201,190,82,73,157,186,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,213,9,200,190,94,75,72,61,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,83,5,195,190,130,115,198,61,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,127,251,186,190,78,209,17,62,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,169,19,176,190,109,86,61,62,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,120,156,162,190,66,96,101,62,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,33,176,146,190,248,194,132,62,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,73,157,128,190,79,175,148,62,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,190,48,89,190,129,38,162,62,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,159,171,45,190,86,14,173,62,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,36,40,254,189,43,24,181,62,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,81,218,155,189,172,28,186,62,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,244,253,212,188,54,205,187,62,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,93,109,197,60,172,28,186,62,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,152,221,147,61,43,24,181,62,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,179,12,241,61,86,14,173,62,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,175,37,36,62,129,38,162,62,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,241,99,76,62,79,175,148,62,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+35200);
/* memory initializer */ allocate([215,163,112,62,248,194,132,62,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,94,75,136,62,66,96,101,62,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,198,220,149,62,109,86,61,62,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,156,196,160,62,78,209,17,62,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,140,219,168,62,130,115,198,61,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,13,224,173,62,94,75,72,61,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,178,157,175,62,82,73,157,186,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,13,224,173,62,243,31,82,189,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,140,219,168,62,58,146,203,189,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,156,196,160,62,170,96,20,190,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,198,220,149,62,0,0,64,190,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,94,75,136,62,66,62,104,190,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,215,163,112,62,20,63,134,190,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,241,99,76,62,134,56,150,190,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,175,37,36,62,239,201,163,190,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,179,12,241,61,196,177,174,190,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,152,221,147,61,180,200,182,190,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,93,109,197,60,19,213,187,190,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,244,253,212,188,219,138,189,190,143,194,245,188,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,51,51,179,63,186,218,138,189,209,34,155,62,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,63,198,220,189,34,253,150,62,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,97,50,21,190,251,58,144,62,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,71,114,57,190,2,43,135,62,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,99,238,90,190,217,206,119,62,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,108,9,121,190,82,73,93,62,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,149,212,137,190,18,20,63,62,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,43,24,149,190,246,151,29,62,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,36,40,158,190,33,176,242,61,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,75,234,164,190,157,17,165,61,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,249,15,169,190,48,76,38,61,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,250,126,170,190,82,73,157,186,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,249,15,169,190,197,32,48,189,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,75,234,164,190,231,251,169,189,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,36,40,158,190,217,206,247,189,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,43,24,149,190,192,91,32,190,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,149,212,137,190,19,242,65,190,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,108,9,121,190,82,39,96,190,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,99,238,90,190,72,225,122,190,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,71,114,57,190,85,193,136,190,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,97,50,21,190,133,235,145,190,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,63,198,220,189,172,173,152,190,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,186,218,138,189,118,224,156,190,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,244,253,212,188,118,79,158,190,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,0,111,129,60,118,224,156,190,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,138,142,100,61,172,173,152,190,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,55,26,192,61,133,235,145,190,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,111,129,4,62,85,193,136,190,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,194,23,38,62,72,225,122,190,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,56,103,68,62,82,39,96,190,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,247,6,95,62,19,242,65,190,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,88,168,117,62,192,91,32,190,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,93,254,131,62,217,206,247,189,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,131,192,138,62,231,251,169,189,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,77,243,142,62,197,32,48,189,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,78,98,144,62,82,73,157,186,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,77,243,142,62,48,76,38,61,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,131,192,138,62,157,17,165,61,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,93,254,131,62,33,176,242,61,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,88,168,117,62,246,151,29,62,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,247,6,95,62,18,20,63,62,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,56,103,68,62,82,73,93,62,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,194,23,38,62,217,206,119,62,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,111,129,4,62,2,43,135,62,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,55,26,192,61,251,58,144,62,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,138,142,100,61,34,253,150,62,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,0,111,129,60,209,34,155,62,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,244,253,212,188,209,145,156,62,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,43,135,22,62,131,47,204,189,150,67,11,189,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,205,204,204,190,205,204,204,190,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,128,63,0,0,128,63,205,204,204,62,205,204,204,190,150,67,11,61,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,205,204,204,190,154,153,25,191,150,67,11,61,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,205,204,204,62,154,153,25,191,150,67,11,61,0,0,128,63,0,0,0,0,0,0,128,63,0,0,128,63,0,0,128,63,0,0,0,191,0,0,0,63,150,67,11,61,0,0,128,63,0,0,128,63,0,0,0,0,0,0,128,63,0,0,128,63,0,0,0,63,0,0,0,63,150,67,11,61,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,0,0,0,191,0,0,0,191,150,67,11,61,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,0,63,0,0,0,191,150,67,11,61,0,0,128,63,0,0,0,0,0,0,128,63,0,0,128,63,0,0,128,63,96,0,0,0,95,0,0,0,0,0,0,0,94,0,0,0,1,0,0,0,93,0,0,0,2,0,0,0,92,0,0,0,3,0,0,0,91,0,0,0,4,0,0,0,90,0,0,0,5,0,0,0,89,0,0,0,6,0,0,0,88,0,0,0,7,0,0,0,87,0,0,0,8,0,0,0,86,0,0,0,9,0,0,0,85,0,0,0,10,0,0,0,84,0,0,0,11,0,0,0,83,0,0,0,12,0,0,0,82,0,0,0,13,0,0,0,81,0,0,0,14,0,0,0,80,0,0,0,15,0,0,0,79,0,0,0,16,0,0,0,78,0,0,0,17,0,0,0,77,0,0,0,18,0,0,0,76,0,0,0,19,0,0,0,75,0,0,0,20,0,0,0,74,0,0,0,21,0,0,0,73,0,0,0,22,0,0,0,72,0,0,0,23,0,0,0,71,0,0,0,24,0,0,0,70,0,0,0,25,0,0,0,69,0,0,0,26,0,0,0,68,0,0,0,27,0,0,0,67,0,0,0,28,0,0,0,66,0,0,0,29,0,0,0,65,0,0,0,30,0,0,0,64,0,0,0,31,0,0,0,63,0,0,0,32,0,0,0,62,0,0,0,33,0,0,0,61,0,0,0,34,0,0,0,60,0,0,0,35,0,0,0,59,0,0,0,36,0,0,0,58,0,0,0,37,0,0,0,57,0,0,0,38,0,0,0,56,0,0,0,39,0,0,0,55,0,0,0,40,0,0,0,54,0,0,0,41,0,0,0,53,0,0,0,42,0,0,0,52,0,0,0,43,0,0,0,51,0,0,0,44,0,0,0,50,0,0,0,45,0,0,0,49,0,0,0,46,0,0,0,48,0,0,0,47,0,0,0,241,0,0,0,48,0,0,0,242,0,0,0,49,0,0,0,243,0,0,0,50,0,0,0,244,0,0,0,51,0,0,0,245,0,0,0,52,0,0,0,246,0,0,0,53,0,0,0,247,0,0,0,54,0,0,0,248,0,0,0,55,0,0,0,249,0,0,0,56,0,0,0,250,0,0,0,57,0,0,0,251,0,0,0,58,0,0,0,252,0,0,0,59,0,0,0,253,0,0,0,60,0,0,0,254,0,0,0,61,0,0,0,255,0,0,0,62,0,0,0,0,1,0,0,63,0,0,0,1,1,0,0,64,0,0,0,2,1,0,0,65,0,0,0,3,1,0,0,66,0,0,0,4,1,0,0,67,0,0,0,5,1,0,0,68,0,0,0,6,1,0,0,69,0,0,0,7,1,0,0,70,0,0,0,8,1,0,0,71,0,0,0,9,1,0,0,72,0,0,0,10,1,0,0,73,0,0,0,11,1,0,0,74,0,0,0,12,1,0,0,75,0,0,0,13,1,0,0,76,0,0,0,14,1,0,0,77,0,0,0,15,1,0,0,78,0,0,0,16,1,0,0,79,0,0,0,17,1,0,0,80,0,0,0,18,1,0,0,81,0,0,0,19,1,0,0,82,0,0,0,20,1,0,0,83,0,0,0,21,1,0,0,84,0,0,0,22,1,0,0,85,0,0,0,23,1,0,0,86,0,0,0,24,1,0,0,87,0,0,0,25,1,0,0,88,0,0,0,26,1,0,0,89,0,0,0,27,1,0,0,90,0,0,0,28,1,0,0,91,0,0,0,29,1,0,0,92,0,0,0,30,1,0,0,93,0,0,0,31,1,0,0,94,0,0,0,32,1,0,0,95,0,0,0,33,1,0,0,96,0,0,0,34,1,0,0,0,0,0,0,193,0,0,0,1,0,0,0,194,0,0,0,2,0,0,0,195,0,0,0,3,0,0,0,196,0,0,0,4,0,0,0,197,0,0,0,5,0,0,0,198,0,0,0,6,0,0,0,199,0,0,0,7,0,0,0,200,0,0,0,8,0,0,0,201,0,0,0,9,0,0,0,202,0,0,0,10,0,0,0,203,0,0,0,11,0,0,0,204,0,0,0,12,0,0,0,205,0,0,0,13,0,0,0,206,0,0,0,14,0,0,0,207,0,0,0,15,0,0,0,208,0,0,0,16,0,0,0,209,0,0,0,17,0,0,0,210,0,0,0,18,0,0,0,211,0,0,0,19,0,0,0,212,0,0,0,20,0,0,0,213,0,0,0,21,0,0,0,214,0,0,0,22,0,0,0,215,0,0,0,23,0,0,0,216,0,0,0,24,0,0,0,217,0,0,0,25,0,0,0,218,0,0,0,26,0,0,0,219,0,0,0,27,0,0,0,220,0,0,0,28,0,0,0,221,0,0,0,29,0,0,0,222,0,0,0,30,0,0,0,223,0,0,0,31,0,0,0,224,0,0,0,32,0,0,0,225,0,0,0,33,0,0,0,226,0,0,0,34,0,0,0,227,0,0,0,35,0,0,0,228,0,0,0,36,0,0,0,229,0,0,0,37,0,0,0,230,0,0,0,38,0,0,0,231,0,0,0,39,0,0,0,232,0,0,0,40,0,0,0,233,0,0,0,41,0,0,0,234,0,0,0,42,0,0,0,235,0,0,0,42,0,0,0,236,0,0,0,43,0,0,0,237,0,0,0,44,0,0,0,238,0,0,0,45,0,0,0,239,0,0,0,46,0,0,0,240,0,0,0,47,0,0,0,241,0,0,0,240,0,0,0,242,0,0,0,239,0,0,0,243,0,0,0,238,0,0,0,244,0,0,0,237,0,0,0,245,0,0,0,236,0,0,0,246,0,0,0,235,0,0,0,247,0,0,0,234,0,0,0,248,0,0,0,233,0,0,0,249,0,0,0,232,0,0,0,250,0,0,0,231,0,0,0,251,0,0,0,230,0,0,0,252,0,0,0,229,0,0,0,253,0,0,0,228,0,0,0,254,0,0,0,227,0,0,0,255,0,0,0,226,0,0,0,0,1,0,0,225,0,0,0,1,1,0,0,224,0,0,0,2,1,0,0,223,0,0,0,3,1,0,0,222,0,0,0,4,1,0,0,221,0,0,0,5,1,0,0,220,0,0,0,6,1,0,0,219,0,0,0,7,1,0,0,218,0,0,0,8,1,0,0,217,0,0,0,9,1,0,0,216,0,0,0,10,1,0,0,215,0,0,0,11,1,0,0,214,0,0,0,12,1,0,0,213,0,0,0,13,1,0,0,212,0,0,0,14,1,0,0,211,0,0,0,15,1,0,0,210,0,0,0,16,1,0,0,209,0,0,0,17,1,0,0,208,0,0,0,18,1,0,0,207,0,0,0,19,1,0,0,206,0,0,0,20,1,0,0,205,0,0,0,21,1,0,0,204,0,0,0,22,1,0,0,203,0,0,0,23,1,0,0,202,0,0,0,24,1,0,0,201,0,0,0,25,1,0,0,200,0,0,0,26,1,0,0,199,0,0,0,27,1,0,0,198,0,0,0,28,1,0,0,197,0,0,0,29,1,0,0,196,0,0,0,30,1,0,0,195,0,0,0,31,1,0,0,194,0,0,0,32,1,0,0,193,0,0,0,33,1,0,0,34,1,0,0,255,255,0,0,35,1,0,0,103,1,0,0,36,1,0,0,102,1,0,0,37,1,0,0,101,1,0,0,38,1,0,0,100,1,0,0,39,1,0,0,99,1,0,0,40,1,0,0,98,1,0,0,41,1,0,0,97,1,0,0,42,1,0,0,96,1,0,0,43,1,0,0,95,1,0,0,44,1,0,0,94,1,0,0,45,1,0,0,93,1,0,0,46,1,0,0,92,1,0,0,47,1,0,0,91,1,0,0,48,1,0,0,90,1,0,0,49,1,0,0,89,1,0,0,50,1,0,0,88,1,0,0,51,1,0,0,87,1,0,0,52,1,0,0,86,1,0,0,53,1,0,0,85,1,0,0,54,1,0,0,84,1,0,0,55,1,0,0,83,1,0,0,56,1,0,0,130,1,0,0,57,1,0,0,129,1,0,0,58,1,0,0,128,1,0,0,59,1,0,0,127,1,0,0,60,1,0,0,126,1,0,0,61,1,0,0,125,1,0,0,62,1,0,0,124,1,0,0,63,1,0,0,123,1,0,0,64,1,0,0,122,1,0,0,65,1,0,0,121,1,0,0,66,1,0,0,120,1,0,0,67,1,0,0,119,1,0,0,68,1,0,0,118,1,0,0,69,1,0,0,117,1,0,0,70,1,0,0,116,1,0,0,71,1,0,0,115,1,0,0,72,1,0,0,114,1,0,0,73,1,0,0,113,1,0,0,74,1,0,0,112,1,0,0,75,1,0,0,112,1,0,0,76,1,0,0,111,1,0,0,77,1,0,0,110,1,0,0,78,1,0,0,109,1,0,0,79,1,0,0,108,1,0,0,80,1,0,0,107,1,0,0,81,1,0,0,106,1,0,0,82,1,0,0,105,1,0,0,35,1,0,0,104,1,0,0,103,1,0,0,165,0,0,0,102,1,0,0,164,0,0,0,101,1,0,0,163,0,0,0,100,1,0,0,162,0,0,0,99,1,0,0,161,0,0,0,98,1,0,0,160,0,0,0,97,1,0,0,159,0,0,0,96,1,0,0,158,0,0,0,95,1,0,0,157,0,0,0,94,1,0,0,156,0,0,0,93,1,0,0,155,0,0,0,92,1,0,0,154,0,0,0,91,1,0,0,153,0,0,0,90,1,0,0,152,0,0,0,89,1,0,0,151,0,0,0,88,1,0,0,150,0,0,0,87,1,0,0,149,0,0,0,86,1,0,0,148,0,0,0,85,1,0,0,147,0,0,0,84,1,0,0,146,0,0,0,83,1,0,0,145,0,0,0,130,1,0,0,192,0,0,0,129,1,0,0,191,0,0,0,128,1,0,0,190,0,0,0,127,1,0,0,189,0,0,0,126,1,0,0,188,0,0,0,125,1,0,0,187,0,0,0,124,1,0,0,186,0,0,0,123,1,0,0,185,0,0,0,122,1,0,0,184,0,0,0,121,1,0,0,183,0,0,0,120,1,0,0,182,0,0,0,119,1,0,0,181,0,0,0,118,1,0,0,180,0,0,0,117,1,0,0,179,0,0,0,116,1,0,0,178,0,0,0,115,1,0,0,177,0,0,0,114,1,0,0,176,0,0,0,113,1,0,0,175,0,0,0,112,1,0,0,174,0,0,0,111,1,0,0,173,0,0,0,110,1,0,0,172,0,0,0,109,1,0,0,171,0,0,0,108,1,0,0,170,0,0,0,107,1,0,0,169,0,0,0,106,1,0,0,168,0,0,0,105,1,0,0,167,0,0,0,104,1,0,0,166,0,0,0,165,0,0,0,99,0,0,0,164,0,0,0,100,0,0,0,163,0,0,0,101,0,0,0,162,0,0,0,102,0,0,0,161,0,0,0,103,0,0,0,160,0,0,0,104,0,0,0,159,0,0,0,105,0,0,0,158,0,0,0,106,0,0,0,157,0,0,0,107,0,0,0,156,0,0,0,108,0,0,0,155,0,0,0,109,0,0,0,154,0,0,0,110,0,0,0,153,0,0,0,111,0,0,0,152,0,0,0,112,0,0,0,151,0,0,0,113,0,0,0,150,0,0,0,114,0,0,0,149,0,0,0,115,0,0,0,148,0,0,0,116,0,0,0,147,0,0,0,117,0,0,0,146,0,0,0,118,0,0,0,145,0,0,0,119,0,0,0,192,0,0,0,120,0,0,0,191,0,0,0,121,0,0,0,190,0,0,0,122,0,0,0,189,0,0,0,123,0,0,0,188,0,0,0,124,0,0,0,187,0,0,0,125,0,0,0,186,0,0,0,126,0,0,0,185,0,0,0,127,0,0,0,184,0,0,0,128,0,0,0,183,0,0,0,129,0,0,0,182,0,0,0,130,0,0,0,181,0,0,0,131,0,0,0,180,0,0,0,132,0,0,0,179,0,0,0,133,0,0,0,178,0,0,0,134,0,0,0,177,0,0,0,135,0,0,0,176,0,0,0,136,0,0,0,175,0,0,0,137,0,0,0,174,0,0,0,138,0,0,0,173,0,0,0,139,0,0,0,172,0,0,0,140,0,0,0,171,0,0,0,141,0,0,0,170,0,0,0,142,0,0,0,169,0,0,0,143,0,0,0,168,0,0,0,144,0,0,0,167,0,0,0,97,0,0,0,166,0,0,0,98,0,0,0,99,0,0,0,36,1,0,0,98,0,0,0,35,1,0,0,97,0,0,0,82,1,0,0,144,0,0,0,81,1,0,0,143,0,0,0,80,1,0,0,142,0,0,0,79,1,0,0,141,0,0,0,78,1,0,0,140,0,0,0,77,1,0,0,139,0,0,0,76,1,0,0,138,0,0,0,75,1,0,0,137,0,0,0,74,1,0,0,136,0,0,0,73,1,0,0,135,0,0,0,72,1,0,0,134,0,0,0,71,1,0,0,133,0,0,0,70,1,0,0,132,0,0,0,69,1,0,0,131,0,0,0,68,1,0,0,130,0,0,0,67,1,0,0,129,0,0,0,66,1,0,0,128,0,0,0,65,1,0,0,127,0,0,0,64,1,0,0,126,0,0,0,63,1,0,0,125,0,0,0,62,1,0,0,124,0,0,0,61,1,0,0,123,0,0,0,60,1,0,0,122,0,0,0,59,1,0,0,121,0,0,0,58,1,0,0,120,0,0,0,57,1,0,0,119,0,0,0,56,1,0,0,118,0,0,0,55,1,0,0,117,0,0,0,54,1,0,0,116,0,0,0,53,1,0,0,115,0,0,0,52,1,0,0,114,0,0,0,51,1,0,0,113,0,0,0,50,1,0,0,112,0,0,0,49,1,0,0,111,0,0,0,48,1,0,0,110,0,0,0,47,1,0,0,109,0,0,0,46,1,0,0,108,0,0,0,45,1,0,0,107,0,0,0,44,1,0,0,106,0,0,0,43,1,0,0,105,0,0,0,42,1,0,0,104,0,0,0,41,1,0,0,103,0,0,0,40,1,0,0,102,0,0,0,39,1,0,0,101,0,0,0,38,1,0,0,100,0,0,0,37,1,0,0,99,0,0,0,36,1,0,0,255,255,0,0,132,1,0,0,133,1,0,0,134,1,0,0,135,1,0,0,136,1,0,0,137,1,0,0,138,1,0,0,139,1,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,1,0,0,255,2,0,0,255,2,0,0,255,2,0,0,255,2,0,0,255,1,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,1,0,0,255,3,0,0,255,2,0,0,255,2,0,0,255,1,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,1,0,0,255,2,0,0,255,2,0,0,255,1,0,0,255,0,0,0,255,0,0,0,255,3,0,0,255,2,0,0,255,2,0,0,255,2,0,0,255,1,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,1,0,0,255,10,0,0,255,22,0,0,255,74,0,0,255,117,0,0,255,136,0,0,255,129,0,0,255,107,0,0,255,60,0,0,255,20,0,0,255,9,0,0,255,1,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,70,0,0,255,150,0,0,255,142,0,0,255,147,0,0,255,89,0,0,255,7,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,2,0,0,255,12,0,0,255,68,0,0,255,120,0,0,255,141,0,0,255,42,0,0,255,0,0,0,255,6,0,0,255,149,0,0,255,142,0,0,255,144,0,0,255,123,0,0,255,38,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,14,0,0,255,58,0,0,255,176,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,249,0,0,255,167,0,0,255,64,0,0,255,16,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,130,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,164,0,0,255,13,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,64,0,0,255,208,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,87,0,0,255,0,0,0,255,11,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,227,0,0,255,70,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,35,0,0,255,161,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,165,0,0,255,46,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,126,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,159,0,0,255,13,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,68,0,0,255,224,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,84,0,0,255,0,0,0,255,11,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,220,0,0,255,68,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,60,0,0,255,215,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,237,0,0,255,228,0,0,255,228,0,0,255,238,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,233,0,0,255,79,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+45440);
/* memory initializer */ allocate([0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,126,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,159,0,0,255,13,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,18,0,0,255,173,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,83,0,0,255,0,0,0,255,11,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,220,0,0,255,68,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,63,0,0,255,227,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,200,0,0,255,150,0,0,255,102,0,0,255,82,0,0,255,81,0,0,255,103,0,0,255,146,0,0,255,200,0,0,255,252,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,249,0,0,255,80,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,126,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,159,0,0,255,13,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,67,0,0,255,223,0,0,255,255,0,0,255,255,0,0,255,254,0,0,255,186,0,0,255,151,0,0,255,44,0,0,255,0,0,0,255,5,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,219,0,0,255,64,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,29,0,0,255,202,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,247,0,0,255,136,0,0,255,38,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,34,0,0,255,140,0,0,255,247,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,234,0,0,255,39,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,27,0,0,255,43,0,0,255,43,0,0,255,30,0,0,255,3,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,21,0,0,255,25,0,0,255,25,0,0,255,25,0,0,255,2,0,0,255,0,0,0,255,0,0,0,255,2,0,0,255,33,0,0,255,44,0,0,255,42,0,0,255,23,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,16,0,0,255,54,0,0,255,50,0,0,255,50,0,0,255,51,0,0,255,25,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,20,0,0,255,51,0,0,255,50,0,0,255,50,0,0,255,49,0,0,255,26,0,0,255,0,0,0,255,126,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,159,0,0,255,13,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,20,0,0,255,40,0,0,255,45,0,0,255,36,0,0,255,11,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,84,0,0,255,253,0,0,255,255,0,0,255,255,0,0,255,210,0,0,255,17,0,0,255,0,0,0,255,3,0,0,255,50,0,0,255,58,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,227,0,0,255,104,0,0,255,46,0,0,255,28,0,0,255,2,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,139,0,0,255,250,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,109,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,2,0,0,255,131,0,0,255,226,0,0,255,234,0,0,255,233,0,0,255,235,0,0,255,149,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,19,0,0,255,93,0,0,255,148,0,0,255,180,0,0,255,196,0,0,255,196,0,0,255,183,0,0,255,154,0,0,255,105,0,0,255,32,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,147,0,0,255,179,0,0,255,177,0,0,255,178,0,0,255,13,0,0,255,13,0,0,255,100,0,0,255,155,0,0,255,186,0,0,255,198,0,0,255,195,0,0,255,176,0,0,255,141,0,0,255,77,0,0,255,2,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,28,0,0,255,206,0,0,255,204,0,0,255,203,0,0,255,210,0,0,255,124,0,0,255,1,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,133,0,0,255,206,0,0,255,203,0,0,255,205,0,0,255,184,0,0,255,64,0,0,255,0,0,0,255,126,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,159,0,0,255,13,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,3,0,0,255,77,0,0,255,138,0,0,255,173,0,0,255,193,0,0,255,198,0,0,255,189,0,0,255,165,0,0,255,124,0,0,255,54,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,21,0,0,255,105,0,0,255,188,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,216,0,0,255,144,0,0,255,140,0,0,255,44,0,0,255,203,0,0,255,206,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,248,0,0,255,217,0,0,255,211,0,0,255,116,0,0,255,8,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,49,0,0,255,212,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,145,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,14,0,0,255,64,0,0,255,69,0,0,255,69,0,0,255,69,0,0,255,63,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,71,0,0,255,179,0,0,255,239,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,246,0,0,255,191,0,0,255,99,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,219,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,68,0,0,255,178,0,0,255,241,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,228,0,0,255,160,0,0,255,26,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,12,0,0,255,198,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,198,0,0,255,40,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,7,0,0,255,239,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,206,0,0,255,14,0,0,255,0,0,0,255,126,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,159,0,0,255,13,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,39,0,0,255,165,0,0,255,227,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,210,0,0,255,134,0,0,255,6,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,41,0,0,255,216,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,61,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,149,0,0,255,11,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,126,0,0,255,251,0,0,255,255,0,0,255,255,0,0,255,240,0,0,255,25,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,1,0,0,255,94,0,0,255,227,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,239,0,0,255,129,0,0,255,5,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,212,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,215,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,198,0,0,255,25,0,0,255,0,0,0,255,0,0,0,255,3,0,0,255,85,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,243,0,0,255,90,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,85,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,244,0,0,255,124,0,0,255,0,0,0,255,0,0,0,255,126,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,159,0,0,255,13,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,55,0,0,255,212,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,251,0,0,255,174,0,0,255,8,0,0,255,0,0,0,255,0,0,0,255,39,0,0,255,205,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,61,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,149,0,0,255,11,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,6,0,0,255,170,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,153,0,0,255,3,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,77,0,0,255,234,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,227,0,0,255,179,0,0,255,175,0,0,255,220,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,245,0,0,255,117,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,212,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,244,0,0,255,184,0,0,255,171,0,0,255,212,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,183,0,0,255,1,0,0,255,0,0,0,255,0,0,0,255,29,0,0,255,226,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,141,0,0,255,5,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,190,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,225,0,0,255,25,0,0,255,0,0,0,255,0,0,0,255,126,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,159,0,0,255,13,0,0,255,0,0,0,255,0,0,0,255,30,0,0,255,221,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,234,0,0,255,181,0,0,255,167,0,0,255,185,0,0,255,243,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,163,0,0,255,0,0,0,255,0,0,0,255,42,0,0,255,221,0,0,255,255,0,0,255,254,0,0,255,255,0,0,255,254,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,49,0,0,255,189,0,0,255,192,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,246,0,0,255,207,0,0,255,196,0,0,255,108,0,0,255,8,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,35,0,0,255,194,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,79,0,0,255,2,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,35,0,0,255,197,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,245,0,0,255,111,0,0,255,32,0,0,255,19,0,0,255,19,0,0,255,27,0,0,255,88,0,0,255,239,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,218,0,0,255,65,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,212,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,142,0,0,255,30,0,0,255,19,0,0,255,18,0,0,255,20,0,0,255,76,0,0,255,216,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,87,0,0,255,0,0,0,255,0,0,0,255,10,0,0,255,134,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,196,0,0,255,42,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,31,0,0,255,244,0,0,255,255,0,0,255,255,0,0,255,250,0,0,255,155,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,126,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,159,0,0,255,13,0,0,255,0,0,0,255,0,0,0,255,174,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,238,0,0,255,113,0,0,255,27,0,0,255,19,0,0,255,17,0,0,255,20,0,0,255,28,0,0,255,127,0,0,255,254,0,0,255,255,0,0,255,255,0,0,255,243,0,0,255,81,0,0,255,0,0,0,255,6,0,0,255,20,0,0,255,131,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,180,0,0,255,52,0,0,255,37,0,0,255,6,0,0,255,21,0,0,255,31,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,223,0,0,255,84,0,0,255,15,0,0,255,12,0,0,255,1,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,52,0,0,255,206,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,41,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,4,0,0,255,104,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,247,0,0,255,85,0,0,255,3,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,3,0,0,255,53,0,0,255,242,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,147,0,0,255,6,0,0,255,0,0,0,255,0,0,0,255,212,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,253,0,0,255,129,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,50,0,0,255,216,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,211,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,54,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,251,0,0,255,83,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,123,0,0,255,251,0,0,255,255,0,0,255,255,0,0,255,239,0,0,255,50,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,126,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,159,0,0,255,13,0,0,255,0,0,0,255,54,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,238,0,0,255,107,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,125,0,0,255,253,0,0,255,255,0,0,255,255,0,0,255,202,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,109,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,166,0,0,255,17,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,10,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,220,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,55,0,0,255,209,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,32,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,25,0,0,255,179,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,135,0,0,255,9,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,5,0,0,255,99,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,201,0,0,255,47,0,0,255,0,0,0,255,0,0,0,255,212,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,213,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,119,0,0,255,242,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,29,0,0,255,0,0,0,255,0,0,0,255,24,0,0,255,177,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,137,0,0,255,10,0,0,255,0,0,0,255,0,0,0,255,215,0,0,255,255,0,0,255,255,0,0,255,254,0,0,255,190,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,126,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,159,0,0,255,13,0,0,255,0,0,0,255,143,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,190,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,232,0,0,255,255,0,0,255,255,0,0,255,233,0,0,255,41,0,0,255,0,0,0,255,0,0,0,255,110,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,167,0,0,255,18,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,11,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,220,0,0,255,68,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,46,0,0,255,202,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,56,0,0,255,1,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,42,0,0,255,237,0,0,255,255,0,0,255,255,0,0,255,237,0,0,255,71,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,34,0,0,255,229,0,0,255,255,0,0,255,255,0,0,255,242,0,0,255,81,0,0,255,0,0,0,255,0,0,0,255,212,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,115,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,35,0,0,255,220,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,85,0,0,255,0,0,0,255,0,0,0,255,1,0,0,255,92,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,200,0,0,255,41,0,0,255], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+55680);
/* memory initializer */ allocatei8", ALLOC_NONE, Runtime.GLOBAL_BASE+65920);
/* memory initializer */ allocate([255,0,0,255,225,0,0,255,23,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,83,0,0,255,176,0,0,255,167,0,0,255,173,0,0,255,104,0,0,255,8,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,22,0,0,255,76,0,0,255,155,0,0,255,217,0,0,255,252,0,0,255,255,0,0,255,255,0,0,255,228,0,0,255,166,0,0,255,86,0,0,255,27,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,72,0,0,255,177,0,0,255,167,0,0,255,173,0,0,255,109,0,0,255,12,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,7,0,0,255,175,0,0,255,167,0,0,255,169,0,0,255,144,0,0,255,44,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,14,0,0,255,27,0,0,255,35,0,0,255,39,0,0,255,39,0,0,255,36,0,0,255,29,0,0,255,19,0,0,255,3,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,6,0,0,255,22,0,0,255,33,0,0,255,38,0,0,255,39,0,0,255,34,0,0,255,24,0,0,255,9,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,212,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,120,0,0,255,0,0,0,255,7,0,0,255,26,0,0,255,36,0,0,255,39,0,0,255,38,0,0,255,31,0,0,255,19,0,0,255,2,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,43,0,0,255,197,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,122,0,0,255,6,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,9,0,0,255,19,0,0,255,18,0,0,255,19,0,0,255,11,0,0,255,1,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,16,0,0,255,29,0,0,255,36,0,0,255,39,0,0,255,37,0,0,255,31,0,0,255,18,0,0,255,2,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,8,0,0,255,19,0,0,255,18,0,0,255,19,0,0,255,12,0,0,255,1,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,1,0,0,255,19,0,0,255,18,0,0,255,18,0,0,255,16,0,0,255,5,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,212,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,120,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,104,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,248,0,0,255,40,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,212,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,120,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,28,0,0,255,174,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,155,0,0,255,15,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,212,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,120,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,75,0,0,255,247,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,64,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,212,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,120,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,16,0,0,255,148,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,183,0,0,255,27,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,191,0,0,255,231,0,0,255,229,0,0,255,230,0,0,255,108,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,44,0,0,255,203,0,0,255,233,0,0,255,229,0,0,255,243,0,0,255,91,0,0,255,1,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,1,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+76160);
/* memory initializer */ allocatei8", ALLOC_NONE, Runtime.GLOBAL_BASE+86400);
/* memory initializer */ allocate([0,0,0,255,100,0,0,255,245,0,0,255,255,0,0,255,254,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,71,0,0,255,247,0,0,255,255,0,0,255,249,0,0,255,72,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,5,0,0,255,19,0,0,255,71,0,0,255,124,0,0,255,138,0,0,255,113,0,0,255,58,0,0,255,13,0,0,255,2,0,0,255,0,0,0,255,0,0,0,255,28,0,0,255,127,0,0,255,147,0,0,255,150,0,0,255,54,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,18,0,0,255,108,0,0,255,150,0,0,255,152,0,0,255,76,0,0,255,4,0,0,255,0,0,0,255,0,0,0,255,4,0,0,255,17,0,0,255,68,0,0,255,123,0,0,255,138,0,0,255,115,0,0,255,61,0,0,255,14,0,0,255,3,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,118,0,0,255,147,0,0,255,149,0,0,255,40,0,0,255,65,0,0,255,129,0,0,255,55,0,0,255,0,0,0,255,3,0,0,255,37,0,0,255,105,0,0,255,139,0,0,255,112,0,0,255,42,0,0,255,5,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,7,0,0,255,28,0,0,255,85,0,0,255,131,0,0,255,135,0,0,255,102,0,0,255,43,0,0,255,10,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,26,0,0,255,119,0,0,255,213,0,0,255,255,0,0,255,254,0,0,255,206,0,0,255,88,0,0,255,99,0,0,255,233,0,0,255,255,0,0,255,255,0,0,255,5,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,96,0,0,255,255,0,0,255,255,0,0,255,166,0,0,255,199,0,0,255,255,0,0,255,255,0,0,255,136,0,0,255,3,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,27,0,0,255,179,0,0,255,255,0,0,255,255,0,0,255,107,0,0,255,0,0,0,255,86,0,0,255,235,0,0,255,255,0,0,255,255,0,0,255,2,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,9,0,0,255,178,0,0,255,255,0,0,255,255,0,0,255,59,0,0,255,1,0,0,255,0,0,0,255,83,0,0,255,255,0,0,255,255,0,0,255,253,0,0,255,255,0,0,255,155,0,0,255,0,0,0,255,0,0,0,255,67,0,0,255,220,0,0,255,255,0,0,255,225,0,0,255,17,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,255,0,0,255,249,0,0,255,197,0,0,255,255,0,0,255,217,0,0,255,57,0,0,255,0,0,0,255,0,0,0,255,43,0,0,255,173,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,237,0,0,255,109,0,0,255,11,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,164,0,0,255,255,0,0,255,255,0,0,255,141,0,0,255,217,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,243,0,0,255,104,0,0,255,1,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,3,0,0,255,82,0,0,255,220,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,254,0,0,255,139,0,0,255,174,0,0,255,255,0,0,255,255,0,0,255,140,0,0,255,0,0,0,255,0,0,0,255,88,0,0,255,236,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,143,0,0,255,7,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,100,0,0,255,245,0,0,255,255,0,0,255,254,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,39,0,0,255,195,0,0,255,255,0,0,255,255,0,0,255,82,0,0,255,0,0,0,255,0,0,0,255,11,0,0,255,101,0,0,255,232,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,201,0,0,255,69,0,0,255,2,0,0,255,0,0,0,255,0,0,0,255,201,0,0,255,255,0,0,255,255,0,0,255,170,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,56,0,0,255,245,0,0,255,255,0,0,255,255,0,0,255,90,0,0,255,0,0,0,255,0,0,0,255,9,0,0,255,96,0,0,255,228,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,207,0,0,255,75,0,0,255,3,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,214,0,0,255,255,0,0,255,255,0,0,255,183,0,0,255,255,0,0,255,255,0,0,255,101,0,0,255,0,0,0,255,99,0,0,255,245,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,111,0,0,255,9,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,24,0,0,255,129,0,0,255,248,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,168,0,0,255,43,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,51,0,0,255,217,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,218,0,0,255,244,0,0,255,255,0,0,255,255,0,0,255,5,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,25,0,0,255,172,0,0,255,255,0,0,255,255,0,0,255,99,0,0,255,99,0,0,255,236,0,0,255,255,0,0,255,236,0,0,255,18,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,27,0,0,255,179,0,0,255,255,0,0,255,255,0,0,255,107,0,0,255,0,0,0,255,86,0,0,255,235,0,0,255,255,0,0,255,255,0,0,255,2,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,134,0,0,255,252,0,0,255,255,0,0,255,122,0,0,255,6,0,0,255,0,0,0,255,150,0,0,255,255,0,0,255,248,0,0,255,201,0,0,255,255,0,0,255,187,0,0,255,13,0,0,255,0,0,0,255,114,0,0,255,244,0,0,255,255,0,0,255,150,0,0,255,10,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,189,0,0,255,48,0,0,255,0,0,0,255,61,0,0,255,221,0,0,255,255,0,0,255,255,0,0,255,249,0,0,255,232,0,0,255,238,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,156,0,0,255,10,0,0,255,0,0,0,255,0,0,0,255,159,0,0,255,255,0,0,255,254,0,0,255,255,0,0,255,255,0,0,255,241,0,0,255,231,0,0,255,246,0,0,255,255,0,0,255,255,0,0,255,241,0,0,255,93,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,105,0,0,255,246,0,0,255,255,0,0,255,255,0,0,255,244,0,0,255,232,0,0,255,238,0,0,255,255,0,0,255,255,0,0,255,238,0,0,255,255,0,0,255,255,0,0,255,134,0,0,255,0,0,0,255,60,0,0,255,228,0,0,255,255,0,0,255,255,0,0,255,234,0,0,255,251,0,0,255,255,0,0,255,255,0,0,255,130,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,100,0,0,255,245,0,0,255,255,0,0,255,254,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,44,0,0,255,207,0,0,255,255,0,0,255,255,0,0,255,77,0,0,255,0,0,0,255,6,0,0,255,150,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,237,0,0,255,232,0,0,255,240,0,0,255,255,0,0,255,255,0,0,255,237,0,0,255,90,0,0,255,0,0,0,255,0,0,0,255,108,0,0,255,243,0,0,255,255,0,0,255,247,0,0,255,12,0,0,255,0,0,0,255,0,0,0,255,4,0,0,255,106,0,0,255,255,0,0,255,255,0,0,255,186,0,0,255,35,0,0,255,0,0,0,255,5,0,0,255,141,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,238,0,0,255,232,0,0,255,240,0,0,255,255,0,0,255,255,0,0,255,242,0,0,255,100,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,207,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,225,0,0,255,86,0,0,255,54,0,0,255,252,0,0,255,255,0,0,255,251,0,0,255,239,0,0,255,250,0,0,255,255,0,0,255,255,0,0,255,72,0,0,255,2,0,0,255,0,0,0,255,22,0,0,255,182,0,0,255,255,0,0,255,255,0,0,255,253,0,0,255,235,0,0,255,233,0,0,255,245,0,0,255,255,0,0,255,255,0,0,255,214,0,0,255,48,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,30,0,0,255,226,0,0,255,255,0,0,255,255,0,0,255,242,0,0,255,208,0,0,255,200,0,0,255,214,0,0,255,247,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,5,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,66,0,0,255,247,0,0,255,255,0,0,255,225,0,0,255,58,0,0,255,19,0,0,255,212,0,0,255,255,0,0,255,255,0,0,255,98,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,27,0,0,255,179,0,0,255,255,0,0,255,255,0,0,255,107,0,0,255,0,0,0,255,86,0,0,255,235,0,0,255,255,0,0,255,255,0,0,255,2,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,77,0,0,255,226,0,0,255,255,0,0,255,187,0,0,255,11,0,0,255,0,0,0,255,217,0,0,255,255,0,0,255,216,0,0,255,95,0,0,255,255,0,0,255,212,0,0,255,56,0,0,255,0,0,0,255,157,0,0,255,255,0,0,255,255,0,0,255,79,0,0,255,2,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,239,0,0,255,148,0,0,255,67,0,0,255,8,0,0,255,30,0,0,255,199,0,0,255,255,0,0,255,255,0,0,255,222,0,0,255,139,0,0,255,87,0,0,255,105,0,0,255,183,0,0,255,252,0,0,255,255,0,0,255,248,0,0,255,122,0,0,255,0,0,0,255,0,0,0,255,159,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,208,0,0,255,115,0,0,255,84,0,0,255,134,0,0,255,236,0,0,255,255,0,0,255,255,0,0,255,183,0,0,255,2,0,0,255,0,0,0,255,60,0,0,255,223,0,0,255,255,0,0,255,255,0,0,255,209,0,0,255,125,0,0,255,85,0,0,255,104,0,0,255,177,0,0,255,249,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,134,0,0,255,0,0,0,255,143,0,0,255,255,0,0,255,255,0,0,255,222,0,0,255,92,0,0,255,168,0,0,255,231,0,0,255,231,0,0,255,197,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,100,0,0,255,245,0,0,255,255,0,0,255,254,0,0,255,0,0,0,255,6,0,0,255,13,0,0,255,29,0,0,255,121,0,0,255,253,0,0,255,255,0,0,255,221,0,0,255,55,0,0,255,0,0,0,255,121,0,0,255,254,0,0,255,255,0,0,255,240,0,0,255,167,0,0,255,103,0,0,255,86,0,0,255,111,0,0,255,176,0,0,255,240,0,0,255,255,0,0,255,215,0,0,255,53,0,0,255,0,0,0,255,20,0,0,255,221,0,0,255,255,0,0,255,255,0,0,255,91,0,0,255,0,0,0,255,0,0,0,255,23,0,0,255,184,0,0,255,255,0,0,255,255,0,0,255,124,0,0,255,0,0,0,255,0,0,0,255,112,0,0,255,250,0,0,255,255,0,0,255,242,0,0,255,170,0,0,255,105,0,0,255,86,0,0,255,109,0,0,255,172,0,0,255,238,0,0,255,255,0,0,255,221,0,0,255,62,0,0,255,0,0,0,255,0,0,0,255,207,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,173,0,0,255,87,0,0,255,36,0,0,255,133,0,0,255,255,0,0,255,255,0,0,255,199,0,0,255,100,0,0,255,177,0,0,255,233,0,0,255,241,0,0,255,137,0,0,255,8,0,0,255,0,0,0,255,157,0,0,255,255,0,0,255,254,0,0,255,227,0,0,255,150,0,0,255,95,0,0,255,88,0,0,255,124,0,0,255,195,0,0,255,248,0,0,255,255,0,0,255,184,0,0,255,17,0,0,255,0,0,0,255,0,0,0,255,159,0,0,255,255,0,0,255,255,0,0,255,233,0,0,255,116,0,0,255,12,0,0,255,0,0,0,255,28,0,0,255,144,0,0,255,243,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,5,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,12,0,0,255,137,0,0,255,255,0,0,255,255,0,0,255,162,0,0,255,14,0,0,255,0,0,0,255,161,0,0,255,252,0,0,255,255,0,0,255,211,0,0,255,2,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,27,0,0,255,179,0,0,255,255,0,0,255,255,0,0,255,107,0,0,255,0,0,0,255,86,0,0,255,235,0,0,255,255,0,0,255,255,0,0,255,2,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,19,0,0,255,201,0,0,255,255,0,0,255,247,0,0,255,20,0,0,255,21,0,0,255,255,0,0,255,251,0,0,255,150,0,0,255,43,0,0,255,255,0,0,255,239,0,0,255,94,0,0,255,17,0,0,255,190,0,0,255,255,0,0,255,242,0,0,255,34,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,255,0,0,255,252,0,0,255,165,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,125,0,0,255,252,0,0,255,255,0,0,255,237,0,0,255,74,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,9,0,0,255,162,0,0,255,255,0,0,255,255,0,0,255,204,0,0,255,38,0,0,255,0,0,0,255,159,0,0,255,255,0,0,255,255,0,0,255,247,0,0,255,49,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,130,0,0,255,255,0,0,255,255,0,0,255,205,0,0,255,41,0,0,255,0,0,0,255,148,0,0,255,255,0,0,255,255,0,0,255,225,0,0,255,48,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,4,0,0,255,150,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,134,0,0,255,0,0,0,255,157,0,0,255,255,0,0,255,255,0,0,255,186,0,0,255,16,0,0,255,11,0,0,255,82,0,0,255,87,0,0,255,79,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,100,0,0,255,245,0,0,255,255,0,0,255,254,0,0,255,123,0,0,255,130,0,0,255,144,0,0,255,182,0,0,255,248,0,0,255,255,0,0,255,255,0,0,255,142,0,0,255,10,0,0,255,22,0,0,255,221,0,0,255,255,0,0,255,254,0,0,255,103,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,130,0,0,255,255,0,0,255,255,0,0,255,123,0,0,255,5,0,0,255,0,0,0,255,157,0,0,255,251,0,0,255,255,0,0,255,188,0,0,255,0,0,0,255,0,0,0,255,49,0,0,255,251,0,0,255,255,0,0,255,217,0,0,255,63,0,0,255,0,0,0,255,20,0,0,255,210,0,0,255,255,0,0,255,255,0,0,255,110,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,119,0,0,255,254,0,0,255,255,0,0,255,137,0,0,255,6,0,0,255,0,0,0,255,207,0,0,255,255,0,0,255,255,0,0,255,219,0,0,255,3,0,0,255,0,0,0,255,11,0,0,255,155,0,0,255,255,0,0,255,255,0,0,255,164,0,0,255,0,0,0,255,30,0,0,255,80,0,0,255,90,0,0,255,61,0,0,255,2,0,0,255,45,0,0,255,255,0,0,255,255,0,0,255,232,0,0,255,69,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,12,0,0,255,179,0,0,255,255,0,0,255,255,0,0,255,67,0,0,255,1,0,0,255,20,0,0,255,253,0,0,255,255,0,0,255,246,0,0,255,134,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,167,0,0,255,253,0,0,255,255,0,0,255,255,0,0,255,5,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,38,0,0,255,229,0,0,255,255,0,0,255,255,0,0,255,147,0,0,255,48,0,0,255,44,0,0,255,130,0,0,255,243,0,0,255,255,0,0,255,255,0,0,255,63,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,27,0,0,255,179,0,0,255,255,0,0,255,255,0,0,255,107,0,0,255,0,0,0,255,86,0,0,255,235,0,0,255,255,0,0,255,255,0,0,255,2,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,161,0,0,255,254,0,0,255,255,0,0,255,58,0,0,255,87,0,0,255,255,0,0,255,247,0,0,255,84,0,0,255,26,0,0,255,223,0,0,255,255,0,0,255,131,0,0,255,60,0,0,255,220,0,0,255,255,0,0,255,174,0,0,255,20,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,255,0,0,255,241,0,0,255,106,0,0,255,0,0,0,255,0,0,0,255,16,0,0,255,177,0,0,255,255,0,0,255,255,0,0,255,133,0,0,255,4,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,34,0,0,255,239,0,0,255,255,0,0,255,240,0,0,255,99,0,0,255,0,0,0,255,159,0,0,255,255,0,0,255,255,0,0,255,190,0,0,255,8,0,0,255,0,0,0,255,0,0,0,255,1,0,0,255,59,0,0,255,255,0,0,255,255,0,0,255,214,0,0,255,54,0,0,255,19,0,0,255,187,0,0,255,255,0,0,255,255,0,0,255,115,0,0,255,3,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,32,0,0,255,236,0,0,255,255,0,0,255,255,0,0,255,134,0,0,255,0,0,0,255,121,0,0,255,249,0,0,255,255,0,0,255,249,0,0,255,168,0,0,255,105,0,0,255,43,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,100,0,0,255,245,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,174,0,0,255,38,0,0,255,0,0,0,255,94,0,0,255,238,0,0,255,255,0,0,255,251,0,0,255,120,0,0,255,120,0,0,255,121,0,0,255,121,0,0,255,121,0,0,255,114,0,0,255,153,0,0,255,247,0,0,255,255,0,0,255,180,0,0,255,30,0,0,255,0,0,0,255,51,0,0,255,244,0,0,255,255,0,0,255,248,0,0,255,23,0,0,255,4,0,0,255,111,0,0,255,255,0,0,255,255,0,0,255,163,0,0,255,8,0,0,255,0,0,0,255,86,0,0,255,232,0,0,255,255,0,0,255,253,0,0,255,124,0,0,255,120,0,0,255,121,0,0,255,121,0,0,255,121,0,0,255,116,0,0,255,146,0,0,255,246,0,0,255,255,0,0,255,189,0,0,255,36,0,0,255,0,0,0,255,207,0,0,255,255,0,0,255,255,0,0,255,153,0,0,255,0,0,0,255,0,0,0,255,6,0,0,255,110,0,0,255,255,0,0,255,255,0,0,255,235,0,0,255,165,0,0,255,96,0,0,255,35,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,130,0,0,255,255,0,0,255,255,0,0,255,231,0,0,255,111,0,0,255,121,0,0,255,121,0,0,255,121,0,0,255,122,0,0,255,108,0,0,255,187,0,0,255,251,0,0,255,255,0,0,255,143,0,0,255,3,0,0,255,80,0,0,255,255,0,0,255,255,0,0,255,226,0,0,255,30,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,81,0,0,255,233,0,0,255,255,0,0,255,255,0,0,255,5,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,5,0,0,255,101,0,0,255,255,0,0,255,255,0,0,255,253,0,0,255,223,0,0,255,204,0,0,255,206,0,0,255,216,0,0,255,250,0,0,255,255,0,0,255,255,0,0,255,182,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,27,0,0,255,179,0,0,255,255,0,0,255,255,0,0,255,107,0,0,255,0,0,0,255,86,0,0,255,235,0,0,255,255,0,0,255,255,0,0,255,2,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,100,0,0,255,237,0,0,255,255,0,0,255,123,0,0,255,156,0,0,255,255,0,0,255,244,0,0,255,20,0,0,255,18,0,0,255,167,0,0,255,255,0,0,255,161,0,0,255,125,0,0,255,249,0,0,255,255,0,0,255,106,0,0,255,5,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,255,0,0,255,237,0,0,255,90,0,0,255,0,0,0,255,0,0,0,255,46,0,0,255,200,0,0,255,255,0,0,255,255,0,0,255,62,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,17,0,0,255,181,0,0,255,255,0,0,255,255,0,0,255,129,0,0,255,0,0,0,255,159,0,0,255,255,0,0,255,255,0,0,255,165,0,0,255,11,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,40,0,0,255,255,0,0,255,255,0,0,255,217,0,0,255,58,0,0,255,42,0,0,255,205,0,0,255,255,0,0,255,255,0,0,255,57,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,19,0,0,255,181,0,0,255,255,0,0,255,255,0,0,255,134,0,0,255,0,0,0,255,32,0,0,255,177,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,207,0,0,255,140,0,0,255,26,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,100,0,0,255,245,0,0,255,255,0,0,255,255,0,0,255,249,0,0,255,255,0,0,255,255,0,0,255,243,0,0,255,180,0,0,255,115,0,0,255,30,0,0,255,0,0,0,255,0,0,0,255,129,0,0,255,245,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,211,0,0,255,44,0,0,255,0,0,0,255,0,0,0,255,198,0,0,255,254,0,0,255,254,0,0,255,110,0,0,255,9,0,0,255,197,0,0,255,255,0,0,255,239,0,0,255,100,0,0,255,0,0,0,255,0,0,0,255,118,0,0,255,243,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,216,0,0,255,53,0,0,255,0,0,0,255,207,0,0,255,255,0,0,255,255,0,0,255,133,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,36,0,0,255,193,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,249,0,0,255,203,0,0,255,126,0,0,255,12,0,0,255,0,0,0,255,173,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,184,0,0,255,4,0,0,255,117,0,0,255,255,0,0,255,255,0,0,255,218,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,37,0,0,255,220,0,0,255,255,0,0,255,255,0,0,255,5,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,17,0,0,255,203,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,248,0,0,255,36,0,0,255,0,0,0,255,0,0,0,255,27,0,0,255,179,0,0,255,255,0,0,255,255,0,0,255,107,0,0,255,0,0,0,255,86,0,0,255,235,0,0,255,255,0,0,255,255,0,0,255,2,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,34,0,0,255,220,0,0,255,255,0,0,255,192,0,0,255,225,0,0,255,255,0,0,255,209,0,0,255,0,0,0,255,6,0,0,255,112,0,0,255,255,0,0,255,210,0,0,255,204,0,0,255,255,0,0,255,252,0,0,255,57,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,255,0,0,255,237,0,0,255,89,0,0,255,0,0,0,255,0,0,0,255,48,0,0,255,202,0,0,255,255,0,0,255,255,0,0,255,56,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,17,0,0,255,171,0,0,255,255,0,0,255,255,0,0,255,134,0,0,255,0,0,0,255,159,0,0,255,255,0,0,255,255,0,0,255,156,0,0,255,10,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,30,0,0,255,255,0,0,255,255,0,0,255,218,0,0,255,59,0,0,255,43,0,0,255,205,0,0,255,255,0,0,255,255,0,0,255,48,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,19,0,0,255,171,0,0,255,255,0,0,255,255,0,0,255,134,0,0,255,0,0,0,255,0,0,0,255,35,0,0,255,122,0,0,255,213,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,166,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,100,0,0,255,245,0,0,255,255,0,0,255,254,0,0,255,127,0,0,255,255,0,0,255,255,0,0,255,238,0,0,255,106,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,128,0,0,255,245,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,225,0,0,255,46,0,0,255,0,0,0,255,0,0,0,255,96,0,0,255,254,0,0,255,255,0,0,255,203,0,0,255,33,0,0,255,255,0,0,255,255,0,0,255,198,0,0,255,27,0,0,255,0,0,0,255,0,0,0,255,117,0,0,255,242,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,230,0,0,255,56,0,0,255,0,0,0,255,207,0,0,255,255,0,0,255,255,0,0,255,131,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,1,0,0,255,39,0,0,255,134,0,0,255,223,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,120,0,0,255,0,0,0,255,171,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,196,0,0,255,4,0,0,255,115,0,0,255,255,0,0,255,255,0,0,255,219,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,40,0,0,255,221,0,0,255,255,0,0,255,255,0,0,255,5,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,2,0,0,255,67,0,0,255,255,0,0,255,255,0,0,255,241,0,0,255,190,0,0,255,169,0,0,255,171,0,0,255,171,0,0,255,171,0,0,255,167,0,0,255,239,0,0,255,255,0,0,255,255,0,0,255,145,0,0,255,0,0,0,255,0,0,0,255,27,0,0,255,179,0,0,255,255,0,0,255,255,0,0,255,107,0,0,255,0,0,0,255,86,0,0,255,235,0,0,255,255,0,0,255,255,0,0,255,2,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,188,0,0,255,255,0,0,255,246,0,0,255,254,0,0,255,254,0,0,255,145,0,0,255,0,0,0,255,0,0,0,255,68,0,0,255,255,0,0,255,251,0,0,255,250,0,0,255,255,0,0,255,196,0,0,255,32,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,255,0,0,255,237,0,0,255,89,0,0,255,0,0,0,255,0,0,0,255,29,0,0,255,186,0,0,255,255,0,0,255,255,0,0,255,104,0,0,255,4,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,20,0,0,255,223,0,0,255,255,0,0,255,250,0,0,255,115,0,0,255,0,0,0,255,159,0,0,255,255,0,0,255,255,0,0,255,154,0,0,255,10,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,28,0,0,255,255,0,0,255,255,0,0,255,218,0,0,255,61,0,0,255,25,0,0,255,192,0,0,255,255,0,0,255,255,0,0,255,85,0,0,255,3,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,22,0,0,255,213,0,0,255,255,0,0,255,255,0,0,255,135,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,38,0,0,255,87,0,0,255,204,0,0,255,255,0,0,255,255,0,0,255,237,0,0,255,54,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,100,0,0,255,245,0,0,255,255,0,0,255,254,0,0,255,12,0,0,255,200,0,0,255,255,0,0,255,255,0,0,255,187,0,0,255,32,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,95,0,0,255,237,0,0,255,255,0,0,255,255,0,0,255,74,0,0,255,68,0,0,255,68,0,0,255,68,0,0,255,68,0,0,255,67,0,0,255,61,0,0,255,58,0,0,255,60,0,0,255,50,0,0,255,11,0,0,255,0,0,0,255,0,0,0,255,8,0,0,255,235,0,0,255,255,0,0,255,248,0,0,255,165,0,0,255,255,0,0,255,251,0,0,255,140,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,87,0,0,255,232,0,0,255,255,0,0,255,255,0,0,255,80,0,0,255,68,0,0,255,68,0,0,255,68,0,0,255,68,0,0,255,67,0,0,255,61,0,0,255,58,0,0,255,60,0,0,255,51,0,0,255,13,0,0,255,0,0,0,255,207,0,0,255,255,0,0,255,255,0,0,255,131,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,41,0,0,255,100,0,0,255,213,0,0,255,255,0,0,255,255,0,0,255,230,0,0,255,10,0,0,255,132,0,0,255,255,0,0,255,255,0,0,255,229,0,0,255,60,0,0,255,68,0,0,255,68,0,0,255,68,0,0,255,69,0,0,255,66,0,0,255,60,0,0,255,58,0,0,255,60,0,0,255,44,0,0,255,0,0,0,255,78,0,0,255,255,0,0,255,255,0,0,255,230,0,0,255,50,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,91,0,0,255,235,0,0,255,255,0,0,255,255,0,0,255,5,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,8,0,0,255,167,0,0,255,255,0,0,255,255,0,0,255,187,0,0,255,27,0,0,255,20,0,0,255,22,0,0,255,22,0,0,255,22,0,0,255,13,0,0,255,143,0,0,255,252,0,0,255,255,0,0,255,233,0,0,255,11,0,0,255,0,0,0,255,27,0,0,255,179,0,0,255,255,0,0,255,255,0,0,255,107,0,0,255,0,0,0,255,86,0,0,255,235,0,0,255,255,0,0,255,255,0,0,255,2,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,124,0,0,255,245,0,0,255,255,0,0,255,255,0,0,255,253,0,0,255,78,0,0,255,0,0,0,255,0,0,0,255,44,0,0,255,219,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,135,0,0,255,11,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,255,0,0,255,237,0,0,255,89,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,147,0,0,255,255,0,0,255,255,0,0,255,218,0,0,255,21,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,107,0,0,255,255,0,0,255,255,0,0,255,219,0,0,255,66,0,0,255,0,0,0,255,159,0,0,255,255,0,0,255,255,0,0,255,154,0,0,255,10,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,28,0,0,255,255,0,0,255,255,0,0,255,218,0,0,255,64,0,0,255,0,0,0,255,161,0,0,255,255,0,0,255,255,0,0,255,193,0,0,255,7,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,83,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,131,0,0,255,16,0,0,255,114,0,0,255,140,0,0,255,146,0,0,255,21,0,0,255,0,0,0,255,34,0,0,255,255,0,0,255,255,0,0,255,240,0,0,255,88,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,100,0,0,255,245,0,0,255,255,0,0,255,254,0,0,255,0,0,0,255,55,0,0,255,250,0,0,255,255,0,0,255,255,0,0,255,150,0,0,255,5,0,0,255,0,0,0,255,0,0,0,255,26,0,0,255,225,0,0,255,255,0,0,255,255,0,0,255,112,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,61,0,0,255,95,0,0,255,98,0,0,255,51,0,0,255,4,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,145,0,0,255,255,0,0,255,255,0,0,255,249,0,0,255,255,0,0,255,222,0,0,255,62,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,22,0,0,255,214,0,0,255,255,0,0,255,255,0,0,255,120,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,57,0,0,255,96,0,0,255,97,0,0,255,56,0,0,255,5,0,0,255,0,0,0,255,207,0,0,255,255,0,0,255,255,0,0,255,131,0,0,255,0,0,0,255,0,0,0,255,18,0,0,255,143,0,0,255,140,0,0,255,119,0,0,255,33,0,0,255,0,0,0,255,97,0,0,255,232,0,0,255,255,0,0,255,255,0,0,255,18,0,0,255,48,0,0,255,255,0,0,255,255,0,0,255,239,0,0,255,78,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,12,0,0,255,76,0,0,255,93,0,0,255,99,0,0,255,32,0,0,255,0,0,0,255,15,0,0,255,254,0,0,255,255,0,0,255,251,0,0,255,163,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,6,0,0,255,182,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,5,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,32,0,0,255,255,0,0,255,255,0,0,255,243,0,0,255,118,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,34,0,0,255,251,0,0,255,255,0,0,255,250,0,0,255,108,0,0,255,0,0,0,255,27,0,0,255,179,0,0,255,255,0,0,255,255,0,0,255,107,0,0,255,0,0,0,255,86,0,0,255,235,0,0,255,255,0,0,255,255,0,0,255,2,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,54,0,0,255,233,0,0,255,255,0,0,255,255,0,0,255,252,0,0,255,12,0,0,255,0,0,0,255,0,0,0,255,25,0,0,255,170,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,80,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,255,0,0,255,237,0,0,255,89,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,65,0,0,255,221,0,0,255,255,0,0,255,255,0,0,255,200,0,0,255,59,0,0,255,0,0,0,255,14,0,0,255,123,0,0,255,247,0,0,255,255,0,0,255,255,0,0,255,160,0,0,255,0,0,0,255,0,0,0,255,159,0,0,255,255,0,0,255,255,0,0,255,154,0,0,255,10,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,28,0,0,255,255,0,0,255,255,0,0,255,218,0,0,255,66,0,0,255,0,0,0,255,90,0,0,255,233,0,0,255,255,0,0,255,255,0,0,255,174,0,0,255,41,0,0,255,0,0,0,255,11,0,0,255,106,0,0,255,238,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,130,0,0,255,16,0,0,255,191,0,0,255,254,0,0,255,255,0,0,255,156,0,0,255,2,0,0,255,73,0,0,255,255,0,0,255,255,0,0,255,237,0,0,255,61,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+96640);
/* memory initializer */ allocate([0,0,0,255,100,0,0,255,245,0,0,255,255,0,0,255,254,0,0,255,0,0,0,255,5,0,0,255,110,0,0,255,255,0,0,255,255,0,0,255,245,0,0,255,103,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,142,0,0,255,251,0,0,255,255,0,0,255,244,0,0,255,133,0,0,255,24,0,0,255,0,0,0,255,22,0,0,255,136,0,0,255,241,0,0,255,244,0,0,255,243,0,0,255,85,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,34,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,183,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,132,0,0,255,248,0,0,255,255,0,0,255,247,0,0,255,139,0,0,255,27,0,0,255,0,0,0,255,19,0,0,255,128,0,0,255,240,0,0,255,244,0,0,255,244,0,0,255,98,0,0,255,0,0,0,255,0,0,0,255,207,0,0,255,255,0,0,255,255,0,0,255,131,0,0,255,0,0,0,255,0,0,0,255,26,0,0,255,224,0,0,255,252,0,0,255,248,0,0,255,139,0,0,255,0,0,0,255,117,0,0,255,244,0,0,255,255,0,0,255,239,0,0,255,17,0,0,255,0,0,0,255,180,0,0,255,255,0,0,255,255,0,0,255,226,0,0,255,105,0,0,255,11,0,0,255,0,0,0,255,42,0,0,255,174,0,0,255,242,0,0,255,244,0,0,255,236,0,0,255,31,0,0,255,0,0,0,255,0,0,0,255,149,0,0,255,255,0,0,255,255,0,0,255,245,0,0,255,156,0,0,255,27,0,0,255,0,0,0,255,40,0,0,255,173,0,0,255,251,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,5,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,2,0,0,255,131,0,0,255,255,0,0,255,255,0,0,255,210,0,0,255,37,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,188,0,0,255,255,0,0,255,255,0,0,255,210,0,0,255,0,0,0,255,27,0,0,255,179,0,0,255,255,0,0,255,255,0,0,255,107,0,0,255,0,0,0,255,86,0,0,255,235,0,0,255,255,0,0,255,255,0,0,255,2,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,215,0,0,255,255,0,0,255,255,0,0,255,205,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,5,0,0,255,121,0,0,255,255,0,0,255,255,0,0,255,215,0,0,255,49,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,255,0,0,255,237,0,0,255,89,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,119,0,0,255,246,0,0,255,255,0,0,255,254,0,0,255,244,0,0,255,240,0,0,255,241,0,0,255,249,0,0,255,255,0,0,255,255,0,0,255,204,0,0,255,30,0,0,255,0,0,0,255,0,0,0,255,159,0,0,255,255,0,0,255,255,0,0,255,154,0,0,255,10,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,28,0,0,255,255,0,0,255,255,0,0,255,218,0,0,255,66,0,0,255,0,0,0,255,0,0,0,255,160,0,0,255,255,0,0,255,255,0,0,255,252,0,0,255,243,0,0,255,240,0,0,255,241,0,0,255,248,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,131,0,0,255,0,0,0,255,149,0,0,255,255,0,0,255,255,0,0,255,251,0,0,255,240,0,0,255,245,0,0,255,255,0,0,255,255,0,0,255,205,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,100,0,0,255,245,0,0,255,255,0,0,255,254,0,0,255,0,0,0,255,0,0,0,255,23,0,0,255,177,0,0,255,255,0,0,255,255,0,0,255,219,0,0,255,61,0,0,255,0,0,0,255,0,0,0,255,5,0,0,255,196,0,0,255,255,0,0,255,255,0,0,255,250,0,0,255,242,0,0,255,240,0,0,255,242,0,0,255,250,0,0,255,255,0,0,255,255,0,0,255,154,0,0,255,16,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,189,0,0,255,255,0,0,255,255,0,0,255,238,0,0,255,102,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,3,0,0,255,186,0,0,255,255,0,0,255,255,0,0,255,250,0,0,255,242,0,0,255,240,0,0,255,242,0,0,255,249,0,0,255,255,0,0,255,255,0,0,255,166,0,0,255,19,0,0,255,0,0,0,255,0,0,0,255,207,0,0,255,255,0,0,255,255,0,0,255,131,0,0,255,0,0,0,255,0,0,0,255,12,0,0,255,146,0,0,255,255,0,0,255,255,0,0,255,249,0,0,255,240,0,0,255,248,0,0,255,254,0,0,255,255,0,0,255,145,0,0,255,9,0,0,255,0,0,0,255,24,0,0,255,229,0,0,255,255,0,0,255,254,0,0,255,248,0,0,255,241,0,0,255,240,0,0,255,243,0,0,255,252,0,0,255,255,0,0,255,255,0,0,255,102,0,0,255,5,0,0,255,0,0,0,255,0,0,0,255,19,0,0,255,219,0,0,255,255,0,0,255,255,0,0,255,251,0,0,255,242,0,0,255,240,0,0,255,243,0,0,255,252,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,5,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,8,0,0,255,239,0,0,255,255,0,0,255,255,0,0,255,159,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,84,0,0,255,255,0,0,255,255,0,0,255,242,0,0,255,73,0,0,255,20,0,0,255,180,0,0,255,255,0,0,255,255,0,0,255,107,0,0,255,0,0,0,255,87,0,0,255,236,0,0,255,255,0,0,255,255,0,0,255,2,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,151,0,0,255,252,0,0,255,255,0,0,255,138,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,81,0,0,255,255,0,0,255,255,0,0,255,161,0,0,255,21,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,255,0,0,255,238,0,0,255,89,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,108,0,0,255,240,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,192,0,0,255,29,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,160,0,0,255,255,0,0,255,255,0,0,255,155,0,0,255,10,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,29,0,0,255,255,0,0,255,255,0,0,255,219,0,0,255,66,0,0,255,0,0,0,255,0,0,0,255,8,0,0,255,164,0,0,255,252,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,253,0,0,255,203,0,0,255,177,0,0,255,255,0,0,255,255,0,0,255,125,0,0,255,0,0,0,255,24,0,0,255,193,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,231,0,0,255,43,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,101,0,0,255,246,0,0,255,255,0,0,255,255,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,53,0,0,255,236,0,0,255,255,0,0,255,255,0,0,255,177,0,0,255,30,0,0,255,0,0,0,255,0,0,0,255,9,0,0,255,171,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,154,0,0,255,18,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,82,0,0,255,255,0,0,255,255,0,0,255,216,0,0,255,14,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,6,0,0,255,163,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,164,0,0,255,21,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,209,0,0,255,255,0,0,255,255,0,0,255,132,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,37,0,0,255,207,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,203,0,0,255,27,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,29,0,0,255,200,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,251,0,0,255,105,0,0,255,8,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,32,0,0,255,206,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,141,0,0,255,227,0,0,255,255,0,0,255,255,0,0,255,5,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,31,0,0,255,127,0,0,255,123,0,0,255,113,0,0,255,44,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,2,0,0,255,122,0,0,255,123,0,0,255,120,0,0,255,71,0,0,255,7,0,0,255,86,0,0,255,127,0,0,255,130,0,0,255,51,0,0,255,0,0,0,255,41,0,0,255,113,0,0,255,123,0,0,255,127,0,0,255,1,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,45,0,0,255,118,0,0,255,124,0,0,255,41,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,29,0,0,255,109,0,0,255,131,0,0,255,58,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,126,0,0,255,123,0,0,255,114,0,0,255,42,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,30,0,0,255,135,0,0,255,210,0,0,255,241,0,0,255,229,0,0,255,179,0,0,255,84,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,76,0,0,255,127,0,0,255,127,0,0,255,74,0,0,255,5,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,14,0,0,255,131,0,0,255,124,0,0,255,105,0,0,255,31,0,0,255,0,0,0,255,1,0,0,255,1,0,0,255,0,0,0,255,74,0,0,255,173,0,0,255,228,0,0,255,243,0,0,255,210,0,0,255,112,0,0,255,26,0,0,255,209,0,0,255,255,0,0,255,245,0,0,255,104,0,0,255,0,0,0,255,0,0,0,255,8,0,0,255,114,0,0,255,207,0,0,255,242,0,0,255,226,0,0,255,148,0,0,255,22,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,48,0,0,255,117,0,0,255,123,0,0,255,122,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,5,0,0,255,64,0,0,255,129,0,0,255,123,0,0,255,128,0,0,255,43,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,61,0,0,255,161,0,0,255,223,0,0,255,242,0,0,255,224,0,0,255,171,0,0,255,68,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,3,0,0,255,123,0,0,255,121,0,0,255,82,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,57,0,0,255,157,0,0,255,221,0,0,255,242,0,0,255,226,0,0,255,174,0,0,255,74,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,100,0,0,255,124,0,0,255,125,0,0,255,63,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,19,0,0,255,126,0,0,255,214,0,0,255,243,0,0,255,220,0,0,255,129,0,0,255,16,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,3,0,0,255,83,0,0,255,179,0,0,255,231,0,0,255,241,0,0,255,216,0,0,255,151,0,0,255,39,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,7,0,0,255,100,0,0,255,194,0,0,255,238,0,0,255,237,0,0,255,187,0,0,255,65,0,0,255,13,0,0,255,98,0,0,255,118,0,0,255,121,0,0,255,2,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,3,0,0,255,60,0,0,255,95,0,0,255,94,0,0,255,81,0,0,255,10,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,2,0,0,255,81,0,0,255,255,0,0,255,255,0,0,255,219,0,0,255,68,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,116,0,0,255,254,0,0,255,255,0,0,255,255,0,0,255,194,0,0,255,83,0,0,255,41,0,0,255,48,0,0,255,117,0,0,255,246,0,0,255,255,0,0,255,255,0,0,255,167,0,0,255,9,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,4,0,0,255,144,0,0,255,245,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,201,0,0,255,59,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,5,0,0,255,121,0,0,255,205,0,0,255,237,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,248,0,0,255,224,0,0,255,173,0,0,255,55,0,0,255,0,0,0,255,1,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,36,0,0,255,101,0,0,255,141,0,0,255,157,0,0,255,149,0,0,255,127,0,0,255,71,0,0,255,4,0,0,255,0,0,0,255,1,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+106880);
/* memory initializer */ allocatei8", ALLOC_NONE, Runtime.GLOBAL_BASE+117120);
/* memory initializer */ allocate([0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+127360);
/* memory initializer */ allocatei8", ALLOC_NONE, Runtime.GLOBAL_BASE+137600);
/* memory initializer */ allocatei8", ALLOC_NONE, Runtime.GLOBAL_BASE+147840);
/* memory initializer */ allocatei8", ALLOC_NONE, Runtime.GLOBAL_BASE+158080);
/* memory initializer */ allocatei8", ALLOC_NONE, Runtime.GLOBAL_BASE+168320);
/* memory initializer */ allocate([255,0,0,255,255,0,0,255,255,0,0,255,253,0,0,255,54,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,71,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,66,0,0,255,0,0,0,255,0,0,0,255,105,0,0,255,242,0,0,255,214,0,0,255,164,0,0,255,89,0,0,255,2,0,0,255,0,0,0,255,238,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,253,0,0,255,54,0,0,255,0,0,0,255,238,0,0,255,148,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,71,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,66,0,0,255,0,0,0,255,0,0,0,255,238,0,0,255,148,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,238,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,253,0,0,255,54,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,78,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,155,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,11,0,0,255,63,0,0,255,113,0,0,255,210,0,0,255,163,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,144,0,0,255,93,0,0,255,218,0,0,255,238,0,0,255,171,0,0,255,26,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,76,0,0,255,239,0,0,255,132,0,0,255,44,0,0,255,8,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,246,0,0,255,145,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,11,0,0,255,63,0,0,255,113,0,0,255,210,0,0,255,163,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,243,0,0,255,140,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,246,0,0,255,145,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,11,0,0,255,63,0,0,255,113,0,0,255,210,0,0,255,163,0,0,255,0,0,0,255,246,0,0,255,145,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,246,0,0,255,140,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,2,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,246,0,0,255,140,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,246,0,0,255,145,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,155,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,240,0,0,255,12,0,0,255,0,0,0,255,0,0,0,255,20,0,0,255,240,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,239,0,0,255,7,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,228,0,0,255,135,0,0,255,0,0,0,255,0,0,0,255,10,0,0,255,255,0,0,255,67,0,0,255,171,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,185,0,0,255,203,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,98,0,0,255,40,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,240,0,0,255,12,0,0,255,0,0,0,255,0,0,0,255,20,0,0,255,240,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,169,0,0,255,202,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,33,0,0,255,219,0,0,255,0,0,0,255,185,0,0,255,203,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,98,0,0,255,40,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,240,0,0,255,12,0,0,255,0,0,0,255,0,0,0,255,20,0,0,255,240,0,0,255,0,0,0,255,185,0,0,255,203,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,98,0,0,255,40,0,0,255,0,0,0,255,191,0,0,255,190,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,13,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,252,0,0,255,69,0,0,255,0,0,0,255,0,0,0,255,48,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,191,0,0,255,190,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,13,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,185,0,0,255,203,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,98,0,0,255,40,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,31,0,0,255,255,0,0,255,178,0,0,255,7,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,17,0,0,255,255,0,0,255,83,0,0,255,0,0,0,255,0,0,0,255,16,0,0,255,255,0,0,255,81,0,0,255,0,0,0,255,0,0,0,255,18,0,0,255,255,0,0,255,84,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,134,0,0,255,18,0,0,255,11,0,0,255,115,0,0,255,178,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,229,0,0,255,98,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,221,0,0,255,169,0,0,255,26,0,0,255,12,0,0,255,132,0,0,255,224,0,0,255,104,0,0,255,244,0,0,255,0,0,0,255,18,0,0,255,255,0,0,255,81,0,0,255,0,0,0,255,0,0,0,255,16,0,0,255,255,0,0,255,83,0,0,255,0,0,0,255,0,0,0,255,16,0,0,255,255,0,0,255,81,0,0,255,0,0,0,255,0,0,0,255,44,0,0,255,240,0,0,255,155,0,0,255,33,0,0,255,9,0,0,255,91,0,0,255,164,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,18,0,0,255,255,0,0,255,84,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,134,0,0,255,18,0,0,255,11,0,0,255,115,0,0,255,178,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,17,0,0,255,255,0,0,255,85,0,0,255,0,0,0,255,0,0,0,255,18,0,0,255,255,0,0,255,84,0,0,255,0,0,0,255,0,0,0,255,29,0,0,255,232,0,0,255,150,0,0,255,25,0,0,255,24,0,0,255,185,0,0,255,116,0,0,255,0,0,0,255,44,0,0,255,240,0,0,255,155,0,0,255,33,0,0,255,9,0,0,255,91,0,0,255,164,0,0,255,0,0,0,255,0,0,0,255,18,0,0,255,255,0,0,255,81,0,0,255,0,0,0,255,0,0,0,255,16,0,0,255,255,0,0,255,81,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,134,0,0,255,18,0,0,255,11,0,0,255,115,0,0,255,178,0,0,255,0,0,0,255,44,0,0,255,240,0,0,255,155,0,0,255,33,0,0,255,9,0,0,255,91,0,0,255,164,0,0,255,0,0,0,255,0,0,0,255,56,0,0,255,247,0,0,255,124,0,0,255,17,0,0,255,29,0,0,255,162,0,0,255,255,0,0,255,91,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,209,0,0,255,149,0,0,255,12,0,0,255,38,0,0,255,168,0,0,255,246,0,0,255,101,0,0,255,1,0,0,255,0,0,0,255,18,0,0,255,255,0,0,255,81,0,0,255,0,0,0,255,0,0,0,255,16,0,0,255,255,0,0,255,81,0,0,255,0,0,0,255,0,0,0,255,56,0,0,255,247,0,0,255,124,0,0,255,17,0,0,255,29,0,0,255,162,0,0,255,255,0,0,255,91,0,0,255,0,0,0,255,0,0,0,255,44,0,0,255,240,0,0,255,155,0,0,255,33,0,0,255,9,0,0,255,91,0,0,255,164,0,0,255,0,0,0,255,0,0,0,255,18,0,0,255,255,0,0,255,84,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,244,0,0,255,234,0,0,255,231,0,0,255,232,0,0,255,237,0,0,255,150,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,247,0,0,255,234,0,0,255,243,0,0,255,66,0,0,255,0,0,0,255,247,0,0,255,234,0,0,255,243,0,0,255,66,0,0,255,0,0,0,255,247,0,0,255,234,0,0,255,244,0,0,255,66,0,0,255,0,0,0,255,184,0,0,255,60,0,0,255,223,0,0,255,237,0,0,255,174,0,0,255,25,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,83,0,0,255,251,0,0,255,252,0,0,255,250,0,0,255,245,0,0,255,216,0,0,255,147,0,0,255,22,0,0,255,0,0,0,255,43,0,0,255,181,0,0,255,234,0,0,255,237,0,0,255,90,0,0,255,101,0,0,255,241,0,0,255,124,0,0,255,0,0,0,255,247,0,0,255,234,0,0,255,244,0,0,255,34,0,0,255,0,0,0,255,247,0,0,255,234,0,0,255,243,0,0,255,66,0,0,255,0,0,0,255,247,0,0,255,234,0,0,255,243,0,0,255,66,0,0,255,0,0,0,255,0,0,0,255,38,0,0,255,171,0,0,255,240,0,0,255,241,0,0,255,160,0,0,255,15,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,247,0,0,255,234,0,0,255,244,0,0,255,66,0,0,255,0,0,0,255,184,0,0,255,60,0,0,255,223,0,0,255,237,0,0,255,174,0,0,255,25,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,247,0,0,255,234,0,0,255,243,0,0,255,66,0,0,255,0,0,0,255,247,0,0,255,234,0,0,255,244,0,0,255,66,0,0,255,0,0,0,255,0,0,0,255,35,0,0,255,177,0,0,255,244,0,0,255,233,0,0,255,132,0,0,255,1,0,0,255,0,0,0,255,0,0,0,255,38,0,0,255,171,0,0,255,240,0,0,255,241,0,0,255,160,0,0,255,15,0,0,255,0,0,0,255,0,0,0,255,247,0,0,255,234,0,0,255,244,0,0,255,34,0,0,255,0,0,0,255,247,0,0,255,234,0,0,255,243,0,0,255,66,0,0,255,0,0,0,255,184,0,0,255,60,0,0,255,223,0,0,255,237,0,0,255,174,0,0,255,25,0,0,255,0,0,0,255,0,0,0,255,38,0,0,255,171,0,0,255,240,0,0,255,241,0,0,255,160,0,0,255,15,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,57,0,0,255,195,0,0,255,247,0,0,255,214,0,0,255,62,0,0,255,255,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,58,0,0,255,204,0,0,255,248,0,0,255,212,0,0,255,50,0,0,255,231,0,0,255,218,0,0,255,131,0,0,255,0,0,0,255,247,0,0,255,234,0,0,255,244,0,0,255,34,0,0,255,0,0,0,255,247,0,0,255,234,0,0,255,243,0,0,255,66,0,0,255,0,0,0,255,0,0,0,255,57,0,0,255,195,0,0,255,247,0,0,255,214,0,0,255,62,0,0,255,255,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,38,0,0,255,171,0,0,255,240,0,0,255,241,0,0,255,160,0,0,255,15,0,0,255,0,0,0,255,0,0,0,255,247,0,0,255,233,0,0,255,238,0,0,255,66,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,106,0,0,255,138,0,0,255,33,0,0,255,15,0,0,255,16,0,0,255,26,0,0,255,57,0,0,255,151,0,0,255,198,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,241,0,0,255,19,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,21,0,0,255,244,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,134,0,0,255,206,0,0,255,90,0,0,255,27,0,0,255,5,0,0,255,16,0,0,255,69,0,0,255,198,0,0,255,145,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,69,0,0,255,168,0,0,255,223,0,0,255,247,0,0,255,233,0,0,255,189,0,0,255,88,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+178560);
/* memory initializer */ allocatei8", ALLOC_NONE, Runtime.GLOBAL_BASE+188800);
/* memory initializer */ allocate([0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,7,0,0,255,225,0,0,255,255,0,0,255,72,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,128,0,0,255,255,0,0,255,35,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,255,0,0,255,3,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,1,0,0,255,255,0,0,255,255,0,0,255,110,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,255,0,0,255,35,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,160,0,0,255,242,0,0,255,60,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,27,0,0,255,255,0,0,255,253,0,0,255,15,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,103,0,0,255,255,0,0,255,228,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,50,0,0,255,255,0,0,255,35,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,0,0,0,255,0,0,0,255,158,0,0,255,255,0,0,255,168,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,255,0,0,255,35,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,113,0,0,255,112,0,0,255,0,0,0,255,191,0,0,255,255,0,0,255,104,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,159,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,159,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,103,0,0,255,255,0,0,255,228,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,50,0,0,255,255,0,0,255,35,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,255,0,0,255,3,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,21,0,0,255,255,0,0,255,255,0,0,255,72,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,255,0,0,255,35,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,86,0,0,255,255,0,0,255,192,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,184,0,0,255,255,0,0,255,166,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,7,0,0,255,242,0,0,255,28,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,0,0,0,255,0,0,0,255,14,0,0,255,226,0,0,255,255,0,0,255,86,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,255,0,0,255,35,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,198,0,0,255,27,0,0,255,0,0,0,255,103,0,0,255,255,0,0,255,190,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,175,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,100,0,0,255,209,0,0,255,247,0,0,255,232,0,0,255,159,0,0,255,22,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,200,0,0,255,226,0,0,255,139,0,0,255,44,0,0,255,205,0,0,255,242,0,0,255,124,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,48,0,0,255,179,0,0,255,239,0,0,255,241,0,0,255,185,0,0,255,59,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,184,0,0,255,255,0,0,255,166,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,7,0,0,255,242,0,0,255,28,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,255,0,0,255,3,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,130,0,0,255,255,0,0,255,200,0,0,255,2,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,255,0,0,255,35,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,137,0,0,255,244,0,0,255,234,0,0,255,235,0,0,255,244,0,0,255,101,0,0,255,0,0,0,255,0,0,0,255,174,0,0,255,237,0,0,255,233,0,0,255,245,0,0,255,46,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,11,0,0,255,215,0,0,255,238,0,0,255,44,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,229,0,0,255,255,0,0,255,136,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,69,0,0,255,255,0,0,255,235,0,0,255,22,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,255,0,0,255,35,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,32,0,0,255,193,0,0,255,0,0,0,255,0,0,0,255,19,0,0,255,250,0,0,255,252,0,0,255,24,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,175,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,175,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,145,0,0,255,238,0,0,255,88,0,0,255,10,0,0,255,47,0,0,255,215,0,0,255,214,0,0,255,9,0,0,255,0,0,0,255,0,0,0,255,42,0,0,255,255,0,0,255,151,0,0,255,189,0,0,255,51,0,0,255,203,0,0,255,220,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,72,0,0,255,245,0,0,255,125,0,0,255,19,0,0,255,16,0,0,255,117,0,0,255,249,0,0,255,93,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,229,0,0,255,255,0,0,255,136,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,255,0,0,255,3,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,11,0,0,255,54,0,0,255,145,0,0,255,251,0,0,255,193,0,0,255,20,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,255,0,0,255,35,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,1,0,0,255,34,0,0,255,231,0,0,255,255,0,0,255,63,0,0,255,1,0,0,255,0,0,0,255,0,0,0,255,15,0,0,255,204,0,0,255,227,0,0,255,52,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,6,0,0,255,29,0,0,255,83,0,0,255,209,0,0,255,210,0,0,255,43,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,249,0,0,255,255,0,0,255,123,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,151,0,0,255,255,0,0,255,176,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,255,0,0,255,35,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,118,0,0,255,107,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,183,0,0,255,255,0,0,255,108,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,175,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,175,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,75,0,0,255,255,0,0,255,103,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,76,0,0,255,255,0,0,255,105,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,231,0,0,255,77,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,25,0,0,255,238,0,0,255,140,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,140,0,0,255,247,0,0,255,41,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,249,0,0,255,255,0,0,255,123,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,253,0,0,255,235,0,0,255,183,0,0,255,88,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,255,0,0,255,35,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,136,0,0,255,255,0,0,255,51,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,151,0,0,255,85,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,48,0,0,255,255,0,0,255,255,0,0,255,218,0,0,255,73,0,0,255,2,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,234,0,0,255,255,0,0,255,138,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,11,0,0,255,221,0,0,255,255,0,0,255,94,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,255,0,0,255,35,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,201,0,0,255,23,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,95,0,0,255,255,0,0,255,195,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,175,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,175,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,185,0,0,255,255,0,0,255,28,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,13,0,0,255,255,0,0,255,163,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,235,0,0,255,3,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,141,0,0,255,255,0,0,255,48,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,47,0,0,255,255,0,0,255,159,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,234,0,0,255,255,0,0,255,138,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,255,0,0,255,23,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,255,0,0,255,35,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,34,0,0,255,253,0,0,255,151,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,1,0,0,255,212,0,0,255,10,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,2,0,0,255,36,0,0,255,133,0,0,255,251,0,0,255,191,0,0,255,22,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,195,0,0,255,255,0,0,255,170,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,245,0,0,255,235,0,0,255,231,0,0,255,231,0,0,255,237,0,0,255,247,0,0,255,34,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,63,0,0,255,253,0,0,255,239,0,0,255,27,0,0,255,0,0,0,255,255,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,255,0,0,255,35,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,253,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,35,0,0,255,189,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,14,0,0,255,247,0,0,255,253,0,0,255,27,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,175,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,175,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,238,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,160,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,197,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,220,0,0,255,255,0,0,255,13,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,10,0,0,255,255,0,0,255,228,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,195,0,0,255,255,0,0,255,170,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,245,0,0,255,235,0,0,255,231,0,0,255,231,0,0,255,237,0,0,255,247,0,0,255,34,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,255,0,0,255,23,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,255,0,0,255,35,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,185,0,0,255,241,0,0,255,11,0,0,255,0,0,0,255,0,0,0,255,73,0,0,255,157,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,138,0,0,255,255,0,0,255,203,0,0,255,1,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,118,0,0,255,255,0,0,255,232,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,4,0,0,255,59,0,0,255,255,0,0,255,255,0,0,255,59,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,144,0,0,255,255,0,0,255,184,0,0,255,0,0,0,255,255,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,241,0,0,255,255,0,0,255,45,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,13,0,0,255,244,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,122,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,112,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,175,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,175,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,249,0,0,255,255,0,0,255,7,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,176,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,249,0,0,255,255,0,0,255,4,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,2,0,0,255,255,0,0,255,252,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,118,0,0,255,255,0,0,255,232,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,4,0,0,255,59,0,0,255,255,0,0,255,255,0,0,255,59,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,255,0,0,255,23,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,255,0,0,255,35,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,227,0,0,255,9,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,82,0,0,255,255,0,0,255,100,0,0,255,0,0,0,255,0,0,0,255,176,0,0,255,53,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,37,0,0,255,255,0,0,255,255,0,0,255,74,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,16,0,0,255,237,0,0,255,255,0,0,255,78,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,255,0,0,255,35,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,9,0,0,255,217,0,0,255,255,0,0,255,102,0,0,255,255,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,196,0,0,255,255,0,0,255,73,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,60,0,0,255,202,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,206,0,0,255,22,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,91,0,0,255,255,0,0,255,199,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,175,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,175,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,222,0,0,255,255,0,0,255,25,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,175,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,232,0,0,255,255,0,0,255,14,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,17,0,0,255,255,0,0,255,237,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,16,0,0,255,237,0,0,255,255,0,0,255,78,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,255,0,0,255,35,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,255,0,0,255,23,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,255,0,0,255,35,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,224,0,0,255,29,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,3,0,0,255,229,0,0,255,202,0,0,255,0,0,0,255,27,0,0,255,203,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,193,0,0,255,216,0,0,255,37,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,6,0,0,255,255,0,0,255,255,0,0,255,112,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,92,0,0,255,255,0,0,255,215,0,0,255,10,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,6,0,0,255,255,0,0,255,255,0,0,255,35,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,57,0,0,255,252,0,0,255,242,0,0,255,255,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,102,0,0,255,255,0,0,255,146,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,164,0,0,255,114,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,40,0,0,255,186,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,12,0,0,255,246,0,0,255,255,0,0,255,31,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,175,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,175,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,153,0,0,255,255,0,0,255,73,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,175,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,163,0,0,255,255,0,0,255,52,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,54,0,0,255,255,0,0,255,175,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,92,0,0,255,255,0,0,255,215,0,0,255,10,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,6,0,0,255,255,0,0,255,255,0,0,255,35,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,255,0,0,255,23,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,255,0,0,255,35,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,47,0,0,255,255,0,0,255,49,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,131,0,0,255,255,0,0,255,47,0,0,255,127,0,0,255,103,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,247,0,0,255,255,0,0,255,101,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,24,0,0,255,255,0,0,255,255,0,0,255,78,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,120,0,0,255,255,0,0,255,193,0,0,255,24,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,81,0,0,255,250,0,0,255,255,0,0,255,35,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,6,0,0,255,255,0,0,255,4,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,137,0,0,255,255,0,0,255,255,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,3,0,0,255,196,0,0,255,246,0,0,255,44,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,100,0,0,255,214,0,0,255,8,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,132,0,0,255,99,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,173,0,0,255,255,0,0,255,117,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,175,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,175,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,38,0,0,255,247,0,0,255,178,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,50,0,0,255,131,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,175,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,42,0,0,255,247,0,0,255,146,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,146,0,0,255,252,0,0,255,57,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+199040);
/* memory initializer */ allocatei8", ALLOC_NONE, Runtime.GLOBAL_BASE+209280);
/* memory initializer */ allocate([0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+219520);
/* memory initializer */ allocatei8", ALLOC_NONE, Runtime.GLOBAL_BASE+229760);
/* memory initializer */ allocatei8", ALLOC_NONE, Runtime.GLOBAL_BASE+240000);
/* memory initializer */ allocatei8", ALLOC_NONE, Runtime.GLOBAL_BASE+250240);
/* memory initializer */ allocate([0,0,0,255,0,0,0,255,21,0,0,255,114,0,0,255,183,0,0,255,233,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,238,0,0,255,148,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,105,0,0,255,242,0,0,255,214,0,0,255,164,0,0,255,89,0,0,255,2,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,105,0,0,255,242,0,0,255,214,0,0,255,164,0,0,255,89,0,0,255,2,0,0,255,0,0,0,255,234,0,0,255,142,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,12,0,0,255,255,0,0,255,113,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,78,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,234,0,0,255,150,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,238,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,253,0,0,255,54,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,131,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,241,0,0,255,144,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,12,0,0,255,255,0,0,255,119,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,2,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,243,0,0,255,140,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,76,0,0,255,239,0,0,255,132,0,0,255,44,0,0,255,8,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,246,0,0,255,140,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,241,0,0,255,144,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,12,0,0,255,255,0,0,255,119,0,0,255,0,0,0,255,64,0,0,255,247,0,0,255,14,0,0,255,155,0,0,255,75,0,0,255,224,0,0,255,53,0,0,255,63,0,0,255,165,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,241,0,0,255,144,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,12,0,0,255,255,0,0,255,119,0,0,255,0,0,0,255,76,0,0,255,239,0,0,255,132,0,0,255,44,0,0,255,8,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,246,0,0,255,140,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,11,0,0,255,63,0,0,255,113,0,0,255,210,0,0,255,163,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,11,0,0,255,63,0,0,255,113,0,0,255,210,0,0,255,163,0,0,255,0,0,0,255,241,0,0,255,144,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,12,0,0,255,255,0,0,255,119,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,2,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,243,0,0,255,140,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,246,0,0,255,145,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,131,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,159,0,0,255,199,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,68,0,0,255,255,0,0,255,52,0,0,255,0,0,0,255,0,0,0,255,252,0,0,255,69,0,0,255,0,0,0,255,0,0,0,255,48,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,169,0,0,255,202,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,33,0,0,255,219,0,0,255,0,0,0,255,228,0,0,255,135,0,0,255,0,0,0,255,0,0,0,255,10,0,0,255,255,0,0,255,67,0,0,255,171,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,191,0,0,255,190,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,13,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,159,0,0,255,199,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,68,0,0,255,255,0,0,255,52,0,0,255,0,0,0,255,1,0,0,255,226,0,0,255,105,0,0,255,218,0,0,255,4,0,0,255,134,0,0,255,145,0,0,255,154,0,0,255,73,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,159,0,0,255,199,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,68,0,0,255,255,0,0,255,52,0,0,255,0,0,0,255,228,0,0,255,135,0,0,255,0,0,0,255,0,0,0,255,10,0,0,255,255,0,0,255,67,0,0,255,171,0,0,255,0,0,0,255,191,0,0,255,190,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,13,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,253,0,0,255,73,0,0,255,0,0,0,255,1,0,0,255,255,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,240,0,0,255,12,0,0,255,0,0,0,255,0,0,0,255,20,0,0,255,240,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,240,0,0,255,12,0,0,255,0,0,0,255,0,0,0,255,20,0,0,255,240,0,0,255,0,0,0,255,159,0,0,255,199,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,68,0,0,255,255,0,0,255,52,0,0,255,0,0,0,255,0,0,0,255,252,0,0,255,69,0,0,255,0,0,0,255,0,0,0,255,48,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,169,0,0,255,202,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,33,0,0,255,219,0,0,255,0,0,0,255,185,0,0,255,203,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,98,0,0,255,40,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,16,0,0,255,255,0,0,255,148,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,19,0,0,255,215,0,0,255,151,0,0,255,35,0,0,255,7,0,0,255,67,0,0,255,221,0,0,255,143,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,209,0,0,255,149,0,0,255,12,0,0,255,38,0,0,255,168,0,0,255,246,0,0,255,101,0,0,255,1,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,29,0,0,255,232,0,0,255,150,0,0,255,25,0,0,255,24,0,0,255,185,0,0,255,116,0,0,255,0,0,0,255,221,0,0,255,169,0,0,255,26,0,0,255,12,0,0,255,132,0,0,255,224,0,0,255,104,0,0,255,244,0,0,255,0,0,0,255,18,0,0,255,255,0,0,255,81,0,0,255,0,0,0,255,0,0,0,255,16,0,0,255,255,0,0,255,81,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,56,0,0,255,247,0,0,255,124,0,0,255,17,0,0,255,29,0,0,255,162,0,0,255,255,0,0,255,91,0,0,255,0,0,0,255,0,0,0,255,19,0,0,255,215,0,0,255,151,0,0,255,35,0,0,255,7,0,0,255,67,0,0,255,221,0,0,255,143,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,137,0,0,255,238,0,0,255,150,0,0,255,0,0,0,255,43,0,0,255,232,0,0,255,216,0,0,255,3,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,18,0,0,255,255,0,0,255,81,0,0,255,0,0,0,255,0,0,0,255,16,0,0,255,255,0,0,255,81,0,0,255,0,0,0,255,0,0,0,255,17,0,0,255,255,0,0,255,85,0,0,255,0,0,0,255,0,0,0,255,19,0,0,255,215,0,0,255,151,0,0,255,35,0,0,255,7,0,0,255,67,0,0,255,221,0,0,255,143,0,0,255,0,0,0,255,0,0,0,255,221,0,0,255,169,0,0,255,26,0,0,255,12,0,0,255,132,0,0,255,224,0,0,255,104,0,0,255,244,0,0,255,0,0,0,255,56,0,0,255,247,0,0,255,124,0,0,255,17,0,0,255,29,0,0,255,162,0,0,255,255,0,0,255,91,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,18,0,0,255,255,0,0,255,84,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,220,0,0,255,159,0,0,255,10,0,0,255,92,0,0,255,216,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,134,0,0,255,18,0,0,255,11,0,0,255,115,0,0,255,178,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,134,0,0,255,18,0,0,255,11,0,0,255,115,0,0,255,178,0,0,255,0,0,0,255,19,0,0,255,215,0,0,255,151,0,0,255,35,0,0,255,7,0,0,255,67,0,0,255,221,0,0,255,143,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,209,0,0,255,149,0,0,255,12,0,0,255,38,0,0,255,168,0,0,255,246,0,0,255,101,0,0,255,1,0,0,255,0,0,0,255,18,0,0,255,255,0,0,255,84,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,29,0,0,255,232,0,0,255,150,0,0,255,25,0,0,255,24,0,0,255,185,0,0,255,116,0,0,255,0,0,0,255,44,0,0,255,240,0,0,255,155,0,0,255,33,0,0,255,9,0,0,255,91,0,0,255,164,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,242,0,0,255,233,0,0,255,235,0,0,255,127,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,17,0,0,255,150,0,0,255,232,0,0,255,248,0,0,255,207,0,0,255,97,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,58,0,0,255,204,0,0,255,248,0,0,255,212,0,0,255,50,0,0,255,231,0,0,255,218,0,0,255,131,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,35,0,0,255,177,0,0,255,244,0,0,255,233,0,0,255,132,0,0,255,1,0,0,255,0,0,0,255,43,0,0,255,181,0,0,255,234,0,0,255,237,0,0,255,90,0,0,255,101,0,0,255,241,0,0,255,124,0,0,255,0,0,0,255,247,0,0,255,234,0,0,255,244,0,0,255,34,0,0,255,0,0,0,255,247,0,0,255,234,0,0,255,243,0,0,255,66,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,57,0,0,255,195,0,0,255,247,0,0,255,214,0,0,255,62,0,0,255,255,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,17,0,0,255,150,0,0,255,232,0,0,255,248,0,0,255,207,0,0,255,97,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,44,0,0,255,252,0,0,255,60,0,0,255,0,0,0,255,0,0,0,255,202,0,0,255,146,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,247,0,0,255,234,0,0,255,244,0,0,255,34,0,0,255,0,0,0,255,247,0,0,255,234,0,0,255,243,0,0,255,66,0,0,255,0,0,0,255,247,0,0,255,234,0,0,255,243,0,0,255,66,0,0,255,0,0,0,255,0,0,0,255,17,0,0,255,150,0,0,255,232,0,0,255,248,0,0,255,207,0,0,255,97,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,43,0,0,255,181,0,0,255,234,0,0,255,237,0,0,255,90,0,0,255,101,0,0,255,241,0,0,255,124,0,0,255,0,0,0,255,0,0,0,255,57,0,0,255,195,0,0,255,247,0,0,255,214,0,0,255,62,0,0,255,255,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,247,0,0,255,234,0,0,255,244,0,0,255,66,0,0,255,0,0,0,255,0,0,0,255,62,0,0,255,207,0,0,255,247,0,0,255,207,0,0,255,55,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,184,0,0,255,60,0,0,255,223,0,0,255,237,0,0,255,174,0,0,255,25,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,184,0,0,255,60,0,0,255,223,0,0,255,237,0,0,255,174,0,0,255,25,0,0,255,0,0,0,255,0,0,0,255,17,0,0,255,150,0,0,255,232,0,0,255,248,0,0,255,207,0,0,255,97,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,58,0,0,255,204,0,0,255,248,0,0,255,212,0,0,255,50,0,0,255,231,0,0,255,218,0,0,255,131,0,0,255,0,0,0,255,247,0,0,255,233,0,0,255,238,0,0,255,66,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,35,0,0,255,177,0,0,255,244,0,0,255,233,0,0,255,132,0,0,255,1,0,0,255,0,0,0,255,0,0,0,255,38,0,0,255,171,0,0,255,240,0,0,255,241,0,0,255,160,0,0,255,15,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,86,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,29,0,0,255,54,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+260480);
/* memory initializer */ allocatei8", ALLOC_NONE, Runtime.GLOBAL_BASE+270720);
/* memory initializer */ allocate([73,0,0,255,226,0,0,255,125,0,0,255,1,0,0,255,102,0,0,255,249,0,0,255,18,0,0,255,0,0,0,255,34,0,0,255,241,0,0,255,60,0,0,255,0,0,0,255,2,0,0,255,117,0,0,255,200,0,0,255,17,0,0,255,0,0,0,255,33,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,25,0,0,255,255,0,0,255,170,0,0,255,92,0,0,255,12,0,0,255,93,0,0,255,255,0,0,255,32,0,0,255,0,0,0,255,0,0,0,255,168,0,0,255,186,0,0,255,30,0,0,255,9,0,0,255,115,0,0,255,207,0,0,255,9,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,186,0,0,255,66,0,0,255,7,0,0,255,122,0,0,255,237,0,0,255,13,0,0,255,0,0,0,255,0,0,0,255,33,0,0,255,235,0,0,255,150,0,0,255,26,0,0,255,28,0,0,255,136,0,0,255,248,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,33,0,0,255,235,0,0,255,150,0,0,255,26,0,0,255,28,0,0,255,136,0,0,255,248,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,25,0,0,255,255,0,0,255,176,0,0,255,64,0,0,255,207,0,0,255,93,0,0,255,0,0,0,255,35,0,0,255,233,0,0,255,102,0,0,255,13,0,0,255,32,0,0,255,166,0,0,255,204,0,0,255,2,0,0,255,0,0,0,255,171,0,0,255,98,0,0,255,9,0,0,255,22,0,0,255,163,0,0,255,255,0,0,255,3,0,0,255,171,0,0,255,98,0,0,255,9,0,0,255,22,0,0,255,163,0,0,255,255,0,0,255,3,0,0,255,0,0,0,255,202,0,0,255,165,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,149,0,0,255,208,0,0,255,1,0,0,255,0,0,0,255,0,0,0,255,218,0,0,255,112,0,0,255,0,0,0,255,142,0,0,255,194,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,67,0,0,255,252,0,0,255,40,0,0,255,0,0,0,255,0,0,0,255,168,0,0,255,209,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,7,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,169,0,0,255,172,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,24,0,0,255,255,0,0,255,43,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,125,0,0,255,0,0,0,255,0,0,0,255,5,0,0,255,255,0,0,255,61,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,123,0,0,255,0,0,0,255,0,0,0,255,5,0,0,255,255,0,0,255,60,0,0,255,0,0,0,255,0,0,0,255,169,0,0,255,172,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,24,0,0,255,255,0,0,255,43,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,142,0,0,255,194,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,67,0,0,255,252,0,0,255,40,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,142,0,0,255,194,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,67,0,0,255,252,0,0,255,40,0,0,255,6,0,0,255,239,0,0,255,80,0,0,255,0,0,0,255,1,0,0,255,228,0,0,255,126,0,0,255,0,0,0,255,0,0,0,255,136,0,0,255,78,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,125,0,0,255,0,0,0,255,0,0,0,255,5,0,0,255,255,0,0,255,61,0,0,255,0,0,0,255,0,0,0,255,240,0,0,255,97,0,0,255,0,0,0,255,0,0,0,255,9,0,0,255,255,0,0,255,68,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,220,0,0,255,100,0,0,255,0,0,0,255,6,0,0,255,255,0,0,255,62,0,0,255,0,0,0,255,0,0,0,255,168,0,0,255,209,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,7,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,168,0,0,255,209,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,7,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,132,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,169,0,0,255,172,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,24,0,0,255,255,0,0,255,43,0,0,255,0,0,0,255,238,0,0,255,59,0,0,255,0,0,0,255,0,0,0,255,27,0,0,255,245,0,0,255,1,0,0,255,238,0,0,255,59,0,0,255,0,0,0,255,0,0,0,255,27,0,0,255,245,0,0,255,1,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,234,0,0,255,150,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,234,0,0,255,142,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,12,0,0,255,255,0,0,255,113,0,0,255,0,0,0,255,0,0,0,255,238,0,0,255,148,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,238,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,253,0,0,255,54,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,71,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,66,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,71,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,66,0,0,255,0,0,0,255,0,0,0,255,238,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,253,0,0,255,54,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,234,0,0,255,142,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,12,0,0,255,255,0,0,255,113,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,234,0,0,255,142,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,12,0,0,255,255,0,0,255,113,0,0,255,0,0,0,255,155,0,0,255,171,0,0,255,0,0,0,255,65,0,0,255,215,0,0,255,217,0,0,255,0,0,0,255,0,0,0,255,215,0,0,255,11,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,71,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,66,0,0,255,0,0,0,255,0,0,0,255,104,0,0,255,184,0,0,255,25,0,0,255,11,0,0,255,117,0,0,255,217,0,0,255,11,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,21,0,0,255,114,0,0,255,183,0,0,255,233,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,238,0,0,255,148,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,238,0,0,255,148,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,78,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,238,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,253,0,0,255,54,0,0,255,0,0,0,255,105,0,0,255,242,0,0,255,214,0,0,255,164,0,0,255,89,0,0,255,2,0,0,255,0,0,0,255,105,0,0,255,242,0,0,255,214,0,0,255,164,0,0,255,89,0,0,255,2,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,243,0,0,255,140,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,241,0,0,255,144,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,12,0,0,255,255,0,0,255,119,0,0,255,0,0,0,255,0,0,0,255,246,0,0,255,140,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,246,0,0,255,145,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,246,0,0,255,145,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,241,0,0,255,144,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,12,0,0,255,255,0,0,255,119,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,241,0,0,255,144,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,12,0,0,255,255,0,0,255,119,0,0,255,0,0,0,255,64,0,0,255,247,0,0,255,14,0,0,255,155,0,0,255,75,0,0,255,224,0,0,255,53,0,0,255,63,0,0,255,165,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,144,0,0,255,93,0,0,255,218,0,0,255,238,0,0,255,171,0,0,255,26,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,76,0,0,255,239,0,0,255,132,0,0,255,44,0,0,255,8,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,246,0,0,255,140,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,246,0,0,255,140,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,246,0,0,255,145,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,11,0,0,255,63,0,0,255,113,0,0,255,210,0,0,255,163,0,0,255,0,0,0,255,0,0,0,255,11,0,0,255,63,0,0,255,113,0,0,255,210,0,0,255,163,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,169,0,0,255,202,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,33,0,0,255,219,0,0,255,0,0,0,255,159,0,0,255,199,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,68,0,0,255,255,0,0,255,52,0,0,255,0,0,0,255,0,0,0,255,191,0,0,255,190,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,13,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,185,0,0,255,203,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,98,0,0,255,40,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,253,0,0,255,73,0,0,255,0,0,0,255,1,0,0,255,255,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,185,0,0,255,203,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,98,0,0,255,40,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,159,0,0,255,199,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,68,0,0,255,255,0,0,255,52,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,159,0,0,255,199,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,68,0,0,255,255,0,0,255,52,0,0,255,0,0,0,255,1,0,0,255,226,0,0,255,105,0,0,255,218,0,0,255,4,0,0,255,134,0,0,255,145,0,0,255,154,0,0,255,73,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,239,0,0,255,7,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,228,0,0,255,135,0,0,255,0,0,0,255,0,0,0,255,10,0,0,255,255,0,0,255,67,0,0,255,171,0,0,255,0,0,0,255,191,0,0,255,190,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,13,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,191,0,0,255,190,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,13,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,185,0,0,255,203,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,98,0,0,255,40,0,0,255,0,0,0,255,240,0,0,255,12,0,0,255,0,0,0,255,0,0,0,255,20,0,0,255,240,0,0,255,0,0,0,255,240,0,0,255,12,0,0,255,0,0,0,255,0,0,0,255,20,0,0,255,240,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,29,0,0,255,232,0,0,255,150,0,0,255,25,0,0,255,24,0,0,255,185,0,0,255,116,0,0,255,0,0,0,255,19,0,0,255,215,0,0,255,151,0,0,255,35,0,0,255,7,0,0,255,67,0,0,255,221,0,0,255,143,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,56,0,0,255,247,0,0,255,124,0,0,255,17,0,0,255,29,0,0,255,162,0,0,255,255,0,0,255,91,0,0,255,0,0,0,255,0,0,0,255,44,0,0,255,240,0,0,255,155,0,0,255,33,0,0,255,9,0,0,255,91,0,0,255,164,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,18,0,0,255,255,0,0,255,84,0,0,255,0,0,0,255,0,0,0,255,18,0,0,255,255,0,0,255,81,0,0,255,0,0,0,255,0,0,0,255,16,0,0,255,255,0,0,255,81,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,220,0,0,255,159,0,0,255,10,0,0,255,92,0,0,255,216,0,0,255,0,0,0,255,17,0,0,255,255,0,0,255,83,0,0,255,0,0,0,255,0,0,0,255,16,0,0,255,255,0,0,255,81,0,0,255,0,0,0,255,0,0,0,255,44,0,0,255,240,0,0,255,155,0,0,255,33,0,0,255,9,0,0,255,91,0,0,255,164,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,25,0,0,255,255,0,0,255,84,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,19,0,0,255,215,0,0,255,151,0,0,255,35,0,0,255,7,0,0,255,67,0,0,255,221,0,0,255,143,0,0,255,0,0,0,255,0,0,0,255,17,0,0,255,255,0,0,255,85,0,0,255,0,0,0,255,0,0,0,255,17,0,0,255,255,0,0,255,85,0,0,255,0,0,0,255,0,0,0,255,19,0,0,255,215,0,0,255,151,0,0,255,35,0,0,255,7,0,0,255,67,0,0,255,221,0,0,255,143,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,137,0,0,255,238,0,0,255,150,0,0,255,0,0,0,255,43,0,0,255,232,0,0,255,216,0,0,255,3,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,18,0,0,255,255,0,0,255,84,0,0,255,0,0,0,255,0,0,0,255,18,0,0,255,255,0,0,255,81,0,0,255,0,0,0,255,0,0,0,255,16,0,0,255,255,0,0,255,81,0,0,255,0,0,0,255,0,0,0,255,229,0,0,255,98,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,221,0,0,255,169,0,0,255,26,0,0,255,12,0,0,255,132,0,0,255,224,0,0,255,104,0,0,255,244,0,0,255,0,0,0,255,56,0,0,255,247,0,0,255,124,0,0,255,17,0,0,255,29,0,0,255,162,0,0,255,255,0,0,255,91,0,0,255,0,0,0,255,0,0,0,255,56,0,0,255,247,0,0,255,124,0,0,255,17,0,0,255,29,0,0,255,162,0,0,255,255,0,0,255,91,0,0,255,0,0,0,255,0,0,0,255,18,0,0,255,255,0,0,255,84,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,44,0,0,255,240,0,0,255,155,0,0,255,33,0,0,255,9,0,0,255,91,0,0,255,164,0,0,255,0,0,0,255,0,0,0,255,255,0,0,255,134,0,0,255,18,0,0,255,11,0,0,255,115,0,0,255,178,0,0,255,0,0,0,255,255,0,0,255,134,0,0,255,18,0,0,255,11,0,0,255,115,0,0,255,178,0,0,255,0,0,0,255,0,0,0,255,178,0,0,255,144,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,35,0,0,255,177,0,0,255,244,0,0,255,233,0,0,255,132,0,0,255,1,0,0,255,0,0,0,255,0,0,0,255,17,0,0,255,150,0,0,255,232,0,0,255,248,0,0,255,207,0,0,255,97,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,57,0,0,255,195,0,0,255,247,0,0,255,214,0,0,255,62,0,0,255,255,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,38,0,0,255,171,0,0,255,240,0,0,255,241,0,0,255,160,0,0,255,15,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,247,0,0,255,234,0,0,255,244,0,0,255,66,0,0,255,0,0,0,255,247,0,0,255,234,0,0,255,244,0,0,255,34,0,0,255,0,0,0,255,247,0,0,255,234,0,0,255,243,0,0,255,66,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,62,0,0,255,207,0,0,255,247,0,0,255,207,0,0,255,55,0,0,255,0,0,0,255,247,0,0,255,234,0,0,255,243,0,0,255,66,0,0,255,0,0,0,255,247,0,0,255,234,0,0,255,243,0,0,255,66,0,0,255,0,0,0,255,0,0,0,255,38,0,0,255,171,0,0,255,240,0,0,255,241,0,0,255,160,0,0,255,15,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,102,0,0,255,244,0,0,255,233,0,0,255,238,0,0,255,66,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,17,0,0,255,150,0,0,255,232,0,0,255,248,0,0,255,207,0,0,255,97,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,247,0,0,255,234,0,0,255,243,0,0,255,66,0,0,255,0,0,0,255,247,0,0,255,234,0,0,255,243,0,0,255,66,0,0,255,0,0,0,255,0,0,0,255,17,0,0,255,150,0,0,255,232,0,0,255,248,0,0,255,207,0,0,255,97,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,44,0,0,255,252,0,0,255,60,0,0,255,0,0,0,255,0,0,0,255,202,0,0,255,146,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,247,0,0,255,234,0,0,255,244,0,0,255,66,0,0,255,0,0,0,255,247,0,0,255,234,0,0,255,244,0,0,255,34,0,0,255,0,0,0,255,247,0,0,255,234,0,0,255,243,0,0,255,66,0,0,255,0,0,0,255,83,0,0,255,251,0,0,255,252,0,0,255,250,0,0,255,245,0,0,255,216,0,0,255,147,0,0,255,22,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,43,0,0,255,181,0,0,255,234,0,0,255,237,0,0,255,90,0,0,255,101,0,0,255,241,0,0,255,124,0,0,255,0,0,0,255,0,0,0,255,57,0,0,255,195,0,0,255,247,0,0,255,214,0,0,255,62,0,0,255,255,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,0,0,0,255,57,0,0,255,195,0,0,255,247,0,0,255,214,0,0,255,62,0,0,255,255,0,0,255,255,0,0,255,67,0,0,255,0,0,0,255,247,0,0,255,233,0,0,255,238,0,0,255,66,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,38,0,0,255,171,0,0,255,240,0,0,255,241,0,0,255,160,0,0,255,15,0,0,255,0,0,0,255,0,0,0,255,184,0,0,255,60,0,0,255,223,0,0,255,237,0,0,255,174,0,0,255,25,0,0,255,0,0,0,255,184,0,0,255,60,0,0,255,223,0,0,255,237,0,0,255,174,0,0,255,25,0,0,255,0,0,0,255,0,0,0,255,202,0,0,255,165,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,86,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,29,0,0,255,54,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,106,0,0,255,138,0,0,255,33,0,0,255,15,0,0,255,16,0,0,255,26,0,0,255,57,0,0,255,151,0,0,255,198,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,241,0,0,255,19,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,21,0,0,255,244,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,134,0,0,255,206,0,0,255,90,0,0,255,27,0,0,255,5,0,0,255,16,0,0,255,69,0,0,255,198,0,0,255,145,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+280960);
/* memory initializer */ allocate([0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,69,0,0,255,168,0,0,255,223,0,0,255,247,0,0,255,233,0,0,255,189,0,0,255,88,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+291200);
/* memory initializer */ allocatei8", ALLOC_NONE, Runtime.GLOBAL_BASE+301440);
/* memory initializer */ allocatei8", ALLOC_NONE, Runtime.GLOBAL_BASE+311680);
/* memory initializer */ allocatei8", ALLOC_NONE, Runtime.GLOBAL_BASE+321920);
/* memory initializer */ allocatei8", ALLOC_NONE, Runtime.GLOBAL_BASE+332160);
/* memory initializer */ allocatei8", ALLOC_NONE, Runtime.GLOBAL_BASE+342400);
/* memory initializer */ allocatei8", ALLOC_NONE, Runtime.GLOBAL_BASE+352640);
/* memory initializer */ allocatei8", ALLOC_NONE, Runtime.GLOBAL_BASE+362880);
/* memory initializer */ allocatei8", ALLOC_NONE, Runtime.GLOBAL_BASE+373120);
/* memory initializer */ allocate([0,0,0,0,0,0,0,0,87,65,82,78,73,78,71,32,40,48,41,58,32,67,111,117,108,100,110,39,116,32,99,114,101,97,116,101,32,110,101,119,32,105,110,116,101,114,102,97,99,101,46,32,89,111,117,32,115,104,111,117,108,100,32,105,110,99,114,101,97,115,101,32,116,104,101,32,118,97,108,117,101,32,111,102,32,87,95,77,65,88,95,73,78,84,69,82,70,65,67,69,83,32,97,116,32,99,111,110,116,47,99,111,110,102,46,104,32,111,114,32,100,101,99,114,101,97,115,101,32,116,104,101,32,110,117,109,98,101,114,32,111,102,32,105,110,101,114,102,97,99,101,115,32,99,114,101,97,116,101,100,46,10], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+383360);
/* memory initializer */ allocate([47,42,52,52,48,58,42,47,10,10,10,10,35,118,101,114,115,105,111,110,32,49,48,48,10,10,35,105,102,32,71,76,95,70,82,65,71,77,69,78,84,95,80,82,69,67,73,83,73,79,78,95,72,73,71,72,32,61,61,32,49,10,112,114,101,99,105,115,105,111,110,32,104,105,103,104,112,32,102,108,111,97,116,59,10,112,114,101,99,105,115,105,111,110,32,104,105,103,104,112,32,105,110,116,59,10,35,101,108,115,101,10,112,114,101,99,105,115,105,111,110,32,109,101,100,105,117,109,112,32,102,108,111,97,116,59,10,112,114,101,99,105,115,105,111,110,32,109,101,100,105,117,109,112,32,105,110,116,59,10,35,101,110,100,105,102,10,112,114,101,99,105,115,105,111,110,32,108,111,119,112,32,115,97,109,112,108,101,114,50,68,59,10,112,114,101,99,105,115,105,111,110,32,108,111,119,112,32,115,97,109,112,108,101,114,67,117,98,101,59,10,10,47,42,52,52,50,58,42,47,10,10,10,97,116,116,114,105,98,117,116,101,32,118,101,99,51,32,118,101,114,116,101,120,95,112,111,115,105,116,105,111,110,59,10,47,42,58,52,52,50,42,47,10,10,10,10,10,47,42,52,52,51,58,42,47,10,10,10,117,110,105,102,111,114,109,32,118,101,99,52,32,111,98,106,101,99,116,95,99,111,108,111,114,59,10,117,110,105,102,111,114,109,32,109,97,116,52,32,109,111,100,101,108,95,118,105,101,119,95,109,97,116,114,105,120,59,10,117,110,105,102,111,114,109,32,118,101,99,50,32,111,98,106,101,99,116,95,115,105,122,101,59,10,117,110,105,102,111,114,109,32,102,108,111,97,116,32,116,105,109,101,59,10,117,110,105,102,111,114,109,32,115,97,109,112,108,101,114,50,68,32,116,101,120,116,117,114,101,49,59,10,117,110,105,102,111,114,109,32,105,110,116,32,105,110,116,101,103,101,114,59,10,47,42,58,52,52,51,42,47,10,10,10,118,111,105,100,32,109,97,105,110,40,41,123,10,10,103,108,95,80,111,115,105,116,105,111,110,61,32,109,111,100,101,108,95,118,105,101,119,95,109,97,116,114,105,120,42,118,101,99,52,40,118,101,114,116,101,120,95,112,111,115,105,116,105,111,110,44,49,46,48,41,59,10,125,10,47,42,58,52,52,48,42,47,10,0,0,0,0,0,0,0,47,42,52,52,49,58,42,47,10,10,10,10,35,118,101,114,115,105,111,110,32,49,48,48,10,10,35,105,102,32,71,76,95,70,82,65,71,77,69,78,84,95,80,82,69,67,73,83,73,79,78,95,72,73,71,72,32,61,61,32,49,10,112,114,101,99,105,115,105,111,110,32,104,105,103,104,112,32,102,108,111,97,116,59,10,112,114,101,99,105,115,105,111,110,32,104,105,103,104,112,32,105,110,116,59,10,35,101,108,115,101,10,112,114,101,99,105,115,105,111,110,32,109,101,100,105,117,109,112,32,102,108,111,97,116,59,10,112,114,101,99,105,115,105,111,110,32,109,101,100,105,117,109,112,32,105,110,116,59,10,35,101,110,100,105,102,10,112,114,101,99,105,115,105,111,110,32,108,111,119,112,32,115,97,109,112,108,101,114,50,68,59,10,112,114,101,99,105,115,105,111,110,32,108,111,119,112,32,115,97,109,112,108,101,114,67,117,98,101,59,10,10,10,47,42,52,52,51,58,42,47,10,10,10,117,110,105,102,111,114,109,32,118,101,99,52,32,111,98,106,101,99,116,95,99,111,108,111,114,59,10,117,110,105,102,111,114,109,32,109,97,116,52,32,109,111,100,101,108,95,118,105,101,119,95,109,97,116,114,105,120,59,10,117,110,105,102,111,114,109,32,118,101,99,50,32,111,98,106,101,99,116,95,115,105,122,101,59,10,117,110,105,102,111,114,109,32,102,108,111,97,116,32,116,105,109,101,59,10,117,110,105,102,111,114,109,32,115,97,109,112,108,101,114,50,68,32,116,101,120,116,117,114,101,49,59,10,117,110,105,102,111,114,109,32,105,110,116,32,105,110,116,101,103,101,114,59,10,47,42,58,52,52,51,42,47,10,10,10,118,111,105,100,32,109,97,105,110,40,41,123,10,103,108,95,70,114,97,103,68,97,116,97,91,48,93,61,32,111,98,106,101,99,116,95,99,111,108,111,114,59,10,125,10,47,42,58,52,52,49,42,47,10,0,0,0,47,42,52,56,57,58,42,47,10,10,10,35,118,101,114,115,105,111,110,32,49,48,48,10,10,97,116,116,114,105,98,117,116,101,32,109,101,100,105,117,109,112,32,118,101,99,51,32,118,101,114,116,101,120,95,112,111,115,105,116,105,111,110,59,10,10,117,110,105,102,111,114,109,32,109,97,116,52,32,109,111,100,101,108,95,118,105,101,119,95,109,97,116,114,105,120,59,10,117,110,105,102,111,114,109,32,118,101,99,52,32,111,98,106,101,99,116,95,99,111,108,111,114,59,10,117,110,105,102,111,114,109,32,118,101,99,50,32,111,98,106,101,99,116,95,115,105,122,101,59,10,117,110,105,102,111,114,109,32,102,108,111,97,116,32,116,105,109,101,59,10,117,110,105,102,111,114,109,32,115,97,109,112,108,101,114,50,68,32,116,101,120,116,117,114,101,49,59,10,117,110,105,102,111,114,109,32,105,110,116,32,105,110,116,101,103,101,114,59,10,10,118,97,114,121,105,110,103,32,109,101,100,105,117,109,112,32,118,101,99,50,32,99,111,111,114,100,105,110,97,116,101,59,10,10,118,111,105,100,32,109,97,105,110,40,41,123,10,10,10,103,108,95,80,111,115,105,116,105,111,110,61,32,109,111,100,101,108,95,118,105,101,119,95,109,97,116,114,105,120,42,118,101,99,52,40,118,101,114,116,101,120,95,112,111,115,105,116,105,111,110,44,49,46,48,41,59,10,10,99,111,111,114,100,105,110,97,116,101,61,32,118,101,99,50,40,40,40,118,101,114,116,101,120,95,112,111,115,105,116,105,111,110,91,48,93,43,48,46,53,41,41,44,10,40,40,118,101,114,116,101,120,95,112,111,115,105,116,105,111,110,91,49,93,43,48,46,53,41,41,41,59,10,125,10,47,42,58,52,56,57,42,47,10,0,0,47,42,52,57,48,58,42,47,10,10,10,35,118,101,114,115,105,111,110,32,49,48,48,10,10,117,110,105,102,111,114,109,32,115,97,109,112,108,101,114,50,68,32,116,101,120,116,117,114,101,49,59,10,10,118,97,114,121,105,110,103,32,109,101,100,105,117,109,112,32,118,101,99,50,32,99,111,111,114,100,105,110,97,116,101,59,10,10,118,111,105,100,32,109,97,105,110,40,41,123,10,103,108,95,70,114,97,103,68,97,116,97,91,48,93,61,32,116,101,120,116,117,114,101,50,68,40,116,101,120,116,117,114,101,49,44,99,111,111,114,100,105,110,97,116,101,41,59,10,125,10,47,42,58,52,57,48,42,47,10,0,0,0,0,0,0,0,0,69,82,82,79,82,32,40,48,41,58,32,83,104,97,100,101,114,32,102,97,105,108,101,100,32,116,111,32,99,111,109,112,105,108,101,46,32,73,116,32,119,97,115,110,39,116,32,112,111,115,115,105,98,108,101,32,116,111,32,100,105,115,99,111,118,101,114,32,119,104,121,32,98,101,99,97,117,115,101,32,116,104,101,114,101,39,115,32,110,111,32,101,110,111,117,103,104,32,105,110,116,101,114,110,97,108,32,109,101,109,111,114,121,46,32,80,108,101,97,115,101,44,32,105,110,99,114,101,97,115,101,32,116,104,101,32,118,97,108,117,101,32,111,102,32,87,95,73,78,84,69,82,78,65,76,95,77,69,77,79,82,89,32,97,116,32,99,111,110,102,47,99,111,110,102,46,104,32,97,110,100,32,116,114,121,32,116,111,32,114,117,110,32,116,104,105,115,32,112,114,111,103,114,97,109,32,97,103,97,105,110,46,10,0,0,0,69,82,82,79,82,32,40,48,41,58,32,70,97,105,108,101,100,32,116,111,32,99,111,109,112,105,108,101,32,115,104,97,100,101,114,58,32,37,115,10,0,0,0,0,0,0,0,0,69,82,82,79,82,32,40,48,41,58,32,83,104,97,100,101,114,115,32,102,97,105,108,101,100,32,116,111,32,108,105,110,107,46,32,73,116,32,119,97,115,110,39,116,32,112,111,115,115,105,98,108,101,32,116,111,32,100,105,115,99,111,118,101,114,32,119,104,121,32,98,101,99,97,117,115,101,32,116,104,101,114,101,39,115,32,110,111,32,101,110,111,117,103,104,32,105,110,116,101,114,110,97,108,32,109,101,109,111,114,121,46,32,80,108,101,97,115,101,44,32,105,110,99,114,101,97,115,101,32,116,104,101,32,118,97,108,117,101,32,111,102,32,87,95,73,78,84,69,82,78,65,76,95,77,69,77,79,82,89,32,97,116,32,99,111,110,102,47,99,111,110,102,46,104,32,97,110,100,32,116,114,121,32,116,111,32,114,117,110,32,116,104,105,115,32,112,114,111,103,114,97,109,32,97,103,97,105,110,46,10,0,0,0,0,0,69,82,82,79,82,32,40,48,41,58,32,70,97,105,108,101,100,32,116,111,32,108,105,110,107,32,115,104,97,100,101,114,58,32,37,115,10,0,0,0,47,118,101,114,116,101,120,46,103,108,115,108,0,0,0,0,47,102,114,97,103,109,101,110,116,46,103,108,115,108,0,0,87,65,82,78,73,78,71,32,40,48,41,58,32,67,97,110,39,116,32,114,101,97,100,32,118,101,114,116,101,120,32,115,104,97,100,101,114,32,115,111,117,114,99,101,32,99,111,100,101,32,97,116,32,37,115,46,32,85,115,105,110,103,32,97,32,100,101,102,97,117,108,116,32,115,104,97,100,101,114,32,105,110,115,116,101,97,100,46,10,0,0,0,0,0,0,0,87,65,82,78,73,78,71,32,40,48,41,58,32,67,97,110,39,116,32,114,101,97,100,32,115,104,97,100,101,114,32,115,111,117,114,99,101,32,102,105,108,101,32,115,116,97,116,115,58,32,37,115,46,32,73,103,110,111,114,105,110,103,32,115,111,117,114,99,101,32,99,111,100,101,32,97,110,100,32,117,115,105,110,103,32,97,32,100,101,102,97,117,108,116,115,104,97,100,101,114,32,99,111,100,101,46,10,0,0,0,0,0,87,65,82,78,73,78,71,32,40,48,41,58,32,67,97,110,39,116,32,114,101,97,100,32,102,114,97,103,109,101,110,116,32,115,104,97,100,101,114,32,115,111,117,114,99,101,32,99,111,100,101,32,97,116,32,37,115,46,32,85,115,105,110,103,32,97,32,100,101,102,97,117,108,116,32,115,104,97,100,101,114,32,105,110,115,116,101,97,100,46,10,0,0,0,0,0,87,65,82,78,73,78,71,32,40,48,41,58,32,67,97,110,39,116,32,114,101,97,100,32,115,104,97,100,101,114,32,115,111,117,114,99,101,32,99,111,100,101,32,97,116,32,37,115,46,32,70,105,108,101,32,116,111,111,32,98,105,103,46,10,0,0,0,0,0,0,0,0,87,65,82,78,73,78,71,32,40,48,41,58,32,67,97,110,39,116,32,114,101,97,100,32,115,104,97,100,101,114,32,115,111,117,114,99,101,32,99,111,100,101,32,97,116,32,37,115,46,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,87,65,82,78,73,78,71,32,40,48,41,58,32,78,111,32,115,111,117,110,100,32,100,101,118,105,99,101,32,100,101,116,101,99,116,101,100,46,10,0,69,82,82,79,82,58,32,78,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,46,32,80,108,101,97,115,101,44,32,105,110,99,114,101,97,115,101,32,116,104,101,32,118,97,108,117,101,32,111,102,32,87,95,73,78,84,69,82,78,65,76,95,77,69,77,79,82,89,32,97,116,32,99,111,110,102,47,99,111,110,102,46,104,32,97,110,100,32,116,114,121,32,116,111,32,114,117,110,32,116,104,101,32,112,114,111,103,114,97,109,32,97,103,97,105,110,46,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,87,65,82,78,73,78,71,40,48,41,41,58,32,78,111,32,115,111,117,110,100,32,115,111,117,114,99,101,32,99,111,117,108,100,32,98,101,32,99,114,101,97,116,101,100,46,32,97,108,71,101,110,83,111,117,114,99,101,115,32,102,97,105,108,101,100,46,32,83,111,117,110,100,32,112,114,111,98,97,98,108,121,32,119,111,110,39,116,32,119,111,114,107,46,10,0,115,111,117,110,100,47,0,0,87,65,82,78,73,78,71,40,48,41,58,32,78,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,32,116,111,32,114,101,97,100,32,102,105,108,101,58,32,37,115,46,10,0,0,0,0,0,0,0,0,71,69,84,0,0,0,0,0,0,0,0,0,0,0,0,0,87,65,82,78,73,78,71,32,40,48,41,58,32,67,111,117,108,100,110,39,116,32,108,111,97,100,32,97,32,115,111,117,110,100,32,102,105,108,101,46,32,67,111,100,101,32,37,100,46,10,0,0,0,0,0,0,46,119,97,118,0,0,0,0,46,87,65,86,0,0,0,0,114,0,0,0,0,0,0,0,82,73,70,70,0,0,0,0,87,65,82,78,73,78,71,58,32,78,111,116,32,99,111,109,112,97,116,105,98,108,101,32,97,117,100,105,111,32,102,111,114,109,97,116,58,32,37,115,10,0,0,0,0,0,0,0,87,65,82,78,73,78,71,58,32,68,97,109,97,103,101,100,32,102,105,108,101,58,32,37,115,10,0,0,0,0,0,0,87,65,82,78,73,78,71,58,32,68,97,109,97,103,101,100,32,97,117,100,105,111,32,102,105,108,101,58,32,37,115,10,0,0,0,0,0,0,0,0,87,65,82,78,73,78,71,58,32,78,111,116,32,99,111,109,112,97,116,105,98,108,101,32,87,65,86,69,32,102,105,108,101,32,102,111,114,109,97,116,58,32,37,115,46,10,0,0,87,65,82,78,73,78,71,40,48,41,41,58,32,78,111,32,115,111,117,110,100,32,98,117,102,102,101,114,32,99,111,117,108,100,32,98,101,32,99,114,101,97,116,101,100,46,32,97,108,71,101,110,66,117,102,102,101,114,115,32,102,97,105,108,101,100,46,32,0,0,0,0,73,110,116,101,114,110,97,108,32,101,114,114,111,114,58,32,98,117,102,102,101,114,32,97,114,114,97,121,32,105,115,110,39,116,32,108,97,114,103,101,32,101,110,111,117,103,104,46,10,0,0,0,0,0,0,0,73,110,116,101,114,110,97,108,32,101,114,114,111,114,58,32,111,117,116,32,111,102,32,109,101,109,111,114,121,46,10,0,85,110,107,110,111,119,110,32,101,114,114,111,114,32,40,37,100,41,46,10,0,0,0,0,87,65,82,78,73,78,71,40,48,41,41,58,32,67,97,110,39,116,32,112,97,115,115,32,97,117,100,105,111,32,116,111,32,79,112,101,110,65,76,46,32,97,108,66,117,102,102,101,114,68,97,116,97,32,102,97,105,108,101,100,46,32,83,111,117,110,100,32,109,97,121,32,110,111,116,32,119,111,114,107,46,10,0,0,0,0,0,0,87,65,86,69], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+386048);
/* memory initializer */ allocate([69,82,82,79,82,32,40,49,41,58,32,67,97,110,39,116,32,115,99,104,101,100,117,108,101,32,109,111,114,101,32,102,117,110,99,116,105,111,110,115,46,0,0,0,0,0,0,0,80,108,101,97,115,101,44,32,100,101,102,105,110,101,32,87,95,77,65,88,95,83,67,72,69,68,85,76,73,78,71,32,105,110,32,99,111,110,102,47,99,111,110,102,46,104,32,119,105,116,104,32,97,32,118,97,108,117,101,32,98,105,103,103,101,114,32,116,104,97,110,32,116,104,101,32,99,117,114,114,101,110,116,32,37,100,46,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,82,82,79,82,58,32,71,76,87,32,110,111,116,32,115,117,112,112,111,114,116,101,100,46,10,0,0,0,0,0,0,111,98,106,101,99,116,95,99,111,108,111,114,0,0,0,0,109,111,100,101,108,95,118,105,101,119,95,109,97,116,114,105,120,0,0,0,0,0,0,0,111,98,106,101,99,116,95,115,105,122,101,0,0,0,0,0,105,110,116,101,103,101,114,0,116,105,109,101,0,0,0,0,118,101,114,116,101,120,95,112,111,115,105,116,105,111,110,0,49,45,116,105,116,108,101,0,115,104,97,100,101,114,115,47,49,45,116,105,116,108,101,0,50,45,112,49,0,0,0,0,115,104,97,100,101,114,115,47,50,45,112,49,0,0,0,0,51,45,101,120,105,116,0,0,115,104,97,100,101,114,115,47,51,45,101,120,105,116,0,0,52,45,105,110,105,116,105,97,108,0,0,0,0,0,0,0,115,104,97,100,101,114,115,47,52,45,105,110,105,116,105,97,108,0,0,0,0,0,0,0,53,45,115,99,114,101,101,110,0,0,0,0,0,0,0,0,115,104,97,100,101,114,115,47,53,45,115,99,114,101,101,110,0,0,0,0,0,0,0,0,54,45,112,97,100,100,108,101,0,0,0,0,0,0,0,0,115,104,97,100,101,114,115,47,54,45,112,97,100,100,108,101,0,0,0,0,0,0,0,0,55,45,98,97,108,108,0,0,115,104,97,100,101,114,115,47,55,45,98,97,108,108,0,0,56,45,115,99,111,114,101,0,115,104,97,100,101,114,115,47,56,45,115,99,111,114,101,0,57,45,105,116,101,109,0,0,115,104,97,100,101,114,115,47,57,45,105,116,101,109,0,0,116,101,120,116,117,114,101,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+652160);





/* no memory initializer */
var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  
  var GL={counter:1,lastError:0,buffers:[],mappedBuffers:{},programs:[],framebuffers:[],renderbuffers:[],textures:[],uniforms:[],shaders:[],vaos:[],contexts:[],currentContext:null,byteSizeByTypeRoot:5120,byteSizeByType:[1,1,2,2,4,4,4,2,3,4,8],programInfos:{},stringCache:{},packAlignment:4,unpackAlignment:4,init:function () {
        GL.miniTempBuffer = new Float32Array(GL.MINI_TEMP_BUFFER_SIZE);
        for (var i = 0; i < GL.MINI_TEMP_BUFFER_SIZE; i++) {
          GL.miniTempBufferViews[i] = GL.miniTempBuffer.subarray(0, i+1);
        }
      },recordError:function recordError(errorCode) {
        if (!GL.lastError) {
          GL.lastError = errorCode;
        }
      },getNewId:function (table) {
        var ret = GL.counter++;
        for (var i = table.length; i < ret; i++) {
          table[i] = null;
        }
        return ret;
      },MINI_TEMP_BUFFER_SIZE:16,miniTempBuffer:null,miniTempBufferViews:[0],getSource:function (shader, count, string, length) {
        var source = '';
        for (var i = 0; i < count; ++i) {
          var frag;
          if (length) {
            var len = HEAP32[(((length)+(i*4))>>2)];
            if (len < 0) {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
            } else {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)], len);
            }
          } else {
            frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
          }
          source += frag;
        }
        return source;
      },computeImageSize:function (width, height, sizePerPixel, alignment) {
        function roundedToNextMultipleOf(x, y) {
          return Math.floor((x + y - 1) / y) * y
        }
        var plainRowSize = width * sizePerPixel;
        var alignedRowSize = roundedToNextMultipleOf(plainRowSize, alignment);
        return (height <= 0) ? 0 :
                 ((height - 1) * alignedRowSize + plainRowSize);
      },get:function (name_, p, type) {
        // Guard against user passing a null pointer.
        // Note that GLES2 spec does not say anything about how passing a null pointer should be treated.
        // Testing on desktop core GL 3, the application crashes on glGetIntegerv to a null pointer, but
        // better to report an error instead of doing anything random.
        if (!p) {
          GL.recordError(0x0501 /* GL_INVALID_VALUE */);
          return;
        }
        var ret = undefined;
        switch(name_) { // Handle a few trivial GLES values
          case 0x8DFA: // GL_SHADER_COMPILER
            ret = 1;
            break;
          case 0x8DF8: // GL_SHADER_BINARY_FORMATS
            if (type !== 'Integer') {
              GL.recordError(0x0500); // GL_INVALID_ENUM
            }
            return; // Do not write anything to the out pointer, since no binary formats are supported.
          case 0x8DF9: // GL_NUM_SHADER_BINARY_FORMATS
            ret = 0;
            break;
          case 0x86A2: // GL_NUM_COMPRESSED_TEXTURE_FORMATS
            // WebGL doesn't have GL_NUM_COMPRESSED_TEXTURE_FORMATS (it's obsolete since GL_COMPRESSED_TEXTURE_FORMATS returns a JS array that can be queried for length),
            // so implement it ourselves to allow C++ GLES2 code get the length.
            var formats = GLctx.getParameter(0x86A3 /*GL_COMPRESSED_TEXTURE_FORMATS*/);
            ret = formats.length;
            break;
          case 0x8B9A: // GL_IMPLEMENTATION_COLOR_READ_TYPE
            ret = 0x1401; // GL_UNSIGNED_BYTE
            break;
          case 0x8B9B: // GL_IMPLEMENTATION_COLOR_READ_FORMAT
            ret = 0x1908; // GL_RGBA
            break;
        }
  
        if (ret === undefined) {
          var result = GLctx.getParameter(name_);
          switch (typeof(result)) {
            case "number":
              ret = result;
              break;
            case "boolean":
              ret = result ? 1 : 0;
              break;
            case "string":
              GL.recordError(0x0500); // GL_INVALID_ENUM
              return;
            case "object":
              if (result === null) {
                // null is a valid result for some (e.g., which buffer is bound - perhaps nothing is bound), but otherwise
                // can mean an invalid name_, which we need to report as an error
                switch(name_) {
                  case 0x8894: // ARRAY_BUFFER_BINDING
                  case 0x8B8D: // CURRENT_PROGRAM
                  case 0x8895: // ELEMENT_ARRAY_BUFFER_BINDING
                  case 0x8CA6: // FRAMEBUFFER_BINDING
                  case 0x8CA7: // RENDERBUFFER_BINDING
                  case 0x8069: // TEXTURE_BINDING_2D
                  case 0x8514: { // TEXTURE_BINDING_CUBE_MAP
                    ret = 0;
                    break;
                  }
                  default: {
                    GL.recordError(0x0500); // GL_INVALID_ENUM
                    return;
                  }
                }
              } else if (result instanceof Float32Array ||
                         result instanceof Uint32Array ||
                         result instanceof Int32Array ||
                         result instanceof Array) {
                for (var i = 0; i < result.length; ++i) {
                  switch (type) {
                    case 'Integer': HEAP32[(((p)+(i*4))>>2)]=result[i];   break;
                    case 'Float':   HEAPF32[(((p)+(i*4))>>2)]=result[i]; break;
                    case 'Boolean': HEAP8[(((p)+(i))>>0)]=result[i] ? 1 : 0;    break;
                    default: throw 'internal glGet error, bad type: ' + type;
                  }
                }
                return;
              } else if (result instanceof WebGLBuffer ||
                         result instanceof WebGLProgram ||
                         result instanceof WebGLFramebuffer ||
                         result instanceof WebGLRenderbuffer ||
                         result instanceof WebGLTexture) {
                ret = result.name | 0;
              } else {
                GL.recordError(0x0500); // GL_INVALID_ENUM
                return;
              }
              break;
            default:
              GL.recordError(0x0500); // GL_INVALID_ENUM
              return;
          }
        }
  
        switch (type) {
          case 'Integer': HEAP32[((p)>>2)]=ret;    break;
          case 'Float':   HEAPF32[((p)>>2)]=ret;  break;
          case 'Boolean': HEAP8[((p)>>0)]=ret ? 1 : 0; break;
          default: throw 'internal glGet error, bad type: ' + type;
        }
      },getTexPixelData:function (type, format, width, height, pixels, internalFormat) {
        var sizePerPixel;
        var numChannels;
        switch(format) {
          case 0x1906 /* GL_ALPHA */:
          case 0x1909 /* GL_LUMINANCE */:
          case 0x1902 /* GL_DEPTH_COMPONENT */:
          case 0x1903 /* GL_RED */:
            numChannels = 1;
            break;
          case 0x190A /* GL_LUMINANCE_ALPHA */:
          case 0x8227 /* GL_RG */:
            numChannels = 2;
            break;
          case 0x1907 /* GL_RGB */:
            numChannels = 3;
            break;
          case 0x1908 /* GL_RGBA */:
            numChannels = 4;
            break;
          default:
            GL.recordError(0x0500); // GL_INVALID_ENUM
            return {
              pixels: null,
              internalFormat: 0x0
            };
        }
        switch (type) {
          case 0x1401 /* GL_UNSIGNED_BYTE */:
            sizePerPixel = numChannels*1;
            break;
          case 0x1403 /* GL_UNSIGNED_SHORT */:
          case 0x8D61 /* GL_HALF_FLOAT_OES */:
            sizePerPixel = numChannels*2;
            break;
          case 0x1405 /* GL_UNSIGNED_INT */:
          case 0x1406 /* GL_FLOAT */:
            sizePerPixel = numChannels*4;
            break;
          case 0x84FA /* UNSIGNED_INT_24_8_WEBGL */:
            sizePerPixel = 4;
            break;
          case 0x8363 /* GL_UNSIGNED_SHORT_5_6_5 */:
          case 0x8033 /* GL_UNSIGNED_SHORT_4_4_4_4 */:
          case 0x8034 /* GL_UNSIGNED_SHORT_5_5_5_1 */:
            sizePerPixel = 2;
            break;
          default:
            GL.recordError(0x0500); // GL_INVALID_ENUM
            return {
              pixels: null,
              internalFormat: 0x0
            };
        }
        var bytes = GL.computeImageSize(width, height, sizePerPixel, GL.unpackAlignment);
        if (type == 0x1401 /* GL_UNSIGNED_BYTE */) {
          pixels = HEAPU8.subarray((pixels),(pixels+bytes));
        } else if (type == 0x1406 /* GL_FLOAT */) {
          pixels = HEAPF32.subarray((pixels)>>2,(pixels+bytes)>>2);
        } else if (type == 0x1405 /* GL_UNSIGNED_INT */ || type == 0x84FA /* UNSIGNED_INT_24_8_WEBGL */) {
          pixels = HEAPU32.subarray((pixels)>>2,(pixels+bytes)>>2);
        } else {
          pixels = HEAPU16.subarray((pixels)>>1,(pixels+bytes)>>1);
        }
        return {
          pixels: pixels,
          internalFormat: internalFormat
        };
      },validateBufferTarget:function (target) {
        switch (target) {
          case 0x8892: // GL_ARRAY_BUFFER
          case 0x8893: // GL_ELEMENT_ARRAY_BUFFER
          case 0x8F36: // GL_COPY_READ_BUFFER
          case 0x8F37: // GL_COPY_WRITE_BUFFER
          case 0x88EB: // GL_PIXEL_PACK_BUFFER
          case 0x88EC: // GL_PIXEL_UNPACK_BUFFER
          case 0x8C2A: // GL_TEXTURE_BUFFER
          case 0x8C8E: // GL_TRANSFORM_FEEDBACK_BUFFER
          case 0x8A11: // GL_UNIFORM_BUFFER
            return true;
          default:
            return false;
        }
      },createContext:function (canvas, webGLContextAttributes) {
        if (typeof webGLContextAttributes.majorVersion === 'undefined' && typeof webGLContextAttributes.minorVersion === 'undefined') {
          webGLContextAttributes.majorVersion = 1;
          webGLContextAttributes.minorVersion = 0;
        }
        var ctx;
        var errorInfo = '?';
        function onContextCreationError(event) {
          errorInfo = event.statusMessage || errorInfo;
        }
        try {
          canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);
          try {
            if (webGLContextAttributes.majorVersion == 1 && webGLContextAttributes.minorVersion == 0) {
              ctx = canvas.getContext("webgl", webGLContextAttributes) || canvas.getContext("experimental-webgl", webGLContextAttributes);
            } else if (webGLContextAttributes.majorVersion == 2 && webGLContextAttributes.minorVersion == 0) {
              ctx = canvas.getContext("webgl2", webGLContextAttributes) || canvas.getContext("experimental-webgl2", webGLContextAttributes);
            } else {
              throw 'Unsupported WebGL context version ' + majorVersion + '.' + minorVersion + '!'
            }
          } finally {
            canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas: ' + [errorInfo, e, JSON.stringify(webGLContextAttributes)]);
          return 0;
        }
        // possible GL_DEBUG entry point: ctx = wrapDebugGL(ctx);
  
        if (!ctx) return 0;
        return GL.registerContext(ctx, webGLContextAttributes);
      },registerContext:function (ctx, webGLContextAttributes) {
        var handle = GL.getNewId(GL.contexts);
        var context = {
          handle: handle,
          version: webGLContextAttributes.majorVersion,
          GLctx: ctx
        };
        // Store the created context object so that we can access the context given a canvas without having to pass the parameters again.
        if (ctx.canvas) ctx.canvas.GLctxObject = context;
        GL.contexts[handle] = context;
        if (typeof webGLContextAttributes['enableExtensionsByDefault'] === 'undefined' || webGLContextAttributes.enableExtensionsByDefault) {
          GL.initExtensions(context);
        }
        return handle;
      },makeContextCurrent:function (contextHandle) {
        var context = GL.contexts[contextHandle];
        if (!context) return false;
        GLctx = Module.ctx = context.GLctx; // Active WebGL context object.
        GL.currentContext = context; // Active Emscripten GL layer context object.
        return true;
      },getContext:function (contextHandle) {
        return GL.contexts[contextHandle];
      },deleteContext:function (contextHandle) {
        if (GL.currentContext === GL.contexts[contextHandle]) GL.currentContext = null;
        if (typeof JSEvents === 'object') JSEvents.removeAllHandlersOnTarget(GL.contexts[contextHandle].GLctx.canvas); // Release all JS event handlers on the DOM element that the GL context is associated with since the context is now deleted.
        if (GL.contexts[contextHandle] && GL.contexts[contextHandle].GLctx.canvas) GL.contexts[contextHandle].GLctx.canvas.GLctxObject = undefined; // Make sure the canvas object no longer refers to the context object so there are no GC surprises.
        GL.contexts[contextHandle] = null;
      },initExtensions:function (context) {
  
        // If this function is called without a specific context object, init the extensions of the currently active context.
        if (!context) context = GL.currentContext;
  
        if (context.initExtensionsDone) return;
        context.initExtensionsDone = true;
  
        var GLctx = context.GLctx;
  
        context.maxVertexAttribs = GLctx.getParameter(GLctx.MAX_VERTEX_ATTRIBS);
  
        // Detect the presence of a few extensions manually, this GL interop layer itself will need to know if they exist. 
        context.compressionExt = GLctx.getExtension('WEBGL_compressed_texture_s3tc');
        context.anisotropicExt = GLctx.getExtension('EXT_texture_filter_anisotropic');
        context.floatExt = GLctx.getExtension('OES_texture_float');
  
        // Extension available from Firefox 26 and Google Chrome 30
        context.instancedArraysExt = GLctx.getExtension('ANGLE_instanced_arrays');
        
        // Extension available from Firefox 25 and WebKit
        context.vaoExt = GLctx.getExtension('OES_vertex_array_object');
  
        if (context.version === 2) {
          // drawBuffers is available in WebGL2 by default.
          context.drawBuffersExt = function(n, bufs) {
            GLctx.drawBuffers(n, bufs);
          };
        } else {
          var ext = GLctx.getExtension('WEBGL_draw_buffers');
          if (ext) {
            context.drawBuffersExt = function(n, bufs) {
              ext.drawBuffersWEBGL(n, bufs);
            };
          }
        }
  
        // These are the 'safe' feature-enabling extensions that don't add any performance impact related to e.g. debugging, and
        // should be enabled by default so that client GLES2/GL code will not need to go through extra hoops to get its stuff working.
        // As new extensions are ratified at http://www.khronos.org/registry/webgl/extensions/ , feel free to add your new extensions
        // here, as long as they don't produce a performance impact for users that might not be using those extensions.
        // E.g. debugging-related extensions should probably be off by default.
        var automaticallyEnabledExtensions = [ "OES_texture_float", "OES_texture_half_float", "OES_standard_derivatives",
                                               "OES_vertex_array_object", "WEBGL_compressed_texture_s3tc", "WEBGL_depth_texture",
                                               "OES_element_index_uint", "EXT_texture_filter_anisotropic", "ANGLE_instanced_arrays",
                                               "OES_texture_float_linear", "OES_texture_half_float_linear", "WEBGL_compressed_texture_atc",
                                               "WEBGL_compressed_texture_pvrtc", "EXT_color_buffer_half_float", "WEBGL_color_buffer_float",
                                               "EXT_frag_depth", "EXT_sRGB", "WEBGL_draw_buffers", "WEBGL_shared_resources",
                                               "EXT_shader_texture_lod" ];
  
        function shouldEnableAutomatically(extension) {
          var ret = false;
          automaticallyEnabledExtensions.forEach(function(include) {
            if (ext.indexOf(include) != -1) {
              ret = true;
            }
          });
          return ret;
        }
  
        var exts = GLctx.getSupportedExtensions();
        if (exts && exts.length > 0) {
          GLctx.getSupportedExtensions().forEach(function(ext) {
            if (automaticallyEnabledExtensions.indexOf(ext) != -1) {
              GLctx.getExtension(ext); // Calling .getExtension enables that extension permanently, no need to store the return value to be enabled.
            }
          });
        }
      },populateUniformTable:function (program) {
        var p = GL.programs[program];
        GL.programInfos[program] = {
          uniforms: {},
          maxUniformLength: 0, // This is eagerly computed below, since we already enumerate all uniforms anyway.
          maxAttributeLength: -1 // This is lazily computed and cached, computed when/if first asked, "-1" meaning not computed yet.
        };
  
        var ptable = GL.programInfos[program];
        var utable = ptable.uniforms;
        // A program's uniform table maps the string name of an uniform to an integer location of that uniform.
        // The global GL.uniforms map maps integer locations to WebGLUniformLocations.
        var numUniforms = GLctx.getProgramParameter(p, GLctx.ACTIVE_UNIFORMS);
        for (var i = 0; i < numUniforms; ++i) {
          var u = GLctx.getActiveUniform(p, i);
  
          var name = u.name;
          ptable.maxUniformLength = Math.max(ptable.maxUniformLength, name.length+1);
  
          // Strip off any trailing array specifier we might have got, e.g. "[0]".
          if (name.indexOf(']', name.length-1) !== -1) {
            var ls = name.lastIndexOf('[');
            name = name.slice(0, ls);
          }
  
          // Optimize memory usage slightly: If we have an array of uniforms, e.g. 'vec3 colors[3];', then 
          // only store the string 'colors' in utable, and 'colors[0]', 'colors[1]' and 'colors[2]' will be parsed as 'colors'+i.
          // Note that for the GL.uniforms table, we still need to fetch the all WebGLUniformLocations for all the indices.
          var loc = GLctx.getUniformLocation(p, name);
          var id = GL.getNewId(GL.uniforms);
          utable[name] = [u.size, id];
          GL.uniforms[id] = loc;
  
          for (var j = 1; j < u.size; ++j) {
            var n = name + '['+j+']';
            loc = GLctx.getUniformLocation(p, n);
            id = GL.getNewId(GL.uniforms);
  
            GL.uniforms[id] = loc;
          }
        }
      }};function _glFlush() { GLctx.flush() }

  
  
  function _glGetString(name_) {
      if (GL.stringCache[name_]) return GL.stringCache[name_];
      var ret; 
      switch(name_) {
        case 0x1F00 /* GL_VENDOR */:
        case 0x1F01 /* GL_RENDERER */:
        case 0x1F02 /* GL_VERSION */:
          ret = allocate(intArrayFromString(GLctx.getParameter(name_)), 'i8', ALLOC_NORMAL);
          break;
        case 0x1F03 /* GL_EXTENSIONS */:
          var exts = GLctx.getSupportedExtensions();
          var gl_exts = [];
          for (var i in exts) {
            gl_exts.push(exts[i]);
            gl_exts.push("GL_" + exts[i]);
          }
          ret = allocate(intArrayFromString(gl_exts.join(' ')), 'i8', ALLOC_NORMAL);
          break;
        case 0x8B8C /* GL_SHADING_LANGUAGE_VERSION */:
          ret = allocate(intArrayFromString('OpenGL ES GLSL 1.00 (WebGL)'), 'i8', ALLOC_NORMAL);
          break;
        default:
          GL.recordError(0x0500/*GL_INVALID_ENUM*/);
          return 0;
      }
      GL.stringCache[name_] = ret;
      return ret;
    }var GLEW={isLinaroFork:1,extensions:null,error:{0:null,1:null,2:null,3:null,4:null,5:null,6:null,7:null,8:null},version:{1:null,2:null,3:null,4:null},errorStringConstantFromCode:function (error) {
        if (GLEW.isLinaroFork) {
          switch (error) {
            case 4:return "OpenGL ES lib expected, found OpenGL lib"; // GLEW_ERROR_NOT_GLES_VERSION
            case 5:return "OpenGL lib expected, found OpenGL ES lib"; // GLEW_ERROR_GLES_VERSION
            case 6:return "Missing EGL version"; // GLEW_ERROR_NO_EGL_VERSION
            case 7:return "EGL 1.1 and up are supported"; // GLEW_ERROR_EGL_VERSION_10_ONLY
            default:break;
          }
        }
  
        switch (error) {
          case 0:return "No error"; // GLEW_OK || GLEW_NO_ERROR
          case 1:return "Missing GL version"; // GLEW_ERROR_NO_GL_VERSION
          case 2:return "GL 1.1 and up are supported"; // GLEW_ERROR_GL_VERSION_10_ONLY
          case 3:return "GLX 1.2 and up are supported"; // GLEW_ERROR_GLX_VERSION_11_ONLY
          default:return null;
        }
      },errorString:function (error) {
        if (!GLEW.error[error]) {
          var string = GLEW.errorStringConstantFromCode(error);
          if (!string) {
            string = "Unknown error";
            error = 8; // prevent array from growing more than this
          }
          GLEW.error[error] = allocate(intArrayFromString(string), 'i8', ALLOC_NORMAL);
        }
        return GLEW.error[error];
      },versionStringConstantFromCode:function (name) {
        switch (name) {
          case 1:return "1.10.0"; // GLEW_VERSION
          case 2:return "1"; // GLEW_VERSION_MAJOR
          case 3:return "10"; // GLEW_VERSION_MINOR
          case 4:return "0"; // GLEW_VERSION_MICRO
          default:return null;
        }
      },versionString:function (name) {
        if (!GLEW.version[name]) {
          var string = GLEW.versionStringConstantFromCode(name);
          if (!string)
            return 0;
          GLEW.version[name] = allocate(intArrayFromString(string), 'i8', ALLOC_NORMAL);
        }
        return GLEW.version[name];
      },extensionIsSupported:function (name) {
        if (!GLEW.extensions) {
          GLEW.extensions = Pointer_stringify(_glGetString(0x1F03)).split(' ');
        }
  
        if (GLEW.extensions.indexOf(name) != -1)
          return 1;
  
        // extensions from GLEmulations do not come unprefixed
        // so, try with prefix
        return (GLEW.extensions.indexOf("GL_" + name) != -1);
      }};function _glewInit() { return 0; }

  var _UItoF=true;

  function _glClearColor(x0, x1, x2, x3) { GLctx.clearColor(x0, x1, x2, x3) }

  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var fd = process.stdin.fd;
              // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
              var usingDevice = false;
              try {
                fd = fs.openSync('/dev/stdin', 'r');
                usingDevice = true;
              } catch (e) {}
  
              bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
  
      /*
      // Disabled, see https://github.com/kripken/emscripten/issues/2770
      stream = FS.getStreamFromPtr(stream);
      if (stream.stream_ops.flush) {
        stream.stream_ops.flush(stream);
      }
      */
    }var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function (ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function (stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(lookup.node.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        FS.close(stream);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) return -1;
      return stream.fd;
    }function _fclose(stream) {
      // int fclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
      var fd = _fileno(stream);
      return _close(fd);
    }

  function _glLinkProgram(program) {
      GLctx.linkProgram(GL.programs[program]);
      GL.programInfos[program] = null; // uniforms no longer keep the same names after linking
      GL.populateUniformTable(program);
    }

  function _glBindTexture(target, texture) {
      GLctx.bindTexture(target, texture ? GL.textures[texture] : null);
    }

  
  
  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          setTimeout(Browser.mainLoop.runner, value); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(function() {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        });
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullScreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullScreen();
        }
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};
  
  
  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      var ptr = Runtime.dynamicAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;
  
  function _free() {
  }
  Module["_free"] = _free;
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  var _environ=allocate(1, "i32*", ALLOC_STATIC);var ___environ=_environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = 'web_user';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/web_user';
        ENV['LANG'] = 'C';
        ENV['_'] = Module['thisProgram'];
        // Allocate memory.
        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
        envPtr = allocate(MAX_ENV_VALUES * 4,
                          'i8*', ALLOC_STATIC);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocate(intArrayFromString(ENV[name]), 'i8', ALLOC_NORMAL);
      return _getenv.ret;
    }
  
  function _putenv(string) {
      // int putenv(char *string);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/putenv.html
      // WARNING: According to the standard (and the glibc implementation), the
      //          string is taken by reference so future changes are reflected.
      //          We copy it instead, possibly breaking some uses.
      if (string === 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
      string = Pointer_stringify(string);
      var splitPoint = string.indexOf('=')
      if (string === '' || string.indexOf('=') === -1) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
      var name = string.slice(0, splitPoint);
      var value = string.slice(splitPoint + 1);
      if (!(name in ENV) || ENV[name] !== value) {
        ENV[name] = value;
        ___buildEnvironment(ENV);
      }
      return 0;
    }
  
  function _SDL_RWFromConstMem(mem, size) {
      var id = SDL.rwops.length; // TODO: recycle ids when they are null
      SDL.rwops.push({ bytes: mem, count: size });
      return id;
    }function _TTF_FontHeight(font) {
      var fontData = SDL.fonts[font];
      return fontData.size;
    }function _TTF_SizeText(font, text, w, h) {
      var fontData = SDL.fonts[font];
      if (w) {
        HEAP32[((w)>>2)]=SDL.estimateTextWidth(fontData, Pointer_stringify(text));
      }
      if (h) {
        HEAP32[((h)>>2)]=fontData.size;
      }
      return 0;
    }function _TTF_RenderText_Solid(font, text, color) {
      // XXX the font and color are ignored
      text = Pointer_stringify(text) || ' '; // if given an empty string, still return a valid surface
      var fontData = SDL.fonts[font];
      var w = SDL.estimateTextWidth(fontData, text);
      var h = fontData.size;
      var color = SDL.loadColorToCSSRGB(color); // XXX alpha breaks fonts?
      var fontString = h + 'px ' + fontData.name;
      var surf = SDL.makeSurface(w, h, 0, false, 'text:' + text); // bogus numbers..
      var surfData = SDL.surfaces[surf];
      surfData.ctx.save();
      surfData.ctx.fillStyle = color;
      surfData.ctx.font = fontString;
      surfData.ctx.textBaseline = 'top';
      surfData.ctx.fillText(text, 0, 0);
      surfData.ctx.restore();
      return surf;
    }function _Mix_HaltMusic() {
      var audio = SDL.music.audio;
      if (audio) {
        audio.src = audio.src; // rewind <media> element
        audio.currentPosition = 0; // rewind Web Audio graph playback.
        audio.pause();
      }
      SDL.music.audio = null;
      if (SDL.hookMusicFinished) {
        Runtime.dynCall('v', SDL.hookMusicFinished);
      }
      return 0;
    }function _Mix_PlayMusic(id, loops) {
      // Pause old music if it exists.
      if (SDL.music.audio) {
        if (!SDL.music.audio.paused) Module.printErr('Music is already playing. ' + SDL.music.source);
        SDL.music.audio.pause();
      }
      var info = SDL.audios[id];
      var audio;
      if (info.webAudio) { // Play via Web Audio API
        // Create an instance of the WebAudio object.
        audio = {};
        audio.resource = info; // This new webAudio object is an instance that refers to this existing resource.
        audio.paused = false;
        audio.currentPosition = 0;
        audio.play = function() { SDL.playWebAudio(this); }
        audio.pause = function() { SDL.pauseWebAudio(this); }
      } else if (info.audio) { // Play via the <audio> element
        audio = info.audio;
      }
      audio['onended'] = function() { if (SDL.music.audio == this) _Mix_HaltMusic(); } // will send callback
      audio.loop = loops != 0; // TODO: handle N loops for finite N
      audio.volume = SDL.music.volume;
      SDL.music.audio = audio;
      audio.play();
      return 0;
    }function _Mix_FreeChunk(id) {
      SDL.audios[id] = null;
    }function _Mix_LoadWAV_RW(rwopsID, freesrc) {
      var rwops = SDL.rwops[rwopsID];
  
  
      if (rwops === undefined)
        return 0;
  
      var filename = '';
      var audio;
      var webAudio;
      var bytes;
  
      if (rwops.filename !== undefined) {
        filename = PATH.resolve(rwops.filename);
        var raw = Module["preloadedAudios"][filename];
        if (!raw) {
          if (raw === null) Module.printErr('Trying to reuse preloaded audio, but freePreloadedMediaOnUse is set!');
          if (!Module.noAudioDecoding) Runtime.warnOnce('Cannot find preloaded audio ' + filename);
  
          // see if we can read the file-contents from the in-memory FS
          try {
            bytes = FS.readFile(filename);
          } catch (e) {
            Module.printErr('Couldn\'t find file for: ' + filename);
            return 0;
          }
        }
        if (Module['freePreloadedMediaOnUse']) {
          Module["preloadedAudios"][filename] = null;
        }
        audio = raw;
      }
      else if (rwops.bytes !== undefined) {
        // For Web Audio context buffer decoding, we must make a clone of the audio data, but for <media> element,
        // a view to existing data is sufficient.
        if (SDL.webAudioAvailable()) bytes = HEAPU8.buffer.slice(rwops.bytes, rwops.bytes + rwops.count);
        else bytes = HEAPU8.subarray(rwops.bytes, rwops.bytes + rwops.count);
      }
      else {
        return 0;
      }
  
      var arrayBuffer = bytes ? bytes.buffer || bytes : bytes;
  
      // To allow user code to work around browser bugs with audio playback on <audio> elements an Web Audio, enable
      // the user code to hook in a callback to decide on a file basis whether each file should use Web Audio or <audio> for decoding and playback.
      // In particular, see https://bugzilla.mozilla.org/show_bug.cgi?id=654787 and ?id=1012801 for tradeoffs.
      var canPlayWithWebAudio = Module['SDL_canPlayWithWebAudio'] === undefined || Module['SDL_canPlayWithWebAudio'](filename, arrayBuffer);
  
      if (bytes !== undefined && SDL.webAudioAvailable() && canPlayWithWebAudio) {
        audio = undefined;
        webAudio = {};
        // The audio decoding process is asynchronous, which gives trouble if user code plays the audio data back immediately
        // after loading. Therefore prepare an array of callback handlers to run when this audio decoding is complete, which
        // will then start the playback (with some delay).
        webAudio.onDecodeComplete = []; // While this member array exists, decoding hasn't finished yet.
        function onDecodeComplete(data) {
          webAudio.decodedBuffer = data;
          // Call all handlers that were waiting for this decode to finish, and clear the handler list.
          webAudio.onDecodeComplete.forEach(function(e) { e(); });
          webAudio.onDecodeComplete = undefined; // Don't allow more callback handlers since audio has finished decoding.
        }
  
        SDL.audioContext['decodeAudioData'](arrayBuffer, onDecodeComplete);
      } else if (audio === undefined && bytes) {
        // Here, we didn't find a preloaded audio but we either were passed a filepath for
        // which we loaded bytes, or we were passed some bytes
        var blob = new Blob([bytes], {type: rwops.mimetype});
        var url = URL.createObjectURL(blob);
        audio = new Audio();
        audio.src = url;
        audio.mozAudioChannelType = 'content'; // bugzilla 910340
      }
  
      var id = SDL.audios.length;
      // Keep the loaded audio in the audio arrays, ready for playback
      SDL.audios.push({
        source: filename,
        audio: audio, // Points to the <audio> element, if loaded
        webAudio: webAudio // Points to a Web Audio -specific resource object, if loaded
      });
      return id;
    }function _Mix_PlayChannel(channel, id, loops) {
      // TODO: handle fixed amount of N loops. Currently loops either 0 or infinite times.
  
      // Get the audio element associated with the ID
      var info = SDL.audios[id];
      if (!info) return -1;
      if (!info.audio && !info.webAudio) return -1;
  
      // If the user asks us to allocate a channel automatically, get the first
      // free one.
      if (channel == -1) {
        for (var i = SDL.channelMinimumNumber; i < SDL.numChannels; i++) {
          if (!SDL.channels[i].audio) {
            channel = i;
            break;
          }
        }
        if (channel == -1) {
          Module.printErr('All ' + SDL.numChannels + ' channels in use!');
          return -1;
        }
      }
      var channelInfo = SDL.channels[channel];
      var audio;
      if (info.webAudio) {
        // Create an instance of the WebAudio object.
        audio = {};
        audio.resource = info; // This new object is an instance that refers to this existing resource.
        audio.paused = false;
        audio.currentPosition = 0;
        // Make our instance look similar to the instance of a <media> to make api simple.
        audio.play = function() { SDL.playWebAudio(this); }
        audio.pause = function() { SDL.pauseWebAudio(this); }
      } else {
        // We clone the audio node to utilize the preloaded audio buffer, since
        // the browser has already preloaded the audio file.
        audio = info.audio.cloneNode(true);
        audio.numChannels = info.audio.numChannels;
        audio.frequency = info.audio.frequency;
      }
      audio['onended'] = function SDL_audio_onended() { // TODO: cache these
        if (channelInfo.audio == this) { channelInfo.audio.paused = true; channelInfo.audio = null; }
        if (SDL.channelFinished) Runtime.getFuncWrapper(SDL.channelFinished, 'vi')(channel);
      }
      channelInfo.audio = audio;
      // TODO: handle N loops. Behavior matches Mix_PlayMusic
      audio.loop = loops != 0;
      audio.volume = channelInfo.volume;
      audio.play();
      return channel;
    }function _SDL_PauseAudio(pauseOn) {
      if (!SDL.audio) {
        return;
      }
      if (pauseOn) {
        if (SDL.audio.timer !== undefined) {
          clearTimeout(SDL.audio.timer);
          SDL.audio.numAudioTimersPending = 0;
          SDL.audio.timer = undefined;
        }
      } else if (!SDL.audio.timer) {
        // Start the audio playback timer callback loop.
        SDL.audio.numAudioTimersPending = 1;
        SDL.audio.timer = Browser.safeSetTimeout(SDL.audio.caller, 1);
      }
      SDL.audio.paused = pauseOn;
    }function _SDL_CloseAudio() {
      if (SDL.audio) {
        _SDL_PauseAudio(1);
        _free(SDL.audio.buffer);
        SDL.audio = null;
        SDL.allocateChannels(0);
      }
    }function _SDL_LockSurface(surf) {
      var surfData = SDL.surfaces[surf];
  
      surfData.locked++;
      if (surfData.locked > 1) return 0;
  
      if (!surfData.buffer) {
        surfData.buffer = _malloc(surfData.width * surfData.height * 4);
        HEAP32[(((surf)+(20))>>2)]=surfData.buffer;
      }
  
      // Mark in C/C++-accessible SDL structure
      // SDL_Surface has the following fields: Uint32 flags, SDL_PixelFormat *format; int w, h; Uint16 pitch; void *pixels; ...
      // So we have fields all of the same size, and 5 of them before us.
      // TODO: Use macros like in library.js
      HEAP32[(((surf)+(20))>>2)]=surfData.buffer;
  
      if (surf == SDL.screen && Module.screenIsReadOnly && surfData.image) return 0;
  
      if (SDL.defaults.discardOnLock) {
        if (!surfData.image) {
          surfData.image = surfData.ctx.createImageData(surfData.width, surfData.height);
        }
        if (!SDL.defaults.opaqueFrontBuffer) return;
      } else {
        surfData.image = surfData.ctx.getImageData(0, 0, surfData.width, surfData.height);
      }
  
      // Emulate desktop behavior and kill alpha values on the locked surface. (very costly!) Set SDL.defaults.opaqueFrontBuffer = false
      // if you don't want this.
      if (surf == SDL.screen && SDL.defaults.opaqueFrontBuffer) {
        var data = surfData.image.data;
        var num = data.length;
        for (var i = 0; i < num/4; i++) {
          data[i*4+3] = 255; // opacity, as canvases blend alpha
        }
      }
  
      if (SDL.defaults.copyOnLock && !SDL.defaults.discardOnLock) {
        // Copy pixel data to somewhere accessible to 'C/C++'
        if (surfData.isFlagSet(0x00200000 /* SDL_HWPALETTE */)) {
          // If this is neaded then
          // we should compact the data from 32bpp to 8bpp index.
          // I think best way to implement this is use
          // additional colorMap hash (color->index).
          // Something like this:
          //
          // var size = surfData.width * surfData.height;
          // var data = '';
          // for (var i = 0; i<size; i++) {
          //   var color = SDL.translateRGBAToColor(
          //     surfData.image.data[i*4   ], 
          //     surfData.image.data[i*4 +1], 
          //     surfData.image.data[i*4 +2], 
          //     255);
          //   var index = surfData.colorMap[color];
          //   HEAP8[(((surfData.buffer)+(i))>>0)]=index;
          // }
          throw 'CopyOnLock is not supported for SDL_LockSurface with SDL_HWPALETTE flag set' + new Error().stack;
        } else {
          HEAPU8.set(surfData.image.data, surfData.buffer);
        }
      }
  
      return 0;
    }
  
  function _SDL_FreeRW(rwopsID) {
      SDL.rwops[rwopsID] = null;
      while (SDL.rwops.length > 0 && SDL.rwops[SDL.rwops.length-1] === null) {
        SDL.rwops.pop();
      }
    }function _IMG_Load_RW(rwopsID, freeSrc) {
      try {
        // stb_image integration support
        function cleanup() {
          if (rwops && freeSrc) _SDL_FreeRW(rwopsID);
        };
        function addCleanup(func) {
          var old = cleanup;
          cleanup = function added_cleanup() {
            old();
            func();
          }
        }
        function callStbImage(func, params) {
          var x = Module['_malloc'](4);
          var y = Module['_malloc'](4);
          var comp = Module['_malloc'](4);
          addCleanup(function() {
            Module['_free'](x);
            Module['_free'](y);
            Module['_free'](comp);
            if (data) Module['_stbi_image_free'](data);
          });
          var data = Module['_' + func].apply(null, params.concat([x, y, comp, 0]));
          if (!data) return null;
          return {
            rawData: true,
            data: data,
            width: HEAP32[((x)>>2)],
            height: HEAP32[((y)>>2)],
            size: HEAP32[((x)>>2)] * HEAP32[((y)>>2)] * HEAP32[((comp)>>2)],
            bpp: HEAP32[((comp)>>2)]
          };
        }
  
        var rwops = SDL.rwops[rwopsID];
        if (rwops === undefined) {
          return 0;
        }
  
        var filename = rwops.filename;
        if (filename === undefined) {
          Runtime.warnOnce('Only file names that have been preloaded are supported for IMG_Load_RW. Consider using STB_IMAGE=1 if you want synchronous image decoding (see settings.js)');
          return 0;
        }
  
        if (!raw) {
          filename = PATH.resolve(filename);
          var raw = Module["preloadedImages"][filename];
          if (!raw) {
            if (raw === null) Module.printErr('Trying to reuse preloaded image, but freePreloadedMediaOnUse is set!');
            Runtime.warnOnce('Cannot find preloaded image ' + filename);
            Runtime.warnOnce('Cannot find preloaded image ' + filename + '. Consider using STB_IMAGE=1 if you want synchronous image decoding (see settings.js)');
            return 0;
          } else if (Module['freePreloadedMediaOnUse']) {
            Module["preloadedImages"][filename] = null;
          }
        }
  
        var surf = SDL.makeSurface(raw.width, raw.height, 0, false, 'load:' + filename);
        var surfData = SDL.surfaces[surf];
        surfData.ctx.globalCompositeOperation = "copy";
        if (!raw.rawData) {
          surfData.ctx.drawImage(raw, 0, 0, raw.width, raw.height, 0, 0, raw.width, raw.height);
        } else {
          var imageData = surfData.ctx.getImageData(0, 0, surfData.width, surfData.height);
          if (raw.bpp == 4) {
            // rgba
            imageData.data.set(HEAPU8.subarray((raw.data),(raw.data+raw.size)));
          } else if (raw.bpp == 3) {
            // rgb
            var pixels = raw.size/3;
            var data = imageData.data;
            var sourcePtr = raw.data;
            var destPtr = 0;
            for (var i = 0; i < pixels; i++) {
              data[destPtr++] = HEAPU8[((sourcePtr++)>>0)];
              data[destPtr++] = HEAPU8[((sourcePtr++)>>0)];
              data[destPtr++] = HEAPU8[((sourcePtr++)>>0)];
              data[destPtr++] = 255;
            }
          } else if (raw.bpp == 1) {
            // grayscale
            var pixels = raw.size;
            var data = imageData.data;
            var sourcePtr = raw.data;
            var destPtr = 0;
            for (var i = 0; i < pixels; i++) {
              var value = HEAPU8[((sourcePtr++)>>0)];
              data[destPtr++] = value;
              data[destPtr++] = value;
              data[destPtr++] = value;
              data[destPtr++] = 255;
            }
          } else {
            Module.printErr('cannot handle bpp ' + raw.bpp);
            return 0;
          }
          surfData.ctx.putImageData(imageData, 0, 0);
        }
        surfData.ctx.globalCompositeOperation = "source-over";
        // XXX SDL does not specify that loaded images must have available pixel data, in fact
        //     there are cases where you just want to blit them, so you just need the hardware
        //     accelerated version. However, code everywhere seems to assume that the pixels
        //     are in fact available, so we retrieve it here. This does add overhead though.
        _SDL_LockSurface(surf);
        surfData.locked--; // The surface is not actually locked in this hack
        if (SDL.GL) {
          // After getting the pixel data, we can free the canvas and context if we do not need to do 2D canvas blitting
          surfData.canvas = surfData.ctx = null;
        }
        return surf;
      } finally {
        cleanup();
      }
    }
  
  function _SDL_RWFromFile(_name, mode) {
      var id = SDL.rwops.length; // TODO: recycle ids when they are null
      var name = Pointer_stringify(_name)
      SDL.rwops.push({ filename: name, mimetype: Browser.getMimetype(name) });
      return id;
    }function _IMG_Load(filename){
      var rwops = _SDL_RWFromFile(filename);
      var result = _IMG_Load_RW(rwops, 1);
      return result;
    }function _SDL_UpperBlitScaled(src, srcrect, dst, dstrect) {
      return SDL.blitSurface(src, srcrect, dst, dstrect, true);
    }function _SDL_UpperBlit(src, srcrect, dst, dstrect) {
      return SDL.blitSurface(src, srcrect, dst, dstrect, false);
    }function _SDL_GetTicks() {
      return (Date.now() - SDL.startTime)|0;
    }var SDL={defaults:{width:320,height:200,copyOnLock:true,discardOnLock:false,opaqueFrontBuffer:true},version:null,surfaces:{},canvasPool:[],events:[],fonts:[null],audios:[null],rwops:[null],music:{audio:null,volume:1},mixerFrequency:22050,mixerFormat:32784,mixerNumChannels:2,mixerChunkSize:1024,channelMinimumNumber:0,GL:false,glAttributes:{0:3,1:3,2:2,3:0,4:0,5:1,6:16,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:1,16:0,17:0,18:0},keyboardState:null,keyboardMap:{},canRequestFullscreen:false,isRequestingFullscreen:false,textInput:false,startTime:null,initFlags:0,buttonState:0,modState:0,DOMButtons:[0,0,0],DOMEventToSDLEvent:{},TOUCH_DEFAULT_ID:0,eventHandler:null,eventHandlerContext:null,eventHandlerTemp:0,keyCodes:{16:1249,17:1248,18:1250,20:1081,33:1099,34:1102,35:1101,36:1098,37:1104,38:1106,39:1103,40:1105,44:316,45:1097,46:127,91:1251,93:1125,96:1122,97:1113,98:1114,99:1115,100:1116,101:1117,102:1118,103:1119,104:1120,105:1121,106:1109,107:1111,109:1110,110:1123,111:1108,112:1082,113:1083,114:1084,115:1085,116:1086,117:1087,118:1088,119:1089,120:1090,121:1091,122:1092,123:1093,124:1128,125:1129,126:1130,127:1131,128:1132,129:1133,130:1134,131:1135,132:1136,133:1137,134:1138,135:1139,144:1107,160:94,161:33,162:34,163:35,164:36,165:37,166:38,167:95,168:40,169:41,170:42,171:43,172:124,173:45,174:123,175:125,176:126,181:127,182:129,183:128,188:44,190:46,191:47,192:96,219:91,220:92,221:93,222:39,224:1251},scanCodes:{8:42,9:43,13:40,27:41,32:44,35:204,39:53,44:54,46:55,47:56,48:39,49:30,50:31,51:32,52:33,53:34,54:35,55:36,56:37,57:38,58:203,59:51,61:46,91:47,92:49,93:48,96:52,97:4,98:5,99:6,100:7,101:8,102:9,103:10,104:11,105:12,106:13,107:14,108:15,109:16,110:17,111:18,112:19,113:20,114:21,115:22,116:23,117:24,118:25,119:26,120:27,121:28,122:29,127:76,305:224,308:226,316:70},loadRect:function (rect) {
        return {
          x: HEAP32[((rect + 0)>>2)],
          y: HEAP32[((rect + 4)>>2)],
          w: HEAP32[((rect + 8)>>2)],
          h: HEAP32[((rect + 12)>>2)]
        };
      },updateRect:function (rect, r) {
        HEAP32[((rect)>>2)]=r.x;
        HEAP32[(((rect)+(4))>>2)]=r.y;
        HEAP32[(((rect)+(8))>>2)]=r.w;
        HEAP32[(((rect)+(12))>>2)]=r.h;
      },intersectionOfRects:function (first, second) {
        var leftX = Math.max(first.x, second.x);
        var leftY = Math.max(first.y, second.y);
        var rightX = Math.min(first.x + first.w, second.x + second.w);
        var rightY = Math.min(first.y + first.h, second.y + second.h);
  
        return {
          x: leftX,
          y: leftY,
          w: Math.max(leftX, rightX) - leftX,
          h: Math.max(leftY, rightY) - leftY
        }
      },checkPixelFormat:function (fmt) {
        // Canvas screens are always RGBA.
        var format = HEAP32[((fmt)>>2)];
        if (format != -2042224636) {
          Runtime.warnOnce('Unsupported pixel format!');
        }
      },loadColorToCSSRGB:function (color) {
        var rgba = HEAP32[((color)>>2)];
        return 'rgb(' + (rgba&255) + ',' + ((rgba >> 8)&255) + ',' + ((rgba >> 16)&255) + ')';
      },loadColorToCSSRGBA:function (color) {
        var rgba = HEAP32[((color)>>2)];
        return 'rgba(' + (rgba&255) + ',' + ((rgba >> 8)&255) + ',' + ((rgba >> 16)&255) + ',' + (((rgba >> 24)&255)/255) + ')';
      },translateColorToCSSRGBA:function (rgba) {
        return 'rgba(' + (rgba&0xff) + ',' + (rgba>>8 & 0xff) + ',' + (rgba>>16 & 0xff) + ',' + (rgba>>>24)/0xff + ')';
      },translateRGBAToCSSRGBA:function (r, g, b, a) {
        return 'rgba(' + (r&0xff) + ',' + (g&0xff) + ',' + (b&0xff) + ',' + (a&0xff)/255 + ')';
      },translateRGBAToColor:function (r, g, b, a) {
        return r | g << 8 | b << 16 | a << 24;
      },makeSurface:function (width, height, flags, usePageCanvas, source, rmask, gmask, bmask, amask) {
        flags = flags || 0;
        var is_SDL_HWSURFACE = flags & 0x00000001;
        var is_SDL_HWPALETTE = flags & 0x00200000;
        var is_SDL_OPENGL = flags & 0x04000000;
  
        var surf = _malloc(60);
        var pixelFormat = _malloc(44);
        //surface with SDL_HWPALETTE flag is 8bpp surface (1 byte)
        var bpp = is_SDL_HWPALETTE ? 1 : 4;
        var buffer = 0;
  
        // preemptively initialize this for software surfaces,
        // otherwise it will be lazily initialized inside of SDL_LockSurface
        if (!is_SDL_HWSURFACE && !is_SDL_OPENGL) {
          buffer = _malloc(width * height * 4);
        }
  
        HEAP32[((surf)>>2)]=flags;
        HEAP32[(((surf)+(4))>>2)]=pixelFormat;
        HEAP32[(((surf)+(8))>>2)]=width;
        HEAP32[(((surf)+(12))>>2)]=height;
        HEAP32[(((surf)+(16))>>2)]=width * bpp;  // assuming RGBA or indexed for now,
                                                                                          // since that is what ImageData gives us in browsers
        HEAP32[(((surf)+(20))>>2)]=buffer;
  
        HEAP32[(((surf)+(36))>>2)]=0;
        HEAP32[(((surf)+(40))>>2)]=0;
        HEAP32[(((surf)+(44))>>2)]=Module["canvas"].width;
        HEAP32[(((surf)+(48))>>2)]=Module["canvas"].height;
  
        HEAP32[(((surf)+(56))>>2)]=1;
  
        HEAP32[((pixelFormat)>>2)]=-2042224636;
        HEAP32[(((pixelFormat)+(4))>>2)]=0;// TODO
        HEAP8[(((pixelFormat)+(8))>>0)]=bpp * 8;
        HEAP8[(((pixelFormat)+(9))>>0)]=bpp;
  
        HEAP32[(((pixelFormat)+(12))>>2)]=rmask || 0x000000ff;
        HEAP32[(((pixelFormat)+(16))>>2)]=gmask || 0x0000ff00;
        HEAP32[(((pixelFormat)+(20))>>2)]=bmask || 0x00ff0000;
        HEAP32[(((pixelFormat)+(24))>>2)]=amask || 0xff000000;
  
        // Decide if we want to use WebGL or not
        SDL.GL = SDL.GL || is_SDL_OPENGL;
        var canvas;
        if (!usePageCanvas) {
          if (SDL.canvasPool.length > 0) {
            canvas = SDL.canvasPool.pop();
          } else {
            canvas = document.createElement('canvas');
          }
          canvas.width = width;
          canvas.height = height;
        } else {
          canvas = Module['canvas'];
        }
  
        var webGLContextAttributes = {
          antialias: ((SDL.glAttributes[13 /*SDL_GL_MULTISAMPLEBUFFERS*/] != 0) && (SDL.glAttributes[14 /*SDL_GL_MULTISAMPLESAMPLES*/] > 1)),
          depth: (SDL.glAttributes[6 /*SDL_GL_DEPTH_SIZE*/] > 0),
          stencil: (SDL.glAttributes[7 /*SDL_GL_STENCIL_SIZE*/] > 0)
        };
        
        var ctx = Browser.createContext(canvas, is_SDL_OPENGL, usePageCanvas, webGLContextAttributes);
              
        SDL.surfaces[surf] = {
          width: width,
          height: height,
          canvas: canvas,
          ctx: ctx,
          surf: surf,
          buffer: buffer,
          pixelFormat: pixelFormat,
          alpha: 255,
          flags: flags,
          locked: 0,
          usePageCanvas: usePageCanvas,
          source: source,
  
          isFlagSet: function(flag) {
            return flags & flag;
          }
        };
  
        return surf;
      },copyIndexedColorData:function (surfData, rX, rY, rW, rH) {
        // HWPALETTE works with palette
        // setted by SDL_SetColors
        if (!surfData.colors) {
          return;
        }
        
        var fullWidth  = Module['canvas'].width;
        var fullHeight = Module['canvas'].height;
  
        var startX  = rX || 0;
        var startY  = rY || 0;
        var endX    = (rW || (fullWidth - startX)) + startX;
        var endY    = (rH || (fullHeight - startY)) + startY;
        
        var buffer  = surfData.buffer;
  
        if (!surfData.image.data32) {
          surfData.image.data32 = new Uint32Array(surfData.image.data.buffer);
        }
        var data32   = surfData.image.data32;
  
        var colors32 = surfData.colors32;
  
        for (var y = startY; y < endY; ++y) {
          var base = y * fullWidth;
          for (var x = startX; x < endX; ++x) {
            data32[base + x] = colors32[HEAPU8[((buffer + base + x)>>0)]];
          }
        }
      },freeSurface:function (surf) {
        var refcountPointer = surf + 56;
        var refcount = HEAP32[((refcountPointer)>>2)];
        if (refcount > 1) {
          HEAP32[((refcountPointer)>>2)]=refcount - 1;
          return;
        }
  
        var info = SDL.surfaces[surf];
        if (!info.usePageCanvas && info.canvas) SDL.canvasPool.push(info.canvas);
        if (info.buffer) _free(info.buffer);
        _free(info.pixelFormat);
        _free(surf);
        SDL.surfaces[surf] = null;
  
        if (surf === SDL.screen) {
          SDL.screen = null;
        }
      },blitSurface__deps:["SDL_LockSurface"],blitSurface:function (src, srcrect, dst, dstrect, scale) {
        var srcData = SDL.surfaces[src];
        var dstData = SDL.surfaces[dst];
        var sr, dr;
        if (srcrect) {
          sr = SDL.loadRect(srcrect);
        } else {
          sr = { x: 0, y: 0, w: srcData.width, h: srcData.height };
        }
        if (dstrect) {
          dr = SDL.loadRect(dstrect);
        } else {
          dr = { x: 0, y: 0, w: srcData.width, h: srcData.height };
        }
        if (dstData.clipRect) {
          var widthScale = (!scale || sr.w === 0) ? 1 : sr.w / dr.w;
          var heightScale = (!scale || sr.h === 0) ? 1 : sr.h / dr.h;
          
          dr = SDL.intersectionOfRects(dstData.clipRect, dr);
          
          sr.w = dr.w * widthScale;
          sr.h = dr.h * heightScale;
          
          if (dstrect) {
            SDL.updateRect(dstrect, dr);
          }
        }
        var blitw, blith;
        if (scale) {
          blitw = dr.w; blith = dr.h;
        } else {
          blitw = sr.w; blith = sr.h;
        }
        if (sr.w === 0 || sr.h === 0 || blitw === 0 || blith === 0) {
          return 0;
        }
        var oldAlpha = dstData.ctx.globalAlpha;
        dstData.ctx.globalAlpha = srcData.alpha/255;
        dstData.ctx.drawImage(srcData.canvas, sr.x, sr.y, sr.w, sr.h, dr.x, dr.y, blitw, blith);
        dstData.ctx.globalAlpha = oldAlpha;
        if (dst != SDL.screen) {
          // XXX As in IMG_Load, for compatibility we write out |pixels|
          Runtime.warnOnce('WARNING: copying canvas data to memory for compatibility');
          _SDL_LockSurface(dst);
          dstData.locked--; // The surface is not actually locked in this hack
        }
        return 0;
      },downFingers:{},savedKeydown:null,receiveEvent:function (event) {
        function unpressAllPressedKeys() {
          // Un-press all pressed keys: TODO
          for (var code in SDL.keyboardMap) {
            SDL.events.push({
              type: 'keyup',
              keyCode: SDL.keyboardMap[code]
            });
          }
        };
        switch(event.type) {
          case 'touchstart': case 'touchmove': {
            event.preventDefault();
  
            var touches = [];
            
            // Clear out any touchstart events that we've already processed
            if (event.type === 'touchstart') {
              for (var i = 0; i < event.touches.length; i++) {
                var touch = event.touches[i];
                if (SDL.downFingers[touch.identifier] != true) {
                  SDL.downFingers[touch.identifier] = true;
                  touches.push(touch);
                }
              }
            } else {
              touches = event.touches;
            }
            
            var firstTouch = touches[0];
            if (event.type == 'touchstart') {
              SDL.DOMButtons[0] = 1;
            }
            var mouseEventType;
            switch(event.type) {
              case 'touchstart': mouseEventType = 'mousedown'; break;
              case 'touchmove': mouseEventType = 'mousemove'; break;
            }
            var mouseEvent = {
              type: mouseEventType,
              button: 0,
              pageX: firstTouch.clientX,
              pageY: firstTouch.clientY
            };
            SDL.events.push(mouseEvent);
  
            for (var i = 0; i < touches.length; i++) {
              var touch = touches[i];
              SDL.events.push({
                type: event.type,
                touch: touch
              });
            };
            break;
          }
          case 'touchend': {
            event.preventDefault();
            
            // Remove the entry in the SDL.downFingers hash
            // because the finger is no longer down.
            for(var i = 0; i < event.changedTouches.length; i++) {
              var touch = event.changedTouches[i];
              if (SDL.downFingers[touch.identifier] === true) {
                delete SDL.downFingers[touch.identifier];
              }
            }
  
            var mouseEvent = {
              type: 'mouseup',
              button: 0,
              pageX: event.changedTouches[0].clientX,
              pageY: event.changedTouches[0].clientY
            };
            SDL.DOMButtons[0] = 0;
            SDL.events.push(mouseEvent);
            
            for (var i = 0; i < event.changedTouches.length; i++) {
              var touch = event.changedTouches[i];
              SDL.events.push({
                type: 'touchend',
                touch: touch
              });
            };
            break;
          }
          case 'DOMMouseScroll': case 'mousewheel': case 'wheel':
            var delta = -Browser.getMouseWheelDelta(event); // Flip the wheel direction to translate from browser wheel direction (+:down) to SDL direction (+:up)
            delta = (delta == 0) ? 0 : (delta > 0 ? Math.max(delta, 1) : Math.min(delta, -1)); // Quantize to integer so that minimum scroll is at least +/- 1.
  
            // Simulate old-style SDL events representing mouse wheel input as buttons
            var button = delta > 0 ? 3 /*SDL_BUTTON_WHEELUP-1*/ : 4 /*SDL_BUTTON_WHEELDOWN-1*/; // Subtract one since JS->C marshalling is defined to add one back.
            SDL.events.push({ type: 'mousedown', button: button, pageX: event.pageX, pageY: event.pageY });
            SDL.events.push({ type: 'mouseup', button: button, pageX: event.pageX, pageY: event.pageY });
  
            // Pass a delta motion event.
            SDL.events.push({ type: 'wheel', deltaX: 0, deltaY: delta });
            event.preventDefault(); // If we don't prevent this, then 'wheel' event will be sent again by the browser as 'DOMMouseScroll' and we will receive this same event the second time.
            break;
          case 'mousemove':
            if (SDL.DOMButtons[0] === 1) {
              SDL.events.push({
                type: 'touchmove',
                touch: {
                  identifier: 0,
                  deviceID: -1,
                  pageX: event.pageX,
                  pageY: event.pageY
                }
              });
            }
            if (Browser.pointerLock) {
              // workaround for firefox bug 750111
              if ('mozMovementX' in event) {
                event['movementX'] = event['mozMovementX'];
                event['movementY'] = event['mozMovementY'];
              }
              // workaround for Firefox bug 782777
              if (event['movementX'] == 0 && event['movementY'] == 0) {
                // ignore a mousemove event if it doesn't contain any movement info
                // (without pointer lock, we infer movement from pageX/pageY, so this check is unnecessary)
                event.preventDefault();
                return;
              }
            }
            // fall through
          case 'keydown': case 'keyup': case 'keypress': case 'mousedown': case 'mouseup':
            // If we preventDefault on keydown events, the subsequent keypress events
            // won't fire. However, it's fine (and in some cases necessary) to
            // preventDefault for keys that don't generate a character. Otherwise,
            // preventDefault is the right thing to do in general.
            if (event.type !== 'keydown' || (!SDL.unicode && !SDL.textInput) || (event.keyCode === 8 /* backspace */ || event.keyCode === 9 /* tab */)) {
              event.preventDefault();
            }
  
            if (event.type == 'mousedown') {
              SDL.DOMButtons[event.button] = 1;
              SDL.events.push({
                type: 'touchstart',
                touch: {
                  identifier: 0,
                  deviceID: -1,
                  pageX: event.pageX,
                  pageY: event.pageY
                }
              });
            } else if (event.type == 'mouseup') {
              // ignore extra ups, can happen if we leave the canvas while pressing down, then return,
              // since we add a mouseup in that case
              if (!SDL.DOMButtons[event.button]) {
                return;
              }
  
              SDL.events.push({
                type: 'touchend',
                touch: {
                  identifier: 0,
                  deviceID: -1,
                  pageX: event.pageX,
                  pageY: event.pageY
                }
              });
              SDL.DOMButtons[event.button] = 0;
            }
  
            // We can only request fullscreen as the result of user input.
            // Due to this limitation, we toggle a boolean on keydown which
            // SDL_WM_ToggleFullScreen will check and subsequently set another
            // flag indicating for us to request fullscreen on the following
            // keyup. This isn't perfect, but it enables SDL_WM_ToggleFullScreen
            // to work as the result of a keypress (which is an extremely
            // common use case).
            if (event.type === 'keydown' || event.type === 'mousedown') {
              SDL.canRequestFullscreen = true;
            } else if (event.type === 'keyup' || event.type === 'mouseup') {
              if (SDL.isRequestingFullscreen) {
                Module['requestFullScreen'](true, true);
                SDL.isRequestingFullscreen = false;
              }
              SDL.canRequestFullscreen = false;
            }
  
            // SDL expects a unicode character to be passed to its keydown events.
            // Unfortunately, the browser APIs only provide a charCode property on
            // keypress events, so we must backfill in keydown events with their
            // subsequent keypress event's charCode.
            if (event.type === 'keypress' && SDL.savedKeydown) {
              // charCode is read-only
              SDL.savedKeydown.keypressCharCode = event.charCode;
              SDL.savedKeydown = null;
            } else if (event.type === 'keydown') {
              SDL.savedKeydown = event;
            }
  
            // Don't push keypress events unless SDL_StartTextInput has been called.
            if (event.type !== 'keypress' || SDL.textInput) {
              SDL.events.push(event);
            }
            break;
          case 'mouseout':
            // Un-press all pressed mouse buttons, because we might miss the release outside of the canvas
            for (var i = 0; i < 3; i++) {
              if (SDL.DOMButtons[i]) {
                SDL.events.push({
                  type: 'mouseup',
                  button: i,
                  pageX: event.pageX,
                  pageY: event.pageY
                });
                SDL.DOMButtons[i] = 0;
              }
            }
            event.preventDefault();
            break;
          case 'focus':
            SDL.events.push(event);
            event.preventDefault();
            break;
          case 'blur':
            SDL.events.push(event);
            unpressAllPressedKeys();
            event.preventDefault();
            break;
          case 'visibilitychange':
            SDL.events.push({
              type: 'visibilitychange',
              visible: !document.hidden
            });
            unpressAllPressedKeys();
            event.preventDefault();
            break;
          case 'unload':
            if (Browser.mainLoop.runner) {
              SDL.events.push(event);
              // Force-run a main event loop, since otherwise this event will never be caught!
              Browser.mainLoop.runner();
            }
            return;
          case 'resize':
            SDL.events.push(event);
            // manually triggered resize event doesn't have a preventDefault member
            if (event.preventDefault) {
              event.preventDefault();
            }
            break;
        }
        if (SDL.events.length >= 10000) {
          Module.printErr('SDL event queue full, dropping events');
          SDL.events = SDL.events.slice(0, 10000);
        }
        // If we have a handler installed, this will push the events to the app
        // instead of the app polling for them.
        SDL.flushEventsToHandler();
        return;
      },lookupKeyCodeForEvent:function (event) {
          var code = event.keyCode;
          if (code >= 65 && code <= 90) {
            code += 32; // make lowercase for SDL
          } else {
            code = SDL.keyCodes[event.keyCode] || event.keyCode;
            // If this is one of the modifier keys (224 | 1<<10 - 227 | 1<<10), and the event specifies that it is
            // a right key, add 4 to get the right key SDL key code.
            if (event.location === KeyboardEvent.DOM_KEY_LOCATION_RIGHT && code >= (224 | 1<<10) && code <= (227 | 1<<10)) {
              code += 4;
            }
          }
          return code;
      },handleEvent:function (event) {
        if (event.handled) return;
        event.handled = true;
  
        switch (event.type) {
          case 'touchstart': case 'touchend': case 'touchmove': {
            Browser.calculateMouseEvent(event);
            break;
          }
          case 'keydown': case 'keyup': {
            var down = event.type === 'keydown';
            var code = SDL.lookupKeyCodeForEvent(event);
            HEAP8[(((SDL.keyboardState)+(code))>>0)]=down;
            // TODO: lmeta, rmeta, numlock, capslock, KMOD_MODE, KMOD_RESERVED
            SDL.modState = (HEAP8[(((SDL.keyboardState)+(1248))>>0)] ? 0x0040 : 0) | // KMOD_LCTRL
              (HEAP8[(((SDL.keyboardState)+(1249))>>0)] ? 0x0001 : 0) | // KMOD_LSHIFT
              (HEAP8[(((SDL.keyboardState)+(1250))>>0)] ? 0x0100 : 0) | // KMOD_LALT
              (HEAP8[(((SDL.keyboardState)+(1252))>>0)] ? 0x0080 : 0) | // KMOD_RCTRL
              (HEAP8[(((SDL.keyboardState)+(1253))>>0)] ? 0x0002 : 0) | // KMOD_RSHIFT
              (HEAP8[(((SDL.keyboardState)+(1254))>>0)] ? 0x0200 : 0); //  KMOD_RALT
            if (down) {
              SDL.keyboardMap[code] = event.keyCode; // save the DOM input, which we can use to unpress it during blur
            } else {
              delete SDL.keyboardMap[code];
            }
  
            break;
          }
          case 'mousedown': case 'mouseup':
            if (event.type == 'mousedown') {
              // SDL_BUTTON(x) is defined as (1 << ((x)-1)).  SDL buttons are 1-3,
              // and DOM buttons are 0-2, so this means that the below formula is
              // correct.
              SDL.buttonState |= 1 << event.button;
            } else if (event.type == 'mouseup') {
              SDL.buttonState &= ~(1 << event.button);
            }
            // fall through
          case 'mousemove': {
            Browser.calculateMouseEvent(event);
            break;
          }
        }
      },flushEventsToHandler:function () {
        if (!SDL.eventHandler) return;
  
        while (SDL.pollEvent(SDL.eventHandlerTemp)) {
          Runtime.dynCall('iii', SDL.eventHandler, [SDL.eventHandlerContext, SDL.eventHandlerTemp]);
        }
      },pollEvent:function (ptr) {
        if (SDL.initFlags & 0x200 && SDL.joystickEventState) {
          // If SDL_INIT_JOYSTICK was supplied AND the joystick system is configured
          // to automatically query for events, query for joystick events.
          SDL.queryJoysticks();
        }
        if (ptr) {
          while (SDL.events.length > 0) {
            if (SDL.makeCEvent(SDL.events.shift(), ptr) !== false) return 1;
          }
          return 0;
        } else {
          // XXX: somewhat risky in that we do not check if the event is real or not (makeCEvent returns false) if no pointer supplied
          return SDL.events.length > 0;
        }
      },makeCEvent:function (event, ptr) {
        if (typeof event === 'number') {
          // This is a pointer to a copy of a native C event that was SDL_PushEvent'ed
          _memcpy(ptr, event, 28);
          _free(event); // the copy is no longer needed
          return;
        }
  
        SDL.handleEvent(event);
  
        switch (event.type) {
          case 'keydown': case 'keyup': {
            var down = event.type === 'keydown';
            //Module.print('Received key event: ' + event.keyCode);
            var key = SDL.lookupKeyCodeForEvent(event);
            var scan;
            if (key >= 1024) {
              scan = key - 1024;
            } else {
              scan = SDL.scanCodes[key] || key;
            }
  
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP8[(((ptr)+(8))>>0)]=down ? 1 : 0;
            HEAP8[(((ptr)+(9))>>0)]=0; // TODO
            HEAP32[(((ptr)+(12))>>2)]=scan;
            HEAP32[(((ptr)+(16))>>2)]=key;
            HEAP16[(((ptr)+(20))>>1)]=SDL.modState;
            // some non-character keys (e.g. backspace and tab) won't have keypressCharCode set, fill in with the keyCode.
            HEAP32[(((ptr)+(24))>>2)]=event.keypressCharCode || key;
  
            break;
          }
          case 'keypress': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            // Not filling in windowID for now
            var cStr = intArrayFromString(String.fromCharCode(event.charCode));
            for (var i = 0; i < cStr.length; ++i) {
              HEAP8[(((ptr)+(8 + i))>>0)]=cStr[i];
            }
            break;
          }
          case 'mousedown': case 'mouseup': case 'mousemove': {
            if (event.type != 'mousemove') {
              var down = event.type === 'mousedown';
              HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
              HEAP32[(((ptr)+(4))>>2)]=0;
              HEAP32[(((ptr)+(8))>>2)]=0;
              HEAP32[(((ptr)+(12))>>2)]=0;
              HEAP8[(((ptr)+(16))>>0)]=event.button+1; // DOM buttons are 0-2, SDL 1-3
              HEAP8[(((ptr)+(17))>>0)]=down ? 1 : 0;
              HEAP32[(((ptr)+(20))>>2)]=Browser.mouseX;
              HEAP32[(((ptr)+(24))>>2)]=Browser.mouseY;
            } else {
              HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
              HEAP32[(((ptr)+(4))>>2)]=0;
              HEAP32[(((ptr)+(8))>>2)]=0;
              HEAP32[(((ptr)+(12))>>2)]=0;
              HEAP32[(((ptr)+(16))>>2)]=SDL.buttonState;
              HEAP32[(((ptr)+(20))>>2)]=Browser.mouseX;
              HEAP32[(((ptr)+(24))>>2)]=Browser.mouseY;
              HEAP32[(((ptr)+(28))>>2)]=Browser.mouseMovementX;
              HEAP32[(((ptr)+(32))>>2)]=Browser.mouseMovementY;
            }
            break;
          }
          case 'wheel': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(16))>>2)]=event.deltaX;
            HEAP32[(((ptr)+(20))>>2)]=event.deltaY; 
            break;       
          }
          case 'touchstart': case 'touchend': case 'touchmove': {
            var touch = event.touch;
            if (!Browser.touches[touch.identifier]) break;
            var w = Module['canvas'].width;
            var h = Module['canvas'].height;
            var x = Browser.touches[touch.identifier].x / w;
            var y = Browser.touches[touch.identifier].y / h;
            var lx = Browser.lastTouches[touch.identifier].x / w;
            var ly = Browser.lastTouches[touch.identifier].y / h;
            var dx = x - lx;
            var dy = y - ly;
            if (touch['deviceID'] === undefined) touch.deviceID = SDL.TOUCH_DEFAULT_ID;
            if (dx === 0 && dy === 0 && event.type === 'touchmove') return false; // don't send these if nothing happened
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(4))>>2)]=_SDL_GetTicks();
            (tempI64 = [touch.deviceID>>>0,(tempDouble=touch.deviceID,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((ptr)+(8))>>2)]=tempI64[0],HEAP32[(((ptr)+(12))>>2)]=tempI64[1]);
            (tempI64 = [touch.identifier>>>0,(tempDouble=touch.identifier,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((ptr)+(16))>>2)]=tempI64[0],HEAP32[(((ptr)+(20))>>2)]=tempI64[1]);
            HEAPF32[(((ptr)+(24))>>2)]=x;
            HEAPF32[(((ptr)+(28))>>2)]=y;
            HEAPF32[(((ptr)+(32))>>2)]=dx;
            HEAPF32[(((ptr)+(36))>>2)]=dy;
            if (touch.force !== undefined) {
              HEAPF32[(((ptr)+(40))>>2)]=touch.force;
            } else { // No pressure data, send a digital 0/1 pressure.
              HEAPF32[(((ptr)+(40))>>2)]=event.type == "touchend" ? 0 : 1;
            }
            break;
          }
          case 'unload': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            break;
          }
          case 'resize': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(4))>>2)]=event.w;
            HEAP32[(((ptr)+(8))>>2)]=event.h;
            break;
          }
          case 'joystick_button_up': case 'joystick_button_down': {
            var state = event.type === 'joystick_button_up' ? 0 : 1;
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP8[(((ptr)+(4))>>0)]=event.index;
            HEAP8[(((ptr)+(5))>>0)]=event.button;
            HEAP8[(((ptr)+(6))>>0)]=state;
            break;
          }
          case 'joystick_axis_motion': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP8[(((ptr)+(4))>>0)]=event.index;
            HEAP8[(((ptr)+(5))>>0)]=event.axis;
            HEAP32[(((ptr)+(8))>>2)]=SDL.joystickAxisValueConversion(event.value);
            break;
          }
          case 'focus': {
            var SDL_WINDOWEVENT_FOCUS_GAINED = 12 /* SDL_WINDOWEVENT_FOCUS_GAINED */;
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(4))>>2)]=0;
            HEAP8[(((ptr)+(8))>>0)]=SDL_WINDOWEVENT_FOCUS_GAINED;
            break;
          }
          case 'blur': {
            var SDL_WINDOWEVENT_FOCUS_LOST = 13 /* SDL_WINDOWEVENT_FOCUS_LOST */;
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(4))>>2)]=0;
            HEAP8[(((ptr)+(8))>>0)]=SDL_WINDOWEVENT_FOCUS_LOST;
            break;
          }
          case 'visibilitychange': {
            var SDL_WINDOWEVENT_SHOWN  = 1 /* SDL_WINDOWEVENT_SHOWN */;
            var SDL_WINDOWEVENT_HIDDEN = 2 /* SDL_WINDOWEVENT_HIDDEN */;
            var visibilityEventID = event.visible ? SDL_WINDOWEVENT_SHOWN : SDL_WINDOWEVENT_HIDDEN;
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(4))>>2)]=0;
            HEAP8[(((ptr)+(8))>>0)]=visibilityEventID;
            break;
          }
          default: throw 'Unhandled SDL event: ' + event.type;
        }
      },estimateTextWidth:function (fontData, text) {
        var h = fontData.size;
        var fontString = h + 'px ' + fontData.name;
        var tempCtx = SDL.ttfContext;
        assert(tempCtx, 'TTF_Init must have been called');
        tempCtx.save();
        tempCtx.font = fontString;
        var ret = tempCtx.measureText(text).width | 0;
        tempCtx.restore();
        return ret;
      },allocateChannels:function (num) { // called from Mix_AllocateChannels and init
        if (SDL.numChannels && SDL.numChannels >= num && num != 0) return;
        SDL.numChannels = num;
        SDL.channels = [];
        for (var i = 0; i < num; i++) {
          SDL.channels[i] = {
            audio: null,
            volume: 1.0
          };
        }
      },setGetVolume:function (info, volume) {
        if (!info) return 0;
        var ret = info.volume * 128; // MIX_MAX_VOLUME
        if (volume != -1) {
          info.volume = Math.min(Math.max(volume, 0), 128) / 128;
          if (info.audio) {
            try {
              info.audio.volume = info.volume; // For <audio> element
              if (info.audio.webAudioGainNode) info.audio.webAudioGainNode['gain']['value'] = info.volume; // For WebAudio playback
            } catch(e) {
              Module.printErr('setGetVolume failed to set audio volume: ' + e);
            }
          }
        }
        return ret;
      },setPannerPosition:function (info, x, y, z) {
        if (!info) return;
        if (info.audio) {
          if (info.audio.webAudioPannerNode) {
            info.audio.webAudioPannerNode['setPosition'](x, y, z);
          }
        }
      },playWebAudio:function (audio) {
        if (!audio) return;
        if (audio.webAudioNode) return; // This instance is already playing, don't start again.
        if (!SDL.webAudioAvailable()) return;
        try {
          var webAudio = audio.resource.webAudio;
          audio.paused = false;
          if (!webAudio.decodedBuffer) {
            if (webAudio.onDecodeComplete === undefined) abort("Cannot play back audio object that was not loaded");
            webAudio.onDecodeComplete.push(function() { if (!audio.paused) SDL.playWebAudio(audio); });
            return;
          }
          audio.webAudioNode = SDL.audioContext['createBufferSource']();
          audio.webAudioNode['buffer'] = webAudio.decodedBuffer;
          audio.webAudioNode['loop'] = audio.loop;
          audio.webAudioNode['onended'] = function() { audio['onended'](); } // For <media> element compatibility, route the onended signal to the instance.
  
          audio.webAudioPannerNode = SDL.audioContext['createPanner']();
          audio.webAudioPannerNode['panningModel'] = 'equalpower';
  
          // Add an intermediate gain node to control volume.
          audio.webAudioGainNode = SDL.audioContext['createGain']();
          audio.webAudioGainNode['gain']['value'] = audio.volume;
  
          audio.webAudioNode['connect'](audio.webAudioPannerNode);
          audio.webAudioPannerNode['connect'](audio.webAudioGainNode);
          audio.webAudioGainNode['connect'](SDL.audioContext['destination']);
  
          audio.webAudioNode['start'](0, audio.currentPosition);
          audio.startTime = SDL.audioContext['currentTime'] - audio.currentPosition;
        } catch(e) {
          Module.printErr('playWebAudio failed: ' + e);
        }
      },pauseWebAudio:function (audio) {
        if (!audio) return;
        if (audio.webAudioNode) {
          try {
            // Remember where we left off, so that if/when we resume, we can restart the playback at a proper place.
            audio.currentPosition = (SDL.audioContext['currentTime'] - audio.startTime) % audio.resource.webAudio.decodedBuffer.duration;
            // Important: When we reach here, the audio playback is stopped by the user. But when calling .stop() below, the Web Audio
            // graph will send the onended signal, but we don't want to process that, since pausing should not clear/destroy the audio
            // channel.
            audio.webAudioNode['onended'] = undefined;
            audio.webAudioNode.stop();
            audio.webAudioNode = undefined;
          } catch(e) {
            Module.printErr('pauseWebAudio failed: ' + e);
          }
        }
        audio.paused = true;
      },openAudioContext:function () {
        // Initialize Web Audio API if we haven't done so yet. Note: Only initialize Web Audio context ever once on the web page,
        // since initializing multiple times fails on Chrome saying 'audio resources have been exhausted'.
        if (!SDL.audioContext) {
          if (typeof(AudioContext) !== 'undefined') SDL.audioContext = new AudioContext();
          else if (typeof(webkitAudioContext) !== 'undefined') SDL.audioContext = new webkitAudioContext();
        }
      },webAudioAvailable:function () { return !!SDL.audioContext; },fillWebAudioBufferFromHeap:function (heapPtr, sizeSamplesPerChannel, dstAudioBuffer) {
        // The input audio data is interleaved across the channels, i.e. [L, R, L, R, L, R, ...] and is either 8-bit or 16-bit as
        // supported by the SDL API. The output audio wave data for Web Audio API must be in planar buffers of [-1,1]-normalized Float32 data,
        // so perform a buffer conversion for the data.
        var numChannels = SDL.audio.channels;
        for(var c = 0; c < numChannels; ++c) {
          var channelData = dstAudioBuffer['getChannelData'](c);
          if (channelData.length != sizeSamplesPerChannel) {
            throw 'Web Audio output buffer length mismatch! Destination size: ' + channelData.length + ' samples vs expected ' + sizeSamplesPerChannel + ' samples!';
          }
          if (SDL.audio.format == 0x8010 /*AUDIO_S16LSB*/) {
            for(var j = 0; j < sizeSamplesPerChannel; ++j) {
              channelData[j] = (HEAP16[(((heapPtr)+((j*numChannels + c)*2))>>1)]) / 0x8000;
            }
          } else if (SDL.audio.format == 0x0008 /*AUDIO_U8*/) {
            for(var j = 0; j < sizeSamplesPerChannel; ++j) {
              var v = (HEAP8[(((heapPtr)+(j*numChannels + c))>>0)]);
              channelData[j] = ((v >= 0) ? v-128 : v+128) /128;
            }
          }
        }
      },debugSurface:function (surfData) {
        console.log('dumping surface ' + [surfData.surf, surfData.source, surfData.width, surfData.height]);
        var image = surfData.ctx.getImageData(0, 0, surfData.width, surfData.height);
        var data = image.data;
        var num = Math.min(surfData.width, surfData.height);
        for (var i = 0; i < num; i++) {
          console.log('   diagonal ' + i + ':' + [data[i*surfData.width*4 + i*4 + 0], data[i*surfData.width*4 + i*4 + 1], data[i*surfData.width*4 + i*4 + 2], data[i*surfData.width*4 + i*4 + 3]]);
        }
      },joystickEventState:1,lastJoystickState:{},joystickNamePool:{},recordJoystickState:function (joystick, state) {
        // Standardize button state.
        var buttons = new Array(state.buttons.length);
        for (var i = 0; i < state.buttons.length; i++) {
          buttons[i] = SDL.getJoystickButtonState(state.buttons[i]);
        }
  
        SDL.lastJoystickState[joystick] = {
          buttons: buttons,
          axes: state.axes.slice(0),
          timestamp: state.timestamp,
          index: state.index,
          id: state.id
        };
      },getJoystickButtonState:function (button) {
        if (typeof button === 'object') {
          // Current gamepad API editor's draft (Firefox Nightly)
          // https://dvcs.w3.org/hg/gamepad/raw-file/default/gamepad.html#idl-def-GamepadButton
          return button.pressed;
        } else {
          // Current gamepad API working draft (Firefox / Chrome Stable)
          // http://www.w3.org/TR/2012/WD-gamepad-20120529/#gamepad-interface
          return button > 0;
        }
      },queryJoysticks:function () {
        for (var joystick in SDL.lastJoystickState) {
          var state = SDL.getGamepad(joystick - 1);
          var prevState = SDL.lastJoystickState[joystick];
          // Check only if the timestamp has differed.
          // NOTE: Timestamp is not available in Firefox.
          if (typeof state.timestamp !== 'number' || state.timestamp !== prevState.timestamp) {
            var i;
            for (i = 0; i < state.buttons.length; i++) {
              var buttonState = SDL.getJoystickButtonState(state.buttons[i]);
              // NOTE: The previous state already has a boolean representation of
              //       its button, so no need to standardize its button state here.
              if (buttonState !== prevState.buttons[i]) {
                // Insert button-press event.
                SDL.events.push({
                  type: buttonState ? 'joystick_button_down' : 'joystick_button_up',
                  joystick: joystick,
                  index: joystick - 1,
                  button: i
                });
              }
            }
            for (i = 0; i < state.axes.length; i++) {
              if (state.axes[i] !== prevState.axes[i]) {
                // Insert axes-change event.
                SDL.events.push({
                  type: 'joystick_axis_motion',
                  joystick: joystick,
                  index: joystick - 1,
                  axis: i,
                  value: state.axes[i]
                });
              }
            }
  
            SDL.recordJoystickState(joystick, state);
          }
        }
      },joystickAxisValueConversion:function (value) {
        // Ensures that 0 is 0, 1 is 32767, and -1 is 32768.
        return Math.ceil(((value+1) * 32767.5) - 32768);
      },getGamepads:function () {
        var fcn = navigator.getGamepads || navigator.webkitGamepads || navigator.mozGamepads || navigator.gamepads || navigator.webkitGetGamepads;
        if (fcn !== undefined) {
          // The function must be applied on the navigator object.
          return fcn.apply(navigator);
        } else {
          return [];
        }
      },getGamepad:function (deviceIndex) {
        var gamepads = SDL.getGamepads();
        if (gamepads.length > deviceIndex && deviceIndex >= 0) {
          return gamepads[deviceIndex];
        }
        return null;
      }};function _SDL_GetMouseState(x, y) {
      if (x) HEAP32[((x)>>2)]=Browser.mouseX;
      if (y) HEAP32[((y)>>2)]=Browser.mouseY;
      return SDL.buttonState;
    }

  function _glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer) {
      GLctx.framebufferRenderbuffer(target, attachment, renderbuffertarget,
                                         GL.renderbuffers[renderbuffer]);
    }

  var _emscripten_do_not_unwind=true;

  function _glDetachShader(program, shader) {
      GLctx.detachShader(GL.programs[program],
                              GL.shaders[shader]);
    }

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }

  function _glCompileShader(shader) {
      GLctx.compileShader(GL.shaders[shader]);
    }

  
  function _stat(path, buf, dontResolveLastLink) {
      // http://pubs.opengroup.org/onlinepubs/7908799/xsh/stat.html
      // int stat(const char *path, struct stat *buf);
      // NOTE: dontResolveLastLink is a shortcut for lstat(). It should never be
      //       used in client code.
      path = typeof path !== 'string' ? Pointer_stringify(path) : path;
      try {
        var stat = dontResolveLastLink ? FS.lstat(path) : FS.stat(path);
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      } catch (e) {
        if (e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
          // an error occurred while trying to look up the path; we should just report ENOTDIR
          e.setErrno(ERRNO_CODES.ENOTDIR);
        }
        FS.handleFSError(e);
        return -1;
      }
    }function _fstat(fildes, buf) {
      // int fstat(int fildes, struct stat *buf);
      // http://pubs.opengroup.org/onlinepubs/7908799/xsh/fstat.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      return _stat(stream.path, buf);
    }

  function _glDeleteTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((textures)+(i*4))>>2)];
        var texture = GL.textures[id];
        if (!texture) continue; // GL spec: "glDeleteTextures silently ignores 0s and names that do not correspond to existing textures".
        GLctx.deleteTexture(texture);
        texture.name = 0;
        GL.textures[id] = null;
      }
    }

  
  var ___async_cur_frame=0; 
  Module["_emscripten_alloc_async_context"] = _emscripten_alloc_async_context;

  function _SDL_GL_SetAttribute(attr, value) {
      if (!(attr in SDL.glAttributes)) {
        abort('Unknown SDL GL attribute (' + attr + '). Please check if your SDL version is supported.');
      }
  
      SDL.glAttributes[attr] = value;
    }

  var _ceil=Math_ceil;

  
  var AL={contexts:[],currentContext:null,alcErr:0,stringCache:{},alcStringCache:{},QUEUE_INTERVAL:25,QUEUE_LOOKAHEAD:100,newSrcId:1,updateSources:function updateSources(context) {
        // If we are animating using the requestAnimationFrame method, then the main loop does not run when in the background.
        // To give a perfect glitch-free audio stop when switching from foreground to background, we need to avoid updating
        // audio altogether when in the background, so detect that case and kill audio buffer streaming if so.
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && document['visibilityState'] != 'visible') return;
  
        for (var srcId in context.src) {
          AL.updateSource(context.src[srcId]);
        }
      },updateSource:function updateSource(src) {
        if (src.state !== 0x1012 /* AL_PLAYING */) {
          return;
        }
  
        var currentTime = AL.currentContext.ctx.currentTime;
        var startTime = src.bufferPosition;
  
        for (var i = src.buffersPlayed; i < src.queue.length; i++) {
          var entry = src.queue[i];
  
          var startOffset = startTime - currentTime;
          var endTime = startTime + entry.buffer.duration;
  
          // Clean up old buffers.
          if (currentTime >= endTime) {
            // Update our location in the queue.
            src.bufferPosition = endTime;
            src.buffersPlayed = i + 1;
  
            // Stop / restart the source when we hit the end.
            if (src.buffersPlayed >= src.queue.length) {
              if (src.loop) {
                AL.setSourceState(src, 0x1012 /* AL_PLAYING */);
              } else {
                AL.setSourceState(src, 0x1014 /* AL_STOPPED */);
              }
            }
          }
          // Process all buffers that'll be played before the next tick.
          else if (startOffset < (AL.QUEUE_LOOKAHEAD / 1000) && !entry.src) {
            // If the start offset is negative, we need to offset the actual buffer.
            var offset = Math.abs(Math.min(startOffset, 0));
  
            entry.src = AL.currentContext.ctx.createBufferSource();
            entry.src.buffer = entry.buffer;
            entry.src.connect(src.gain);
            if (typeof(entry.src.start) !== 'undefined') {
              entry.src.start(startTime, offset);
            } else if (typeof(entry.src.noteOn) !== 'undefined') {
              entry.src.noteOn(startTime);
            }
          }
  
          startTime = endTime;
        }
      },setSourceState:function setSourceState(src, state) {
        if (state === 0x1012 /* AL_PLAYING */) {
          if (src.state !== 0x1013 /* AL_PAUSED */) {
            src.state = 0x1012 /* AL_PLAYING */;
            // Reset our position.
            src.bufferPosition = AL.currentContext.ctx.currentTime;
            src.buffersPlayed = 0;
          } else {
            src.state = 0x1012 /* AL_PLAYING */;
            // Use the current offset from src.bufferPosition to resume at the correct point.
            src.bufferPosition = AL.currentContext.ctx.currentTime - src.bufferPosition;
          }
          AL.stopSourceQueue(src);
          AL.updateSource(src);
        } else if (state === 0x1013 /* AL_PAUSED */) {
          if (src.state === 0x1012 /* AL_PLAYING */) {
            src.state = 0x1013 /* AL_PAUSED */;
            // Store off the current offset to restore with on resume.
            src.bufferPosition = AL.currentContext.ctx.currentTime - src.bufferPosition;
            AL.stopSourceQueue(src);
          }
        } else if (state === 0x1014 /* AL_STOPPED */) {
          if (src.state !== 0x1011 /* AL_INITIAL */) {
            src.state = 0x1014 /* AL_STOPPED */;
            src.buffersPlayed = src.queue.length;
            AL.stopSourceQueue(src);
          }
        } else if (state == 0x1011 /* AL_INITIAL */) {
          if (src.state !== 0x1011 /* AL_INITIAL */) {
            src.state = 0x1011 /* AL_INITIAL */;
            src.bufferPosition = 0;
            src.buffersPlayed = 0;
          }
        }
      },stopSourceQueue:function stopSourceQueue(src) {
        for (var i = 0; i < src.queue.length; i++) {
          var entry = src.queue[i];
          if (entry.src) {
            entry.src.stop(0);
            entry.src = null;
          }
        }
      }};function _alSourcei(source, param, value) {
      if (!AL.currentContext) {
        return;
      }
      var src = AL.currentContext.src[source];
      if (!src) {
        AL.currentContext.err = 0xA001 /* AL_INVALID_NAME */;
        return;
      }
      switch (param) {
      case 0x1001 /* AL_CONE_INNER_ANGLE */:
        src.coneInnerAngle = value;
        break;
      case 0x1002 /* AL_CONE_OUTER_ANGLE */:
        src.coneOuterAngle = value;
        break;
      case 0x1007 /* AL_LOOPING */:
        src.loop = (value === 1 /* AL_TRUE */);
        break;
      case 0x1009 /* AL_BUFFER */:
        var buffer = AL.currentContext.buf[value - 1];
        if (value == 0) {
          src.queue = [];
        } else {
          src.queue = [{ buffer: buffer }];
        }
        AL.updateSource(src);
        break;
      case 0x202 /* AL_SOURCE_RELATIVE */:
        if (value === 1 /* AL_TRUE */) {
          if (src.panner) {
            src.panner = null;
  
            // Disconnect from the panner.
            src.gain.disconnect();
  
            src.gain.connect(AL.currentContext.ctx.destination);
          }
        } else if (value === 0 /* AL_FALSE */) {
          if (!src.panner) {
            var panner = src.panner = AL.currentContext.ctx.createPanner();
            panner.panningModel = "equalpower";
            panner.distanceModel = "linear";
            panner.refDistance = src.refDistance;
            panner.maxDistance = src.maxDistance;
            panner.rolloffFactor = src.rolloffFactor;
            panner.setPosition(src.position[0], src.position[1], src.position[2]);
            panner.setVelocity(src.velocity[0], src.velocity[1], src.velocity[2]);
            panner.connect(AL.currentContext.ctx.destination);
  
            // Disconnect from the default source.
            src.gain.disconnect();
  
            src.gain.connect(panner);
          }
        } else {
          AL.currentContext.err = 0xA003 /* AL_INVALID_VALUE */;
        }
        break;
      default:
        AL.currentContext.err = 0xA002 /* AL_INVALID_ENUM */;
        break;
      }
    }

  
  var ___async_retval=allocate(2, "i32", ALLOC_STATIC);var _emscripten_get_async_return_value_addr=true;

  function _emscripten_hide_mouse() {
      var styleSheet = document.styleSheets[0];
      var rules = styleSheet.cssRules;
      for (var i = 0; i < rules.length; i++) {
        if (rules[i].cssText.substr(0, 6) == 'canvas') {
          styleSheet.deleteRule(i);
          i--;
        }
      }
      styleSheet.insertRule('canvas.emscripten { border: 1px solid black; cursor: none; }', 0);
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  function _alcGetString(device, param) {
      if (AL.alcStringCache[param]) return AL.alcStringCache[param];
      var ret;
      switch (param) {
      case 0 /* ALC_NO_ERROR */:
        ret = 'No Error';
        break;
      case 0xA001 /* ALC_INVALID_DEVICE */:
        ret = 'Invalid Device';
        break;
      case 0xA002 /* ALC_INVALID_CONTEXT */:
        ret = 'Invalid Context';
        break;
      case 0xA003 /* ALC_INVALID_ENUM */:
        ret = 'Invalid Enum';
        break;
      case 0xA004 /* ALC_INVALID_VALUE */:
        ret = 'Invalid Value';
        break;
      case 0xA005 /* ALC_OUT_OF_MEMORY */:
        ret = 'Out of Memory';
        break;
      case 0x1004 /* ALC_DEFAULT_DEVICE_SPECIFIER */:
        if (typeof(AudioContext) !== "undefined" ||
            typeof(webkitAudioContext) !== "undefined") {
          ret = 'Device';
        } else {
          return 0;
        }
        break;
      case 0x1005 /* ALC_DEVICE_SPECIFIER */:
        if (typeof(AudioContext) !== "undefined" ||
            typeof(webkitAudioContext) !== "undefined") {
          ret = 'Device\0';
        } else {
          ret = '\0';
        }
        break;
      case 0x311 /* ALC_CAPTURE_DEFAULT_DEVICE_SPECIFIER */:
        return 0;
        break;
      case 0x310 /* ALC_CAPTURE_DEVICE_SPECIFIER */:
        ret = '\0'
        break;
      case 0x1006 /* ALC_EXTENSIONS */:
        if (!device) {
          AL.alcErr = 0xA001 /* ALC_INVALID_DEVICE */;
          return 0;
        }
        ret = '';
        break;
      default:
        AL.alcErr = 0xA003 /* ALC_INVALID_ENUM */;
        return 0;
      }
  
      ret = allocate(intArrayFromString(ret), 'i8', ALLOC_NORMAL);
  
      AL.alcStringCache[param] = ret;
  
      return ret;
    }

  
  
  
  
  
  
  function _mkport() { throw 'TODO' }var SOCKFS={mount:function (mount) {
        // If Module['websocket'] has already been defined (e.g. for configuring
        // the subprotocol/url) use that, if not initialise it to a new object.
        Module['websocket'] = (Module['websocket'] && 
                               ('object' === typeof Module['websocket'])) ? Module['websocket'] : {};
  
        // Add the Event registration mechanism to the exported websocket configuration
        // object so we can register network callbacks from native JavaScript too.
        // For more documentation see system/include/emscripten/emscripten.h
        Module['websocket']._callbacks = {};
        Module['websocket']['on'] = function(event, callback) {
  	    if ('function' === typeof callback) {
  		  this._callbacks[event] = callback;
          }
  	    return this;
        };
  
        Module['websocket'].emit = function(event, param) {
  	    if ('function' === typeof this._callbacks[event]) {
  		  this._callbacks[event].call(this, param);
          }
        };
  
        // If debug is enabled register simple default logging callbacks for each Event.
  
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          error: null, // Used in getsockopt for SOL_SOCKET/SO_ERROR test
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces '//' comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the '#' for '//' again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                var parts = addr.split('/');
                url = url + parts[0] + ":" + port + "/" + parts.slice(1).join('/');
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
  
            Module['websocket'].emit('open', sock.stream.fd);
  
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
            Module['websocket'].emit('message', sock.stream.fd);
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('close', function() {
              Module['websocket'].emit('close', sock.stream.fd);
            });
            peer.socket.on('error', function(error) {
              // Although the ws library may pass errors that may be more descriptive than
              // ECONNREFUSED they are not necessarily the expected error code e.g. 
              // ENOTFOUND on getaddrinfo seems to be node.js specific, so using ECONNREFUSED
              // is still probably the most useful thing to do.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onclose = function() {
              Module['websocket'].emit('close', sock.stream.fd);
            };
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
            peer.socket.onerror = function(error) {
              // The WebSocket spec only allows a 'simple event' to be thrown on error,
              // so we only really know as much as ECONNREFUSED.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
          Module['websocket'].emit('listen', sock.stream.fd); // Send Event with listen fd.
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
              Module['websocket'].emit('connection', newsock.stream.fd);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
              Module['websocket'].emit('connection', sock.stream.fd);
            }
          });
          sock.server.on('closed', function() {
            Module['websocket'].emit('close', sock.stream.fd);
            sock.server = null;
          });
          sock.server.on('error', function(error) {
            // Although the ws library may pass errors that may be more descriptive than
            // ECONNREFUSED they are not necessarily the expected error code e.g. 
            // ENOTFOUND on getaddrinfo seems to be node.js specific, so using EHOSTUNREACH
            // is still probably the most useful thing to do. This error shouldn't
            // occur in a well written app as errors should get trapped in the compiled
            // app's own getaddrinfo call.
            sock.error = ERRNO_CODES.EHOSTUNREACH; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
            Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'EHOSTUNREACH: Host is unreachable']);
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
   
  Module["_strlen"] = _strlen;function _fputs(s, stream) {
      // int fputs(const char *restrict s, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputs.html
      var fd = _fileno(stream);
      return _write(fd, s, _strlen(s));
    }
  
  function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[((_fputc.ret)>>0)]=chr;
      var fd = _fileno(stream);
      var ret = _write(fd, _fputc.ret, 1);
      if (ret == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return -1;
      } else {
        return chr;
      }
    }function _puts(s) {
      // int puts(const char *s);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/puts.html
      // NOTE: puts() always writes an extra newline.
      var stdout = HEAP32[((_stdout)>>2)];
      var ret = _fputs(s, stdout);
      if (ret < 0) {
        return ret;
      } else {
        var newlineRet = _fputc(10, stdout);
        return (newlineRet < 0) ? -1 : ret + 1;
      }
    }
  
  
  function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          writeAsciiToMemory(msg, strerrbuf);
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }
  
  function ___errno_location() {
      return ___errno_state;
    }function _perror(s) {
      // void perror(const char *s);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/perror.html
      var stdout = HEAP32[((_stdout)>>2)];
      if (s) {
        _fputs(s, stdout);
        _fputc(58, stdout);
        _fputc(32, stdout);
      }
      var errnum = HEAP32[((___errno_location())>>2)];
      _puts(_strerror(errnum));
    }

  function _glGenTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var texture = GLctx.createTexture();
        if (!texture) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */); // GLES + EGL specs don't specify what should happen here, so best to issue an error and create IDs with 0.
          while(i < n) HEAP32[(((textures)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.textures);
        texture.name = id;
        GL.textures[id] = texture;
        HEAP32[(((textures)+(i*4))>>2)]=id;
      }
    }

  function _glUniform1f(location, v0) {
      location = GL.uniforms[location];
      GLctx.uniform1f(location, v0);
    }

  function _glCreateShader(shaderType) {
      var id = GL.getNewId(GL.shaders);
      GL.shaders[id] = GLctx.createShader(shaderType);
      return id;
    }

  function _glUniform1i(location, v0) {
      location = GL.uniforms[location];
      GLctx.uniform1i(location, v0);
    }

  function _alGetError() {
      if (!AL.currentContext) {
        return 0xA004 /* AL_INVALID_OPERATION */;
      } else {
        // Reset error on get.
        var err = AL.currentContext.err;
        AL.currentContext.err = 0 /* AL_NO_ERROR */;
        return err;
      }
    }

  function _glGenRenderbuffers(n, renderbuffers) {
      for (var i = 0; i < n; i++) {
        var renderbuffer = GLctx.createRenderbuffer();
        if (!renderbuffer) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
          while(i < n) HEAP32[(((renderbuffers)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.renderbuffers);
        renderbuffer.name = id;
        GL.renderbuffers[id] = renderbuffer;
        HEAP32[(((renderbuffers)+(i*4))>>2)]=id;
      }
    }

  var _cosf=Math_cos;

  function _glDeleteRenderbuffers(n, renderbuffers) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((renderbuffers)+(i*4))>>2)];
        var renderbuffer = GL.renderbuffers[id];
        if (!renderbuffer) continue; // GL spec: "glDeleteRenderbuffers silently ignores 0s and names that do not correspond to existing renderbuffer objects".
        GLctx.deleteRenderbuffer(renderbuffer);
        renderbuffer.name = 0;
        GL.renderbuffers[id] = null;
      }
    }

  function _glDisable(x0) { GLctx.disable(x0) }

  function _glUniform2f(location, v0, v1) {
      location = GL.uniforms[location];
      GLctx.uniform2f(location, v0, v1);
    }

   
  Module["_memset"] = _memset;

   
  Module["_strcat"] = _strcat;

  function _glGetProgramiv(program, pname, p) {
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getProgramInfoLog(GL.programs[program]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else if (pname == 0x8B87 /* GL_ACTIVE_UNIFORM_MAX_LENGTH */) {
        var ptable = GL.programInfos[program];
        if (ptable) {
          HEAP32[((p)>>2)]=ptable.maxUniformLength;
          return;
        } else if (program < GL.counter) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
        } else {
          GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        }
      } else if (pname == 0x8B8A /* GL_ACTIVE_ATTRIBUTE_MAX_LENGTH */) {
        var ptable = GL.programInfos[program];
        if (ptable) {
          if (ptable.maxAttributeLength == -1) {
            var program = GL.programs[program];
            var numAttribs = GLctx.getProgramParameter(program, GLctx.ACTIVE_ATTRIBUTES);
            ptable.maxAttributeLength = 0; // Spec says if there are no active attribs, 0 must be returned.
            for(var i = 0; i < numAttribs; ++i) {
              var activeAttrib = GLctx.getActiveAttrib(program, i);
              ptable.maxAttributeLength = Math.max(ptable.maxAttributeLength, activeAttrib.name.length+1);
            }
          }
          HEAP32[((p)>>2)]=ptable.maxAttributeLength;
          return;
        } else if (program < GL.counter) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
        } else {
          GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        }
      } else {
        HEAP32[((p)>>2)]=GLctx.getProgramParameter(GL.programs[program], pname);
      }
    }

  function _glVertexAttribPointer(index, size, type, normalized, stride, ptr) {
      GLctx.vertexAttribPointer(index, size, type, normalized, stride, ptr);
    }

  function _alDeleteBuffers(count, buffers)
    {
      if (!AL.currentContext) {
        return;
      }
      if (count > AL.currentContext.buf.length) {
        AL.currentContext.err = 0xA003 /* AL_INVALID_VALUE */;
        return;
      }
  
      for (var i = 0; i < count; ++i) {
        var bufferIdx = HEAP32[(((buffers)+(i*4))>>2)] - 1;
  
        // Make sure the buffer index is valid.
        if (bufferIdx >= AL.currentContext.buf.length || !AL.currentContext.buf[bufferIdx]) {
          AL.currentContext.err = 0xA001 /* AL_INVALID_NAME */;
          return;
        }
  
        // Make sure the buffer is no longer in use.
        var buffer = AL.currentContext.buf[bufferIdx];
        for (var srcId in AL.currentContext.src) {
          var src = AL.currentContext.src[srcId];
          if (!src) {
            continue;
          }
          for (var k = 0; k < src.queue.length; k++) {
            if (buffer === src.queue[k].buffer) {
              AL.currentContext.err = 0xA004 /* AL_INVALID_OPERATION */;
              return;
            }
          }
        }
      }
  
      for (var i = 0; i < count; ++i) {
        var bufferIdx = HEAP32[(((buffers)+(i*4))>>2)] - 1;
        delete AL.currentContext.buf[bufferIdx];
      }
    }

  function _alcMakeContextCurrent(context) {
      if (context == 0) {
        AL.currentContext = null;
        return 0;
      } else {
        AL.currentContext = AL.contexts[context - 1];
        return 1;
      }
    }

  function _glGetUniformLocation(program, name) {
      name = Pointer_stringify(name);
  
      var arrayOffset = 0;
      // If user passed an array accessor "[index]", parse the array index off the accessor.
      if (name.indexOf(']', name.length-1) !== -1) {
        var ls = name.lastIndexOf('[');
        var arrayIndex = name.slice(ls+1, -1);
        if (arrayIndex.length > 0) {
          arrayOffset = parseInt(arrayIndex);
          if (arrayOffset < 0) {
            return -1;
          }
        }
        name = name.slice(0, ls);
      }
  
      var ptable = GL.programInfos[program];
      if (!ptable) {
        return -1;
      }
      var utable = ptable.uniforms;
      var uniformInfo = utable[name]; // returns pair [ dimension_of_uniform_array, uniform_location ]
      if (uniformInfo && arrayOffset < uniformInfo[0]) { // Check if user asked for an out-of-bounds element, i.e. for 'vec4 colors[3];' user could ask for 'colors[10]' which should return -1.
        return uniformInfo[1]+arrayOffset;
      } else {
        return -1;
      }
    }


  function _glBindFramebuffer(target, framebuffer) {
      GLctx.bindFramebuffer(target, framebuffer ? GL.framebuffers[framebuffer] : null);
    }

  function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      var mode = HEAP32[((varargs)>>2)];
      path = Pointer_stringify(path);
      try {
        var stream = FS.open(path, oflag, mode);
        return stream.fd;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }

  function _glDeleteProgram(id) {
      if (!id) return;
      var program = GL.programs[id];
      if (!program) { // glDeleteProgram actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteProgram(program);
      program.name = 0;
      GL.programs[id] = null;
      GL.programInfos[id] = null;
    }


  function _glRenderbufferStorage(x0, x1, x2, x3) { GLctx.renderbufferStorage(x0, x1, x2, x3) }

  
  var _setSourceState=undefined;function _alSourcePlay(source) {
      if (!AL.currentContext) {
        return;
      }
      var src = AL.currentContext.src[source];
      if (!src) {
        AL.currentContext.err = 0xA001 /* AL_INVALID_NAME */;
        return;
      }
      AL.setSourceState(src, 0x1012 /* AL_PLAYING */);
    }

  function _glAttachShader(program, shader) {
      GLctx.attachShader(GL.programs[program],
                              GL.shaders[shader]);
    }

  
  function _msync(addr, len, flags) {
      // int msync(void *addr, size_t len, int flags);
      // http://pubs.opengroup.org/onlinepubs/009696799/functions/msync.html
      // TODO: support sync'ing parts of allocations
      var info = _mmap.mappings[addr];
      if (!info) return 0;
      if (len == info.num) {
        var buffer = new Uint8Array(HEAPU8.buffer, addr, len);
        return FS.msync(FS.getStream(info.fd), buffer, 0, len, info.flags);
      }
  
      return 0;
    }function _munmap(start, num) {
      if (!_mmap.mappings) _mmap.mappings = {};
      // TODO: support unmmap'ing parts of allocations
      var info = _mmap.mappings[start];
      if (!info) return 0;
      if (num == info.num) {
        // At the Linux man page, it says:
        // "The file may not actually be updated until msync(2) or munmap(2) are called."
        // I guess that means we need to call msync when doing munmap
        _msync(start, num); // todo: which flags?
  
        FS.munmap(FS.getStream(info.fd));
  
        _mmap.mappings[start] = null;
        if (info.allocated) {
          _free(info.malloc);
        }
      }
      return 0;
    }

  function _ftime(p) {
      var millis = Date.now();
      HEAP32[((p)>>2)]=(millis/1000)|0;
      HEAP16[(((p)+(4))>>1)]=millis % 1000;
      HEAP16[(((p)+(6))>>1)]=0; // Obsolete field
      HEAP16[(((p)+(8))>>1)]=0; // Obsolete field
      return 0;
    }

  function _SDL_ShowCursor(toggle) {
      switch (toggle) {
        case 0: // SDL_DISABLE
          if (Browser.isFullScreen) { // only try to lock the pointer when in full screen mode
            Module['canvas'].requestPointerLock();
            return 0;
          } else { // else return SDL_ENABLE to indicate the failure
            return 1;
          }
          break;
        case 1: // SDL_ENABLE
          Module['canvas'].exitPointerLock();
          return 1;
          break;
        case -1: // SDL_QUERY
          return !Browser.pointerLock;
          break;
        default:
          console.log( "SDL_ShowCursor called with unknown toggle parameter value: " + toggle + "." );
          break;
      }
    }

  function _glUniform3f(location, v0, v1, v2) {
      location = GL.uniforms[location];
      GLctx.uniform3f(location, v0, v1, v2);
    }

  function _glDrawElements(mode, count, type, indices) {
  
      GLctx.drawElements(mode, count, type, indices);
  
    }

  var _sinf=Math_sin;

  function _glGenVertexArrays(n, arrays) {
  
      for(var i = 0; i < n; i++) {
        var vao = GL.currentContext.vaoExt.createVertexArrayOES();
        if (!vao) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
          while(i < n) HEAP32[(((arrays)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.vaos);
        vao.name = id;
        GL.vaos[id] = vao;
        HEAP32[(((arrays)+(i*4))>>2)]=id;
      }
    }

  function _SDL_Init(initFlags) {
      SDL.startTime = Date.now();
      SDL.initFlags = initFlags;
  
      // capture all key events. we just keep down and up, but also capture press to prevent default actions
      if (!Module['doNotCaptureKeyboard']) {
        var keyboardListeningElement = Module['keyboardListeningElement'] || document;
        keyboardListeningElement.addEventListener("keydown", SDL.receiveEvent);
        keyboardListeningElement.addEventListener("keyup", SDL.receiveEvent);
        keyboardListeningElement.addEventListener("keypress", SDL.receiveEvent);
        window.addEventListener("focus", SDL.receiveEvent);
        window.addEventListener("blur", SDL.receiveEvent);
        document.addEventListener("visibilitychange", SDL.receiveEvent);
      }
  
      if (initFlags & 0x200) {
        // SDL_INIT_JOYSTICK
        // Firefox will not give us Joystick data unless we register this NOP
        // callback.
        // https://bugzilla.mozilla.org/show_bug.cgi?id=936104
        addEventListener("gamepadconnected", function() {});
      }
  
      window.addEventListener("unload", SDL.receiveEvent);
      SDL.keyboardState = _malloc(0x10000); // Our SDL needs 512, but 64K is safe for older SDLs
      _memset(SDL.keyboardState, 0, 0x10000);
      // Initialize this structure carefully for closure
      SDL.DOMEventToSDLEvent['keydown']    = 0x300  /* SDL_KEYDOWN */;
      SDL.DOMEventToSDLEvent['keyup']      = 0x301  /* SDL_KEYUP */;
      SDL.DOMEventToSDLEvent['keypress']   = 0x303  /* SDL_TEXTINPUT */;
      SDL.DOMEventToSDLEvent['mousedown']  = 0x401  /* SDL_MOUSEBUTTONDOWN */;
      SDL.DOMEventToSDLEvent['mouseup']    = 0x402  /* SDL_MOUSEBUTTONUP */;
      SDL.DOMEventToSDLEvent['mousemove']  = 0x400  /* SDL_MOUSEMOTION */;
      SDL.DOMEventToSDLEvent['wheel']      = 0x403  /* SDL_MOUSEWHEEL */; 
      SDL.DOMEventToSDLEvent['touchstart'] = 0x700  /* SDL_FINGERDOWN */;
      SDL.DOMEventToSDLEvent['touchend']   = 0x701  /* SDL_FINGERUP */;
      SDL.DOMEventToSDLEvent['touchmove']  = 0x702  /* SDL_FINGERMOTION */;
      SDL.DOMEventToSDLEvent['unload']     = 0x100  /* SDL_QUIT */;
      SDL.DOMEventToSDLEvent['resize']     = 0x7001 /* SDL_VIDEORESIZE/SDL_EVENT_COMPAT2 */;
      SDL.DOMEventToSDLEvent['visibilitychange'] = 0x200 /* SDL_WINDOWEVENT */;
      SDL.DOMEventToSDLEvent['focus']      = 0x200 /* SDL_WINDOWEVENT */;
      SDL.DOMEventToSDLEvent['blur']       = 0x200 /* SDL_WINDOWEVENT */;
  
      // These are not technically DOM events; the HTML gamepad API is poll-based.
      // However, we define them here, as the rest of the SDL code assumes that
      // all SDL events originate as DOM events.
      SDL.DOMEventToSDLEvent['joystick_axis_motion'] = 0x600 /* SDL_JOYAXISMOTION */;
      SDL.DOMEventToSDLEvent['joystick_button_down'] = 0x603 /* SDL_JOYBUTTONDOWN */;
      SDL.DOMEventToSDLEvent['joystick_button_up'] = 0x604 /* SDL_JOYBUTTONUP */;
      return 0; // success
    }

  function _alcDestroyContext(context) {
      // Stop playback, etc
      clearInterval(AL.contexts[context - 1].interval);
    }

   
  Module["_strcpy"] = _strcpy;

  function _mmap(start, num, prot, flags, fd, offset) {
      /* FIXME: Since mmap is normally implemented at the kernel level,
       * this implementation simply uses malloc underneath the call to
       * mmap.
       */
      var MAP_PRIVATE = 2;
      var ptr;
      var allocated = false;
  
      if (!_mmap.mappings) _mmap.mappings = {};
  
      if (fd == -1) {
        ptr = _malloc(num);
        if (!ptr) return -1;
        _memset(ptr, 0, num);
        allocated = true;
      } else {
        var info = FS.getStream(fd);
        if (!info) return -1;
        try {
          var res = FS.mmap(info, HEAPU8, start, num, offset, prot, flags);
          ptr = res.ptr;
          allocated = res.allocated;
        } catch (e) {
          FS.handleFSError(e);
          return -1;
        }
      }
  
      _mmap.mappings[ptr] = { malloc: ptr, num: num, allocated: allocated, fd: fd, flags: flags };
      return ptr;
    }

  function _glGetShaderiv(shader, pname, p) {
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else {
        HEAP32[((p)>>2)]=GLctx.getShaderParameter(GL.shaders[shader], pname);
      }
    }

   
  Module["_emscripten_free_async_context"] = _emscripten_free_async_context;

   
  Module["_i64Subtract"] = _i64Subtract;

   
  Module["_i64Add"] = _i64Add;

  function _glUseProgram(program) {
      GLctx.useProgram(program ? GL.programs[program] : null);
    }

  function _alcCreateContext(device, attrList) {
      if (device != 1) {
        return 0;
      }
  
      if (attrList) {
        return 0;
      }
  
      var ctx;
      try {
        ctx = new AudioContext();
      } catch (e) {
        try {
          ctx = new webkitAudioContext();
        } catch (e) {}
      }
  
      if (ctx) {
        // Old Web Audio API (e.g. Safari 6.0.5) had an inconsistently named createGainNode function.
        if (typeof(ctx.createGain) === 'undefined') ctx.createGain = ctx.createGainNode;
  
        var gain = ctx.createGain();
        gain.connect(ctx.destination);
        var context = {
          ctx: ctx,
          err: 0,
          src: {},
          buf: [],
          interval: setInterval(function() { AL.updateSources(context); }, AL.QUEUE_INTERVAL),
          gain: gain
        };
        AL.contexts.push(context);
        return AL.contexts.length;
      } else {
        return 0;
      }
    }

  function _alcCloseDevice(device) {
      // Stop playback, etc
    }

  
  
  function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var fd = _fileno(stream);
      var bytesWritten = _write(fd, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return (bytesWritten / size)|0;
      }
    }
  
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      assert((varargs & 3) === 0);
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        argIndex = Runtime.prepVararg(argIndex, type);
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],(+(HEAPF64[(tempDoublePtr)>>3])));
          argIndex += 8;
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
  
          argIndex += 8;
        } else {
          assert((argIndex & 3) === 0);
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += 4;
        }
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[((textIndex)>>0)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)>>0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)>>0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)>>0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)>>0)];
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)>>0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)>>0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[((i)>>0)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }function _printf(format, varargs) {
      // int printf(const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var stdout = HEAP32[((_stdout)>>2)];
      return _fprintf(stdout, format, varargs);
    }

  function _glBindRenderbuffer(target, renderbuffer) {
      GLctx.bindRenderbuffer(target, renderbuffer ? GL.renderbuffers[renderbuffer] : null);
    }

  function _SDL_SetVideoMode(width, height, depth, flags) {
      ['touchstart', 'touchend', 'touchmove', 'mousedown', 'mouseup', 'mousemove', 'DOMMouseScroll', 'mousewheel', 'wheel', 'mouseout'].forEach(function(event) {
        Module['canvas'].addEventListener(event, SDL.receiveEvent, true);
      });
  
      var canvas = Module['canvas'];
  
      // (0,0) means 'use fullscreen' in native; in Emscripten, use the current canvas size.
      if (width == 0 && height == 0) {
        width = canvas.width;
        height = canvas.height;
      }
  
      if (!SDL.addedResizeListener) {
        SDL.addedResizeListener = true;
        Browser.resizeListeners.push(function(w, h) {
          if (!SDL.settingVideoMode) {
            SDL.receiveEvent({
              type: 'resize',
              w: w,
              h: h
            });
          }
        });
      }
  
      if (width !== canvas.width || height !== canvas.height) {
        SDL.settingVideoMode = true; // SetVideoMode itself should not trigger resize events
        Browser.setCanvasSize(width, height);
        SDL.settingVideoMode = false;
      }
  
      // Free the old surface first if there is one
      if (SDL.screen) {
        SDL.freeSurface(SDL.screen);
        assert(!SDL.screen);
      }
  
      if (SDL.GL) flags = flags | 0x04000000; // SDL_OPENGL - if we are using GL, then later calls to SetVideoMode may not mention GL, but we do need it. Once in GL mode, we never leave it.
  
      SDL.screen = SDL.makeSurface(width, height, flags, true, 'screen');
  
      return SDL.screen;
    }

  function _fopen(filename, mode) {
      // FILE *fopen(const char *restrict filename, const char *restrict mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
      var flags;
      mode = Pointer_stringify(mode);
      if (mode[0] == 'r') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 0;
        }
      } else if (mode[0] == 'w') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 512;
      } else if (mode[0] == 'a') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 1024;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var fd = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
      return fd === -1 ? 0 : FS.getPtrForStream(FS.getStream(fd));
    }

  function _glDeleteFramebuffers(n, framebuffers) {
      for (var i = 0; i < n; ++i) {
        var id = HEAP32[(((framebuffers)+(i*4))>>2)];
        var framebuffer = GL.framebuffers[id];
        if (!framebuffer) continue; // GL spec: "glDeleteFramebuffers silently ignores 0s and names that do not correspond to existing framebuffer objects".
        GLctx.deleteFramebuffer(framebuffer);
        framebuffer.name = 0;
        GL.framebuffers[id] = null;
      }
    }

  function _glDrawArrays(mode, first, count) {
  
      GLctx.drawArrays(mode, first, count);
  
    }

  function _alcOpenDevice(deviceName) {
      if (typeof(AudioContext) !== "undefined" ||
          typeof(webkitAudioContext) !== "undefined") {
        return 1; // non-null pointer -- we just simulate one device
      } else {
        return 0;
      }
    }

  function _SDL_PollEvent(ptr) {
      return SDL.pollEvent(ptr);
    }

  function _glClear(x0) { GLctx.clear(x0) }

  
  function _mknod(path, mode, dev) {
      // int mknod(const char *path, mode_t mode, dev_t dev);
      // http://pubs.opengroup.org/onlinepubs/7908799/xsh/mknod.html
      path = Pointer_stringify(path);
      // we don't want this in the JS API as the JS API
      // uses mknod to create all nodes.
      switch (mode & 61440) {
        case 32768:
        case 8192:
        case 24576:
        case 4096:
        case 49152:
          break;
        default:
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
      }
      try {
        FS.mknod(path, mode, dev);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _mkdir(path, mode) {
      // int mkdir(const char *path, mode_t mode);
      // http://pubs.opengroup.org/onlinepubs/7908799/xsh/mkdir.html
      path = Pointer_stringify(path);
      // remove a trailing slash, if one - /a/b/ has basename of '', but
      // we want to create b in the context of this function
      path = PATH.normalize(path);
      if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
      try {
        FS.mkdir(path, mode, 0);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }

  function _glActiveTexture(x0) { GLctx.activeTexture(x0) }

  function _glEnableVertexAttribArray(index) {
      GLctx.enableVertexAttribArray(index);
    }

  function _glBindBuffer(target, buffer) {
      var bufferObj = buffer ? GL.buffers[buffer] : null;
  
  
      GLctx.bindBuffer(target, bufferObj);
    }

  function _SDL_GetError() {
      if (!SDL.errorMessage) {
        SDL.errorMessage = allocate(intArrayFromString("unknown SDL-emscripten error"), 'i8', ALLOC_NORMAL);
      }
      return SDL.errorMessage;
    }

  function _glUniform4f(location, v0, v1, v2, v3) {
      location = GL.uniforms[location];
      GLctx.uniform4f(location, v0, v1, v2, v3);
    }

  function _glFramebufferTexture2D(target, attachment, textarget, texture, level) {
      GLctx.framebufferTexture2D(target, attachment, textarget,
                                      GL.textures[texture], level);
    }

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  function _glBufferData(target, size, data, usage) {
      switch (usage) { // fix usages, WebGL only has *_DRAW
        case 0x88E1: // GL_STREAM_READ
        case 0x88E2: // GL_STREAM_COPY
          usage = 0x88E0; // GL_STREAM_DRAW
          break;
        case 0x88E5: // GL_STATIC_READ
        case 0x88E6: // GL_STATIC_COPY
          usage = 0x88E4; // GL_STATIC_DRAW
          break;
        case 0x88E9: // GL_DYNAMIC_READ
        case 0x88EA: // GL_DYNAMIC_COPY
          usage = 0x88E8; // GL_DYNAMIC_DRAW
          break;
      }
      if (!data) {
        GLctx.bufferData(target, size, usage);
      } else {
        GLctx.bufferData(target, HEAPU8.subarray(data, data+size), usage);
      }
    }

  function _glGetError() {
      // First return any GL error generated by the emscripten library_gl.js interop layer.
      if (GL.lastError) {
        var error = GL.lastError;
        GL.lastError = 0/*GL_NO_ERROR*/;
        return error;
      } else { // If there were none, return the GL error from the browser GL context.
        return GLctx.getError();
      }
    }

  function _gettimeofday(ptr) {
      var now = Date.now();
      HEAP32[((ptr)>>2)]=(now/1000)|0; // seconds
      HEAP32[(((ptr)+(4))>>2)]=((now % 1000)*1000)|0; // microseconds
      return 0;
    }

  function _alGenSources(count, sources) {
      if (!AL.currentContext) {
        return;
      }
      for (var i = 0; i < count; ++i) {
        var gain = AL.currentContext.ctx.createGain();
        gain.connect(AL.currentContext.gain);
        AL.currentContext.src[AL.newSrcId] = {
          state: 0x1011 /* AL_INITIAL */,
          queue: [],
          loop: false,
          get refDistance() {
            return this._refDistance || 1;
          },
          set refDistance(val) {
            this._refDistance = val;
            if (this.panner) this.panner.refDistance = val;
          },
          get maxDistance() {
            return this._maxDistance || 10000;
          },
          set maxDistance(val) {
            this._maxDistance = val;
            if (this.panner) this.panner.maxDistance = val;
          },
          get rolloffFactor() {
            return this._rolloffFactor || 1;
          },
          set rolloffFactor(val) {
            this._rolloffFactor = val;
            if (this.panner) this.panner.rolloffFactor = val;
          },
          get position() {
            return this._position || [0, 0, 0];
          },
          set position(val) {
            this._position = val;
            if (this.panner) this.panner.setPosition(val[0], val[1], val[2]);
          },
          get velocity() {
            return this._velocity || [0, 0, 0];
          },
          set velocity(val) {
            this._velocity = val;
            if (this.panner) this.panner.setVelocity(val[0], val[1], val[2]);
          },
          get direction() {
            return this._direction || [0, 0, 0];
          },
          set direction(val) {
            this._direction = val;
            if (this.panner) this.panner.setOrientation(val[0], val[1], val[2]);
          },
          get coneOuterGain() {
            return this._coneOuterGain || 0.0;
          },
          set coneOuterGain(val) {
            this._coneOuterGain = val;
            if (this.panner) this.panner.coneOuterGain = val;
          },
          get coneInnerAngle() {
            return this._coneInnerAngle || 360.0;
          },
          set coneInnerAngle(val) {
            this._coneInnerAngle = val;
            if (this.panner) this.panner.coneInnerAngle = val;
          },
          get coneOuterAngle() {
            return this._coneOuterAngle || 360.0;
          },
          set coneOuterAngle(val) {
            this._coneOuterAngle = val;
            if (this.panner) this.panner.coneOuterAngle = val;
          },
          gain: gain,
          panner: null,
          buffersPlayed: 0,
          bufferPosition: 0
        };
        HEAP32[(((sources)+(i*4))>>2)]=AL.newSrcId;
        AL.newSrcId++;
      }
    }

  function _glGetShaderInfoLog(shader, maxLength, length, infoLog) {
      var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
      if (log === null) log = '(unknown error)';
      log = log.substr(0, maxLength - 1);
      if (maxLength > 0 && infoLog) {
        writeStringToMemory(log, infoLog);
        if (length) HEAP32[((length)>>2)]=log.length;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
    }

  function _glGenFramebuffers(n, ids) {
      for (var i = 0; i < n; ++i) {
        var framebuffer = GLctx.createFramebuffer();
        if (!framebuffer) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
          while(i < n) HEAP32[(((ids)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.framebuffers);
        framebuffer.name = id;
        GL.framebuffers[id] = framebuffer;
        HEAP32[(((ids)+(i*4))>>2)]=id;
      }
    }

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) {
        var success = self.alloc(bytes);
        if (!success) return -1 >>> 0; // sbrk failure code
      }
      return ret;  // Previous break location.
    }

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  var _emscripten_check_async=true;


  function _emscripten_cancel_main_loop() {
      Browser.mainLoop.pause();
      Browser.mainLoop.func = null;
    }

  function _alDeleteSources(count, sources) {
      if (!AL.currentContext) {
        return;
      }
      for (var i = 0; i < count; ++i) {
        var sourceIdx = HEAP32[(((sources)+(i*4))>>2)];
        delete AL.currentContext.src[sourceIdx];
      }
    }

  function _emscripten_run_script_int(ptr) {
      return eval(Pointer_stringify(ptr))|0;
    }

  function _glDeleteVertexArrays(n, vaos) {
      for(var i = 0; i < n; i++) {
        var id = HEAP32[(((vaos)+(i*4))>>2)];
        GL.currentContext.vaoExt.deleteVertexArrayOES(GL.vaos[id]);
        GL.vaos[id] = null;
      }
    }

  function _glDisableVertexAttribArray(index) {
      GLctx.disableVertexAttribArray(index);
    }

  function _glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels) {
      if (pixels) {
        var data = GL.getTexPixelData(type, format, width, height, pixels, internalFormat);
        pixels = data.pixels;
        internalFormat = data.internalFormat;
      } else {
        pixels = null;
      }
      GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixels);
    }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 85: return totalMemory / PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 79:
          return 0;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  
  
  function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) {
        return 0;
      }
      var bytesRead = 0;
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[((ptr++)>>0)]=streamObj.ungotten.pop();
        bytesToRead--;
        bytesRead++;
      }
      var err = _read(streamObj.fd, ptr, bytesToRead);
      if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      }
      bytesRead += err;
      if (bytesRead < bytesToRead) streamObj.eof = true;
      return (bytesRead / size)|0;
    }

  function _glBindVertexArray(vao) {
  
      GL.currentContext.vaoExt.bindVertexArrayOES(GL.vaos[vao]);
    }

  function _abort() {
      Module['abort']();
    }


  
  
  var ___async=0;
  
  var ___async_unwind=1; 
  Module["_emscripten_async_resume"] = _emscripten_async_resume;function _emscripten_sleep(ms) {
      asm.setAsync(); // tell the scheduler that we have a callback on hold
      Browser.safeSetTimeout(_emscripten_async_resume, ms);
    }


  var _emscripten_asm_const=true;

  function _glEnable(x0) { GLctx.enable(x0) }

  function _emscripten_async_wget2(url, file, request, param, arg, onload, onerror, onprogress) {
      Module['noExitRuntime'] = true;
  
      var _url = Pointer_stringify(url);
      var _file = Pointer_stringify(file);
      var _request = Pointer_stringify(request);
      var _param = Pointer_stringify(param);
      var index = _file.lastIndexOf('/');
  
      var http = new XMLHttpRequest();
      http.open(_request, _url, true);
      http.responseType = 'arraybuffer';
  
      var handle = Browser.getNextWgetRequestHandle();
  
      // LOAD
      http.onload = function http_onload(e) {
        if (http.status == 200) {
          // if a file exists there, we overwrite it
          try {
            FS.unlink(_file);
          } catch (e) {}
          FS.createDataFile( _file.substr(0, index), _file.substr(index + 1), new Uint8Array(http.response), true, true);
          if (onload) {
            var stack = Runtime.stackSave();
            Runtime.dynCall('viii', onload, [handle, arg, allocate(intArrayFromString(_file), 'i8', ALLOC_STACK)]);
            Runtime.stackRestore(stack);
          }
        } else {
          if (onerror) Runtime.dynCall('viii', onerror, [handle, arg, http.status]);
        }
  
        delete Browser.wgetRequests[handle];
      };
  
      // ERROR
      http.onerror = function http_onerror(e) {
        if (onerror) Runtime.dynCall('viii', onerror, [handle, arg, http.status]);
        delete Browser.wgetRequests[handle];
      };
  
      // PROGRESS
      http.onprogress = function http_onprogress(e) {
        if (e.lengthComputable || (e.lengthComputable === undefined && e.total != 0)) {
          var percentComplete = (e.loaded / e.total)*100;
          if (onprogress) Runtime.dynCall('viii', onprogress, [handle, arg, percentComplete]);
        }
      };
  
      // ABORT
      http.onabort = function http_onabort(e) {
        delete Browser.wgetRequests[handle];
      };
  
      // Useful because the browser can limit the number of redirection
      try {
        if (http.channel instanceof Ci.nsIHttpChannel)
        http.channel.redirectionLimit = 0;
      } catch (ex) { /* whatever */ }
  
      if (_request == "POST") {
        //Send the proper header information along with the request
        http.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
        http.setRequestHeader("Content-length", _param.length);
        http.setRequestHeader("Connection", "close");
        http.send(_param);
      } else {
        http.send(null);
      }
  
      Browser.wgetRequests[handle] = http;
  
      return handle;
    }

  function _alGenBuffers(count, buffers) {
      if (!AL.currentContext) {
        return;
      }
      for (var i = 0; i < count; ++i) {
        AL.currentContext.buf.push(null);
        HEAP32[(((buffers)+(i*4))>>2)]=AL.currentContext.buf.length;
      }
    }

  
  function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) return -1;
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _fread(_fgetc.ret, 1, 1, stream);
      if (ret == 0) {
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAPU8[((_fgetc.ret)>>0)];
      }
    }function _getc() {
  return _fgetc.apply(null, arguments)
  }

  function _glShaderSource(shader, count, string, length) {
      var source = GL.getSource(shader, count, string, length);
      GLctx.shaderSource(GL.shaders[shader], source);
    }

  function _glGenBuffers(n, buffers) {
      for (var i = 0; i < n; i++) {
        var buffer = GLctx.createBuffer();
        if (!buffer) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
          while(i < n) HEAP32[(((buffers)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.buffers);
        buffer.name = id;
        GL.buffers[id] = buffer;
        HEAP32[(((buffers)+(i*4))>>2)]=id;
      }
    }

  function _glGetAttribLocation(program, name) {
      program = GL.programs[program];
      name = Pointer_stringify(name);
      return GLctx.getAttribLocation(program, name);
    }

  var _emscripten_do_not_unwind_async=true;

  function _glDeleteShader(id) {
      if (!id) return;
      var shader = GL.shaders[id];
      if (!shader) { // glDeleteShader actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteShader(shader);
      GL.shaders[id] = null;
    }

  function _glBlendFunc(x0, x1) { GLctx.blendFunc(x0, x1) }

  function _glCreateProgram() {
      var id = GL.getNewId(GL.programs);
      var program = GLctx.createProgram();
      program.name = id;
      GL.programs[id] = program;
      return id;
    }

  var _ceilf=Math_ceil;

  function _glViewport(x0, x1, x2, x3) { GLctx.viewport(x0, x1, x2, x3) }


   
  Module["_emscripten_realloc_async_context"] = _emscripten_realloc_async_context;

  function _glUniformMatrix4fv(location, count, transpose, value) {
      location = GL.uniforms[location];
      var view;
      if (count === 1) {
        // avoid allocation for the common case of uploading one uniform matrix
        view = GL.miniTempBufferViews[15];
        for (var i = 0; i < 16; i++) {
          view[i] = HEAPF32[(((value)+(i*4))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*64)>>2);
      }
      GLctx.uniformMatrix4fv(location, transpose, view);
    }

  function _alBufferData(buffer, format, data, size, freq) {
      if (!AL.currentContext) {
        return;
      }
      if (buffer > AL.currentContext.buf.length) {
        return;
      }
      var channels, bytes;
      switch (format) {
      case 0x1100 /* AL_FORMAT_MONO8 */:
        bytes = 1;
        channels = 1;
        break;
      case 0x1101 /* AL_FORMAT_MONO16 */:
        bytes = 2;
        channels = 1;
        break;
      case 0x1102 /* AL_FORMAT_STEREO8 */:
        bytes = 1;
        channels = 2;
        break;
      case 0x1103 /* AL_FORMAT_STEREO16 */:
        bytes = 2;
        channels = 2;
        break;
      case 0x10010 /* AL_FORMAT_MONO_FLOAT32 */:
        bytes = 4;
        channels = 1;
        break;
      case 0x10011 /* AL_FORMAT_STEREO_FLOAT32 */:
        bytes = 4;
        channels = 2;
        break;
      default:
        return;
      }
      try {
        AL.currentContext.buf[buffer - 1] = AL.currentContext.ctx.createBuffer(channels, size / (bytes * channels), freq);
        AL.currentContext.buf[buffer - 1].bytesPerSample =  bytes;
      } catch (e) {
        AL.currentContext.err = 0xA003 /* AL_INVALID_VALUE */;
        return;
      }
      var buf = new Array(channels);
      for (var i = 0; i < channels; ++i) {
        buf[i] = AL.currentContext.buf[buffer - 1].getChannelData(i);
      }
      for (var i = 0; i < size / (bytes * channels); ++i) {
        for (var j = 0; j < channels; ++j) {
          switch (bytes) {
          case 1:
            var val = HEAP8[(((data)+(i*channels+j))>>0)] & 0xff;  // unsigned
            buf[j][i] = -1.0 + val * (2/256);
            break;
          case 2:
            var val = HEAP16[(((data)+(2*(i*channels+j)))>>1)];
            buf[j][i] = val/32768;
            break;
          case 4:
            buf[j][i] = HEAPF32[(((data)+(4*(i*channels+j)))>>2)];
            break;
          }
        }
      }
    }


  function _glTexParameteri(x0, x1, x2) { GLctx.texParameteri(x0, x1, x2) }

  function _glDeleteBuffers(n, buffers) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((buffers)+(i*4))>>2)];
        var buffer = GL.buffers[id];
  
        // From spec: "glDeleteBuffers silently ignores 0's and names that do not
        // correspond to existing buffer objects."
        if (!buffer) continue;
  
        GLctx.deleteBuffer(buffer);
        buffer.name = 0;
        GL.buffers[id] = null;
  
        if (id == GL.currArrayBuffer) GL.currArrayBuffer = 0;
        if (id == GL.currElementArrayBuffer) GL.currElementArrayBuffer = 0;
      }
    }

  function _SDL_FreeSurface(surf) {
      if (surf) SDL.freeSurface(surf);
    }

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

var GLctx; GL.init()
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); }
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) }
___buildEnvironment(ENV);
__ATINIT__.push(function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); });
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);


function nullFunc_vid(x) { Module["printErr"]("Invalid function pointer called with signature 'vid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_di(x) { Module["printErr"]("Invalid function pointer called with signature 'di'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_i(x) { Module["printErr"]("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vidd(x) { Module["printErr"]("Invalid function pointer called with signature 'vidd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_vid(index,a1,a2) {
  try {
    Module["dynCall_vid"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_di(index,a1) {
  try {
    return Module["dynCall_di"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vidd(index,a1,a2,a3) {
  try {
    Module["dynCall_vidd"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };
Module.asmLibraryArg = { "abort": abort, "assert": assert, "nullFunc_vid": nullFunc_vid, "nullFunc_di": nullFunc_di, "nullFunc_i": nullFunc_i, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_iiiiiii": nullFunc_iiiiiii, "nullFunc_vidd": nullFunc_vidd, "nullFunc_ii": nullFunc_ii, "nullFunc_viii": nullFunc_viii, "nullFunc_v": nullFunc_v, "nullFunc_iii": nullFunc_iii, "invoke_vid": invoke_vid, "invoke_di": invoke_di, "invoke_i": invoke_i, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_iiiiiii": invoke_iiiiiii, "invoke_vidd": invoke_vidd, "invoke_ii": invoke_ii, "invoke_viii": invoke_viii, "invoke_v": invoke_v, "invoke_iii": invoke_iii, "_glUseProgram": _glUseProgram, "_fread": _fread, "_glUniformMatrix4fv": _glUniformMatrix4fv, "_mknod": _mknod, "_SDL_RWFromFile": _SDL_RWFromFile, "_fstat": _fstat, "_alBufferData": _alBufferData, "_glDeleteProgram": _glDeleteProgram, "_glBindBuffer": _glBindBuffer, "_glGetShaderInfoLog": _glGetShaderInfoLog, "_SDL_GetError": _SDL_GetError, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_ceilf": _ceilf, "_glBlendFunc": _glBlendFunc, "_glGetAttribLocation": _glGetAttribLocation, "_glDisableVertexAttribArray": _glDisableVertexAttribArray, "_Mix_PlayChannel": _Mix_PlayChannel, "_TTF_RenderText_Solid": _TTF_RenderText_Solid, "_sysconf": _sysconf, "_close": _close, "_Mix_PlayMusic": _Mix_PlayMusic, "_glUniform4f": _glUniform4f, "_puts": _puts, "_emscripten_run_script_int": _emscripten_run_script_int, "_Mix_FreeChunk": _Mix_FreeChunk, "_write": _write, "_strerror": _strerror, "_glGenBuffers": _glGenBuffers, "_glShaderSource": _glShaderSource, "_glFramebufferRenderbuffer": _glFramebufferRenderbuffer, "_emscripten_sleep": _emscripten_sleep, "_Mix_HaltMusic": _Mix_HaltMusic, "_alSourcePlay": _alSourcePlay, "_mkdir": _mkdir, "_glVertexAttribPointer": _glVertexAttribPointer, "_send": _send, "_alcCreateContext": _alcCreateContext, "_SDL_GL_SetAttribute": _SDL_GL_SetAttribute, "_glRenderbufferStorage": _glRenderbufferStorage, "_SDL_GetTicks": _SDL_GetTicks, "_glBindRenderbuffer": _glBindRenderbuffer, "_glDrawElements": _glDrawElements, "_emscripten_hide_mouse": _emscripten_hide_mouse, "_alcMakeContextCurrent": _alcMakeContextCurrent, "_SDL_LockSurface": _SDL_LockSurface, "_strerror_r": _strerror_r, "_glViewport": _glViewport, "_glDeleteVertexArrays": _glDeleteVertexArrays, "_glDeleteTextures": _glDeleteTextures, "_glUniform3f": _glUniform3f, "_alSourcei": _alSourcei, "_ceil": _ceil, "_alGenBuffers": _alGenBuffers, "_glEnable": _glEnable, "_printf": _printf, "_glGenTextures": _glGenTextures, "_alDeleteSources": _alDeleteSources, "_glewInit": _glewInit, "_alGetError": _alGetError, "_stat": _stat, "_glAttachShader": _glAttachShader, "_glCreateProgram": _glCreateProgram, "_mkport": _mkport, "_read": _read, "_SDL_SetVideoMode": _SDL_SetVideoMode, "_fwrite": _fwrite, "_time": _time, "_glBindFramebuffer": _glBindFramebuffer, "_glDetachShader": _glDetachShader, "_gettimeofday": _gettimeofday, "_munmap": _munmap, "_mmap": _mmap, "_SDL_UpperBlitScaled": _SDL_UpperBlitScaled, "_glUniform2f": _glUniform2f, "_ftime": _ftime, "_glGetString": _glGetString, "_putenv": _putenv, "_SDL_ShowCursor": _SDL_ShowCursor, "_glDeleteFramebuffers": _glDeleteFramebuffers, "_IMG_Load": _IMG_Load, "_emscripten_async_wget2": _emscripten_async_wget2, "_TTF_FontHeight": _TTF_FontHeight, "_glFramebufferTexture2D": _glFramebufferTexture2D, "___buildEnvironment": ___buildEnvironment, "_pwrite": _pwrite, "_glBindTexture": _glBindTexture, "_open": _open, "_glClearColor": _glClearColor, "_SDL_Init": _SDL_Init, "_glUniform1f": _glUniform1f, "_SDL_FreeSurface": _SDL_FreeSurface, "_perror": _perror, "_glUniform1i": _glUniform1i, "_alcDestroyContext": _alcDestroyContext, "_glDrawArrays": _glDrawArrays, "_glCreateShader": _glCreateShader, "_glGetError": _glGetError, "_SDL_GetMouseState": _SDL_GetMouseState, "_getenv": _getenv, "_fclose": _fclose, "__reallyNegative": __reallyNegative, "_glActiveTexture": _glActiveTexture, "_alcGetString": _alcGetString, "_recv": _recv, "_glCompileShader": _glCompileShader, "_alcCloseDevice": _alcCloseDevice, "_glEnableVertexAttribArray": _glEnableVertexAttribArray, "_fputc": _fputc, "_abort": _abort, "_glBindVertexArray": _glBindVertexArray, "_glDeleteBuffers": _glDeleteBuffers, "_glBufferData": _glBufferData, "_glTexImage2D": _glTexImage2D, "_fopen": _fopen, "_glFlush": _glFlush, "_glDeleteShader": _glDeleteShader, "_cosf": _cosf, "_glGetProgramiv": _glGetProgramiv, "_glGenVertexArrays": _glGenVertexArrays, "_SDL_CloseAudio": _SDL_CloseAudio, "_glDeleteRenderbuffers": _glDeleteRenderbuffers, "_glLinkProgram": _glLinkProgram, "_glGenRenderbuffers": _glGenRenderbuffers, "_SDL_FreeRW": _SDL_FreeRW, "_fprintf": _fprintf, "_SDL_PauseAudio": _SDL_PauseAudio, "_SDL_PollEvent": _SDL_PollEvent, "_glGetUniformLocation": _glGetUniformLocation, "_emscripten_cancel_main_loop": _emscripten_cancel_main_loop, "_glClear": _glClear, "_fileno": _fileno, "_Mix_LoadWAV_RW": _Mix_LoadWAV_RW, "_sinf": _sinf, "__exit": __exit, "_IMG_Load_RW": _IMG_Load_RW, "_glGenFramebuffers": _glGenFramebuffers, "_glGetShaderiv": _glGetShaderiv, "_alDeleteBuffers": _alDeleteBuffers, "_pread": _pread, "_TTF_SizeText": _TTF_SizeText, "_sbrk": _sbrk, "_getc": _getc, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_fflush": _fflush, "_exit": _exit, "___errno_location": ___errno_location, "_alGenSources": _alGenSources, "_SDL_RWFromConstMem": _SDL_RWFromConstMem, "_fgetc": _fgetc, "_alcOpenDevice": _alcOpenDevice, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_glDisable": _glDisable, "_glTexParameteri": _glTexParameteri, "___setErrNo": ___setErrNo, "__formatString": __formatString, "_fputs": _fputs, "_SDL_UpperBlit": _SDL_UpperBlit, "_emscripten_asm_const_0": _emscripten_asm_const_0, "_msync": _msync, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "___async": ___async, "___async_unwind": ___async_unwind, "___async_retval": ___async_retval, "___async_cur_frame": ___async_cur_frame, "_stderr": _stderr };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var ___async=env.___async|0;
  var ___async_unwind=env.___async_unwind|0;
  var ___async_retval=env.___async_retval|0;
  var ___async_cur_frame=env.___async_cur_frame|0;
  var _stderr=env._stderr|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var nullFunc_vid=env.nullFunc_vid;
  var nullFunc_di=env.nullFunc_di;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_iiiiiii=env.nullFunc_iiiiiii;
  var nullFunc_vidd=env.nullFunc_vidd;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_iii=env.nullFunc_iii;
  var invoke_vid=env.invoke_vid;
  var invoke_di=env.invoke_di;
  var invoke_i=env.invoke_i;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_iiiiiii=env.invoke_iiiiiii;
  var invoke_vidd=env.invoke_vidd;
  var invoke_ii=env.invoke_ii;
  var invoke_viii=env.invoke_viii;
  var invoke_v=env.invoke_v;
  var invoke_iii=env.invoke_iii;
  var _glUseProgram=env._glUseProgram;
  var _fread=env._fread;
  var _glUniformMatrix4fv=env._glUniformMatrix4fv;
  var _mknod=env._mknod;
  var _SDL_RWFromFile=env._SDL_RWFromFile;
  var _fstat=env._fstat;
  var _alBufferData=env._alBufferData;
  var _glDeleteProgram=env._glDeleteProgram;
  var _glBindBuffer=env._glBindBuffer;
  var _glGetShaderInfoLog=env._glGetShaderInfoLog;
  var _SDL_GetError=env._SDL_GetError;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _ceilf=env._ceilf;
  var _glBlendFunc=env._glBlendFunc;
  var _glGetAttribLocation=env._glGetAttribLocation;
  var _glDisableVertexAttribArray=env._glDisableVertexAttribArray;
  var _Mix_PlayChannel=env._Mix_PlayChannel;
  var _TTF_RenderText_Solid=env._TTF_RenderText_Solid;
  var _sysconf=env._sysconf;
  var _close=env._close;
  var _Mix_PlayMusic=env._Mix_PlayMusic;
  var _glUniform4f=env._glUniform4f;
  var _puts=env._puts;
  var _emscripten_run_script_int=env._emscripten_run_script_int;
  var _Mix_FreeChunk=env._Mix_FreeChunk;
  var _write=env._write;
  var _strerror=env._strerror;
  var _glGenBuffers=env._glGenBuffers;
  var _glShaderSource=env._glShaderSource;
  var _glFramebufferRenderbuffer=env._glFramebufferRenderbuffer;
  var _emscripten_sleep=env._emscripten_sleep;
  var _Mix_HaltMusic=env._Mix_HaltMusic;
  var _alSourcePlay=env._alSourcePlay;
  var _mkdir=env._mkdir;
  var _glVertexAttribPointer=env._glVertexAttribPointer;
  var _send=env._send;
  var _alcCreateContext=env._alcCreateContext;
  var _SDL_GL_SetAttribute=env._SDL_GL_SetAttribute;
  var _glRenderbufferStorage=env._glRenderbufferStorage;
  var _SDL_GetTicks=env._SDL_GetTicks;
  var _glBindRenderbuffer=env._glBindRenderbuffer;
  var _glDrawElements=env._glDrawElements;
  var _emscripten_hide_mouse=env._emscripten_hide_mouse;
  var _alcMakeContextCurrent=env._alcMakeContextCurrent;
  var _SDL_LockSurface=env._SDL_LockSurface;
  var _strerror_r=env._strerror_r;
  var _glViewport=env._glViewport;
  var _glDeleteVertexArrays=env._glDeleteVertexArrays;
  var _glDeleteTextures=env._glDeleteTextures;
  var _glUniform3f=env._glUniform3f;
  var _alSourcei=env._alSourcei;
  var _ceil=env._ceil;
  var _alGenBuffers=env._alGenBuffers;
  var _glEnable=env._glEnable;
  var _printf=env._printf;
  var _glGenTextures=env._glGenTextures;
  var _alDeleteSources=env._alDeleteSources;
  var _glewInit=env._glewInit;
  var _alGetError=env._alGetError;
  var _stat=env._stat;
  var _glAttachShader=env._glAttachShader;
  var _glCreateProgram=env._glCreateProgram;
  var _mkport=env._mkport;
  var _read=env._read;
  var _SDL_SetVideoMode=env._SDL_SetVideoMode;
  var _fwrite=env._fwrite;
  var _time=env._time;
  var _glBindFramebuffer=env._glBindFramebuffer;
  var _glDetachShader=env._glDetachShader;
  var _gettimeofday=env._gettimeofday;
  var _munmap=env._munmap;
  var _mmap=env._mmap;
  var _SDL_UpperBlitScaled=env._SDL_UpperBlitScaled;
  var _glUniform2f=env._glUniform2f;
  var _ftime=env._ftime;
  var _glGetString=env._glGetString;
  var _putenv=env._putenv;
  var _SDL_ShowCursor=env._SDL_ShowCursor;
  var _glDeleteFramebuffers=env._glDeleteFramebuffers;
  var _IMG_Load=env._IMG_Load;
  var _emscripten_async_wget2=env._emscripten_async_wget2;
  var _TTF_FontHeight=env._TTF_FontHeight;
  var _glFramebufferTexture2D=env._glFramebufferTexture2D;
  var ___buildEnvironment=env.___buildEnvironment;
  var _pwrite=env._pwrite;
  var _glBindTexture=env._glBindTexture;
  var _open=env._open;
  var _glClearColor=env._glClearColor;
  var _SDL_Init=env._SDL_Init;
  var _glUniform1f=env._glUniform1f;
  var _SDL_FreeSurface=env._SDL_FreeSurface;
  var _perror=env._perror;
  var _glUniform1i=env._glUniform1i;
  var _alcDestroyContext=env._alcDestroyContext;
  var _glDrawArrays=env._glDrawArrays;
  var _glCreateShader=env._glCreateShader;
  var _glGetError=env._glGetError;
  var _SDL_GetMouseState=env._SDL_GetMouseState;
  var _getenv=env._getenv;
  var _fclose=env._fclose;
  var __reallyNegative=env.__reallyNegative;
  var _glActiveTexture=env._glActiveTexture;
  var _alcGetString=env._alcGetString;
  var _recv=env._recv;
  var _glCompileShader=env._glCompileShader;
  var _alcCloseDevice=env._alcCloseDevice;
  var _glEnableVertexAttribArray=env._glEnableVertexAttribArray;
  var _fputc=env._fputc;
  var _abort=env._abort;
  var _glBindVertexArray=env._glBindVertexArray;
  var _glDeleteBuffers=env._glDeleteBuffers;
  var _glBufferData=env._glBufferData;
  var _glTexImage2D=env._glTexImage2D;
  var _fopen=env._fopen;
  var _glFlush=env._glFlush;
  var _glDeleteShader=env._glDeleteShader;
  var _cosf=env._cosf;
  var _glGetProgramiv=env._glGetProgramiv;
  var _glGenVertexArrays=env._glGenVertexArrays;
  var _SDL_CloseAudio=env._SDL_CloseAudio;
  var _glDeleteRenderbuffers=env._glDeleteRenderbuffers;
  var _glLinkProgram=env._glLinkProgram;
  var _glGenRenderbuffers=env._glGenRenderbuffers;
  var _SDL_FreeRW=env._SDL_FreeRW;
  var _fprintf=env._fprintf;
  var _SDL_PauseAudio=env._SDL_PauseAudio;
  var _SDL_PollEvent=env._SDL_PollEvent;
  var _glGetUniformLocation=env._glGetUniformLocation;
  var _emscripten_cancel_main_loop=env._emscripten_cancel_main_loop;
  var _glClear=env._glClear;
  var _fileno=env._fileno;
  var _Mix_LoadWAV_RW=env._Mix_LoadWAV_RW;
  var _sinf=env._sinf;
  var __exit=env.__exit;
  var _IMG_Load_RW=env._IMG_Load_RW;
  var _glGenFramebuffers=env._glGenFramebuffers;
  var _glGetShaderiv=env._glGetShaderiv;
  var _alDeleteBuffers=env._alDeleteBuffers;
  var _pread=env._pread;
  var _TTF_SizeText=env._TTF_SizeText;
  var _sbrk=env._sbrk;
  var _getc=env._getc;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _fflush=env._fflush;
  var _exit=env._exit;
  var ___errno_location=env.___errno_location;
  var _alGenSources=env._alGenSources;
  var _SDL_RWFromConstMem=env._SDL_RWFromConstMem;
  var _fgetc=env._fgetc;
  var _alcOpenDevice=env._alcOpenDevice;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _glDisable=env._glDisable;
  var _glTexParameteri=env._glTexParameteri;
  var ___setErrNo=env.___setErrNo;
  var __formatString=env.__formatString;
  var _fputs=env._fputs;
  var _SDL_UpperBlit=env._SDL_UpperBlit;
  var _emscripten_asm_const_0=env._emscripten_asm_const_0;
  var _msync=env._msync;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
if ((STACKTOP|0) >= (STACK_MAX|0)) abort();

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setAsync() {
  ___async = 1;
}
function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function copyTempFloat(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
}
function copyTempDouble(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
  HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
  HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
  HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _initialize_ball() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $AsyncCtx = 0, $IsAsync = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[(651908)>>2]|0;
 $1 = HEAP32[(389572)>>2]|0;
 $2 = (($1|0) / 2)&-1;
 $3 = HEAP32[(389576)>>2]|0;
 $4 = (($3|0) / 2)&-1;
 $5 = (($1|0) / 40)&-1;
 $6 = (($3|0) / 27)&-1;
 HEAPF64[$vararg_buffer>>3] = 1.0;
 $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
 HEAPF64[$vararg_ptr1>>3] = 1.0;
 $vararg_ptr2 = ((($vararg_buffer)) + 16|0);
 HEAPF64[$vararg_ptr2>>3] = 1.0;
 $vararg_ptr3 = ((($vararg_buffer)) + 24|0);
 HEAPF64[$vararg_ptr3>>3] = 1.0;
 $AsyncCtx = _emscripten_alloc_async_context(8,sp)|0;
 $7 = (FUNCTION_TABLE_iiiiiii[$0 & 255](7,$2,$4,$5,$6,$vararg_buffer)|0);
 $IsAsync = ___async;
 if ($IsAsync) {
  HEAP32[$AsyncCtx>>2] = 1;
  $8 = ((($AsyncCtx)) + 4|0);
  HEAP32[$8>>2] = $vararg_buffer;
  sp = STACKTOP;
  STACKTOP = sp;return;
 } else {
  _emscripten_free_async_context(($AsyncCtx|0));
  HEAP32[8>>2] = $7;
  $9 = HEAP32[(389576)>>2]|0;
  $10 = (($9|0) / 40)&-1;
  $11 = (+($10|0));
  $12 = HEAP32[(389572)>>2]|0;
  $13 = (+($12|0));
  $14 = (+($9|0));
  $15 = $13 / $14;
  $16 = $11 * $15;
  $17 = $16;
  $18 = $17 * 0.90000000000000002;
  $19 = $18;
  $20 = $19 * 0.5;
  HEAPF32[16>>2] = $20;
  HEAPF32[24>>2] = 1.0;
  HEAPF32[32>>2] = 0.0;
  HEAP8[35200>>0] = 0;
  STACKTOP = sp;return;
 }
}
function _score_ball() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0.0;
 var $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond2 = 0, $ret$0 = 0, $ret$03 = 0;
 var $who_scored$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[8>>2]|0;
 $1 = ((($0)) + 8|0);
 $2 = +HEAPF32[$1>>2];
 $3 = $2 < 0.0;
 do {
  if ($3) {
   HEAPF32[24>>2] = 1.0;
   HEAPF32[32>>2] = 0.0;
   _update_score(2);
   $4 = (_get_score(2)|0);
   $ret$0 = $4;$who_scored$0 = 2;
  } else {
   $5 = HEAP32[(389572)>>2]|0;
   $6 = (+($5|0));
   $7 = $2 > $6;
   if ($7) {
    HEAPF32[24>>2] = -1.0;
    HEAPF32[32>>2] = 0.0;
    _update_score(1);
    $8 = (_get_score(1)|0);
    $ret$0 = $8;$who_scored$0 = 1;
    break;
   } else {
    $ret$03 = 0;
    return ($ret$03|0);
   }
  }
 } while(0);
 $9 = ($ret$0|0)==(0);
 if ($9) {
  $ret$03 = 0;
  return ($ret$03|0);
 }
 _hide_item();
 _hide_danger();
 $10 = HEAP32[(389556)>>2]|0;
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(1);
 $13 = ($who_scored$0|0)==(2);
 $or$cond = $13 & $12;
 $14 = ($11|0)>(1);
 $or$cond2 = $14 | $or$cond;
 if (!($or$cond2)) {
  $ret$03 = $ret$0;
  return ($ret$03|0);
 }
 if (!($12)) {
  $40 = HEAP32[(389576)>>2]|0;
  $41 = (($40|0) / 40)&-1;
  $42 = (+($41|0));
  $43 = HEAP32[(389572)>>2]|0;
  $44 = (+($43|0));
  $45 = (+($40|0));
  $46 = $44 / $45;
  $47 = $42 * $46;
  $48 = $47;
  $49 = $48 * 0.90000000000000002;
  $50 = $49 * 0.5;
  $51 = +HEAPF32[16>>2];
  $52 = $51;
  $53 = $52 + $50;
  $54 = $53 * 0.5;
  $55 = $54;
  HEAPF32[16>>2] = $55;
  $ret$03 = $ret$0;
  return ($ret$03|0);
 }
 $15 = (_get_score(1)|0);
 $16 = ($15|0)<(2);
 if ($16) {
  $ret$03 = $ret$0;
  return ($ret$03|0);
 }
 $17 = +HEAPF32[16>>2];
 $18 = $17;
 $19 = HEAP32[40>>2]|0;
 $20 = ((($19)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($21) + -1)|0;
 $23 = (+($22|0));
 $24 = $23 * 0.375;
 $25 = $24 + 0.5;
 $26 = HEAP32[(389576)>>2]|0;
 $27 = (($26|0) / 40)&-1;
 $28 = (+($27|0));
 $29 = HEAP32[(389572)>>2]|0;
 $30 = (+($29|0));
 $31 = (+($26|0));
 $32 = $30 / $31;
 $33 = $28 * $32;
 $34 = $33;
 $35 = $34 * 0.90000000000000002;
 $36 = $25 * $35;
 $37 = $18 + $36;
 $38 = $37;
 $39 = $38 < $17;
 if (!($39)) {
  $ret$03 = $ret$0;
  return ($ret$03|0);
 }
 HEAPF32[16>>2] = $38;
 $ret$03 = $ret$0;
 return ($ret$03|0);
}
function _reset_ball() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $AsyncCtx = 0, $IsAsync = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(651920)>>2]|0;
 $1 = HEAP32[8>>2]|0;
 $2 = HEAP32[(389572)>>2]|0;
 $3 = (+($2|0));
 $4 = $3 * 0.5;
 $5 = $4;
 $6 = HEAP32[(389576)>>2]|0;
 $7 = (+($6|0));
 $8 = $7 * 0.5;
 $9 = $8;
 $AsyncCtx = _emscripten_alloc_async_context(4,sp)|0;
 FUNCTION_TABLE_vidd[$0 & 255]($1,$5,$9);
 $IsAsync = ___async;
 if ($IsAsync) {
  HEAP32[$AsyncCtx>>2] = 2;
  sp = STACKTOP;
  return;
 } else {
  _emscripten_free_async_context(($AsyncCtx|0));
  return;
 }
}
function _collision_ball() {
 var $0 = 0.0, $1 = 0, $10 = 0.0, $100 = 0.0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0, $115 = 0.0;
 var $116 = 0.0, $117 = 0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0.0, $137 = 0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0.0, $150 = 0.0, $151 = 0.0;
 var $152 = 0, $153 = 0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0, $158 = 0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0.0, $172 = 0.0, $173 = 0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0.0, $180 = 0, $181 = 0.0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $19 = 0.0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0;
 var $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0.0;
 var $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0;
 var $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0.0;
 var $92 = 0.0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0.0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, $IsAsync = 0, $IsAsync12 = 0, $IsAsync4 = 0, $IsAsync8 = 0, $ret$0$off02 = 0, $storemerge = 0.0, $storemerge1 = 0.0, $storemerge3 = 0.0;
 var $storemerge3$in = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = +HEAPF32[24>>2];
 $1 = $0 > 0.0;
 do {
  if ($1) {
   $2 = HEAP32[8>>2]|0;
   $3 = ((($2)) + 8|0);
   $4 = +HEAPF32[$3>>2];
   $5 = +HEAPF32[16>>2];
   $6 = $0 * $5;
   $7 = $4 + $6;
   $8 = ((($2)) + 40|0);
   $9 = +HEAPF32[$8>>2];
   $10 = $9 * 0.5;
   $11 = $7 + $10;
   $12 = HEAP32[(389572)>>2]|0;
   $13 = (($12|0) / 40)&-1;
   $14 = (($12) - ($13))|0;
   $15 = (+($14|0));
   $16 = !($11 >= $15);
   if ($16) {
    label = 8;
   } else {
    $17 = ((($2)) + 12|0);
    $18 = +HEAPF32[$17>>2];
    $19 = $18;
    $20 = HEAP32[(389576)>>2]|0;
    $21 = (($20|0) / 27)&-1;
    $22 = (+($21|0));
    $23 = $22 * 0.5;
    $24 = $19 + $23;
    $25 = HEAP32[48>>2]|0;
    $26 = ((($25)) + 12|0);
    $27 = +HEAPF32[$26>>2];
    $28 = $27;
    $29 = ((($25)) + 36|0);
    $30 = +HEAPF32[$29>>2];
    $31 = $30;
    $32 = $31 * 0.5;
    $33 = $28 - $32;
    $34 = $24 > $33;
    if ($34) {
     $35 = $19 - $23;
     $36 = $28 + $32;
     $37 = $35 < $36;
     if ($37) {
      $38 = $18 - $27;
      $39 = (+($21|0));
      $40 = $39 + $30;
      $41 = $38 / $40;
      $42 = $41;
      $43 = $42 * 0.78539816339744828;
      $44 = $43;
      $45 = HEAP32[(651920)>>2]|0;
      $46 = (+($14|0));
      $47 = (+($13|0));
      $48 = $47 * 0.5;
      $49 = $46 - $48;
      $50 = $49;
      $AsyncCtx = _emscripten_alloc_async_context(8,sp)|0;
      FUNCTION_TABLE_vidd[$45 & 255]($2,$50,$18);
      $IsAsync = ___async;
      if ($IsAsync) {
       HEAP32[$AsyncCtx>>2] = 3;
       $51 = ((($AsyncCtx)) + 4|0);
       HEAPF32[$51>>2] = $44;
       sp = STACKTOP;
       return 0;
      } else {
       _emscripten_free_async_context(($AsyncCtx|0));
       $52 = (+Math_sin((+$44)));
       HEAPF32[32>>2] = $52;
       $53 = (+Math_cos((+$44)));
       $54 = $53 > 0.0;
       $55 = -$53;
       $storemerge1 = $54 ? $55 : $53;
       HEAPF32[24>>2] = $storemerge1;
       $56 = HEAP32[(389576)>>2]|0;
       $57 = (($56|0) / 40)&-1;
       $58 = (+($57|0));
       $59 = HEAP32[(389572)>>2]|0;
       $60 = (+($59|0));
       $61 = (+($56|0));
       $62 = $60 / $61;
       $63 = $58 * $62;
       $64 = $63;
       $65 = $64 * 0.90000000000000002;
       $66 = $65 * 0.01;
       $67 = +HEAPF32[16>>2];
       $68 = $67;
       $69 = $68 + $66;
       $170 = $56;$173 = $59;$storemerge3$in = $69;
       break;
      }
     } else {
      label = 8;
     }
    } else {
     label = 8;
    }
   }
  } else {
   label = 8;
  }
 } while(0);
 do {
  if ((label|0) == 8) {
   $70 = $0 < 0.0;
   if (!($70)) {
    $ret$0$off02 = 0;
    return ($ret$0$off02|0);
   }
   $71 = HEAP32[8>>2]|0;
   $72 = ((($71)) + 8|0);
   $73 = +HEAPF32[$72>>2];
   $74 = +HEAPF32[16>>2];
   $75 = $0 * $74;
   $76 = $73 + $75;
   $77 = HEAP32[(389572)>>2]|0;
   $78 = (($77|0) / 40)&-1;
   $79 = (+($78|0));
   $80 = $76 < $79;
   if (!($80)) {
    $ret$0$off02 = 0;
    return ($ret$0$off02|0);
   }
   $81 = ((($71)) + 12|0);
   $82 = +HEAPF32[$81>>2];
   $83 = $82;
   $84 = HEAP32[(389576)>>2]|0;
   $85 = (($84|0) / 27)&-1;
   $86 = (+($85|0));
   $87 = $86 * 0.5;
   $88 = $83 + $87;
   $89 = HEAP32[56>>2]|0;
   $90 = ((($89)) + 12|0);
   $91 = +HEAPF32[$90>>2];
   $92 = $91;
   $93 = ((($89)) + 36|0);
   $94 = +HEAPF32[$93>>2];
   $95 = $94;
   $96 = $95 * 0.5;
   $97 = $92 - $96;
   $98 = $88 > $97;
   if (!($98)) {
    $ret$0$off02 = 0;
    return ($ret$0$off02|0);
   }
   $99 = $83 - $87;
   $100 = $92 + $96;
   $101 = $99 < $100;
   if (!($101)) {
    $ret$0$off02 = 0;
    return ($ret$0$off02|0);
   }
   $102 = $82 - $91;
   $103 = (+($85|0));
   $104 = $103 + $94;
   $105 = $102 / $104;
   $106 = $105;
   $107 = $106 * 0.78539816339744828;
   $108 = $107;
   $109 = HEAP32[(651920)>>2]|0;
   $110 = (+($78|0));
   $111 = $110 * 0.5;
   $112 = $110 + $111;
   $113 = $112;
   $AsyncCtx3 = _emscripten_alloc_async_context(8,sp)|0;
   FUNCTION_TABLE_vidd[$109 & 255]($71,$113,$82);
   $IsAsync4 = ___async;
   if ($IsAsync4) {
    HEAP32[$AsyncCtx3>>2] = 4;
    $114 = ((($AsyncCtx3)) + 4|0);
    HEAPF32[$114>>2] = $108;
    sp = STACKTOP;
    return 0;
   } else {
    _emscripten_free_async_context(($AsyncCtx3|0));
    $115 = (+Math_sin((+$108)));
    HEAPF32[32>>2] = $115;
    $116 = (+Math_cos((+$108)));
    $117 = $116 < 0.0;
    $118 = -$116;
    $storemerge = $117 ? $118 : $116;
    HEAPF32[24>>2] = $storemerge;
    $119 = HEAP32[(389576)>>2]|0;
    $120 = (($119|0) / 40)&-1;
    $121 = (+($120|0));
    $122 = HEAP32[(389572)>>2]|0;
    $123 = (+($122|0));
    $124 = (+($119|0));
    $125 = $123 / $124;
    $126 = $121 * $125;
    $127 = $126;
    $128 = $127 * 0.90000000000000002;
    $129 = $128 * 0.01;
    $130 = +HEAPF32[16>>2];
    $131 = $130;
    $132 = $131 + $129;
    $170 = $119;$173 = $122;$storemerge3$in = $132;
    break;
   }
  }
 } while(0);
 $storemerge3 = $storemerge3$in;
 HEAPF32[16>>2] = $storemerge3;
 $133 = HEAP32[(389556)>>2]|0;
 $134 = HEAP32[$133>>2]|0;
 $135 = ($134|0)==(1);
 $136 = $storemerge3;
 if ($135) {
  $137 = (_get_score(1)|0);
  $138 = (+($137|0));
  $139 = $138 * 0.375;
  $140 = $139 + 0.5;
  $141 = HEAP32[(389576)>>2]|0;
  $142 = (($141|0) / 40)&-1;
  $143 = (+($142|0));
  $144 = HEAP32[(389572)>>2]|0;
  $145 = (+($144|0));
  $146 = (+($141|0));
  $147 = $145 / $146;
  $148 = $143 * $147;
  $149 = $148;
  $150 = $149 * 0.90000000000000002;
  $151 = $140 * $150;
  $152 = $136 > $151;
  if ($152) {
   $153 = (_get_score(1)|0);
   $154 = (+($153|0));
   $155 = $154 * 0.375;
   $156 = $155 + 0.5;
   $157 = HEAP32[(389576)>>2]|0;
   $158 = (($157|0) / 40)&-1;
   $159 = (+($158|0));
   $160 = HEAP32[(389572)>>2]|0;
   $161 = (+($160|0));
   $162 = (+($157|0));
   $163 = $161 / $162;
   $164 = $159 * $163;
   $165 = $164;
   $166 = $165 * 0.90000000000000002;
   $167 = $156 * $166;
   $168 = $167;
   HEAPF32[16>>2] = $168;
  }
 } else {
  $169 = (($170|0) / 40)&-1;
  $171 = (+($169|0));
  $172 = (+($173|0));
  $174 = (+($170|0));
  $175 = $172 / $174;
  $176 = $171 * $175;
  $177 = $176;
  $178 = $177 * 0.90000000000000002;
  $179 = $178 * 2.0;
  $180 = $136 > $179;
  if ($180) {
   $181 = $179;
   HEAPF32[16>>2] = $181;
  }
 }
 $182 = HEAP8[35200>>0]|0;
 $183 = $182 ^ 1;
 HEAP8[35200>>0] = $183;
 $184 = ($182<<24>>24)==(1);
 $185 = HEAP32[(651952)>>2]|0;
 if ($184) {
  $187 = HEAP32[72>>2]|0;
  $AsyncCtx11 = _emscripten_alloc_async_context(4,sp)|0;
  FUNCTION_TABLE_vi[$185 & 255]($187);
  $IsAsync12 = ___async;
  if ($IsAsync12) {
   HEAP32[$AsyncCtx11>>2] = 6;
   sp = STACKTOP;
   return 0;
  }
  _emscripten_free_async_context(($AsyncCtx11|0));
  $ret$0$off02 = 1;
  return ($ret$0$off02|0);
 } else {
  $186 = HEAP32[64>>2]|0;
  $AsyncCtx7 = _emscripten_alloc_async_context(4,sp)|0;
  FUNCTION_TABLE_vi[$185 & 255]($186);
  $IsAsync8 = ___async;
  if ($IsAsync8) {
   HEAP32[$AsyncCtx7>>2] = 5;
   sp = STACKTOP;
   return 0;
  }
  _emscripten_free_async_context(($AsyncCtx7|0));
  $ret$0$off02 = 1;
  return ($ret$0$off02|0);
 }
 return (0)|0;
}
function _update_ball() {
 var $0 = 0, $1 = 0, $10 = 0.0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0, $112 = 0.0, $113 = 0, $114 = 0.0, $115 = 0.0;
 var $116 = 0.0, $117 = 0, $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0.0, $133 = 0.0;
 var $134 = 0.0, $135 = 0, $136 = 0.0, $137 = 0.0, $138 = 0, $139 = 0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0, $149 = 0.0, $15 = 0.0, $150 = 0, $151 = 0.0;
 var $152 = 0.0, $153 = 0.0, $154 = 0, $155 = 0.0, $156 = 0.0, $157 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0.0;
 var $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0.0;
 var $65 = 0.0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0;
 var $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0.0, $AsyncCtx = 0, $AsyncCtx11 = 0;
 var $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx23 = 0, $AsyncCtx26 = 0, $AsyncCtx29 = 0, $AsyncCtx3 = 0, $AsyncCtx32 = 0, $AsyncCtx7 = 0, $IsAsync = 0, $IsAsync12 = 0, $IsAsync16 = 0, $IsAsync20 = 0, $IsAsync24 = 0, $IsAsync27 = 0, $IsAsync30 = 0, $IsAsync33 = 0, $IsAsync4 = 0, $IsAsync8 = 0, $or$cond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(651920)>>2]|0;
 $1 = HEAP32[8>>2]|0;
 $2 = ((($1)) + 8|0);
 $3 = +HEAPF32[$2>>2];
 $4 = +HEAPF32[24>>2];
 $5 = +HEAPF32[16>>2];
 $6 = $4 * $5;
 $7 = $3 + $6;
 $8 = ((($1)) + 12|0);
 $9 = +HEAPF32[$8>>2];
 $10 = +HEAPF32[32>>2];
 $11 = $5 * $10;
 $12 = $9 + $11;
 $AsyncCtx = _emscripten_alloc_async_context(4,sp)|0;
 FUNCTION_TABLE_vidd[$0 & 255]($1,$7,$12);
 $IsAsync = ___async;
 if ($IsAsync) {
  HEAP32[$AsyncCtx>>2] = 7;
  sp = STACKTOP;
  return;
 }
 _emscripten_free_async_context(($AsyncCtx|0));
 $13 = HEAP32[8>>2]|0;
 $14 = ((($13)) + 12|0);
 $15 = +HEAPF32[$14>>2];
 $16 = $15;
 $17 = HEAP32[(389576)>>2]|0;
 $18 = (($17|0) / 27)&-1;
 $19 = (+($18|0));
 $20 = $19 * 0.5;
 $21 = $16 < $20;
 do {
  if ($21) {
   $22 = HEAP32[(651920)>>2]|0;
   $23 = ((($13)) + 8|0);
   $24 = +HEAPF32[$23>>2];
   $25 = $20;
   $AsyncCtx3 = _emscripten_alloc_async_context(4,sp)|0;
   FUNCTION_TABLE_vidd[$22 & 255]($13,$24,$25);
   $IsAsync4 = ___async;
   if ($IsAsync4) {
    HEAP32[$AsyncCtx3>>2] = 8;
    sp = STACKTOP;
    return;
   }
   _emscripten_free_async_context(($AsyncCtx3|0));
   $26 = +HEAPF32[32>>2];
   $27 = $26 < 0.0;
   if ($27) {
    $28 = -$26;
    HEAPF32[32>>2] = $28;
   }
   $29 = HEAP8[35200>>0]|0;
   $30 = $29 ^ 1;
   HEAP8[35200>>0] = $30;
   $31 = ($29<<24>>24)==(1);
   $32 = HEAP32[(651952)>>2]|0;
   if ($31) {
    $34 = HEAP32[72>>2]|0;
    $AsyncCtx11 = _emscripten_alloc_async_context(4,sp)|0;
    FUNCTION_TABLE_vi[$32 & 255]($34);
    $IsAsync12 = ___async;
    if ($IsAsync12) {
     HEAP32[$AsyncCtx11>>2] = 10;
     sp = STACKTOP;
     return;
    } else {
     _emscripten_free_async_context(($AsyncCtx11|0));
     break;
    }
   } else {
    $33 = HEAP32[64>>2]|0;
    $AsyncCtx7 = _emscripten_alloc_async_context(4,sp)|0;
    FUNCTION_TABLE_vi[$32 & 255]($33);
    $IsAsync8 = ___async;
    if ($IsAsync8) {
     HEAP32[$AsyncCtx7>>2] = 9;
     sp = STACKTOP;
     return;
    } else {
     _emscripten_free_async_context(($AsyncCtx7|0));
     break;
    }
   }
  } else {
   $35 = (+($17|0));
   $36 = $35 - $20;
   $37 = $16 > $36;
   if ($37) {
    $38 = HEAP32[(651920)>>2]|0;
    $39 = ((($13)) + 8|0);
    $40 = +HEAPF32[$39>>2];
    $41 = $36;
    $AsyncCtx15 = _emscripten_alloc_async_context(4,sp)|0;
    FUNCTION_TABLE_vidd[$38 & 255]($13,$40,$41);
    $IsAsync16 = ___async;
    if ($IsAsync16) {
     HEAP32[$AsyncCtx15>>2] = 11;
     sp = STACKTOP;
     return;
    }
    _emscripten_free_async_context(($AsyncCtx15|0));
    $42 = +HEAPF32[32>>2];
    $43 = $42 > 0.0;
    if ($43) {
     $44 = -$42;
     HEAPF32[32>>2] = $44;
    }
    $45 = HEAP8[35200>>0]|0;
    $46 = $45 ^ 1;
    HEAP8[35200>>0] = $46;
    $47 = ($45<<24>>24)==(1);
    $48 = HEAP32[(651952)>>2]|0;
    if ($47) {
     $50 = HEAP32[72>>2]|0;
     $AsyncCtx23 = _emscripten_alloc_async_context(4,sp)|0;
     FUNCTION_TABLE_vi[$48 & 255]($50);
     $IsAsync24 = ___async;
     if ($IsAsync24) {
      HEAP32[$AsyncCtx23>>2] = 13;
      sp = STACKTOP;
      return;
     } else {
      _emscripten_free_async_context(($AsyncCtx23|0));
      break;
     }
    } else {
     $49 = HEAP32[64>>2]|0;
     $AsyncCtx19 = _emscripten_alloc_async_context(4,sp)|0;
     FUNCTION_TABLE_vi[$48 & 255]($49);
     $IsAsync20 = ___async;
     if ($IsAsync20) {
      HEAP32[$AsyncCtx19>>2] = 12;
      sp = STACKTOP;
      return;
     } else {
      _emscripten_free_async_context(($AsyncCtx19|0));
      break;
     }
    }
   }
  }
 } while(0);
 $51 = HEAP32[80>>2]|0;
 $52 = ((($51)) + 44|0);
 $53 = HEAP8[$52>>0]|0;
 $54 = ($53<<24>>24)==(0);
 do {
  if (!($54)) {
   $55 = ((($51)) + 8|0);
   $56 = +HEAPF32[$55>>2];
   $57 = HEAP32[8>>2]|0;
   $58 = ((($57)) + 8|0);
   $59 = +HEAPF32[$58>>2];
   $60 = $56 - $59;
   $61 = +HEAPF32[24>>2];
   $62 = $60 / $61;
   $63 = $62 < 0.0;
   if (!($63)) {
    $64 = +HEAPF32[16>>2];
    $65 = $61 * $64;
    $66 = $62 > $65;
    if (!($66)) {
     $67 = ((($57)) + 12|0);
     $68 = +HEAPF32[$67>>2];
     $69 = +HEAPF32[32>>2];
     $70 = $62 * $69;
     $71 = $68 + $70;
     $72 = ((($51)) + 12|0);
     $73 = +HEAPF32[$72>>2];
     $74 = $71 - $73;
     $75 = $74 + -2.0;
     $76 = ((($51)) + 36|0);
     $77 = +HEAPF32[$76>>2];
     $78 = ((($57)) + 36|0);
     $79 = +HEAPF32[$78>>2];
     $80 = $77 + $79;
     $81 = $80 * 0.5;
     $82 = $75 < $81;
     if ($82) {
      $83 = $74 + 2.0;
      $84 = $80 * -0.5;
      $85 = $83 > $84;
      if ($85) {
       $AsyncCtx26 = _emscripten_alloc_async_context(4,sp)|0;
       _get_item();
       $IsAsync27 = ___async;
       if ($IsAsync27) {
        HEAP32[$AsyncCtx26>>2] = 14;
        sp = STACKTOP;
        return;
       } else {
        _emscripten_free_async_context(($AsyncCtx26|0));
        break;
       }
      }
     }
    }
   }
  }
 } while(0);
 $86 = HEAP32[88>>2]|0;
 $87 = ((($86)) + 44|0);
 $88 = HEAP8[$87>>0]|0;
 $89 = ($88<<24>>24)==(0);
 do {
  if (!($89)) {
   $90 = ((($86)) + 8|0);
   $91 = +HEAPF32[$90>>2];
   $92 = HEAP32[8>>2]|0;
   $93 = ((($92)) + 8|0);
   $94 = +HEAPF32[$93>>2];
   $95 = $91 - $94;
   $96 = +HEAPF32[24>>2];
   $97 = $95 / $96;
   $98 = $97 < 0.0;
   if (!($98)) {
    $99 = +HEAPF32[16>>2];
    $100 = $96 * $99;
    $101 = $97 > $100;
    if (!($101)) {
     $102 = ((($92)) + 12|0);
     $103 = +HEAPF32[$102>>2];
     $104 = +HEAPF32[32>>2];
     $105 = $97 * $104;
     $106 = $103 + $105;
     $107 = ((($86)) + 12|0);
     $108 = +HEAPF32[$107>>2];
     $109 = $106 - $108;
     $110 = $109 + -2.0;
     $111 = ((($86)) + 36|0);
     $112 = +HEAPF32[$111>>2];
     $113 = ((($92)) + 36|0);
     $114 = +HEAPF32[$113>>2];
     $115 = $112 + $114;
     $116 = $115 * 0.5;
     $117 = $110 < $116;
     if ($117) {
      $118 = $109 + 2.0;
      $119 = $115 * -0.5;
      $120 = $118 > $119;
      if ($120) {
       $AsyncCtx29 = _emscripten_alloc_async_context(4,sp)|0;
       _get_danger();
       $IsAsync30 = ___async;
       if ($IsAsync30) {
        HEAP32[$AsyncCtx29>>2] = 15;
        sp = STACKTOP;
        return;
       } else {
        _emscripten_free_async_context(($AsyncCtx29|0));
        break;
       }
      }
     }
    }
   }
  }
 } while(0);
 $121 = HEAP32[96>>2]|0;
 $122 = ((($121)) + 44|0);
 $123 = HEAP8[$122>>0]|0;
 $124 = ($123<<24>>24)!=(0);
 $125 = HEAP8[104>>0]|0;
 $126 = ($125<<24>>24)==(0);
 $or$cond = $124 & $126;
 if (!($or$cond)) {
  return;
 }
 $127 = ((($121)) + 8|0);
 $128 = +HEAPF32[$127>>2];
 $129 = HEAP32[8>>2]|0;
 $130 = ((($129)) + 8|0);
 $131 = +HEAPF32[$130>>2];
 $132 = $128 - $131;
 $133 = +HEAPF32[24>>2];
 $134 = $132 / $133;
 $135 = $134 < 0.0;
 if ($135) {
  return;
 }
 $136 = +HEAPF32[16>>2];
 $137 = $133 * $136;
 $138 = $134 > $137;
 if ($138) {
  return;
 }
 $139 = ((($129)) + 12|0);
 $140 = +HEAPF32[$139>>2];
 $141 = +HEAPF32[32>>2];
 $142 = $134 * $141;
 $143 = $140 + $142;
 $144 = ((($121)) + 12|0);
 $145 = +HEAPF32[$144>>2];
 $146 = $143 - $145;
 $147 = $146 + -2.0;
 $148 = ((($121)) + 36|0);
 $149 = +HEAPF32[$148>>2];
 $150 = ((($129)) + 36|0);
 $151 = +HEAPF32[$150>>2];
 $152 = $149 + $151;
 $153 = $152 * 0.5;
 $154 = $147 < $153;
 if (!($154)) {
  return;
 }
 $155 = $146 + 2.0;
 $156 = $152 * -0.5;
 $157 = $155 > $156;
 if (!($157)) {
  return;
 }
 $AsyncCtx32 = _emscripten_alloc_async_context(4,sp)|0;
 _blow_up_bomb();
 $IsAsync33 = ___async;
 if ($IsAsync33) {
  HEAP32[$AsyncCtx32>>2] = 16;
  sp = STACKTOP;
  return;
 }
 _emscripten_free_async_context(($AsyncCtx32|0));
 return;
}
function _initialize_bomb() {
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, $AsyncCtx = 0, $AsyncCtx5 = 0, $IsAsync = 0, $IsAsync6 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[(651908)>>2]|0;
 $1 = HEAP32[(389572)>>2]|0;
 $2 = (+($1|0));
 $3 = HEAP32[48>>2]|0;
 $4 = ((($3)) + 40|0);
 $5 = +HEAPF32[$4>>2];
 $6 = $2 - $5;
 $7 = HEAP32[8>>2]|0;
 $8 = ((($7)) + 40|0);
 $9 = +HEAPF32[$8>>2];
 $10 = $9 * 2.0;
 $11 = $6 - $10;
 $12 = (~~(($11)));
 $13 = HEAP32[(651832)>>2]|0;
 $AsyncCtx = _emscripten_alloc_async_context(20,sp)|0;
 $14 = (FUNCTION_TABLE_i[$13 & 255]()|0);
 $IsAsync = ___async;
 if ($IsAsync) {
  HEAP32[$AsyncCtx>>2] = 17;
  $15 = ((($AsyncCtx)) + 4|0);
  HEAP32[$15>>2] = $vararg_buffer;
  $16 = ((($AsyncCtx)) + 8|0);
  HEAP32[$16>>2] = $0;
  $17 = ((($AsyncCtx)) + 12|0);
  HEAP32[$17>>2] = $12;
  $18 = ((($AsyncCtx)) + 16|0);
  HEAP32[$18>>2] = $vararg_buffer;
  sp = STACKTOP;
  STACKTOP = sp;return;
 }
 _emscripten_free_async_context(($AsyncCtx|0));
 $19 = HEAP32[(389576)>>2]|0;
 $20 = (($14>>>0) % ($19>>>0))&-1;
 $21 = HEAP32[(389572)>>2]|0;
 $22 = (($21|0) / 80)&-1;
 HEAPF64[$vararg_buffer>>3] = 1.0;
 $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
 HEAPF64[$vararg_ptr1>>3] = 1.0;
 $vararg_ptr2 = ((($vararg_buffer)) + 16|0);
 HEAPF64[$vararg_ptr2>>3] = 1.0;
 $vararg_ptr3 = ((($vararg_buffer)) + 24|0);
 HEAPF64[$vararg_ptr3>>3] = 1.0;
 $AsyncCtx5 = _emscripten_alloc_async_context(8,sp)|0;
 $23 = (FUNCTION_TABLE_iiiiiii[$0 & 255](11,$12,$20,$22,$22,$vararg_buffer)|0);
 $IsAsync6 = ___async;
 if ($IsAsync6) {
  HEAP32[$AsyncCtx5>>2] = 18;
  $24 = ((($AsyncCtx5)) + 4|0);
  HEAP32[$24>>2] = $vararg_buffer;
  sp = STACKTOP;
  STACKTOP = sp;return;
 } else {
  _emscripten_free_async_context(($AsyncCtx5|0));
  HEAP32[96>>2] = $23;
  $25 = ((($23)) + 44|0);
  HEAP8[$25>>0] = 0;
  HEAP8[104>>0] = 0;
  STACKTOP = sp;return;
 }
}
function _hide_bomb() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[96>>2]|0;
 $1 = ((($0)) + 44|0);
 HEAP8[$1>>0] = 0;
 return;
}
function _show_bomb() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0.0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0.0;
 var $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, $AsyncCtx9 = 0, $IsAsync = 0, $IsAsync10 = 0, $IsAsync3 = 0, $IsAsync7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[96>>2]|0;
 $1 = ((($0)) + 44|0);
 HEAP8[$1>>0] = 1;
 $2 = HEAP32[8>>2]|0;
 $3 = ((($2)) + 8|0);
 $4 = +HEAPF32[$3>>2];
 $5 = HEAP32[(389572)>>2]|0;
 $6 = (($5|0) / 2)&-1;
 $7 = (+($6|0));
 $8 = $4 < $7;
 $9 = HEAP32[(651920)>>2]|0;
 $10 = ((($2)) + 40|0);
 $11 = +HEAPF32[$10>>2];
 if ($8) {
  $12 = (+($5|0));
  $13 = HEAP32[48>>2]|0;
  $14 = ((($13)) + 40|0);
  $15 = +HEAPF32[$14>>2];
  $16 = $12 - $15;
  $17 = $11 * 2.0;
  $18 = $16 - $17;
  $19 = HEAP32[(651832)>>2]|0;
  $AsyncCtx = _emscripten_alloc_async_context(16,sp)|0;
  $20 = (FUNCTION_TABLE_i[$19 & 255]()|0);
  $IsAsync = ___async;
  if ($IsAsync) {
   HEAP32[$AsyncCtx>>2] = 19;
   $21 = ((($AsyncCtx)) + 4|0);
   HEAP32[$21>>2] = $0;
   $22 = ((($AsyncCtx)) + 8|0);
   HEAPF32[$22>>2] = $18;
   $23 = ((($AsyncCtx)) + 12|0);
   HEAP32[$23>>2] = $9;
   sp = STACKTOP;
   return;
  }
  _emscripten_free_async_context(($AsyncCtx|0));
  $24 = HEAP32[(389576)>>2]|0;
  $25 = (($20>>>0) % ($24>>>0))&-1;
  $26 = (+($25>>>0));
  $AsyncCtx2 = _emscripten_alloc_async_context(4,sp)|0;
  FUNCTION_TABLE_vidd[$9 & 255]($0,$18,$26);
  $IsAsync3 = ___async;
  if ($IsAsync3) {
   HEAP32[$AsyncCtx2>>2] = 20;
   sp = STACKTOP;
   return;
  }
  _emscripten_free_async_context(($AsyncCtx2|0));
  $40 = HEAP32[96>>2]|0;
  $41 = ((($40)) + 44|0);
  HEAP8[$41>>0] = 1;
  return;
 } else {
  $27 = HEAP32[56>>2]|0;
  $28 = ((($27)) + 40|0);
  $29 = +HEAPF32[$28>>2];
  $30 = $11 * 2.0;
  $31 = $29 - $30;
  $32 = HEAP32[(651832)>>2]|0;
  $AsyncCtx6 = _emscripten_alloc_async_context(16,sp)|0;
  $33 = (FUNCTION_TABLE_i[$32 & 255]()|0);
  $IsAsync7 = ___async;
  if ($IsAsync7) {
   HEAP32[$AsyncCtx6>>2] = 21;
   $34 = ((($AsyncCtx6)) + 4|0);
   HEAP32[$34>>2] = $0;
   $35 = ((($AsyncCtx6)) + 8|0);
   HEAPF32[$35>>2] = $31;
   $36 = ((($AsyncCtx6)) + 12|0);
   HEAP32[$36>>2] = $9;
   sp = STACKTOP;
   return;
  }
  _emscripten_free_async_context(($AsyncCtx6|0));
  $37 = HEAP32[(389576)>>2]|0;
  $38 = (($33>>>0) % ($37>>>0))&-1;
  $39 = (+($38>>>0));
  $AsyncCtx9 = _emscripten_alloc_async_context(4,sp)|0;
  FUNCTION_TABLE_vidd[$9 & 255]($0,$31,$39);
  $IsAsync10 = ___async;
  if ($IsAsync10) {
   HEAP32[$AsyncCtx9>>2] = 22;
   sp = STACKTOP;
   return;
  }
  _emscripten_free_async_context(($AsyncCtx9|0));
  $40 = HEAP32[96>>2]|0;
  $41 = ((($40)) + 44|0);
  HEAP8[$41>>0] = 1;
  return;
 }
}
function _blow_up_bomb() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $IsAsync = 0, $IsAsync3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[104>>0] = 1;
 $0 = HEAP32[(651952)>>2]|0;
 $1 = HEAP32[35160>>2]|0;
 $AsyncCtx = _emscripten_alloc_async_context(4,sp)|0;
 FUNCTION_TABLE_vi[$0 & 255]($1);
 $IsAsync = ___async;
 if ($IsAsync) {
  HEAP32[$AsyncCtx>>2] = 23;
  sp = STACKTOP;
  return;
 }
 _emscripten_free_async_context(($AsyncCtx|0));
 $2 = HEAP32[(651780)>>2]|0;
 HEAP32[35088>>2] = $2;
 HEAP32[(651780)>>2] = 20;
 $3 = HEAP32[(651876)>>2]|0;
 $AsyncCtx2 = _emscripten_alloc_async_context(4,sp)|0;
 FUNCTION_TABLE_vid[$3 & 255](24,0.10000000149011612);
 $IsAsync3 = ___async;
 if ($IsAsync3) {
  HEAP32[$AsyncCtx2>>2] = 25;
  sp = STACKTOP;
  return;
 } else {
  _emscripten_free_async_context(($AsyncCtx2|0));
  return;
 }
}
function _restore_screen_after_explosion() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[35088>>2]|0;
 HEAP32[(651780)>>2] = $0;
 return;
}
function _copyleft() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx6 = 0, $IsAsync = 0, $IsAsync11 = 0, $IsAsync7 = 0, $copyleft_image1 = 0, $fragment_pointer = 0, $fragment_source4 = 0, $indices = 0, $license_image2 = 0, $logSize = 0, $logSize2 = 0, $success = 0, $success1 = 0;
 var $vararg_buffer = 0, $vararg_buffer1 = 0, $vertex_pointer = 0, $vertex_source3 = 0, $vertices = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 346752|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $vertices = sp + 3192|0;
 $indices = sp + 36|0;
 $copyleft_image1 = sp + 281211|0;
 $license_image2 = sp + 19066|0;
 $vertex_source3 = sp + 17433|0;
 $fragment_source4 = sp + 15864|0;
 $vertex_pointer = sp + 32|0;
 $fragment_pointer = sp + 28|0;
 $success = sp + 24|0;
 $logSize = sp + 20|0;
 $success1 = sp + 16|0;
 $logSize2 = sp + 12|0;
 _memcpy(($vertices|0),(35208|0),12672)|0;
 _memcpy(($indices|0),(47880|0),3156)|0;
 _memcpy(($copyleft_image1|0),(51040|0),65537)|0;
 _memcpy(($license_image2|0),(116584|0),262145)|0;
 _memcpy(($vertex_source3|0),(378736|0),1633)|0;
 _memcpy(($fragment_source4|0),(380376|0),1569)|0;
 HEAP32[$vertex_pointer>>2] = $vertex_source3;
 HEAP32[$fragment_pointer>>2] = $fragment_source4;
 $0 = HEAP32[(651948)>>2]|0;
 $AsyncCtx = _emscripten_alloc_async_context(68,sp)|0;
 $1 = (FUNCTION_TABLE_ii[$0 & 255](381952)|0);
 $IsAsync = ___async;
 if ($IsAsync) {
  HEAP32[$AsyncCtx>>2] = 26;
  $2 = ((($AsyncCtx)) + 4|0);
  HEAP32[$2>>2] = $vertex_pointer;
  $3 = ((($AsyncCtx)) + 8|0);
  HEAP32[$3>>2] = $fragment_pointer;
  $4 = ((($AsyncCtx)) + 12|0);
  HEAP32[$4>>2] = $success;
  $5 = ((($AsyncCtx)) + 16|0);
  HEAP32[$5>>2] = $logSize;
  $6 = ((($AsyncCtx)) + 20|0);
  HEAP32[$6>>2] = $success1;
  $7 = ((($AsyncCtx)) + 24|0);
  HEAP32[$7>>2] = $logSize2;
  $8 = ((($AsyncCtx)) + 28|0);
  HEAP32[$8>>2] = $copyleft_image1;
  $9 = ((($AsyncCtx)) + 32|0);
  HEAP32[$9>>2] = $license_image2;
  $10 = ((($AsyncCtx)) + 36|0);
  HEAP32[$10>>2] = $indices;
  $11 = ((($AsyncCtx)) + 40|0);
  HEAP32[$11>>2] = $vertices;
  $12 = ((($AsyncCtx)) + 44|0);
  HEAP32[$12>>2] = $fragment_source4;
  $13 = ((($AsyncCtx)) + 48|0);
  HEAP32[$13>>2] = $vertex_source3;
  $14 = ((($AsyncCtx)) + 52|0);
  HEAP32[$14>>2] = $vararg_buffer1;
  $15 = ((($AsyncCtx)) + 56|0);
  HEAP32[$15>>2] = $vararg_buffer1;
  $16 = ((($AsyncCtx)) + 60|0);
  HEAP32[$16>>2] = $vararg_buffer;
  $17 = ((($AsyncCtx)) + 64|0);
  HEAP32[$17>>2] = $vararg_buffer;
  sp = STACKTOP;
  STACKTOP = sp;return;
 }
 _emscripten_free_async_context(($AsyncCtx|0));
 HEAP32[381960>>2] = $1;
 _glDisable(2884);
 $18 = (_glCreateShader(35633)|0);
 HEAP32[381968>>2] = $18;
 $19 = (_glCreateShader(35632)|0);
 HEAP32[381976>>2] = $19;
 $20 = HEAP32[381968>>2]|0;
 _glShaderSource(($20|0),1,($vertex_pointer|0),(0|0));
 $21 = HEAP32[381976>>2]|0;
 _glShaderSource(($21|0),1,($fragment_pointer|0),(0|0));
 $22 = HEAP32[381968>>2]|0;
 _glCompileShader(($22|0));
 HEAP32[$success>>2] = 0;
 HEAP32[$logSize>>2] = 0;
 $23 = HEAP32[381968>>2]|0;
 _glGetShaderiv(($23|0),35713,($success|0));
 $24 = HEAP32[$success>>2]|0;
 $25 = ($24|0)==(0);
 if ($25) {
  $26 = HEAP32[381968>>2]|0;
  _glGetShaderiv(($26|0),35716,($logSize|0));
  $27 = HEAP32[$logSize>>2]|0;
  $28 = (__Winternal_alloc($27)|0);
  $29 = ($28|0)==(0|0);
  if ($29) {
   $30 = HEAP32[_stderr>>2]|0;
   (_fwrite((381984|0),220,1,($30|0))|0);
   _exit(1);
   // unreachable;
  }
  $31 = HEAP32[381968>>2]|0;
  $32 = HEAP32[$logSize>>2]|0;
  _glGetShaderInfoLog(($31|0),($32|0),(0|0),($28|0));
  $33 = HEAP32[_stderr>>2]|0;
  HEAP32[$vararg_buffer>>2] = $28;
  (_fprintf(($33|0),(387856|0),($vararg_buffer|0))|0);
  $34 = HEAP32[(651808)>>2]|0;
  $AsyncCtx6 = _emscripten_alloc_async_context(4,sp)|0;
  FUNCTION_TABLE_vi[$34 & 255]($28);
  $IsAsync7 = ___async;
  if ($IsAsync7) {
   HEAP32[$AsyncCtx6>>2] = 27;
   sp = STACKTOP;
   STACKTOP = sp;return;
  } else {
   _emscripten_free_async_context(($AsyncCtx6|0));
   _exit(1);
   // unreachable;
  }
 }
 $35 = HEAP32[381976>>2]|0;
 _glCompileShader(($35|0));
 HEAP32[$success1>>2] = 0;
 HEAP32[$logSize2>>2] = 0;
 $36 = HEAP32[381976>>2]|0;
 _glGetShaderiv(($36|0),35713,($success1|0));
 $37 = HEAP32[$success1>>2]|0;
 $38 = ($37|0)==(0);
 if (!($38)) {
  $48 = (_glCreateProgram()|0);
  HEAP32[382432>>2] = $48;
  $49 = HEAP32[381968>>2]|0;
  _glAttachShader(($48|0),($49|0));
  $50 = HEAP32[382432>>2]|0;
  $51 = HEAP32[381976>>2]|0;
  _glAttachShader(($50|0),($51|0));
  $52 = HEAP32[382432>>2]|0;
  _glLinkProgram(($52|0));
  $53 = HEAP32[382432>>2]|0;
  _glUseProgram(($53|0));
  $54 = HEAP32[382432>>2]|0;
  $55 = (_glGetUniformLocation(($54|0),(382440|0))|0);
  $56 = HEAP32[382432>>2]|0;
  $57 = (_glGetUniformLocation(($56|0),(382448|0))|0);
  HEAP32[382464>>2] = $57;
  $58 = HEAP32[382432>>2]|0;
  $59 = (_glGetUniformLocation(($58|0),(382472|0))|0);
  HEAP32[382488>>2] = $59;
  $60 = HEAP32[382432>>2]|0;
  $61 = (_glGetUniformLocation(($60|0),(382496|0))|0);
  $62 = HEAP32[382432>>2]|0;
  $63 = (_glGetUniformLocation(($62|0),(382504|0))|0);
  $64 = HEAP32[382432>>2]|0;
  $65 = (_glGetUniformLocation(($64|0),(382520|0))|0);
  $66 = HEAP32[382432>>2]|0;
  $67 = (_glGetUniformLocation(($66|0),(382536|0))|0);
  $68 = HEAP32[382432>>2]|0;
  $69 = (_glGetUniformLocation(($68|0),(382544|0))|0);
  $70 = HEAP32[382432>>2]|0;
  $71 = (_glGetUniformLocation(($70|0),(382560|0))|0);
  $72 = HEAP32[382432>>2]|0;
  $73 = (_glGetUniformLocation(($72|0),(382576|0))|0);
  $74 = HEAP32[382432>>2]|0;
  $75 = (_glGetUniformLocation(($74|0),(382592|0))|0);
  $76 = HEAP32[382432>>2]|0;
  $77 = (_glGetUniformLocation(($76|0),(382608|0))|0);
  $78 = HEAP32[382432>>2]|0;
  $79 = (_glGetUniformLocation(($78|0),(382624|0))|0);
  HEAP32[382640>>2] = $79;
  _glUniform1i(($55|0),0);
  _glUniform3f(($63|0),1.0,1.0,1.0);
  _glUniform3f(($67|0),0.5,0.5,0.5);
  _glUniform3f(($69|0),0.0,0.0,-1.0);
  _glUniform3f(($71|0),0.0,0.0,0.10000000149011612);
  _glUniform1f(($73|0),9.9999997473787516E-5);
  _glUniform3f(($75|0),1.0,1.0,1.0);
  _glUniform1f(($77|0),9.9999997473787516E-5);
  $80 = HEAP32[(389576)>>2]|0;
  $81 = (+($80|0));
  $82 = HEAP32[(389572)>>2]|0;
  $83 = (+($82|0));
  $84 = $81 / $83;
  _glUniform3f(($61|0),(+$84),1.0,1.0);
  $85 = HEAP32[382488>>2]|0;
  _glUniform3f(($85|0),0.0,0.0,0.0);
  $86 = HEAP32[382464>>2]|0;
  _glUniform1f(($86|0),1.0);
  _glUniform3f(($65|0),0.0,0.0,0.0);
  $87 = HEAP32[382640>>2]|0;
  _glUniform1i(($87|0),1);
  _glGenTextures(1,(382648|0));
  _glGenTextures(1,(382656|0));
  _glGenVertexArrays(1,(382664|0));
  _glGenBuffers(1,(382672|0));
  _glGenBuffers(1,(382680|0));
  $88 = HEAP32[382664>>2]|0;
  _glBindVertexArray(($88|0));
  $89 = HEAP32[382648>>2]|0;
  _glBindTexture(3553,($89|0));
  _glTexParameteri(3553,10241,9729);
  _glTexImage2D(3553,0,6408,256,64,0,6408,5121,($copyleft_image1|0));
  $90 = HEAP32[382656>>2]|0;
  _glBindTexture(3553,($90|0));
  _glTexParameteri(3553,10241,9729);
  _glTexImage2D(3553,0,6408,256,256,0,6408,5121,($license_image2|0));
  $91 = HEAP32[382672>>2]|0;
  _glBindBuffer(34962,($91|0));
  $92 = HEAP32[382680>>2]|0;
  _glBindBuffer(34963,($92|0));
  _glBufferData(34963,3160,($indices|0),35044);
  _glBufferData(34962,12672,($vertices|0),35044);
  $93 = HEAP32[382432>>2]|0;
  $94 = (_glGetAttribLocation(($93|0),(382688|0))|0);
  HEAP32[382704>>2] = $94;
  $95 = HEAP32[382432>>2]|0;
  $96 = (_glGetAttribLocation(($95|0),(382712|0))|0);
  HEAP32[382720>>2] = $96;
  $97 = HEAP32[382432>>2]|0;
  $98 = (_glGetAttribLocation(($97|0),(382728|0))|0);
  HEAP32[382744>>2] = $98;
  $99 = HEAP32[382704>>2]|0;
  _glVertexAttribPointer(($99|0),4,5126,0,32,(0|0));
  $100 = HEAP32[382720>>2]|0;
  _glVertexAttribPointer(($100|0),4,5126,0,32,((16)|0));
  $101 = HEAP32[382744>>2]|0;
  _glVertexAttribPointer(($101|0),2,5126,0,32,((16)|0));
  $102 = HEAP32[382704>>2]|0;
  _glEnableVertexAttribArray(($102|0));
  $103 = HEAP32[382720>>2]|0;
  _glEnableVertexAttribArray(($103|0));
  $104 = HEAP32[382744>>2]|0;
  _glEnableVertexAttribArray(($104|0));
  (_gettimeofday((382752|0),(0|0))|0);
  HEAP32[382760>>2] = 0;
  _emscripten_set_main_loop((29|0),0,1);
  STACKTOP = sp;return;
 }
 $39 = HEAP32[381976>>2]|0;
 _glGetShaderiv(($39|0),35716,($logSize2|0));
 $40 = HEAP32[$logSize2>>2]|0;
 $41 = (__Winternal_alloc($40)|0);
 $42 = ($41|0)==(0|0);
 if ($42) {
  $43 = HEAP32[_stderr>>2]|0;
  (_fwrite((382208|0),222,1,($43|0))|0);
  _exit(1);
  // unreachable;
 }
 $44 = HEAP32[381976>>2]|0;
 $45 = HEAP32[$logSize2>>2]|0;
 _glGetShaderInfoLog(($44|0),($45|0),(0|0),($41|0));
 $46 = HEAP32[_stderr>>2]|0;
 HEAP32[$vararg_buffer1>>2] = $41;
 (_fprintf(($46|0),(387856|0),($vararg_buffer1|0))|0);
 $47 = HEAP32[(651808)>>2]|0;
 $AsyncCtx10 = _emscripten_alloc_async_context(4,sp)|0;
 FUNCTION_TABLE_vi[$47 & 255]($41);
 $IsAsync11 = ___async;
 if ($IsAsync11) {
  HEAP32[$AsyncCtx10>>2] = 28;
  sp = STACKTOP;
  STACKTOP = sp;return;
 } else {
  _emscripten_free_async_context(($AsyncCtx10|0));
  _exit(1);
  // unreachable;
 }
}
function _copyleft_loop() {
 var $$not = 0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0;
 var $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0;
 var $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx6 = 0, $IsAsync = 0, $IsAsync4 = 0, $now = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $now = sp;
 (_gettimeofday(($now|0),(0|0))|0);
 $0 = ((($now)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[(382756)>>2]|0;
 $3 = (($1) - ($2))|0;
 $4 = HEAP32[$now>>2]|0;
 $5 = HEAP32[382752>>2]|0;
 $6 = (($4) - ($5))|0;
 $7 = ($6*1000000)|0;
 $8 = (($7) + ($3))|0;
 $9 = (+($8>>>0));
 $10 = $9 / 1.0E+6;
 $11 = $10 + -0.5;
 $12 = $11;
 $13 = HEAP32[382760>>2]|0;
 $14 = ($13|0)==(0);
 $15 = ($8>>>0)>(500000);
 $or$cond = $14 & $15;
 do {
  if ($or$cond) {
   $16 = HEAP32[(651952)>>2]|0;
   $17 = HEAP32[381960>>2]|0;
   $AsyncCtx = _emscripten_alloc_async_context(8,sp)|0;
   FUNCTION_TABLE_vi[$16 & 255]($17);
   $IsAsync = ___async;
   if ($IsAsync) {
    HEAP32[$AsyncCtx>>2] = 30;
    $18 = ((($AsyncCtx)) + 4|0);
    HEAPF32[$18>>2] = $12;
    sp = STACKTOP;
    STACKTOP = sp;return;
   } else {
    _emscripten_free_async_context(($AsyncCtx|0));
    $19 = HEAP32[382760>>2]|0;
    $20 = (($19) + 1)|0;
    HEAP32[382760>>2] = $20;
    break;
   }
  } else {
   $21 = ($13|0)==(1);
   if ($21) {
    $22 = HEAP32[382488>>2]|0;
    $23 = $12;
    $24 = $23 * 4.4000000000000004;
    $25 = $23 * $24;
    $26 = $23 * 7.5;
    $27 = $25 - $26;
    $28 = $27;
    _glUniform3f(($22|0),0.0,(+$28),0.0);
    $29 = $12 > 1.0;
    if ($29) {
     $30 = HEAP32[382760>>2]|0;
     $31 = (($30) + 1)|0;
     HEAP32[382760>>2] = $31;
    }
   }
  }
 } while(0);
 _glClear(16384);
 _glClear(256);
 $32 = $12;
 $33 = $12 < 3.5;
 if ($33) {
  $34 = HEAP32[382640>>2]|0;
  _glUniform1i(($34|0),1);
  _glDrawElements(5,391,5125,(0|0));
  _glDrawElements(5,388,5125,((1568)|0));
  $35 = HEAP32[382760>>2]|0;
  $$not = ($35|0)<(2);
  if (!($$not)) {
   $36 = HEAP32[382640>>2]|0;
   _glUniform1i(($36|0),2);
   $37 = HEAP32[382464>>2]|0;
   $38 = $32 + -1.0;
   $39 = $38 / 2.5;
   $40 = $39;
   _glUniform1f(($37|0),(+$40));
   $41 = HEAP32[382648>>2]|0;
   _glBindTexture(3553,($41|0));
   _glDrawElements(5,4,5125,((3124)|0));
   $42 = HEAP32[382464>>2]|0;
   _glUniform1f(($42|0),1.0);
  }
 }
 $43 = $12 > 3.5;
 if ($43) {
  $44 = HEAP32[382640>>2]|0;
  _glUniform1i(($44|0),2);
  $45 = HEAP32[382656>>2]|0;
  _glBindTexture(3553,($45|0));
  _glDrawElements(5,4,5125,((3140)|0));
 }
 $46 = $12 > 7.0;
 if (!($46)) {
  STACKTOP = sp;return;
 }
 $47 = HEAP32[382704>>2]|0;
 _glDisableVertexAttribArray(($47|0));
 $48 = HEAP32[382720>>2]|0;
 _glDisableVertexAttribArray(($48|0));
 $49 = HEAP32[382744>>2]|0;
 _glDisableVertexAttribArray(($49|0));
 _glBindBuffer(34962,0);
 _glDeleteVertexArrays(1,(382664|0));
 _glDeleteBuffers(1,(382680|0));
 _glDeleteBuffers(1,(382672|0));
 _glBindVertexArray(0);
 _glBindBuffer(34963,0);
 _glBindTexture(3553,0);
 _glDeleteTextures(1,(382648|0));
 _glDeleteTextures(1,(382656|0));
 $50 = HEAP32[(651956)>>2]|0;
 $51 = HEAP32[381960>>2]|0;
 $AsyncCtx3 = _emscripten_alloc_async_context(4,sp)|0;
 FUNCTION_TABLE_vi[$50 & 255]($51);
 $IsAsync4 = ___async;
 if ($IsAsync4) {
  HEAP32[$AsyncCtx3>>2] = 31;
  sp = STACKTOP;
  STACKTOP = sp;return;
 } else {
  _emscripten_free_async_context(($AsyncCtx3|0));
  _glEnable(2884);
  $52 = HEAP32[382432>>2]|0;
  $53 = HEAP32[381968>>2]|0;
  _glDetachShader(($52|0),($53|0));
  $54 = HEAP32[382432>>2]|0;
  $55 = HEAP32[381976>>2]|0;
  _glDetachShader(($54|0),($55|0));
  $56 = HEAP32[382432>>2]|0;
  _glDeleteProgram(($56|0));
  $57 = HEAP32[381968>>2]|0;
  _glDeleteShader(($57|0));
  $58 = HEAP32[381976>>2]|0;
  _glDeleteShader(($58|0));
  _emscripten_cancel_main_loop();
  (_alGetError()|0);
  $AsyncCtx6 = _emscripten_alloc_async_context(4,sp)|0;
  _Wloop(32);
  // unreachable;
 }
}
function _initialize_danger() {
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, $AsyncCtx = 0, $AsyncCtx5 = 0, $IsAsync = 0, $IsAsync6 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[(651908)>>2]|0;
 $1 = HEAP32[(389572)>>2]|0;
 $2 = (+($1|0));
 $3 = HEAP32[48>>2]|0;
 $4 = ((($3)) + 40|0);
 $5 = +HEAPF32[$4>>2];
 $6 = $2 - $5;
 $7 = HEAP32[8>>2]|0;
 $8 = ((($7)) + 40|0);
 $9 = +HEAPF32[$8>>2];
 $10 = $9 * 2.0;
 $11 = $6 - $10;
 $12 = (~~(($11)));
 $13 = HEAP32[(651832)>>2]|0;
 $AsyncCtx = _emscripten_alloc_async_context(20,sp)|0;
 $14 = (FUNCTION_TABLE_i[$13 & 255]()|0);
 $IsAsync = ___async;
 if ($IsAsync) {
  HEAP32[$AsyncCtx>>2] = 33;
  $15 = ((($AsyncCtx)) + 4|0);
  HEAP32[$15>>2] = $vararg_buffer;
  $16 = ((($AsyncCtx)) + 8|0);
  HEAP32[$16>>2] = $0;
  $17 = ((($AsyncCtx)) + 12|0);
  HEAP32[$17>>2] = $12;
  $18 = ((($AsyncCtx)) + 16|0);
  HEAP32[$18>>2] = $vararg_buffer;
  sp = STACKTOP;
  STACKTOP = sp;return;
 }
 _emscripten_free_async_context(($AsyncCtx|0));
 $19 = HEAP32[(389576)>>2]|0;
 $20 = (($14>>>0) % ($19>>>0))&-1;
 $21 = HEAP32[(389572)>>2]|0;
 $22 = (($21|0) / 80)&-1;
 HEAPF64[$vararg_buffer>>3] = 1.0;
 $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
 HEAPF64[$vararg_ptr1>>3] = 1.0;
 $vararg_ptr2 = ((($vararg_buffer)) + 16|0);
 HEAPF64[$vararg_ptr2>>3] = 1.0;
 $vararg_ptr3 = ((($vararg_buffer)) + 24|0);
 HEAPF64[$vararg_ptr3>>3] = 1.0;
 $AsyncCtx5 = _emscripten_alloc_async_context(8,sp)|0;
 $23 = (FUNCTION_TABLE_iiiiiii[$0 & 255](10,$12,$20,$22,$22,$vararg_buffer)|0);
 $IsAsync6 = ___async;
 if ($IsAsync6) {
  HEAP32[$AsyncCtx5>>2] = 34;
  $24 = ((($AsyncCtx5)) + 4|0);
  HEAP32[$24>>2] = $vararg_buffer;
  sp = STACKTOP;
  STACKTOP = sp;return;
 } else {
  _emscripten_free_async_context(($AsyncCtx5|0));
  HEAP32[88>>2] = $23;
  $25 = ((($23)) + 44|0);
  HEAP8[$25>>0] = 0;
  STACKTOP = sp;return;
 }
}
function _show_danger() {
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $IsAsync = 0, $IsAsync3 = 0, $x_pos$0 = 0;
 var $x_pos$0$in = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[8>>2]|0;
 $1 = ((($0)) + 8|0);
 $2 = +HEAPF32[$1>>2];
 $3 = HEAP32[(389572)>>2]|0;
 $4 = (($3|0) / 2)&-1;
 $5 = (+($4|0));
 $6 = $2 < $5;
 if ($6) {
  $7 = (+($3|0));
  $8 = HEAP32[48>>2]|0;
  $9 = ((($8)) + 40|0);
  $10 = +HEAPF32[$9>>2];
  $11 = $7 - $10;
  $12 = ((($0)) + 40|0);
  $13 = +HEAPF32[$12>>2];
  $14 = $13 * 2.0;
  $15 = $11 - $14;
  $x_pos$0$in = $15;
 } else {
  $16 = HEAP32[48>>2]|0;
  $17 = ((($16)) + 40|0);
  $18 = +HEAPF32[$17>>2];
  $19 = ((($0)) + 40|0);
  $20 = +HEAPF32[$19>>2];
  $21 = $20 * 2.0;
  $22 = $18 + $21;
  $x_pos$0$in = $22;
 }
 $x_pos$0 = (~~(($x_pos$0$in)));
 $23 = HEAP32[88>>2]|0;
 $24 = ((($23)) + 44|0);
 HEAP8[$24>>0] = 1;
 $25 = HEAP32[(651920)>>2]|0;
 $26 = (+($x_pos$0|0));
 $27 = HEAP32[(651832)>>2]|0;
 $AsyncCtx = _emscripten_alloc_async_context(16,sp)|0;
 $28 = (FUNCTION_TABLE_i[$27 & 255]()|0);
 $IsAsync = ___async;
 if ($IsAsync) {
  HEAP32[$AsyncCtx>>2] = 35;
  $29 = ((($AsyncCtx)) + 4|0);
  HEAP32[$29>>2] = $23;
  $30 = ((($AsyncCtx)) + 8|0);
  HEAPF32[$30>>2] = $26;
  $31 = ((($AsyncCtx)) + 12|0);
  HEAP32[$31>>2] = $25;
  sp = STACKTOP;
  return;
 }
 _emscripten_free_async_context(($AsyncCtx|0));
 $32 = HEAP32[(389576)>>2]|0;
 $33 = (($28>>>0) % ($32>>>0))&-1;
 $34 = (+($33>>>0));
 $AsyncCtx2 = _emscripten_alloc_async_context(4,sp)|0;
 FUNCTION_TABLE_vidd[$25 & 255]($23,$26,$34);
 $IsAsync3 = ___async;
 if ($IsAsync3) {
  HEAP32[$AsyncCtx2>>2] = 36;
  sp = STACKTOP;
  return;
 } else {
  _emscripten_free_async_context(($AsyncCtx2|0));
  return;
 }
}
function _get_danger() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, $IsAsync = 0, $IsAsync11 = 0, $IsAsync3 = 0, $IsAsync7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(651832)>>2]|0;
 $AsyncCtx = _emscripten_alloc_async_context(4,sp)|0;
 $1 = (FUNCTION_TABLE_i[$0 & 255]()|0);
 $IsAsync = ___async;
 if ($IsAsync) {
  HEAP32[$AsyncCtx>>2] = 37;
  sp = STACKTOP;
  return;
 }
 _emscripten_free_async_context(($AsyncCtx|0));
 $2 = $1 & 7;
 $3 = (($2) + 1)|0;
 $4 = HEAP32[(651952)>>2]|0;
 $5 = HEAP32[35144>>2]|0;
 $AsyncCtx2 = _emscripten_alloc_async_context(8,sp)|0;
 FUNCTION_TABLE_vi[$4 & 255]($5);
 $IsAsync3 = ___async;
 if ($IsAsync3) {
  HEAP32[$AsyncCtx2>>2] = 38;
  $6 = ((($AsyncCtx2)) + 4|0);
  HEAP32[$6>>2] = $3;
  sp = STACKTOP;
  return;
 }
 _emscripten_free_async_context(($AsyncCtx2|0));
 HEAP8[35112>>0] = 1;
 $7 = 389544;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($7) + 4)|0;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = 35120;
 $14 = $13;
 HEAP32[$14>>2] = $9;
 $15 = (($13) + 4)|0;
 $16 = $15;
 HEAP32[$16>>2] = $12;
 $17 = ($3|0)==(8);
 if (!($17)) {
  $18 = HEAP32[(651780)>>2]|0;
  $19 = (($18) + ($3))|0;
  HEAP32[(651780)>>2] = $19;
  $40 = HEAP32[88>>2]|0;
  $41 = ((($40)) + 44|0);
  HEAP8[$41>>0] = 0;
  return;
 }
 $20 = HEAP32[88>>2]|0;
 $21 = ((($20)) + 8|0);
 $22 = +HEAPF32[$21>>2];
 $23 = HEAP32[(389572)>>2]|0;
 $24 = (($23|0) / 2)&-1;
 $25 = (+($24|0));
 $26 = $22 > $25;
 $27 = HEAP32[(651924)>>2]|0;
 if ($26) {
  $28 = HEAP32[56>>2]|0;
  $29 = ((($28)) + 40|0);
  $30 = +HEAPF32[$29>>2];
  $31 = ((($28)) + 36|0);
  $32 = +HEAPF32[$31>>2];
  $33 = $32 * 0.5;
  $AsyncCtx6 = _emscripten_alloc_async_context(4,sp)|0;
  FUNCTION_TABLE_vidd[$27 & 255]($28,$30,$33);
  $IsAsync7 = ___async;
  if ($IsAsync7) {
   HEAP32[$AsyncCtx6>>2] = 39;
   sp = STACKTOP;
   return;
  }
  _emscripten_free_async_context(($AsyncCtx6|0));
  $40 = HEAP32[88>>2]|0;
  $41 = ((($40)) + 44|0);
  HEAP8[$41>>0] = 0;
  return;
 } else {
  $34 = HEAP32[48>>2]|0;
  $35 = ((($34)) + 40|0);
  $36 = +HEAPF32[$35>>2];
  $37 = ((($34)) + 36|0);
  $38 = +HEAPF32[$37>>2];
  $39 = $38 * 0.5;
  $AsyncCtx10 = _emscripten_alloc_async_context(4,sp)|0;
  FUNCTION_TABLE_vidd[$27 & 255]($34,$36,$39);
  $IsAsync11 = ___async;
  if ($IsAsync11) {
   HEAP32[$AsyncCtx10>>2] = 40;
   sp = STACKTOP;
   return;
  }
  _emscripten_free_async_context(($AsyncCtx10|0));
  $40 = HEAP32[88>>2]|0;
  $41 = ((($40)) + 44|0);
  HEAP8[$41>>0] = 0;
  return;
 }
}
function _end_danger() {
 var $$ = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $3 = 0;
 var $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, $IsAsync = 0, $IsAsync4 = 0, $IsAsync8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(651780)>>2]|0;
 $1 = ($0|0)>(9);
 $$ = $1 ? 10 : 0;
 HEAP32[(651780)>>2] = $$;
 $2 = HEAP32[56>>2]|0;
 $3 = ((($2)) + 36|0);
 $4 = +HEAPF32[$3>>2];
 $5 = HEAP32[(389576)>>2]|0;
 $6 = (($5|0) / 7)&-1;
 $7 = (+($6|0));
 $8 = $4 != $7;
 do {
  if ($8) {
   $9 = HEAP32[(651924)>>2]|0;
   $10 = ((($2)) + 40|0);
   $11 = +HEAPF32[$10>>2];
   $AsyncCtx = _emscripten_alloc_async_context(4,sp)|0;
   FUNCTION_TABLE_vidd[$9 & 255]($2,$11,$7);
   $IsAsync = ___async;
   if ($IsAsync) {
    HEAP32[$AsyncCtx>>2] = 41;
    sp = STACKTOP;
    return;
   } else {
    _emscripten_free_async_context(($AsyncCtx|0));
    $$pre = HEAP32[(389576)>>2]|0;
    $16 = $$pre;
    break;
   }
  } else {
   $16 = $5;
  }
 } while(0);
 $12 = HEAP32[48>>2]|0;
 $13 = ((($12)) + 36|0);
 $14 = +HEAPF32[$13>>2];
 $15 = (($16|0) / 7)&-1;
 $17 = (+($15|0));
 $18 = $14 != $17;
 do {
  if ($18) {
   $19 = HEAP32[(651924)>>2]|0;
   $20 = ((($12)) + 40|0);
   $21 = +HEAPF32[$20>>2];
   $AsyncCtx3 = _emscripten_alloc_async_context(4,sp)|0;
   FUNCTION_TABLE_vidd[$19 & 255]($12,$21,$17);
   $IsAsync4 = ___async;
   if ($IsAsync4) {
    HEAP32[$AsyncCtx3>>2] = 42;
    sp = STACKTOP;
    return;
   } else {
    _emscripten_free_async_context(($AsyncCtx3|0));
    break;
   }
  }
 } while(0);
 $22 = HEAP32[(651952)>>2]|0;
 $23 = HEAP32[35152>>2]|0;
 $AsyncCtx7 = _emscripten_alloc_async_context(4,sp)|0;
 FUNCTION_TABLE_vi[$22 & 255]($23);
 $IsAsync8 = ___async;
 if ($IsAsync8) {
  HEAP32[$AsyncCtx7>>2] = 43;
  sp = STACKTOP;
  return;
 } else {
  _emscripten_free_async_context(($AsyncCtx7|0));
  return;
 }
}
function _hide_danger() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[88>>2]|0;
 $1 = ((($0)) + 44|0);
 HEAP8[$1>>0] = 0;
 return;
}
function _main() {
 var $0 = 0, $1 = 0, $2 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx6 = 0, $IsAsync = 0, $IsAsync4 = 0, $IsAsync7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $AsyncCtx3 = _emscripten_alloc_async_context(4,sp)|0;
 __awake_the_weaver();
 $IsAsync4 = ___async;
 if ($IsAsync4) {
  HEAP32[$AsyncCtx3>>2] = 44;
  sp = STACKTOP;
  return 0;
 }
 _emscripten_free_async_context(($AsyncCtx3|0));
 $0 = HEAP32[(389556)>>2]|0;
 $1 = ((($0)) + 4|0);
 HEAP8[$1>>0] = 0;
 $2 = HEAP32[(651856)>>2]|0;
 $AsyncCtx = _emscripten_alloc_async_context(4,sp)|0;
 FUNCTION_TABLE_v[$2 & 255]();
 $IsAsync = ___async;
 if ($IsAsync) {
  HEAP32[$AsyncCtx>>2] = 45;
  sp = STACKTOP;
  return 0;
 }
 _emscripten_free_async_context(($AsyncCtx|0));
 $AsyncCtx6 = _emscripten_alloc_async_context(4,sp)|0;
 _copyleft();
 $IsAsync7 = ___async;
 if ($IsAsync7) {
  HEAP32[$AsyncCtx6>>2] = 46;
  sp = STACKTOP;
  return 0;
 } else {
  _emscripten_free_async_context(($AsyncCtx6|0));
  return 0;
 }
 return (0)|0;
}
function _initialize_item() {
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0.0, $60 = 0.0, $61 = 0, $7 = 0;
 var $8 = 0, $9 = 0.0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, $IsAsync = 0, $IsAsync10 = 0, $IsAsync13 = 0, $IsAsync6 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[(651908)>>2]|0;
 $1 = HEAP32[(389572)>>2]|0;
 $2 = (+($1|0));
 $3 = HEAP32[48>>2]|0;
 $4 = ((($3)) + 40|0);
 $5 = +HEAPF32[$4>>2];
 $6 = $2 - $5;
 $7 = HEAP32[8>>2]|0;
 $8 = ((($7)) + 40|0);
 $9 = +HEAPF32[$8>>2];
 $10 = $9 * 2.0;
 $11 = $6 - $10;
 $12 = (~~(($11)));
 $13 = HEAP32[(651832)>>2]|0;
 $AsyncCtx = _emscripten_alloc_async_context(20,sp)|0;
 $14 = (FUNCTION_TABLE_i[$13 & 255]()|0);
 $IsAsync = ___async;
 if ($IsAsync) {
  HEAP32[$AsyncCtx>>2] = 47;
  $15 = ((($AsyncCtx)) + 4|0);
  HEAP32[$15>>2] = $vararg_buffer;
  $16 = ((($AsyncCtx)) + 8|0);
  HEAP32[$16>>2] = $0;
  $17 = ((($AsyncCtx)) + 12|0);
  HEAP32[$17>>2] = $12;
  $18 = ((($AsyncCtx)) + 16|0);
  HEAP32[$18>>2] = $vararg_buffer;
  sp = STACKTOP;
  STACKTOP = sp;return;
 }
 _emscripten_free_async_context(($AsyncCtx|0));
 $19 = HEAP32[(389576)>>2]|0;
 $20 = (($14>>>0) % ($19>>>0))&-1;
 $21 = HEAP32[(389572)>>2]|0;
 $22 = (($21|0) / 80)&-1;
 HEAPF64[$vararg_buffer>>3] = 1.0;
 $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
 HEAPF64[$vararg_ptr1>>3] = 1.0;
 $vararg_ptr2 = ((($vararg_buffer)) + 16|0);
 HEAPF64[$vararg_ptr2>>3] = 1.0;
 $vararg_ptr3 = ((($vararg_buffer)) + 24|0);
 HEAPF64[$vararg_ptr3>>3] = 1.0;
 $AsyncCtx5 = _emscripten_alloc_async_context(8,sp)|0;
 $23 = (FUNCTION_TABLE_iiiiiii[$0 & 255](9,$12,$20,$22,$22,$vararg_buffer)|0);
 $IsAsync6 = ___async;
 if ($IsAsync6) {
  HEAP32[$AsyncCtx5>>2] = 48;
  $24 = ((($AsyncCtx5)) + 4|0);
  HEAP32[$24>>2] = $vararg_buffer;
  sp = STACKTOP;
  STACKTOP = sp;return;
 }
 _emscripten_free_async_context(($AsyncCtx5|0));
 HEAP32[80>>2] = $23;
 $25 = ((($23)) + 12|0);
 $26 = +HEAPF32[$25>>2];
 $27 = HEAP32[(389576)>>2]|0;
 $28 = (($27|0) / 2)&-1;
 $29 = HEAP32[(389572)>>2]|0;
 $30 = (($29|0) / 40)&-1;
 $31 = (($28) - ($30))|0;
 $32 = (+($31|0));
 $33 = $26 > $32;
 if ($33) {
  $35 = $28;$36 = $30;$39 = $26;$42 = $23;
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $34 = (($36) + ($35))|0;
  $37 = (+($34|0));
  $38 = $39 < $37;
  if (!($38)) {
   label = 12;
   break;
  }
  $40 = HEAP32[(651920)>>2]|0;
  $41 = ((($42)) + 8|0);
  $43 = +HEAPF32[$41>>2];
  $44 = HEAP32[(651832)>>2]|0;
  $AsyncCtx9 = _emscripten_alloc_async_context(16,sp)|0;
  $45 = (FUNCTION_TABLE_i[$44 & 255]()|0);
  $IsAsync10 = ___async;
  if ($IsAsync10) {
   label = 8;
   break;
  }
  _emscripten_free_async_context(($AsyncCtx9|0));
  $49 = HEAP32[(389576)>>2]|0;
  $50 = (($45>>>0) % ($49>>>0))&-1;
  $51 = (+($50>>>0));
  $AsyncCtx12 = _emscripten_alloc_async_context(4,sp)|0;
  FUNCTION_TABLE_vidd[$40 & 255]($42,$43,$51);
  $IsAsync13 = ___async;
  if ($IsAsync13) {
   label = 10;
   break;
  }
  _emscripten_free_async_context(($AsyncCtx12|0));
  $52 = HEAP32[80>>2]|0;
  $53 = ((($52)) + 12|0);
  $54 = +HEAPF32[$53>>2];
  $55 = HEAP32[(389576)>>2]|0;
  $56 = (($55|0) / 2)&-1;
  $57 = HEAP32[(389572)>>2]|0;
  $58 = (($57|0) / 40)&-1;
  $59 = (($56) - ($58))|0;
  $60 = (+($59|0));
  $61 = $54 > $60;
  if ($61) {
   $35 = $56;$36 = $58;$39 = $54;$42 = $52;
  } else {
   label = 12;
   break;
  }
 }
 if ((label|0) == 8) {
  HEAP32[$AsyncCtx9>>2] = 49;
  $46 = ((($AsyncCtx9)) + 4|0);
  HEAP32[$46>>2] = $42;
  $47 = ((($AsyncCtx9)) + 8|0);
  HEAPF32[$47>>2] = $43;
  $48 = ((($AsyncCtx9)) + 12|0);
  HEAP32[$48>>2] = $40;
  sp = STACKTOP;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 10) {
  HEAP32[$AsyncCtx12>>2] = 50;
  sp = STACKTOP;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 12) {
  STACKTOP = sp;return;
 }
}
function _update_item() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $AsyncCtx = 0, $IsAsync = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[80>>2]|0;
 $1 = ((($0)) + 44|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  return;
 }
 $4 = HEAP32[(651928)>>2]|0;
 $5 = ((($0)) + 16|0);
 $6 = +HEAPF32[$5>>2];
 $7 = $6;
 $8 = $7 + 0.050000000000000003;
 $9 = $8;
 $AsyncCtx = _emscripten_alloc_async_context(4,sp)|0;
 FUNCTION_TABLE_vid[$4 & 255]($0,$9);
 $IsAsync = ___async;
 if ($IsAsync) {
  HEAP32[$AsyncCtx>>2] = 51;
  sp = STACKTOP;
  return;
 }
 _emscripten_free_async_context(($AsyncCtx|0));
 return;
}
function _hide_item() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[80>>2]|0;
 $1 = ((($0)) + 44|0);
 HEAP8[$1>>0] = 0;
 return;
}
function _show_item() {
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $IsAsync = 0, $IsAsync3 = 0, $x_pos$0 = 0;
 var $x_pos$0$in = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[8>>2]|0;
 $1 = ((($0)) + 8|0);
 $2 = +HEAPF32[$1>>2];
 $3 = HEAP32[(389572)>>2]|0;
 $4 = (($3|0) / 2)&-1;
 $5 = (+($4|0));
 $6 = $2 < $5;
 if ($6) {
  $7 = (+($3|0));
  $8 = HEAP32[48>>2]|0;
  $9 = ((($8)) + 40|0);
  $10 = +HEAPF32[$9>>2];
  $11 = $7 - $10;
  $12 = ((($0)) + 40|0);
  $13 = +HEAPF32[$12>>2];
  $14 = $13 * 2.0;
  $15 = $11 - $14;
  $x_pos$0$in = $15;
 } else {
  $16 = HEAP32[48>>2]|0;
  $17 = ((($16)) + 40|0);
  $18 = +HEAPF32[$17>>2];
  $19 = ((($0)) + 40|0);
  $20 = +HEAPF32[$19>>2];
  $21 = $20 * 2.0;
  $22 = $18 + $21;
  $x_pos$0$in = $22;
 }
 $x_pos$0 = (~~(($x_pos$0$in)));
 $23 = HEAP32[80>>2]|0;
 $24 = ((($23)) + 44|0);
 HEAP8[$24>>0] = 1;
 $25 = HEAP32[(651920)>>2]|0;
 $26 = (+($x_pos$0|0));
 $27 = HEAP32[(651832)>>2]|0;
 $AsyncCtx = _emscripten_alloc_async_context(16,sp)|0;
 $28 = (FUNCTION_TABLE_i[$27 & 255]()|0);
 $IsAsync = ___async;
 if ($IsAsync) {
  HEAP32[$AsyncCtx>>2] = 52;
  $29 = ((($AsyncCtx)) + 4|0);
  HEAP32[$29>>2] = $23;
  $30 = ((($AsyncCtx)) + 8|0);
  HEAPF32[$30>>2] = $26;
  $31 = ((($AsyncCtx)) + 12|0);
  HEAP32[$31>>2] = $25;
  sp = STACKTOP;
  return;
 }
 _emscripten_free_async_context(($AsyncCtx|0));
 $32 = HEAP32[(389576)>>2]|0;
 $33 = (($28>>>0) % ($32>>>0))&-1;
 $34 = (+($33>>>0));
 $AsyncCtx2 = _emscripten_alloc_async_context(4,sp)|0;
 FUNCTION_TABLE_vidd[$25 & 255]($23,$26,$34);
 $IsAsync3 = ___async;
 if ($IsAsync3) {
  HEAP32[$AsyncCtx2>>2] = 53;
  sp = STACKTOP;
  return;
 } else {
  _emscripten_free_async_context(($AsyncCtx2|0));
  return;
 }
}
function _get_item() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $AsyncCtx = 0, $IsAsync = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[35096>>2]|0;
 switch ($0|0) {
 case 0:  {
  $1 = HEAP32[56>>2]|0;
  $2 = ((($1)) + 4|0);
  HEAP32[$2>>2] = 10;
  break;
 }
 case 4:  {
  $11 = HEAP32[35104>>2]|0;
  $12 = ((($11)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + 10)|0;
  HEAP32[$12>>2] = $14;
  break;
 }
 case 3:  {
  $7 = HEAP32[40>>2]|0;
  $8 = ((($7)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (($9) + 10)|0;
  HEAP32[$8>>2] = $10;
  break;
 }
 case 2:  {
  $5 = HEAP32[8>>2]|0;
  $6 = ((($5)) + 4|0);
  HEAP32[$6>>2] = 1;
  break;
 }
 case 1:  {
  $3 = HEAP32[48>>2]|0;
  $4 = ((($3)) + 4|0);
  HEAP32[$4>>2] = 10;
  break;
 }
 default: {
  HEAP32[(651780)>>2] = 10;
 }
 }
 $15 = HEAP32[(651952)>>2]|0;
 $16 = HEAP32[35136>>2]|0;
 $AsyncCtx = _emscripten_alloc_async_context(4,sp)|0;
 FUNCTION_TABLE_vi[$15 & 255]($16);
 $IsAsync = ___async;
 if ($IsAsync) {
  HEAP32[$AsyncCtx>>2] = 54;
  sp = STACKTOP;
  return;
 } else {
  _emscripten_free_async_context(($AsyncCtx|0));
  $17 = HEAP32[35096>>2]|0;
  $18 = (($17) + 1)|0;
  HEAP32[35096>>2] = $18;
  $19 = HEAP32[80>>2]|0;
  $20 = ((($19)) + 44|0);
  HEAP8[$20>>0] = 0;
  return;
 }
}
function _initialize_paddle() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $IsAsync = 0, $IsAsync13 = 0, $vararg_buffer = 0;
 var $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 32|0;
 $vararg_buffer = sp;
 $0 = HEAP32[(651908)>>2]|0;
 $1 = HEAP32[(389572)>>2]|0;
 $2 = (($1|0) / 40)&-1;
 $3 = (+($2|0));
 $4 = $3 * 0.5;
 $5 = (~~(($4)));
 $6 = HEAP32[(389576)>>2]|0;
 $7 = (($6|0) / 2)&-1;
 $8 = (($6|0) / 7)&-1;
 HEAPF64[$vararg_buffer>>3] = 1.0;
 $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
 HEAPF64[$vararg_ptr1>>3] = 1.0;
 $vararg_ptr2 = ((($vararg_buffer)) + 16|0);
 HEAPF64[$vararg_ptr2>>3] = 1.0;
 $vararg_ptr3 = ((($vararg_buffer)) + 24|0);
 HEAPF64[$vararg_ptr3>>3] = 1.0;
 $AsyncCtx = _emscripten_alloc_async_context(16,sp)|0;
 $9 = (FUNCTION_TABLE_iiiiiii[$0 & 255](6,$5,$7,$2,$8,$vararg_buffer)|0);
 $IsAsync = ___async;
 if ($IsAsync) {
  HEAP32[$AsyncCtx>>2] = 55;
  $10 = ((($AsyncCtx)) + 4|0);
  HEAP32[$10>>2] = $vararg_buffer;
  $11 = ((($AsyncCtx)) + 8|0);
  HEAP32[$11>>2] = $vararg_buffer4;
  $12 = ((($AsyncCtx)) + 12|0);
  HEAP32[$12>>2] = $vararg_buffer4;
  sp = STACKTOP;
  STACKTOP = sp;return;
 }
 _emscripten_free_async_context(($AsyncCtx|0));
 HEAP32[56>>2] = $9;
 $13 = HEAP32[(651908)>>2]|0;
 $14 = HEAP32[(389572)>>2]|0;
 $15 = (+($14|0));
 $16 = (($14|0) / 40)&-1;
 $17 = (+($16|0));
 $18 = $17 * 0.5;
 $19 = $15 - $18;
 $20 = (~~(($19)));
 $21 = HEAP32[(389576)>>2]|0;
 $22 = (($21|0) / 2)&-1;
 $23 = (($21|0) / 7)&-1;
 HEAPF64[$vararg_buffer4>>3] = 1.0;
 $vararg_ptr7 = ((($vararg_buffer4)) + 8|0);
 HEAPF64[$vararg_ptr7>>3] = 1.0;
 $vararg_ptr8 = ((($vararg_buffer4)) + 16|0);
 HEAPF64[$vararg_ptr8>>3] = 1.0;
 $vararg_ptr9 = ((($vararg_buffer4)) + 24|0);
 HEAPF64[$vararg_ptr9>>3] = 1.0;
 $AsyncCtx12 = _emscripten_alloc_async_context(8,sp)|0;
 $24 = (FUNCTION_TABLE_iiiiiii[$13 & 255](6,$20,$22,$16,$23,$vararg_buffer4)|0);
 $IsAsync13 = ___async;
 if ($IsAsync13) {
  HEAP32[$AsyncCtx12>>2] = 56;
  $25 = ((($AsyncCtx12)) + 4|0);
  HEAP32[$25>>2] = $vararg_buffer4;
  sp = STACKTOP;
  STACKTOP = sp;return;
 } else {
  _emscripten_free_async_context(($AsyncCtx12|0));
  HEAP32[48>>2] = $24;
  $26 = HEAP32[56>>2]|0;
  $27 = ((($26)) + 20|0);
  HEAPF32[$27>>2] = 1.0;
  $28 = ((($26)) + 28|0);
  HEAPF32[$28>>2] = 0.0;
  $29 = ((($26)) + 24|0);
  HEAPF32[$29>>2] = 0.0;
  $30 = ((($24)) + 28|0);
  HEAPF32[$30>>2] = 1.0;
  $31 = ((($24)) + 24|0);
  HEAPF32[$31>>2] = 0.0;
  $32 = ((($24)) + 20|0);
  HEAPF32[$32>>2] = 0.0;
  $33 = ((($26)) + 4|0);
  HEAP32[$33>>2] = 0;
  $34 = ((($24)) + 4|0);
  HEAP32[$34>>2] = 0;
  HEAP32[382768>>2] = 0;
  HEAP32[382776>>2] = 0;
  STACKTOP = sp;return;
 }
}
function _move_paddle($paddle,$direction,$time,$speed) {
 $paddle = $paddle|0;
 $direction = $direction|0;
 $time = $time|0;
 $speed = $speed|0;
 var $$pre = 0.0, $$pre1 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0.0, $60 = 0.0;
 var $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $8 = 0.0, $9 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, $IsAsync = 0;
 var $IsAsync12 = 0, $IsAsync16 = 0, $IsAsync20 = 0, $IsAsync4 = 0, $IsAsync8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($direction|0)==(1105);
 $1 = ($time|0)>(500000);
 $2 = HEAP32[(651920)>>2]|0;
 $3 = ((($paddle)) + 8|0);
 $4 = +HEAPF32[$3>>2];
 $5 = ((($paddle)) + 12|0);
 $6 = +HEAPF32[$5>>2];
 do {
  if ($0) {
   if ($1) {
    $7 = (+($speed|0));
    $8 = $6 - $7;
    $AsyncCtx = _emscripten_alloc_async_context(16,sp)|0;
    FUNCTION_TABLE_vidd[$2 & 255]($paddle,$4,$8);
    $IsAsync = ___async;
    if ($IsAsync) {
     HEAP32[$AsyncCtx>>2] = 57;
     $9 = ((($AsyncCtx)) + 4|0);
     HEAP32[$9>>2] = $5;
     $10 = ((($AsyncCtx)) + 8|0);
     HEAP32[$10>>2] = $paddle;
     $11 = ((($AsyncCtx)) + 12|0);
     HEAP32[$11>>2] = $3;
     sp = STACKTOP;
     return;
    } else {
     _emscripten_free_async_context(($AsyncCtx|0));
     break;
    }
   } else {
    $12 = (($speed|0) / 2)&-1;
    $13 = (+($speed|0));
    $14 = $13 * 0.5;
    $15 = (+($time|0));
    $16 = $15;
    $17 = $16 * $14;
    $18 = $17 / 5.0E+5;
    $19 = (~~(($18)));
    $20 = (($19) + ($12))|0;
    $21 = (+($20|0));
    $22 = $6 - $21;
    $AsyncCtx3 = _emscripten_alloc_async_context(16,sp)|0;
    FUNCTION_TABLE_vidd[$2 & 255]($paddle,$4,$22);
    $IsAsync4 = ___async;
    if ($IsAsync4) {
     HEAP32[$AsyncCtx3>>2] = 58;
     $23 = ((($AsyncCtx3)) + 4|0);
     HEAP32[$23>>2] = $5;
     $24 = ((($AsyncCtx3)) + 8|0);
     HEAP32[$24>>2] = $paddle;
     $25 = ((($AsyncCtx3)) + 12|0);
     HEAP32[$25>>2] = $3;
     sp = STACKTOP;
     return;
    } else {
     _emscripten_free_async_context(($AsyncCtx3|0));
     break;
    }
   }
  } else {
   if ($1) {
    $26 = (+($speed|0));
    $27 = $26 + $6;
    $AsyncCtx7 = _emscripten_alloc_async_context(16,sp)|0;
    FUNCTION_TABLE_vidd[$2 & 255]($paddle,$4,$27);
    $IsAsync8 = ___async;
    if ($IsAsync8) {
     HEAP32[$AsyncCtx7>>2] = 59;
     $28 = ((($AsyncCtx7)) + 4|0);
     HEAP32[$28>>2] = $5;
     $29 = ((($AsyncCtx7)) + 8|0);
     HEAP32[$29>>2] = $paddle;
     $30 = ((($AsyncCtx7)) + 12|0);
     HEAP32[$30>>2] = $3;
     sp = STACKTOP;
     return;
    } else {
     _emscripten_free_async_context(($AsyncCtx7|0));
     break;
    }
   } else {
    $31 = (($speed|0) / 2)&-1;
    $32 = (+($speed|0));
    $33 = $32 * 0.5;
    $34 = (+($time|0));
    $35 = $34;
    $36 = $35 * $33;
    $37 = $36 / 5.0E+5;
    $38 = (~~(($37)));
    $39 = (($38) + ($31))|0;
    $40 = (+($39|0));
    $41 = $6 + $40;
    $AsyncCtx11 = _emscripten_alloc_async_context(16,sp)|0;
    FUNCTION_TABLE_vidd[$2 & 255]($paddle,$4,$41);
    $IsAsync12 = ___async;
    if ($IsAsync12) {
     HEAP32[$AsyncCtx11>>2] = 60;
     $42 = ((($AsyncCtx11)) + 4|0);
     HEAP32[$42>>2] = $5;
     $43 = ((($AsyncCtx11)) + 8|0);
     HEAP32[$43>>2] = $paddle;
     $44 = ((($AsyncCtx11)) + 12|0);
     HEAP32[$44>>2] = $3;
     sp = STACKTOP;
     return;
    } else {
     _emscripten_free_async_context(($AsyncCtx11|0));
     break;
    }
   }
  }
 } while(0);
 $45 = +HEAPF32[$5>>2];
 $46 = $45;
 $47 = ((($paddle)) + 36|0);
 $48 = +HEAPF32[$47>>2];
 $49 = $48;
 $50 = $49 * 0.5;
 $51 = $46 < $50;
 do {
  if ($51) {
   $52 = HEAP32[(651920)>>2]|0;
   $53 = +HEAPF32[$3>>2];
   $54 = $50;
   $AsyncCtx15 = _emscripten_alloc_async_context(20,sp)|0;
   FUNCTION_TABLE_vidd[$52 & 255]($paddle,$53,$54);
   $IsAsync16 = ___async;
   if ($IsAsync16) {
    HEAP32[$AsyncCtx15>>2] = 61;
    $55 = ((($AsyncCtx15)) + 4|0);
    HEAP32[$55>>2] = $5;
    $56 = ((($AsyncCtx15)) + 8|0);
    HEAP32[$56>>2] = $47;
    $57 = ((($AsyncCtx15)) + 12|0);
    HEAP32[$57>>2] = $3;
    $58 = ((($AsyncCtx15)) + 16|0);
    HEAP32[$58>>2] = $paddle;
    sp = STACKTOP;
    return;
   } else {
    _emscripten_free_async_context(($AsyncCtx15|0));
    $$pre = +HEAPF32[$5>>2];
    $$pre1 = +HEAPF32[$47>>2];
    $60 = $$pre;$64 = $$pre1;
    break;
   }
  } else {
   $60 = $45;$64 = $48;
  }
 } while(0);
 $59 = $60;
 $61 = HEAP32[(389576)>>2]|0;
 $62 = (+($61|0));
 $63 = $64;
 $65 = $63 * 0.5;
 $66 = $62 - $65;
 $67 = $59 > $66;
 if (!($67)) {
  return;
 }
 $68 = HEAP32[(651920)>>2]|0;
 $69 = +HEAPF32[$3>>2];
 $70 = $66;
 $AsyncCtx19 = _emscripten_alloc_async_context(4,sp)|0;
 FUNCTION_TABLE_vidd[$68 & 255]($paddle,$69,$70);
 $IsAsync20 = ___async;
 if ($IsAsync20) {
  HEAP32[$AsyncCtx19>>2] = 62;
  sp = STACKTOP;
  return;
 }
 _emscripten_free_async_context(($AsyncCtx19|0));
 return;
}
function _paddle_ai($paddle) {
 $paddle = $paddle|0;
 var $$pre48 = 0.0, $$pre49 = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0.0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0.0;
 var $114 = 0.0, $115 = 0, $116 = 0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0.0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0.0, $145 = 0, $146 = 0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0.0;
 var $150 = 0, $151 = 0.0, $152 = 0, $153 = 0, $154 = 0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0, $162 = 0, $163 = 0.0, $164 = 0, $165 = 0.0, $166 = 0, $167 = 0, $168 = 0.0;
 var $169 = 0.0, $17 = 0, $170 = 0.0, $171 = 0, $172 = 0, $173 = 0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0.0, $181 = 0, $182 = 0, $183 = 0, $184 = 0.0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0.0, $189 = 0, $19 = 0.0, $190 = 0, $191 = 0.0, $192 = 0, $193 = 0.0, $194 = 0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0.0, $202 = 0.0, $203 = 0.0;
 var $204 = 0, $205 = 0.0, $206 = 0, $207 = 0, $208 = 0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0, $213 = 0, $214 = 0.0, $215 = 0, $216 = 0, $217 = 0, $218 = 0.0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0.0, $223 = 0, $224 = 0, $225 = 0.0, $226 = 0, $227 = 0, $228 = 0.0, $229 = 0.0, $23 = 0, $230 = 0, $231 = 0, $232 = 0.0, $233 = 0.0, $234 = 0.0, $235 = 0, $236 = 0, $237 = 0, $238 = 0.0, $239 = 0.0, $24 = 0.0;
 var $240 = 0.0, $241 = 0, $242 = 0, $243 = 0, $244 = 0.0, $245 = 0.0, $246 = 0.0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0.0, $251 = 0.0, $252 = 0.0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0.0, $258 = 0;
 var $259 = 0, $26 = 0.0, $260 = 0.0, $261 = 0, $262 = 0.0, $263 = 0, $264 = 0, $265 = 0.0, $266 = 0.0, $267 = 0.0, $268 = 0, $269 = 0, $27 = 0.0, $270 = 0, $271 = 0.0, $272 = 0.0, $273 = 0.0, $274 = 0, $275 = 0.0, $276 = 0.0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0.0, $280 = 0.0, $281 = 0.0, $282 = 0.0, $283 = 0, $284 = 0, $285 = 0.0, $286 = 0, $287 = 0, $288 = 0.0, $289 = 0, $29 = 0, $290 = 0, $291 = 0.0, $292 = 0, $293 = 0, $294 = 0.0;
 var $295 = 0.0, $296 = 0.0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0.0, $301 = 0.0, $302 = 0.0, $303 = 0, $304 = 0.0, $305 = 0.0, $306 = 0, $307 = 0, $308 = 0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0.0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0.0, $317 = 0, $318 = 0.0, $319 = 0.0, $32 = 0.0, $320 = 0.0, $321 = 0, $322 = 0, $323 = 0, $324 = 0.0, $325 = 0, $326 = 0, $327 = 0, $328 = 0.0, $329 = 0, $33 = 0;
 var $330 = 0.0, $331 = 0.0, $332 = 0.0, $333 = 0, $334 = 0, $335 = 0, $336 = 0.0, $337 = 0, $338 = 0, $339 = 0.0, $34 = 0.0, $340 = 0, $341 = 0.0, $342 = 0, $343 = 0, $344 = 0, $345 = 0.0, $346 = 0, $347 = 0, $348 = 0.0;
 var $349 = 0, $35 = 0, $350 = 0.0, $351 = 0, $352 = 0.0, $353 = 0.0, $354 = 0.0, $355 = 0, $356 = 0, $357 = 0, $358 = 0.0, $359 = 0.0, $36 = 0, $360 = 0.0, $361 = 0, $362 = 0.0, $363 = 0, $364 = 0, $365 = 0, $366 = 0.0;
 var $367 = 0.0, $368 = 0.0, $369 = 0, $37 = 0, $370 = 0.0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0.0, $376 = 0, $377 = 0, $378 = 0.0, $379 = 0.0, $38 = 0, $380 = 0, $381 = 0, $382 = 0.0, $383 = 0.0, $384 = 0.0;
 var $385 = 0.0, $386 = 0.0, $387 = 0, $388 = 0, $389 = 0.0, $39 = 0.0, $390 = 0.0, $391 = 0.0, $392 = 0.0, $393 = 0.0, $394 = 0.0, $395 = 0, $396 = 0, $397 = 0.0, $398 = 0.0, $399 = 0.0, $4 = 0, $40 = 0.0, $400 = 0, $401 = 0.0;
 var $402 = 0, $403 = 0.0, $404 = 0.0, $405 = 0.0, $406 = 0, $407 = 0, $408 = 0, $409 = 0.0, $41 = 0.0, $410 = 0.0, $411 = 0.0, $412 = 0, $413 = 0.0, $414 = 0, $415 = 0, $416 = 0, $417 = 0.0, $418 = 0.0, $419 = 0.0, $42 = 0;
 var $420 = 0, $421 = 0, $422 = 0.0, $423 = 0.0, $424 = 0, $425 = 0.0, $426 = 0.0, $427 = 0.0, $428 = 0, $429 = 0, $43 = 0.0, $430 = 0, $431 = 0.0, $432 = 0.0, $433 = 0, $434 = 0, $435 = 0, $436 = 0.0, $437 = 0.0, $438 = 0;
 var $439 = 0.0, $44 = 0, $440 = 0.0, $441 = 0.0, $442 = 0.0, $443 = 0.0, $444 = 0, $445 = 0, $446 = 0, $447 = 0.0, $448 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0.0;
 var $53 = 0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0, $7 = 0.0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0.0, $81 = 0, $82 = 0.0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0.0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx16 = 0, $AsyncCtx20 = 0, $AsyncCtx24 = 0, $AsyncCtx28 = 0, $AsyncCtx32 = 0, $AsyncCtx36 = 0, $AsyncCtx4 = 0;
 var $AsyncCtx40 = 0, $AsyncCtx44 = 0, $AsyncCtx48 = 0, $AsyncCtx52 = 0, $AsyncCtx56 = 0, $AsyncCtx60 = 0, $AsyncCtx64 = 0, $AsyncCtx68 = 0, $AsyncCtx72 = 0, $AsyncCtx76 = 0, $AsyncCtx8 = 0, $AsyncCtx80 = 0, $AsyncCtx84 = 0, $AsyncCtx88 = 0, $AsyncCtx92 = 0, $IsAsync = 0, $IsAsync13 = 0, $IsAsync17 = 0, $IsAsync21 = 0, $IsAsync25 = 0;
 var $IsAsync29 = 0, $IsAsync33 = 0, $IsAsync37 = 0, $IsAsync41 = 0, $IsAsync45 = 0, $IsAsync49 = 0, $IsAsync5 = 0, $IsAsync53 = 0, $IsAsync57 = 0, $IsAsync61 = 0, $IsAsync65 = 0, $IsAsync69 = 0, $IsAsync73 = 0, $IsAsync77 = 0, $IsAsync81 = 0, $IsAsync85 = 0, $IsAsync89 = 0, $IsAsync9 = 0, $IsAsync93 = 0, $distance_x$0 = 0.0;
 var $end_y$0$ph = 0.0, $end_y$0$ph$lcssa = 0.0, $enemy_score$0 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond19 = 0, $or$cond21 = 0, $or$cond23 = 0, $or$cond25 = 0, $or$cond27 = 0, $or$cond28 = 0, $or$cond29 = 0, $or$cond3 = 0, $or$cond30 = 0, $or$cond31 = 0, $or$cond32 = 0, $or$cond5 = 0;
 var $or$cond56 = 0, $or$cond7 = 0, $or$cond9 = 0, $pad$0 = 0, $pad$0$in = 0, $state$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($paddle|0)==(1);
 if ($0) {
  $1 = (_get_score(2)|0);
  $enemy_score$0 = $1;$pad$0$in = 56;$state$0 = 382768;
 } else {
  $2 = (_get_score(1)|0);
  $enemy_score$0 = $2;$pad$0$in = 48;$state$0 = 382776;
 }
 $pad$0 = HEAP32[$pad$0$in>>2]|0;
 $3 = HEAP32[(389576)>>2]|0;
 $4 = (($3|0) / 40)&-1;
 $5 = (+($4|0));
 $6 = $5 * 0.5;
 $7 = (+($enemy_score$0|0));
 $8 = $7 * 0.5;
 $9 = $8 * $5;
 $10 = $9 * 0.25;
 $11 = $6 + $10;
 $12 = (~~(($11)));
 do {
  if ((($enemy_score$0|0) == 1)) {
   $63 = HEAP32[8>>2]|0;
   $64 = ((($63)) + 8|0);
   $65 = +HEAPF32[$64>>2];
   $66 = HEAP32[(389572)>>2]|0;
   $67 = (($66|0) / 2)&-1;
   $68 = (+($67|0));
   $69 = $65 > $68;
   $70 = ($paddle|0)==(2);
   $or$cond5 = $70 & $69;
   $71 = $65 < $68;
   $or$cond7 = $0 & $71;
   $or$cond30 = $or$cond5 | $or$cond7;
   if ($or$cond30) {
    $72 = ($66*7)|0;
    $73 = (($72|0) / 8)&-1;
    $74 = (+($73|0));
    $75 = $65 > $74;
    $or$cond9 = $70 & $75;
    if (!($or$cond9)) {
     $76 = (($66|0) / 8)&-1;
     $77 = (+($76|0));
     $78 = $65 < $77;
     $or$cond11 = $0 & $78;
     if (!($or$cond11)) {
      $102 = ((($63)) + 12|0);
      $103 = +HEAPF32[$102>>2];
      $104 = (($3|0) / 2)&-1;
      $105 = (($3|0) / 10)&-1;
      $106 = (($105) + ($104))|0;
      $107 = (+($106|0));
      $108 = $103 < $107;
      if ($108) {
       $109 = (($104) - ($105))|0;
       $110 = (+($109|0));
       $111 = $103 > $110;
       if ($111) {
        $112 = ((($pad$0)) + 12|0);
        $113 = +HEAPF32[$112>>2];
        $114 = (+($104|0));
        $115 = $113 < $114;
        if ($115) {
         $116 = ((($pad$0)) + 36|0);
         $117 = +HEAPF32[$116>>2];
         $118 = $117 / 3.0;
         $119 = $113 + $118;
         $120 = $119 < $114;
         if ($120) {
          $121 = HEAP32[(651920)>>2]|0;
          $122 = ((($pad$0)) + 8|0);
          $123 = +HEAPF32[$122>>2];
          $124 = (+($12|0));
          $125 = $124 + $113;
          $AsyncCtx16 = _emscripten_alloc_async_context(8,sp)|0;
          FUNCTION_TABLE_vidd[$121 & 255]($pad$0,$123,$125);
          $IsAsync17 = ___async;
          if ($IsAsync17) {
           HEAP32[$AsyncCtx16>>2] = 67;
           $126 = ((($AsyncCtx16)) + 4|0);
           HEAP32[$126>>2] = $pad$0;
           sp = STACKTOP;
           return;
          } else {
           _emscripten_free_async_context(($AsyncCtx16|0));
           break;
          }
         }
        }
        $127 = $113 > $114;
        if (!($127)) {
         break;
        }
        $128 = ((($pad$0)) + 36|0);
        $129 = +HEAPF32[$128>>2];
        $130 = $129 / 3.0;
        $131 = $113 - $130;
        $132 = $131 > $114;
        if (!($132)) {
         break;
        }
        $133 = HEAP32[(651920)>>2]|0;
        $134 = ((($pad$0)) + 8|0);
        $135 = +HEAPF32[$134>>2];
        $136 = (+($12|0));
        $137 = $113 - $136;
        $AsyncCtx20 = _emscripten_alloc_async_context(8,sp)|0;
        FUNCTION_TABLE_vidd[$133 & 255]($pad$0,$135,$137);
        $IsAsync21 = ___async;
        if ($IsAsync21) {
         HEAP32[$AsyncCtx20>>2] = 68;
         $138 = ((($AsyncCtx20)) + 4|0);
         HEAP32[$138>>2] = $pad$0;
         sp = STACKTOP;
         return;
        } else {
         _emscripten_free_async_context(($AsyncCtx20|0));
         break;
        }
       }
      }
      $139 = $103 > $107;
      if ($139) {
       $140 = ((($pad$0)) + 12|0);
       $141 = +HEAPF32[$140>>2];
       $142 = ($3*3)|0;
       $143 = (($142|0) / 2)&-1;
       $144 = (+($143|0));
       $145 = $141 < $144;
       if (!($145)) {
        break;
       }
       $146 = ((($pad$0)) + 36|0);
       $147 = +HEAPF32[$146>>2];
       $148 = $147 * 0.5;
       $149 = $141 + $148;
       $150 = (($142|0) / 4)&-1;
       $151 = (+($150|0));
       $152 = $149 < $151;
       if (!($152)) {
        break;
       }
       $153 = HEAP32[(651920)>>2]|0;
       $154 = ((($pad$0)) + 8|0);
       $155 = +HEAPF32[$154>>2];
       $156 = (+($12|0));
       $157 = $156 + $141;
       $AsyncCtx24 = _emscripten_alloc_async_context(8,sp)|0;
       FUNCTION_TABLE_vidd[$153 & 255]($pad$0,$155,$157);
       $IsAsync25 = ___async;
       if ($IsAsync25) {
        HEAP32[$AsyncCtx24>>2] = 69;
        $158 = ((($AsyncCtx24)) + 4|0);
        HEAP32[$158>>2] = $pad$0;
        sp = STACKTOP;
        return;
       } else {
        _emscripten_free_async_context(($AsyncCtx24|0));
        break;
       }
      }
      $159 = (($104) - ($105))|0;
      $160 = (+($159|0));
      $161 = $103 < $160;
      if (!($161)) {
       break;
      }
      $162 = ((($pad$0)) + 12|0);
      $163 = +HEAPF32[$162>>2];
      $164 = (($3|0) / 4)&-1;
      $165 = (+($164|0));
      $166 = $163 > $165;
      if (!($166)) {
       break;
      }
      $167 = ((($pad$0)) + 36|0);
      $168 = +HEAPF32[$167>>2];
      $169 = $168 * 0.5;
      $170 = $163 + $169;
      $171 = $170 > $165;
      if (!($171)) {
       break;
      }
      $172 = HEAP32[(651920)>>2]|0;
      $173 = ((($pad$0)) + 8|0);
      $174 = +HEAPF32[$173>>2];
      $175 = (+($12|0));
      $176 = $163 - $175;
      $AsyncCtx28 = _emscripten_alloc_async_context(8,sp)|0;
      FUNCTION_TABLE_vidd[$172 & 255]($pad$0,$174,$176);
      $IsAsync29 = ___async;
      if ($IsAsync29) {
       HEAP32[$AsyncCtx28>>2] = 70;
       $177 = ((($AsyncCtx28)) + 4|0);
       HEAP32[$177>>2] = $pad$0;
       sp = STACKTOP;
       return;
      } else {
       _emscripten_free_async_context(($AsyncCtx28|0));
       break;
      }
     }
    }
    $79 = ((($63)) + 12|0);
    $80 = +HEAPF32[$79>>2];
    $81 = ((($pad$0)) + 12|0);
    $82 = +HEAPF32[$81>>2];
    $83 = ((($pad$0)) + 36|0);
    $84 = +HEAPF32[$83>>2];
    $85 = $84 * 0.5;
    $86 = $82 + $85;
    $87 = $80 > $86;
    if ($87) {
     $88 = HEAP32[(651920)>>2]|0;
     $89 = ((($pad$0)) + 8|0);
     $90 = +HEAPF32[$89>>2];
     $91 = (+($12|0));
     $92 = $91 + $82;
     $AsyncCtx8 = _emscripten_alloc_async_context(8,sp)|0;
     FUNCTION_TABLE_vidd[$88 & 255]($pad$0,$90,$92);
     $IsAsync9 = ___async;
     if ($IsAsync9) {
      HEAP32[$AsyncCtx8>>2] = 65;
      $93 = ((($AsyncCtx8)) + 4|0);
      HEAP32[$93>>2] = $pad$0;
      sp = STACKTOP;
      return;
     } else {
      _emscripten_free_async_context(($AsyncCtx8|0));
      break;
     }
    }
    $94 = $82 - $85;
    $95 = $80 < $94;
    if ($95) {
     $96 = HEAP32[(651920)>>2]|0;
     $97 = ((($pad$0)) + 8|0);
     $98 = +HEAPF32[$97>>2];
     $99 = (+($12|0));
     $100 = $82 - $99;
     $AsyncCtx12 = _emscripten_alloc_async_context(8,sp)|0;
     FUNCTION_TABLE_vidd[$96 & 255]($pad$0,$98,$100);
     $IsAsync13 = ___async;
     if ($IsAsync13) {
      HEAP32[$AsyncCtx12>>2] = 66;
      $101 = ((($AsyncCtx12)) + 4|0);
      HEAP32[$101>>2] = $pad$0;
      sp = STACKTOP;
      return;
     } else {
      _emscripten_free_async_context(($AsyncCtx12|0));
      break;
     }
    }
   }
  } else if ((($enemy_score$0|0) == 0)) {
   $13 = +HEAPF32[24>>2];
   $14 = $13 > 0.0;
   if ($14) {
    $15 = $13;
    $16 = $15 < 0.99899999999999999;
    $17 = ($paddle|0)==(2);
    $or$cond = $17 & $16;
    if (!($or$cond)) {
     label = 7;
    }
   } else {
    label = 7;
   }
   if ((label|0) == 7) {
    $18 = $13 < 0.0;
    if (!($18)) {
     break;
    }
    $19 = $13;
    $20 = $19 > -0.99899999999999999;
    $or$cond3 = $0 & $20;
    if (!($or$cond3)) {
     break;
    }
   }
   $21 = HEAP32[$state$0>>2]|0;
   $22 = ($21|0)==(0);
   $23 = ((($pad$0)) + 12|0);
   $24 = +HEAPF32[$23>>2];
   if ($22) {
    $25 = ((($pad$0)) + 36|0);
    $26 = +HEAPF32[$25>>2];
    $27 = $26 * 3.0;
    $28 = $27 * 0.25;
    $29 = $24 > $28;
    if ($29) {
     $30 = HEAP32[8>>2]|0;
     $31 = ((($30)) + 12|0);
     $32 = +HEAPF32[$31>>2];
     $33 = (($3|0) / 2)&-1;
     $34 = (+($33|0));
     $35 = $32 > $34;
     $36 = $24 < $34;
     $or$cond28 = $35 & $36;
     if (!($or$cond28)) {
      $37 = HEAP32[(651920)>>2]|0;
      $38 = ((($pad$0)) + 8|0);
      $39 = +HEAPF32[$38>>2];
      $40 = (+($12|0));
      $41 = $24 - $40;
      $AsyncCtx = _emscripten_alloc_async_context(8,sp)|0;
      FUNCTION_TABLE_vidd[$37 & 255]($pad$0,$39,$41);
      $IsAsync = ___async;
      if ($IsAsync) {
       HEAP32[$AsyncCtx>>2] = 63;
       $42 = ((($AsyncCtx)) + 4|0);
       HEAP32[$42>>2] = $pad$0;
       sp = STACKTOP;
       return;
      } else {
       _emscripten_free_async_context(($AsyncCtx|0));
       break;
      }
     }
    }
    HEAP32[$state$0>>2] = 1;
    break;
   } else {
    $43 = (+($3|0));
    $44 = ((($pad$0)) + 36|0);
    $45 = +HEAPF32[$44>>2];
    $46 = $45 * 3.0;
    $47 = $46 * 0.25;
    $48 = $43 - $47;
    $49 = $24 < $48;
    if ($49) {
     $50 = HEAP32[8>>2]|0;
     $51 = ((($50)) + 12|0);
     $52 = +HEAPF32[$51>>2];
     $53 = (($3|0) / 2)&-1;
     $54 = (+($53|0));
     $55 = $52 < $54;
     $56 = $24 > $54;
     $or$cond29 = $55 & $56;
     if (!($or$cond29)) {
      $57 = HEAP32[(651920)>>2]|0;
      $58 = ((($pad$0)) + 8|0);
      $59 = +HEAPF32[$58>>2];
      $60 = (+($12|0));
      $61 = $60 + $24;
      $AsyncCtx4 = _emscripten_alloc_async_context(8,sp)|0;
      FUNCTION_TABLE_vidd[$57 & 255]($pad$0,$59,$61);
      $IsAsync5 = ___async;
      if ($IsAsync5) {
       HEAP32[$AsyncCtx4>>2] = 64;
       $62 = ((($AsyncCtx4)) + 4|0);
       HEAP32[$62>>2] = $pad$0;
       sp = STACKTOP;
       return;
      } else {
       _emscripten_free_async_context(($AsyncCtx4|0));
       break;
      }
     }
    }
    HEAP32[$state$0>>2] = 0;
    break;
   }
  } else if ((($enemy_score$0|0) == 2)) {
   $178 = HEAP32[8>>2]|0;
   $179 = ((($178)) + 8|0);
   $180 = +HEAPF32[$179>>2];
   $181 = HEAP32[(389572)>>2]|0;
   $182 = ($181*9)|0;
   $183 = (($182|0) / 10)&-1;
   $184 = (+($183|0));
   $185 = $180 > $184;
   $186 = ($paddle|0)==(2);
   $or$cond13 = $186 & $185;
   if (!($or$cond13)) {
    $187 = (($181|0) / 10)&-1;
    $188 = (+($187|0));
    $189 = $180 < $188;
    $or$cond15 = $0 & $189;
    if (!($or$cond15)) {
     $213 = (($181|0) / 2)&-1;
     $214 = (+($213|0));
     $215 = $180 > $214;
     $or$cond17 = $186 & $215;
     $216 = $180 < $214;
     $or$cond19 = $0 & $216;
     $or$cond31 = $or$cond17 | $or$cond19;
     if (!($or$cond31)) {
      break;
     }
     $217 = ((($178)) + 12|0);
     $218 = +HEAPF32[$217>>2];
     $219 = (($3|0) / 2)&-1;
     $220 = (($3|0) / 10)&-1;
     $221 = (($220) + ($219))|0;
     $222 = (+($221|0));
     $223 = $218 < $222;
     if ($223) {
      $224 = (($219) - ($220))|0;
      $225 = (+($224|0));
      $226 = $218 > $225;
      if ($226) {
       $227 = ((($pad$0)) + 12|0);
       $228 = +HEAPF32[$227>>2];
       $229 = (+($219|0));
       $230 = $228 < $229;
       if ($230) {
        $231 = ((($pad$0)) + 36|0);
        $232 = +HEAPF32[$231>>2];
        $233 = $232 * 0.5;
        $234 = $228 + $233;
        $235 = $234 < $229;
        if ($235) {
         $236 = HEAP32[(651920)>>2]|0;
         $237 = ((($pad$0)) + 8|0);
         $238 = +HEAPF32[$237>>2];
         $239 = (+($12|0));
         $240 = $239 + $228;
         $AsyncCtx40 = _emscripten_alloc_async_context(8,sp)|0;
         FUNCTION_TABLE_vidd[$236 & 255]($pad$0,$238,$240);
         $IsAsync41 = ___async;
         if ($IsAsync41) {
          HEAP32[$AsyncCtx40>>2] = 73;
          $241 = ((($AsyncCtx40)) + 4|0);
          HEAP32[$241>>2] = $pad$0;
          sp = STACKTOP;
          return;
         } else {
          _emscripten_free_async_context(($AsyncCtx40|0));
          break;
         }
        }
       }
       $242 = $228 > $229;
       if (!($242)) {
        break;
       }
       $243 = ((($pad$0)) + 36|0);
       $244 = +HEAPF32[$243>>2];
       $245 = $244 * 0.5;
       $246 = $229 - $245;
       $247 = $228 > $246;
       if (!($247)) {
        break;
       }
       $248 = HEAP32[(651920)>>2]|0;
       $249 = ((($pad$0)) + 8|0);
       $250 = +HEAPF32[$249>>2];
       $251 = (+($12|0));
       $252 = $228 - $251;
       $AsyncCtx44 = _emscripten_alloc_async_context(8,sp)|0;
       FUNCTION_TABLE_vidd[$248 & 255]($pad$0,$250,$252);
       $IsAsync45 = ___async;
       if ($IsAsync45) {
        HEAP32[$AsyncCtx44>>2] = 74;
        $253 = ((($AsyncCtx44)) + 4|0);
        HEAP32[$253>>2] = $pad$0;
        sp = STACKTOP;
        return;
       } else {
        _emscripten_free_async_context(($AsyncCtx44|0));
        break;
       }
      }
     }
     $254 = $218 > $222;
     if ($254) {
      $255 = ($3*3)|0;
      $256 = (($255|0) / 4)&-1;
      $257 = (+($256|0));
      $258 = $218 < $257;
      if ($258) {
       $259 = ((($pad$0)) + 12|0);
       $260 = +HEAPF32[$259>>2];
       $261 = (($255|0) / 2)&-1;
       $262 = (+($261|0));
       $263 = $260 < $262;
       $264 = ((($pad$0)) + 36|0);
       $265 = +HEAPF32[$264>>2];
       if ($263) {
        $266 = $265 * 0.5;
        $267 = $260 + $266;
        $268 = $267 < $257;
        if ($268) {
         $269 = HEAP32[(651920)>>2]|0;
         $270 = ((($pad$0)) + 8|0);
         $271 = +HEAPF32[$270>>2];
         $272 = (+($12|0));
         $273 = $272 + $260;
         $AsyncCtx48 = _emscripten_alloc_async_context(8,sp)|0;
         FUNCTION_TABLE_vidd[$269 & 255]($pad$0,$271,$273);
         $IsAsync49 = ___async;
         if ($IsAsync49) {
          HEAP32[$AsyncCtx48>>2] = 75;
          $274 = ((($AsyncCtx48)) + 4|0);
          HEAP32[$274>>2] = $pad$0;
          sp = STACKTOP;
          return;
         } else {
          _emscripten_free_async_context(($AsyncCtx48|0));
          break;
         }
        }
       }
       $275 = $265 * 0.5;
       $276 = $260 - $275;
       $277 = $276 > $257;
       if (!($277)) {
        break;
       }
       $278 = HEAP32[(651920)>>2]|0;
       $279 = ((($pad$0)) + 8|0);
       $280 = +HEAPF32[$279>>2];
       $281 = (+($12|0));
       $282 = $260 - $281;
       $AsyncCtx52 = _emscripten_alloc_async_context(8,sp)|0;
       FUNCTION_TABLE_vidd[$278 & 255]($pad$0,$280,$282);
       $IsAsync53 = ___async;
       if ($IsAsync53) {
        HEAP32[$AsyncCtx52>>2] = 76;
        $283 = ((($AsyncCtx52)) + 4|0);
        HEAP32[$283>>2] = $pad$0;
        sp = STACKTOP;
        return;
       } else {
        _emscripten_free_async_context(($AsyncCtx52|0));
        break;
       }
      }
     }
     $284 = (($219) - ($220))|0;
     $285 = (+($284|0));
     $286 = $218 < $285;
     $287 = (($3|0) / 4)&-1;
     $288 = (+($287|0));
     $289 = $218 > $288;
     $or$cond56 = $286 & $289;
     if (!($or$cond56)) {
      $313 = $218 < $288;
      if ($313) {
       $314 = HEAP32[(651920)>>2]|0;
       $315 = ((($pad$0)) + 8|0);
       $316 = +HEAPF32[$315>>2];
       $317 = ((($pad$0)) + 12|0);
       $318 = +HEAPF32[$317>>2];
       $319 = (+($12|0));
       $320 = $318 - $319;
       $AsyncCtx64 = _emscripten_alloc_async_context(8,sp)|0;
       FUNCTION_TABLE_vidd[$314 & 255]($pad$0,$316,$320);
       $IsAsync65 = ___async;
       if ($IsAsync65) {
        HEAP32[$AsyncCtx64>>2] = 79;
        $321 = ((($AsyncCtx64)) + 4|0);
        HEAP32[$321>>2] = $pad$0;
        sp = STACKTOP;
        return;
       } else {
        _emscripten_free_async_context(($AsyncCtx64|0));
        break;
       }
      }
      $322 = ($3*3)|0;
      $323 = (($322|0) / 4)&-1;
      $324 = (+($323|0));
      $325 = $218 > $324;
      if (!($325)) {
       break;
      }
      $326 = HEAP32[(651920)>>2]|0;
      $327 = ((($pad$0)) + 8|0);
      $328 = +HEAPF32[$327>>2];
      $329 = ((($pad$0)) + 12|0);
      $330 = +HEAPF32[$329>>2];
      $331 = (+($12|0));
      $332 = $331 + $330;
      $AsyncCtx68 = _emscripten_alloc_async_context(8,sp)|0;
      FUNCTION_TABLE_vidd[$326 & 255]($pad$0,$328,$332);
      $IsAsync69 = ___async;
      if ($IsAsync69) {
       HEAP32[$AsyncCtx68>>2] = 80;
       $333 = ((($AsyncCtx68)) + 4|0);
       HEAP32[$333>>2] = $pad$0;
       sp = STACKTOP;
       return;
      } else {
       _emscripten_free_async_context(($AsyncCtx68|0));
       break;
      }
     }
     $290 = ((($pad$0)) + 12|0);
     $291 = +HEAPF32[$290>>2];
     $292 = $291 > $288;
     $293 = ((($pad$0)) + 36|0);
     $294 = +HEAPF32[$293>>2];
     if ($292) {
      $295 = $294 * 0.5;
      $296 = $291 + $295;
      $297 = $296 > $288;
      if ($297) {
       $298 = HEAP32[(651920)>>2]|0;
       $299 = ((($pad$0)) + 8|0);
       $300 = +HEAPF32[$299>>2];
       $301 = (+($12|0));
       $302 = $291 - $301;
       $AsyncCtx56 = _emscripten_alloc_async_context(8,sp)|0;
       FUNCTION_TABLE_vidd[$298 & 255]($pad$0,$300,$302);
       $IsAsync57 = ___async;
       if ($IsAsync57) {
        HEAP32[$AsyncCtx56>>2] = 77;
        $303 = ((($AsyncCtx56)) + 4|0);
        HEAP32[$303>>2] = $pad$0;
        sp = STACKTOP;
        return;
       } else {
        _emscripten_free_async_context(($AsyncCtx56|0));
        break;
       }
      }
     }
     $304 = $294 * 0.5;
     $305 = $291 + $304;
     $306 = $305 < $288;
     if (!($306)) {
      break;
     }
     $307 = HEAP32[(651920)>>2]|0;
     $308 = ((($pad$0)) + 8|0);
     $309 = +HEAPF32[$308>>2];
     $310 = (+($12|0));
     $311 = $310 + $291;
     $AsyncCtx60 = _emscripten_alloc_async_context(8,sp)|0;
     FUNCTION_TABLE_vidd[$307 & 255]($pad$0,$309,$311);
     $IsAsync61 = ___async;
     if ($IsAsync61) {
      HEAP32[$AsyncCtx60>>2] = 78;
      $312 = ((($AsyncCtx60)) + 4|0);
      HEAP32[$312>>2] = $pad$0;
      sp = STACKTOP;
      return;
     } else {
      _emscripten_free_async_context(($AsyncCtx60|0));
      break;
     }
    }
   }
   $190 = ((($178)) + 12|0);
   $191 = +HEAPF32[$190>>2];
   $192 = ((($pad$0)) + 12|0);
   $193 = +HEAPF32[$192>>2];
   $194 = ((($pad$0)) + 36|0);
   $195 = +HEAPF32[$194>>2];
   $196 = $195 * 0.5;
   $197 = $193 + $196;
   $198 = $191 > $197;
   if ($198) {
    $199 = HEAP32[(651920)>>2]|0;
    $200 = ((($pad$0)) + 8|0);
    $201 = +HEAPF32[$200>>2];
    $202 = (+($12|0));
    $203 = $202 + $193;
    $AsyncCtx32 = _emscripten_alloc_async_context(8,sp)|0;
    FUNCTION_TABLE_vidd[$199 & 255]($pad$0,$201,$203);
    $IsAsync33 = ___async;
    if ($IsAsync33) {
     HEAP32[$AsyncCtx32>>2] = 71;
     $204 = ((($AsyncCtx32)) + 4|0);
     HEAP32[$204>>2] = $pad$0;
     sp = STACKTOP;
     return;
    } else {
     _emscripten_free_async_context(($AsyncCtx32|0));
     break;
    }
   }
   $205 = $193 - $196;
   $206 = $191 < $205;
   if ($206) {
    $207 = HEAP32[(651920)>>2]|0;
    $208 = ((($pad$0)) + 8|0);
    $209 = +HEAPF32[$208>>2];
    $210 = (+($12|0));
    $211 = $193 - $210;
    $AsyncCtx36 = _emscripten_alloc_async_context(8,sp)|0;
    FUNCTION_TABLE_vidd[$207 & 255]($pad$0,$209,$211);
    $IsAsync37 = ___async;
    if ($IsAsync37) {
     HEAP32[$AsyncCtx36>>2] = 72;
     $212 = ((($AsyncCtx36)) + 4|0);
     HEAP32[$212>>2] = $pad$0;
     sp = STACKTOP;
     return;
    } else {
     _emscripten_free_async_context(($AsyncCtx36|0));
     break;
    }
   }
  } else if ((($enemy_score$0|0) == 3)) {
   $334 = HEAP32[8>>2]|0;
   $335 = ((($334)) + 8|0);
   $336 = +HEAPF32[$335>>2];
   $337 = HEAP32[(389572)>>2]|0;
   $338 = (($337|0) / 2)&-1;
   $339 = (+($338|0));
   $340 = $336 > $339;
   if ($340) {
    $341 = +HEAPF32[24>>2];
    $342 = $341 > 0.0;
    $343 = ($paddle|0)==(2);
    $or$cond21 = $343 & $342;
    if (!($or$cond21)) {
     label = 111;
    }
   } else {
    label = 111;
   }
   if ((label|0) == 111) {
    $344 = $336 < $339;
    if (!($344)) {
     break;
    }
    $345 = +HEAPF32[24>>2];
    $346 = $345 < 0.0;
    $or$cond23 = $0 & $346;
    if (!($or$cond23)) {
     break;
    }
   }
   $347 = ((($334)) + 12|0);
   $348 = +HEAPF32[$347>>2];
   $349 = ((($pad$0)) + 12|0);
   $350 = +HEAPF32[$349>>2];
   $351 = ((($pad$0)) + 36|0);
   $352 = +HEAPF32[$351>>2];
   $353 = $352 * 0.25;
   $354 = $350 - $353;
   $355 = $348 < $354;
   if ($355) {
    $356 = HEAP32[(651920)>>2]|0;
    $357 = ((($pad$0)) + 8|0);
    $358 = +HEAPF32[$357>>2];
    $359 = (+($12|0));
    $360 = $350 - $359;
    $AsyncCtx72 = _emscripten_alloc_async_context(8,sp)|0;
    FUNCTION_TABLE_vidd[$356 & 255]($pad$0,$358,$360);
    $IsAsync73 = ___async;
    if ($IsAsync73) {
     HEAP32[$AsyncCtx72>>2] = 81;
     $361 = ((($AsyncCtx72)) + 4|0);
     HEAP32[$361>>2] = $pad$0;
     sp = STACKTOP;
     return;
    } else {
     _emscripten_free_async_context(($AsyncCtx72|0));
     break;
    }
   }
   $362 = $350 + $353;
   $363 = $348 > $362;
   if ($363) {
    $364 = HEAP32[(651920)>>2]|0;
    $365 = ((($pad$0)) + 8|0);
    $366 = +HEAPF32[$365>>2];
    $367 = (+($12|0));
    $368 = $367 + $350;
    $AsyncCtx76 = _emscripten_alloc_async_context(8,sp)|0;
    FUNCTION_TABLE_vidd[$364 & 255]($pad$0,$366,$368);
    $IsAsync77 = ___async;
    if ($IsAsync77) {
     HEAP32[$AsyncCtx76>>2] = 82;
     $369 = ((($AsyncCtx76)) + 4|0);
     HEAP32[$369>>2] = $pad$0;
     sp = STACKTOP;
     return;
    } else {
     _emscripten_free_async_context(($AsyncCtx76|0));
     break;
    }
   }
  } else {
   $370 = +HEAPF32[24>>2];
   $371 = $370 > 0.0;
   $372 = ($paddle|0)==(2);
   $or$cond25 = $372 & $371;
   $373 = $370 < 0.0;
   $or$cond27 = $0 & $373;
   $or$cond32 = $or$cond25 | $or$cond27;
   if ($or$cond32) {
    if ($372) {
     $374 = HEAP32[(389572)>>2]|0;
     $375 = (+($374|0));
     $376 = HEAP32[8>>2]|0;
     $377 = ((($376)) + 8|0);
     $378 = +HEAPF32[$377>>2];
     $379 = $375 - $378;
     $388 = $376;$distance_x$0 = $379;
    } else {
     $380 = HEAP32[8>>2]|0;
     $381 = ((($380)) + 8|0);
     $382 = +HEAPF32[$381>>2];
     $383 = -$382;
     $388 = $380;$distance_x$0 = $383;
    }
    $384 = +HEAPF32[16>>2];
    $385 = $384 * $370;
    $386 = $distance_x$0 / $385;
    $387 = ((($388)) + 12|0);
    $389 = +HEAPF32[$387>>2];
    $390 = +HEAPF32[32>>2];
    $391 = $384 * $390;
    $392 = $386 * $391;
    $393 = $389 + $392;
    $394 = (+($3|0));
    $end_y$0$ph = $393;
    while(1) {
     $395 = $end_y$0$ph < 0.0;
     if ($395) {
      $397 = -$end_y$0$ph;
      $end_y$0$ph = $397;
      continue;
     }
     $396 = $end_y$0$ph > $394;
     if (!($396)) {
      $end_y$0$ph$lcssa = $end_y$0$ph;
      break;
     }
     $398 = $end_y$0$ph - $394;
     $399 = $394 - $398;
     $end_y$0$ph = $399;
    }
    $400 = ((($pad$0)) + 12|0);
    $401 = +HEAPF32[$400>>2];
    $402 = ((($pad$0)) + 36|0);
    $403 = +HEAPF32[$402>>2];
    $404 = $403 / 3.0;
    $405 = $401 - $404;
    $406 = $405 > $end_y$0$ph$lcssa;
    if ($406) {
     $407 = HEAP32[(651920)>>2]|0;
     $408 = ((($pad$0)) + 8|0);
     $409 = +HEAPF32[$408>>2];
     $410 = (+($12|0));
     $411 = $401 - $410;
     $AsyncCtx80 = _emscripten_alloc_async_context(8,sp)|0;
     FUNCTION_TABLE_vidd[$407 & 255]($pad$0,$409,$411);
     $IsAsync81 = ___async;
     if ($IsAsync81) {
      HEAP32[$AsyncCtx80>>2] = 83;
      $412 = ((($AsyncCtx80)) + 4|0);
      HEAP32[$412>>2] = $pad$0;
      sp = STACKTOP;
      return;
     } else {
      _emscripten_free_async_context(($AsyncCtx80|0));
      break;
     }
    }
    $413 = $401 + $404;
    $414 = $413 < $end_y$0$ph$lcssa;
    if ($414) {
     $415 = HEAP32[(651920)>>2]|0;
     $416 = ((($pad$0)) + 8|0);
     $417 = +HEAPF32[$416>>2];
     $418 = (+($12|0));
     $419 = $418 + $401;
     $AsyncCtx84 = _emscripten_alloc_async_context(8,sp)|0;
     FUNCTION_TABLE_vidd[$415 & 255]($pad$0,$417,$419);
     $IsAsync85 = ___async;
     if ($IsAsync85) {
      HEAP32[$AsyncCtx84>>2] = 84;
      $420 = ((($AsyncCtx84)) + 4|0);
      HEAP32[$420>>2] = $pad$0;
      sp = STACKTOP;
      return;
     } else {
      _emscripten_free_async_context(($AsyncCtx84|0));
      break;
     }
    }
   }
  }
 } while(0);
 $421 = ((($pad$0)) + 12|0);
 $422 = +HEAPF32[$421>>2];
 $423 = $422;
 $424 = ((($pad$0)) + 36|0);
 $425 = +HEAPF32[$424>>2];
 $426 = $425;
 $427 = $426 * 0.5;
 $428 = $423 < $427;
 do {
  if ($428) {
   $429 = HEAP32[(651920)>>2]|0;
   $430 = ((($pad$0)) + 8|0);
   $431 = +HEAPF32[$430>>2];
   $432 = $427;
   $AsyncCtx88 = _emscripten_alloc_async_context(16,sp)|0;
   FUNCTION_TABLE_vidd[$429 & 255]($pad$0,$431,$432);
   $IsAsync89 = ___async;
   if ($IsAsync89) {
    HEAP32[$AsyncCtx88>>2] = 85;
    $433 = ((($AsyncCtx88)) + 4|0);
    HEAP32[$433>>2] = $421;
    $434 = ((($AsyncCtx88)) + 8|0);
    HEAP32[$434>>2] = $424;
    $435 = ((($AsyncCtx88)) + 12|0);
    HEAP32[$435>>2] = $pad$0;
    sp = STACKTOP;
    return;
   } else {
    _emscripten_free_async_context(($AsyncCtx88|0));
    $$pre48 = +HEAPF32[$421>>2];
    $$pre49 = +HEAPF32[$424>>2];
    $437 = $$pre48;$441 = $$pre49;
    break;
   }
  } else {
   $437 = $422;$441 = $425;
  }
 } while(0);
 $436 = $437;
 $438 = HEAP32[(389576)>>2]|0;
 $439 = (+($438|0));
 $440 = $441;
 $442 = $440 * 0.5;
 $443 = $439 - $442;
 $444 = $436 > $443;
 if (!($444)) {
  return;
 }
 $445 = HEAP32[(651920)>>2]|0;
 $446 = ((($pad$0)) + 8|0);
 $447 = +HEAPF32[$446>>2];
 $448 = $443;
 $AsyncCtx92 = _emscripten_alloc_async_context(4,sp)|0;
 FUNCTION_TABLE_vidd[$445 & 255]($pad$0,$447,$448);
 $IsAsync93 = ___async;
 if ($IsAsync93) {
  HEAP32[$AsyncCtx92>>2] = 86;
  sp = STACKTOP;
  return;
 }
 _emscripten_free_async_context(($AsyncCtx92|0));
 return;
}
function _pong() {
 var $$not = 0, $$not2 = 0, $$not7 = 0, $$pr = 0, $$pr32 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0.0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0.0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0.0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0.0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0.0, $166 = 0, $167 = 0, $168 = 0.0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0.0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0.0, $181 = 0, $182 = 0;
 var $183 = 0.0, $184 = 0, $185 = 0, $186 = 0.0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0.0, $191 = 0, $192 = 0, $193 = 0.0, $194 = 0, $195 = 0, $196 = 0.0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0;
 var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0.0, $205 = 0, $206 = 0, $207 = 0.0, $208 = 0, $209 = 0, $21 = 0, $210 = 0.0, $211 = 0, $212 = 0, $213 = 0, $214 = 0.0, $215 = 0, $216 = 0, $217 = 0.0, $218 = 0;
 var $219 = 0, $22 = 0, $220 = 0.0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0.0, $229 = 0.0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0;
 var $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0;
 var $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0.0;
 var $273 = 0.0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0;
 var $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0;
 var $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0;
 var $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0.0, $34 = 0, $340 = 0, $341 = 0, $342 = 0.0, $343 = 0, $344 = 0;
 var $345 = 0.0, $346 = 0.0, $347 = 0, $348 = 0.0, $349 = 0.0, $35 = 0, $350 = 0, $351 = 0, $352 = 0.0, $353 = 0.0, $354 = 0, $355 = 0.0, $356 = 0.0, $357 = 0.0, $358 = 0.0, $359 = 0, $36 = 0, $360 = 0, $361 = 0.0, $362 = 0.0;
 var $363 = 0, $364 = 0, $365 = 0.0, $366 = 0.0, $367 = 0, $368 = 0, $369 = 0.0, $37 = 0, $370 = 0.0, $371 = 0, $372 = 0.0, $373 = 0.0, $374 = 0.0, $375 = 0.0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0;
 var $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0;
 var $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0;
 var $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0;
 var $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx100 = 0, $AsyncCtx104 = 0, $AsyncCtx108 = 0, $AsyncCtx112 = 0, $AsyncCtx115 = 0, $AsyncCtx119 = 0, $AsyncCtx123 = 0, $AsyncCtx127 = 0, $AsyncCtx13 = 0, $AsyncCtx130 = 0;
 var $AsyncCtx134 = 0, $AsyncCtx137 = 0, $AsyncCtx141 = 0, $AsyncCtx145 = 0, $AsyncCtx148 = 0, $AsyncCtx152 = 0, $AsyncCtx17 = 0, $AsyncCtx21 = 0, $AsyncCtx25 = 0, $AsyncCtx29 = 0, $AsyncCtx3 = 0, $AsyncCtx33 = 0, $AsyncCtx37 = 0, $AsyncCtx41 = 0, $AsyncCtx45 = 0, $AsyncCtx49 = 0, $AsyncCtx53 = 0, $AsyncCtx57 = 0, $AsyncCtx6 = 0, $AsyncCtx61 = 0;
 var $AsyncCtx65 = 0, $AsyncCtx68 = 0, $AsyncCtx72 = 0, $AsyncCtx76 = 0, $AsyncCtx80 = 0, $AsyncCtx84 = 0, $AsyncCtx88 = 0, $AsyncCtx92 = 0, $AsyncCtx96 = 0, $IsAsync = 0, $IsAsync101 = 0, $IsAsync105 = 0, $IsAsync109 = 0, $IsAsync11 = 0, $IsAsync113 = 0, $IsAsync116 = 0, $IsAsync120 = 0, $IsAsync124 = 0, $IsAsync128 = 0, $IsAsync131 = 0;
 var $IsAsync135 = 0, $IsAsync138 = 0, $IsAsync14 = 0, $IsAsync142 = 0, $IsAsync146 = 0, $IsAsync149 = 0, $IsAsync153 = 0, $IsAsync18 = 0, $IsAsync22 = 0, $IsAsync26 = 0, $IsAsync30 = 0, $IsAsync34 = 0, $IsAsync38 = 0, $IsAsync4 = 0, $IsAsync42 = 0, $IsAsync46 = 0, $IsAsync50 = 0, $IsAsync54 = 0, $IsAsync58 = 0, $IsAsync62 = 0;
 var $IsAsync69 = 0, $IsAsync7 = 0, $IsAsync73 = 0, $IsAsync77 = 0, $IsAsync81 = 0, $IsAsync85 = 0, $IsAsync89 = 0, $IsAsync93 = 0, $IsAsync97 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond19 = 0, $or$cond21 = 0, $or$cond27 = 0, $or$cond30 = 0, $or$cond4 = 0, $or$cond42 = 0;
 var $or$cond44 = 0, $or$cond9 = 0, $pad$0 = 0, $paddle2$paddle1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[128>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $AsyncCtx65 = _emscripten_alloc_async_context(4,sp)|0;
  __exit_loop();
  // unreachable;
 }
 $2 = HEAP8[120>>0]|0;
 $3 = ($2<<24>>24)==(0);
 if (!($3)) {
  $4 = HEAP32[(651936)>>2]|0;
  $AsyncCtx = _emscripten_alloc_async_context(4,sp)|0;
  FUNCTION_TABLE_vi[$4 & 255](5);
  $IsAsync = ___async;
  if ($IsAsync) {
   HEAP32[$AsyncCtx>>2] = 87;
   sp = STACKTOP;
   return;
  }
  _emscripten_free_async_context(($AsyncCtx|0));
  HEAP8[382784>>0] = 0;
  HEAP8[382792>>0] = 1;
  HEAP8[35112>>0] = 0;
  HEAP32[35096>>2] = 0;
  $AsyncCtx100 = _emscripten_alloc_async_context(4,sp)|0;
  _initialize_paddle();
  $IsAsync101 = ___async;
  if ($IsAsync101) {
   HEAP32[$AsyncCtx100>>2] = 88;
   sp = STACKTOP;
   return;
  }
  _emscripten_free_async_context(($AsyncCtx100|0));
  $AsyncCtx68 = _emscripten_alloc_async_context(4,sp)|0;
  _initialize_score();
  $IsAsync69 = ___async;
  if ($IsAsync69) {
   HEAP32[$AsyncCtx68>>2] = 89;
   sp = STACKTOP;
   return;
  }
  _emscripten_free_async_context(($AsyncCtx68|0));
  $AsyncCtx152 = _emscripten_alloc_async_context(4,sp)|0;
  _initialize_ball();
  $IsAsync153 = ___async;
  if ($IsAsync153) {
   HEAP32[$AsyncCtx152>>2] = 90;
   sp = STACKTOP;
   return;
  }
  _emscripten_free_async_context(($AsyncCtx152|0));
  $AsyncCtx115 = _emscripten_alloc_async_context(4,sp)|0;
  _initialize_item();
  $IsAsync116 = ___async;
  if ($IsAsync116) {
   HEAP32[$AsyncCtx115>>2] = 91;
   sp = STACKTOP;
   return;
  }
  _emscripten_free_async_context(($AsyncCtx115|0));
  $AsyncCtx130 = _emscripten_alloc_async_context(4,sp)|0;
  _initialize_danger();
  $IsAsync131 = ___async;
  if ($IsAsync131) {
   HEAP32[$AsyncCtx130>>2] = 92;
   sp = STACKTOP;
   return;
  }
  _emscripten_free_async_context(($AsyncCtx130|0));
  $AsyncCtx137 = _emscripten_alloc_async_context(4,sp)|0;
  _initialize_bomb();
  $IsAsync138 = ___async;
  if ($IsAsync138) {
   HEAP32[$AsyncCtx137>>2] = 93;
   sp = STACKTOP;
   return;
  }
  _emscripten_free_async_context(($AsyncCtx137|0));
  $5 = HEAP32[(389556)>>2]|0;
  $6 = ((($5)) + 4|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = ($7<<24>>24)==(0);
  if ($8) {
   HEAP32[(651780)>>2] = 0;
  } else {
   HEAP32[(651780)>>2] = 1;
   $9 = HEAP32[56>>2]|0;
   $10 = ((($9)) + 4|0);
   HEAP32[$10>>2] = 10;
   $11 = HEAP32[48>>2]|0;
   $12 = ((($11)) + 4|0);
   HEAP32[$12>>2] = 10;
   $13 = HEAP32[8>>2]|0;
   $14 = ((($13)) + 4|0);
   HEAP32[$14>>2] = 1;
   $15 = HEAP32[40>>2]|0;
   $16 = ((($15)) + 4|0);
   HEAP32[$16>>2] = 10;
   $17 = HEAP32[35104>>2]|0;
   $18 = ((($17)) + 4|0);
   HEAP32[$18>>2] = 10;
  }
  HEAP8[120>>0] = 0;
 }
 $19 = (__update_time()|0);
 $20 = HEAP32[216>>2]|0;
 $21 = (($20) + ($19))|0;
 HEAP32[216>>2] = $21;
 $22 = $21;
 L32: while(1) {
  $23 = ($22|0)>(39999);
  if ($23) {
   $AsyncCtx61 = _emscripten_alloc_async_context(4,sp)|0;
   __update();
   $IsAsync62 = ___async;
   if ($IsAsync62) {
    label = 25;
    break;
   }
   _emscripten_free_async_context(($AsyncCtx61|0));
  } else {
   __render();
   $432 = HEAP8[128>>0]|0;
   $$not7 = ($432<<24>>24)==(0);
   $433 = 389544;
   $434 = $433;
   $435 = HEAP32[$434>>2]|0;
   $436 = (($433) + 4)|0;
   $437 = $436;
   $438 = HEAP32[$437>>2]|0;
   $439 = ($435|0)==(0);
   $440 = ($438|0)==(0);
   $441 = $439 & $440;
   $or$cond9 = $$not7 & $441;
   if (!($or$cond9)) {
    label = 199;
    break;
   }
  }
  $24 = HEAP32[(389696)>>2]|0;
  $25 = ($24|0)==(0);
  if (!($25)) {
   HEAP8[128>>0] = 0;
  }
  $26 = (_score_ball()|0);
  do {
   if ((($26|0) == 5)) {
    $27 = HEAP8[382784>>0]|0;
    $28 = ($27<<24>>24)==(0);
    if ($28) {
     HEAP8[382784>>0] = 1;
     $29 = HEAP32[(389556)>>2]|0;
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==(1);
     if (!($31)) {
      $70 = 389544;
      $71 = $70;
      $72 = HEAP32[$71>>2]|0;
      $73 = (($70) + 4)|0;
      $74 = $73;
      $75 = HEAP32[$74>>2]|0;
      $76 = 382800;
      $77 = $76;
      HEAP32[$77>>2] = $72;
      $78 = (($76) + 4)|0;
      $79 = $78;
      HEAP32[$79>>2] = $75;
      $80 = HEAP32[8>>2]|0;
      $81 = ((($80)) + 8|0);
      $82 = +HEAPF32[$81>>2];
      $83 = HEAP32[(389572)>>2]|0;
      $84 = (($83|0) / 2)&-1;
      $85 = (+($84|0));
      $86 = $82 > $85;
      $87 = HEAP32[(651920)>>2]|0;
      $88 = ((($80)) + 12|0);
      $89 = +HEAPF32[$88>>2];
      if ($86) {
       $90 = (+($83|0));
       $AsyncCtx17 = _emscripten_alloc_async_context(4,sp)|0;
       FUNCTION_TABLE_vidd[$87 & 255]($80,$90,$89);
       $IsAsync18 = ___async;
       if ($IsAsync18) {
        label = 47;
        break L32;
       }
       _emscripten_free_async_context(($AsyncCtx17|0));
      } else {
       $AsyncCtx21 = _emscripten_alloc_async_context(4,sp)|0;
       FUNCTION_TABLE_vidd[$87 & 255]($80,0.0,$89);
       $IsAsync22 = ___async;
       if ($IsAsync22) {
        label = 50;
        break L32;
       }
       _emscripten_free_async_context(($AsyncCtx21|0));
      }
      $91 = HEAP32[(651952)>>2]|0;
      $92 = HEAP32[35176>>2]|0;
      $AsyncCtx25 = _emscripten_alloc_async_context(4,sp)|0;
      FUNCTION_TABLE_vi[$91 & 255]($92);
      $IsAsync26 = ___async;
      if ($IsAsync26) {
       label = 53;
       break L32;
      }
      _emscripten_free_async_context(($AsyncCtx25|0));
      break;
     }
     $32 = (_get_score(1)|0);
     $33 = ($32|0)==(5);
     if ($33) {
      $34 = 389544;
      $35 = $34;
      $36 = HEAP32[$35>>2]|0;
      $37 = (($34) + 4)|0;
      $38 = $37;
      $39 = HEAP32[$38>>2]|0;
      $40 = 382800;
      $41 = $40;
      HEAP32[$41>>2] = $36;
      $42 = (($40) + 4)|0;
      $43 = $42;
      HEAP32[$43>>2] = $39;
      $44 = HEAP32[(651920)>>2]|0;
      $45 = HEAP32[8>>2]|0;
      $46 = HEAP32[(389572)>>2]|0;
      $47 = (+($46|0));
      $48 = ((($45)) + 12|0);
      $49 = +HEAPF32[$48>>2];
      $AsyncCtx3 = _emscripten_alloc_async_context(4,sp)|0;
      FUNCTION_TABLE_vidd[$44 & 255]($45,$47,$49);
      $IsAsync4 = ___async;
      if ($IsAsync4) {
       label = 34;
       break L32;
      }
      _emscripten_free_async_context(($AsyncCtx3|0));
      $50 = HEAP32[(651952)>>2]|0;
      $51 = HEAP32[35176>>2]|0;
      $AsyncCtx6 = _emscripten_alloc_async_context(4,sp)|0;
      FUNCTION_TABLE_vi[$50 & 255]($51);
      $IsAsync7 = ___async;
      if ($IsAsync7) {
       label = 36;
       break L32;
      }
      _emscripten_free_async_context(($AsyncCtx6|0));
      break;
     }
     HEAP8[382784>>0] = 1;
     $52 = 389544;
     $53 = $52;
     $54 = HEAP32[$53>>2]|0;
     $55 = (($52) + 4)|0;
     $56 = $55;
     $57 = HEAP32[$56>>2]|0;
     $58 = 382800;
     $59 = $58;
     HEAP32[$59>>2] = $54;
     $60 = (($58) + 4)|0;
     $61 = $60;
     HEAP32[$61>>2] = $57;
     $62 = HEAP32[(651952)>>2]|0;
     $63 = HEAP32[35168>>2]|0;
     $AsyncCtx10 = _emscripten_alloc_async_context(4,sp)|0;
     FUNCTION_TABLE_vi[$62 & 255]($63);
     $IsAsync11 = ___async;
     if ($IsAsync11) {
      label = 39;
      break L32;
     }
     _emscripten_free_async_context(($AsyncCtx10|0));
     $64 = HEAP32[(651920)>>2]|0;
     $65 = HEAP32[8>>2]|0;
     $66 = ((($65)) + 12|0);
     $67 = +HEAPF32[$66>>2];
     $AsyncCtx13 = _emscripten_alloc_async_context(4,sp)|0;
     FUNCTION_TABLE_vidd[$64 & 255]($65,0.0,$67);
     $IsAsync14 = ___async;
     if ($IsAsync14) {
      label = 41;
      break L32;
     }
     _emscripten_free_async_context(($AsyncCtx13|0));
     $68 = HEAP32[(651780)>>2]|0;
     $69 = ($68|0)<(10);
     if ($69) {
      HEAP32[(651780)>>2] = 9;
      break;
     } else {
      HEAP32[(651780)>>2] = 19;
      break;
     }
    }
   } else if (!((($26|0) == 0))) {
    $$pr = HEAP8[382784>>0]|0;
    $93 = ($$pr<<24>>24)==(0);
    if ($93) {
     $94 = HEAP32[(651952)>>2]|0;
     $95 = HEAP32[35128>>2]|0;
     $AsyncCtx29 = _emscripten_alloc_async_context(4,sp)|0;
     FUNCTION_TABLE_vi[$94 & 255]($95);
     $IsAsync30 = ___async;
     if ($IsAsync30) {
      label = 57;
      break L32;
     }
     _emscripten_free_async_context(($AsyncCtx29|0));
     $AsyncCtx148 = _emscripten_alloc_async_context(4,sp)|0;
     _reset_ball();
     $IsAsync149 = ___async;
     if ($IsAsync149) {
      label = 59;
      break L32;
     }
     _emscripten_free_async_context(($AsyncCtx148|0));
    }
   }
  } while(0);
  $96 = HEAP32[(394012)>>2]|0;
  $97 = ($96|0)>(0);
  $98 = HEAP8[382784>>0]|0;
  $99 = ($98<<24>>24)==(0);
  $or$cond11 = $97 & $99;
  do {
   if ($or$cond11) {
    $100 = HEAP32[(389556)>>2]|0;
    $101 = HEAP32[$100>>2]|0;
    $102 = ($101|0)==(1);
    if ($102) {
     $103 = HEAP32[56>>2]|0;
     $104 = HEAP32[(389576)>>2]|0;
     $105 = (($104|0) / 40)&-1;
     $AsyncCtx96 = _emscripten_alloc_async_context(4,sp)|0;
     _move_paddle($103,1106,$96,$105);
     $IsAsync97 = ___async;
     if ($IsAsync97) {
      label = 64;
      break L32;
     }
     _emscripten_free_async_context(($AsyncCtx96|0));
     break;
    } else {
     $106 = HEAP32[48>>2]|0;
     $107 = HEAP32[(389576)>>2]|0;
     $108 = (($107|0) / 40)&-1;
     $AsyncCtx92 = _emscripten_alloc_async_context(4,sp)|0;
     _move_paddle($106,1106,$96,$108);
     $IsAsync93 = ___async;
     if ($IsAsync93) {
      label = 67;
      break L32;
     }
     _emscripten_free_async_context(($AsyncCtx92|0));
     break;
    }
   } else {
    $109 = HEAP32[(394008)>>2]|0;
    $110 = ($109|0)>(0);
    $or$cond13 = $99 & $110;
    if ($or$cond13) {
     $111 = HEAP32[(389556)>>2]|0;
     $112 = HEAP32[$111>>2]|0;
     $113 = ($112|0)==(1);
     if ($113) {
      $114 = HEAP32[56>>2]|0;
      $115 = HEAP32[(389576)>>2]|0;
      $116 = (($115|0) / 40)&-1;
      $AsyncCtx88 = _emscripten_alloc_async_context(4,sp)|0;
      _move_paddle($114,1105,$109,$116);
      $IsAsync89 = ___async;
      if ($IsAsync89) {
       label = 72;
       break L32;
      }
      _emscripten_free_async_context(($AsyncCtx88|0));
      break;
     } else {
      $117 = HEAP32[48>>2]|0;
      $118 = HEAP32[(389576)>>2]|0;
      $119 = (($118|0) / 40)&-1;
      $AsyncCtx84 = _emscripten_alloc_async_context(4,sp)|0;
      _move_paddle($117,1105,$109,$119);
      $IsAsync85 = ___async;
      if ($IsAsync85) {
       label = 75;
       break L32;
      }
      _emscripten_free_async_context(($AsyncCtx84|0));
      break;
     }
    }
   }
  } while(0);
  $120 = HEAP32[(389556)>>2]|0;
  $121 = HEAP32[$120>>2]|0;
  $122 = ($121|0)==(2);
  do {
   if ($122) {
    $123 = HEAP32[(390064)>>2]|0;
    $124 = ($123|0)>(0);
    $125 = HEAP8[382784>>0]|0;
    $126 = ($125<<24>>24)==(0);
    $or$cond15 = $124 & $126;
    if ($or$cond15) {
     $127 = HEAP32[56>>2]|0;
     $128 = HEAP32[(389576)>>2]|0;
     $129 = (($128|0) / 40)&-1;
     $AsyncCtx80 = _emscripten_alloc_async_context(4,sp)|0;
     _move_paddle($127,1106,$123,$129);
     $IsAsync81 = ___async;
     if ($IsAsync81) {
      label = 80;
      break L32;
     }
     _emscripten_free_async_context(($AsyncCtx80|0));
     break;
    }
    $130 = HEAP32[(390048)>>2]|0;
    $131 = ($130|0)>(0);
    $or$cond17 = $126 & $131;
    if ($or$cond17) {
     $132 = HEAP32[56>>2]|0;
     $133 = HEAP32[(389576)>>2]|0;
     $134 = (($133|0) / 40)&-1;
     $AsyncCtx76 = _emscripten_alloc_async_context(4,sp)|0;
     _move_paddle($132,1105,$130,$134);
     $IsAsync77 = ___async;
     if ($IsAsync77) {
      label = 84;
      break L32;
     }
     _emscripten_free_async_context(($AsyncCtx76|0));
    }
   }
  } while(0);
  $135 = HEAP32[(389556)>>2]|0;
  $136 = HEAP32[$135>>2]|0;
  $137 = ($136|0)<(2);
  if ($137) {
   $AsyncCtx72 = _emscripten_alloc_async_context(4,sp)|0;
   _paddle_ai(2);
   $IsAsync73 = ___async;
   if ($IsAsync73) {
    label = 88;
    break;
   }
   _emscripten_free_async_context(($AsyncCtx72|0));
  }
  $138 = HEAP32[8>>2]|0;
  $139 = ((($138)) + 8|0);
  $140 = +HEAPF32[$139>>2];
  $141 = (~~(($140)));
  HEAP32[382808>>2] = $141;
  $142 = HEAP8[382784>>0]|0;
  $143 = ($142<<24>>24)==(0);
  do {
   if ($143) {
    $144 = HEAP8[104>>0]|0;
    $145 = ($144<<24>>24)==(0);
    do {
     if ($145) {
      $AsyncCtx145 = _emscripten_alloc_async_context(4,sp)|0;
      $146 = (_collision_ball()|0);
      $IsAsync146 = ___async;
      if ($IsAsync146) {
       label = 93;
       break L32;
      }
      _emscripten_free_async_context(($AsyncCtx145|0));
      if ($146) {
       $147 = HEAP8[382792>>0]|0;
       $148 = ($147<<24>>24)!=(0);
       $149 = +HEAPF32[32>>2];
       $150 = $149 != 0.0;
       $or$cond19 = $148 & $150;
       if ($or$cond19) {
        HEAP8[382792>>0] = 0;
        label = 98;
       } else {
        $151 = ($147<<24>>24)==(0);
        if ($151) {
         label = 98;
        }
       }
       do {
        if ((label|0) == 98) {
         label = 0;
         $152 = HEAP32[8>>2]|0;
         $153 = ((($152)) + 8|0);
         $154 = +HEAPF32[$153>>2];
         $155 = HEAP32[(389572)>>2]|0;
         $156 = (($155|0) / 2)&-1;
         $157 = (+($156|0));
         $158 = $154 > $157;
         if ($158) {
          $159 = HEAP32[80>>2]|0;
          $160 = ((($159)) + 8|0);
          $161 = +HEAPF32[$160>>2];
          $162 = $161 > $157;
          if ($162) {
           _hide_item();
           break;
          }
         }
         $163 = HEAP32[8>>2]|0;
         $164 = ((($163)) + 8|0);
         $165 = +HEAPF32[$164>>2];
         $166 = HEAP32[(389572)>>2]|0;
         $167 = (($166|0) / 2)&-1;
         $168 = (+($167|0));
         $169 = $165 < $168;
         if ($169) {
          $170 = HEAP32[80>>2]|0;
          $171 = ((($170)) + 8|0);
          $172 = +HEAPF32[$171>>2];
          $173 = $172 < $168;
          if ($173) {
           _hide_item();
          }
         }
        }
       } while(0);
       $174 = HEAP32[88>>2]|0;
       $175 = ((($174)) + 44|0);
       $176 = HEAP8[$175>>0]|0;
       $177 = ($176<<24>>24)==(0);
       do {
        if (!($177)) {
         $178 = HEAP32[8>>2]|0;
         $179 = ((($178)) + 8|0);
         $180 = +HEAPF32[$179>>2];
         $181 = HEAP32[(389572)>>2]|0;
         $182 = (($181|0) / 2)&-1;
         $183 = (+($182|0));
         $184 = $180 > $183;
         if ($184) {
          $185 = ((($174)) + 8|0);
          $186 = +HEAPF32[$185>>2];
          $187 = $186 > $183;
          if ($187) {
           _hide_danger();
           break;
          }
         }
         $188 = HEAP32[8>>2]|0;
         $189 = ((($188)) + 8|0);
         $190 = +HEAPF32[$189>>2];
         $191 = HEAP32[(389572)>>2]|0;
         $192 = (($191|0) / 2)&-1;
         $193 = (+($192|0));
         $194 = $190 < $193;
         if ($194) {
          $195 = ((($174)) + 8|0);
          $196 = +HEAPF32[$195>>2];
          $197 = $196 < $193;
          if ($197) {
           _hide_danger();
          }
         }
        }
       } while(0);
       $198 = HEAP32[96>>2]|0;
       $199 = ((($198)) + 44|0);
       $200 = HEAP8[$199>>0]|0;
       $201 = ($200<<24>>24)==(0);
       if (!($201)) {
        $202 = HEAP32[8>>2]|0;
        $203 = ((($202)) + 8|0);
        $204 = +HEAPF32[$203>>2];
        $205 = HEAP32[(389572)>>2]|0;
        $206 = (($205|0) / 2)&-1;
        $207 = (+($206|0));
        $208 = $204 > $207;
        if ($208) {
         $209 = ((($198)) + 8|0);
         $210 = +HEAPF32[$209>>2];
         $211 = $210 > $207;
         if ($211) {
          _hide_bomb();
          break;
         }
        }
        $212 = HEAP32[8>>2]|0;
        $213 = ((($212)) + 8|0);
        $214 = +HEAPF32[$213>>2];
        $215 = HEAP32[(389572)>>2]|0;
        $216 = (($215|0) / 2)&-1;
        $217 = (+($216|0));
        $218 = $214 < $217;
        if ($218) {
         $219 = ((($198)) + 8|0);
         $220 = +HEAPF32[$219>>2];
         $221 = $220 < $217;
         if ($221) {
          _hide_bomb();
         }
        }
       }
      } else {
       label = 118;
      }
     } else {
      label = 118;
     }
    } while(0);
    if ((label|0) == 118) {
     label = 0;
     $AsyncCtx141 = _emscripten_alloc_async_context(4,sp)|0;
     _update_ball();
     $IsAsync142 = ___async;
     if ($IsAsync142) {
      label = 119;
      break L32;
     }
     _emscripten_free_async_context(($AsyncCtx141|0));
    }
    $AsyncCtx112 = _emscripten_alloc_async_context(4,sp)|0;
    _update_item();
    $IsAsync113 = ___async;
    if ($IsAsync113) {
     label = 122;
     break L32;
    }
    _emscripten_free_async_context(($AsyncCtx112|0));
    $222 = HEAP32[382808>>2]|0;
    $223 = HEAP32[(389572)>>2]|0;
    $224 = (($223|0) / 2)&-1;
    $225 = ($222|0)<($224|0);
    do {
     if (!($225)) {
      $226 = HEAP32[8>>2]|0;
      $227 = ((($226)) + 8|0);
      $228 = +HEAPF32[$227>>2];
      $229 = (+($224|0));
      $230 = $228 < $229;
      $231 = HEAP8[382784>>0]|0;
      $232 = ($231<<24>>24)==(0);
      $or$cond21 = $230 & $232;
      if ($or$cond21) {
       $233 = HEAP32[80>>2]|0;
       $234 = ((($233)) + 44|0);
       $235 = HEAP8[$234>>0]|0;
       $$not = ($235<<24>>24)==(0);
       $236 = HEAP32[35096>>2]|0;
       $237 = ($236|0)<(6);
       $or$cond = $$not & $237;
       if ($or$cond) {
        $238 = HEAP32[(651832)>>2]|0;
        $AsyncCtx33 = _emscripten_alloc_async_context(4,sp)|0;
        $239 = (FUNCTION_TABLE_i[$238 & 255]()|0);
        $IsAsync34 = ___async;
        if ($IsAsync34) {
         label = 127;
         break L32;
        }
        _emscripten_free_async_context(($AsyncCtx33|0));
        $240 = (($239>>>0) % 5)&-1;
        $241 = ($240>>>0)<(2);
        if ($241) {
         $AsyncCtx108 = _emscripten_alloc_async_context(4,sp)|0;
         _show_item();
         $IsAsync109 = ___async;
         if ($IsAsync109) {
          label = 130;
          break L32;
         }
         _emscripten_free_async_context(($AsyncCtx108|0));
        }
       }
       $242 = HEAP8[382792>>0]|0;
       $243 = ($242<<24>>24)==(0);
       do {
        if ($243) {
         $244 = HEAP32[88>>2]|0;
         $245 = ((($244)) + 44|0);
         $246 = HEAP8[$245>>0]|0;
         $247 = HEAP8[35112>>0]|0;
         $248 = $247 | $246;
         $249 = ($248<<24>>24)==(0);
         if ($249) {
          $250 = HEAP32[(651832)>>2]|0;
          $AsyncCtx37 = _emscripten_alloc_async_context(4,sp)|0;
          $251 = (FUNCTION_TABLE_i[$250 & 255]()|0);
          $IsAsync38 = ___async;
          if ($IsAsync38) {
           label = 135;
           break L32;
          }
          _emscripten_free_async_context(($AsyncCtx37|0));
          $252 = (($251>>>0) % 5)&-1;
          $253 = ($252>>>0)<(2);
          if (!($253)) {
           break;
          }
          $AsyncCtx127 = _emscripten_alloc_async_context(4,sp)|0;
          _show_danger();
          $IsAsync128 = ___async;
          if ($IsAsync128) {
           label = 138;
           break L32;
          }
          _emscripten_free_async_context(($AsyncCtx127|0));
         }
        }
       } while(0);
       $254 = (_get_score(1)|0);
       $255 = ($254|0)==(4);
       if ($255) {
        $256 = HEAP32[96>>2]|0;
        $257 = ((($256)) + 44|0);
        $258 = HEAP8[$257>>0]|0;
        $259 = HEAP8[35112>>0]|0;
        $260 = $259 | $258;
        $261 = ($260<<24>>24)==(0);
        if ($261) {
         $262 = HEAP32[(651832)>>2]|0;
         $AsyncCtx41 = _emscripten_alloc_async_context(4,sp)|0;
         $263 = (FUNCTION_TABLE_i[$262 & 255]()|0);
         $IsAsync42 = ___async;
         if ($IsAsync42) {
          label = 143;
          break L32;
         }
         _emscripten_free_async_context(($AsyncCtx41|0));
         $264 = (($263>>>0) % 5)&-1;
         $265 = ($264|0)==(0);
         if (!($265)) {
          break;
         }
         $AsyncCtx134 = _emscripten_alloc_async_context(4,sp)|0;
         _show_bomb();
         $IsAsync135 = ___async;
         if ($IsAsync135) {
          label = 146;
          break L32;
         }
         _emscripten_free_async_context(($AsyncCtx134|0));
        }
       }
      }
     }
    } while(0);
    $266 = HEAP32[382808>>2]|0;
    $267 = HEAP32[(389572)>>2]|0;
    $268 = (($267|0) / 2)&-1;
    $269 = ($266|0)<($268|0);
    if ($269) {
     $270 = HEAP32[8>>2]|0;
     $271 = ((($270)) + 8|0);
     $272 = +HEAPF32[$271>>2];
     $273 = (+($268|0));
     $274 = $272 >= $273;
     $275 = HEAP8[382784>>0]|0;
     $276 = ($275<<24>>24)==(0);
     $or$cond27 = $274 & $276;
     if ($or$cond27) {
      $277 = HEAP32[(389556)>>2]|0;
      $278 = HEAP32[$277>>2]|0;
      $279 = ($278|0)>(1);
      if ($279) {
       $280 = HEAP32[80>>2]|0;
       $281 = ((($280)) + 44|0);
       $282 = HEAP8[$281>>0]|0;
       $$not2 = ($282<<24>>24)==(0);
       $283 = HEAP32[35096>>2]|0;
       $284 = ($283|0)<(6);
       $or$cond4 = $$not2 & $284;
       if ($or$cond4) {
        $285 = HEAP32[(651832)>>2]|0;
        $AsyncCtx45 = _emscripten_alloc_async_context(4,sp)|0;
        $286 = (FUNCTION_TABLE_i[$285 & 255]()|0);
        $IsAsync46 = ___async;
        if ($IsAsync46) {
         label = 153;
         break L32;
        }
        _emscripten_free_async_context(($AsyncCtx45|0));
        $287 = (($286>>>0) % 5)&-1;
        $288 = ($287>>>0)<(2);
        if ($288) {
         $AsyncCtx104 = _emscripten_alloc_async_context(4,sp)|0;
         _show_item();
         $IsAsync105 = ___async;
         if ($IsAsync105) {
          label = 156;
          break L32;
         }
         _emscripten_free_async_context(($AsyncCtx104|0));
        }
       }
       $289 = HEAP8[382792>>0]|0;
       $290 = ($289<<24>>24)==(0);
       if ($290) {
        $291 = HEAP32[88>>2]|0;
        $292 = ((($291)) + 44|0);
        $293 = HEAP8[$292>>0]|0;
        $294 = HEAP8[35112>>0]|0;
        $295 = $294 | $293;
        $296 = ($295<<24>>24)==(0);
        if ($296) {
         $297 = HEAP32[(651832)>>2]|0;
         $AsyncCtx49 = _emscripten_alloc_async_context(4,sp)|0;
         $298 = (FUNCTION_TABLE_i[$297 & 255]()|0);
         $IsAsync50 = ___async;
         if ($IsAsync50) {
          label = 161;
          break L32;
         }
         _emscripten_free_async_context(($AsyncCtx49|0));
         $299 = (($298>>>0) % 5)&-1;
         $300 = ($299>>>0)<(2);
         if (!($300)) {
          label = 166;
          break;
         }
         $AsyncCtx123 = _emscripten_alloc_async_context(4,sp)|0;
         _show_danger();
         $IsAsync124 = ___async;
         if ($IsAsync124) {
          label = 164;
          break L32;
         }
         _emscripten_free_async_context(($AsyncCtx123|0));
         label = 166;
        } else {
         $301 = $294;
        }
       } else {
        label = 166;
       }
      } else {
       label = 166;
      }
     } else {
      label = 166;
     }
    } else {
     label = 166;
    }
   } else {
    label = 166;
   }
  } while(0);
  if ((label|0) == 166) {
   label = 0;
   $$pr32 = HEAP8[35112>>0]|0;
   $301 = $$pr32;
  }
  $302 = ($301<<24>>24)==(0);
  do {
   if (!($302)) {
    $303 = 389544;
    $304 = $303;
    $305 = HEAP32[$304>>2]|0;
    $306 = (($303) + 4)|0;
    $307 = $306;
    $308 = HEAP32[$307>>2]|0;
    $309 = 35120;
    $310 = $309;
    $311 = HEAP32[$310>>2]|0;
    $312 = (($309) + 4)|0;
    $313 = $312;
    $314 = HEAP32[$313>>2]|0;
    $315 = (_i64Subtract(($305|0),($308|0),($311|0),($314|0))|0);
    $316 = tempRet0;
    $317 = ($316>>>0)>(0);
    $318 = ($315>>>0)>(10000000);
    $319 = ($316|0)==(0);
    $320 = $319 & $318;
    $321 = $317 | $320;
    if (!($321)) {
     $322 = HEAP32[(651780)>>2]|0;
     if (!((($322|0) == 5) | (($322|0) == 15))) {
      break;
     }
     $323 = HEAP32[40>>2]|0;
     $324 = ((($323)) + 4|0);
     $325 = HEAP32[$324>>2]|0;
     $326 = ($325|0)==(4);
     $327 = ($316>>>0)>(0);
     $328 = ($315>>>0)>(5000000);
     $329 = ($316|0)==(0);
     $330 = $329 & $328;
     $331 = $327 | $330;
     $or$cond30 = $331 & $326;
     if (!($or$cond30)) {
      break;
     }
    }
    $AsyncCtx119 = _emscripten_alloc_async_context(4,sp)|0;
    _end_danger();
    $IsAsync120 = ___async;
    if ($IsAsync120) {
     label = 172;
     break L32;
    }
    _emscripten_free_async_context(($AsyncCtx119|0));
    HEAP8[35112>>0] = 0;
   }
  } while(0);
  $332 = HEAP8[104>>0]|0;
  $333 = ($332<<24>>24)==(0);
  do {
   if (!($333)) {
    $334 = HEAP32[96>>2]|0;
    $335 = ((($334)) + 44|0);
    $336 = HEAP8[$335>>0]|0;
    $337 = ($336<<24>>24)==(0);
    if (!($337)) {
     $338 = ((($334)) + 8|0);
     $339 = +HEAPF32[$338>>2];
     $340 = HEAP32[(389572)>>2]|0;
     $341 = (($340|0) / 2)&-1;
     $342 = (+($341|0));
     $343 = $339 > $342;
     $paddle2$paddle1 = $343 ? 48 : 56;
     $pad$0 = HEAP32[$paddle2$paddle1>>2]|0;
     $344 = ((($334)) + 40|0);
     $345 = +HEAPF32[$344>>2];
     $346 = $345;
     $347 = (($340|0) / 40)&-1;
     $348 = (+($347|0));
     $349 = $348 * 10.0;
     $350 = $346 < $349;
     if ($350) {
      $351 = HEAP32[(651924)>>2]|0;
      $352 = $346 * 1.2;
      $353 = $352;
      HEAPF32[$344>>2] = $353;
      $354 = ((($334)) + 36|0);
      $355 = +HEAPF32[$354>>2];
      $356 = $355;
      $357 = $356 * 1.2;
      $358 = $357;
      HEAPF32[$354>>2] = $358;
      $AsyncCtx53 = _emscripten_alloc_async_context(8,sp)|0;
      FUNCTION_TABLE_vidd[$351 & 255]($334,$353,$358);
      $IsAsync54 = ___async;
      if ($IsAsync54) {
       label = 178;
       break L32;
      }
      _emscripten_free_async_context(($AsyncCtx53|0));
      $$pre = HEAP32[(389572)>>2]|0;
      $364 = $$pre;
     } else {
      HEAP8[$335>>0] = 0;
      $364 = $340;
     }
     $360 = ((($pad$0)) + 40|0);
     $361 = +HEAPF32[$360>>2];
     $362 = $361;
     $363 = (($364|0) / 40)&-1;
     $365 = (+($363|0));
     $366 = $365 * 20.0;
     $367 = $362 < $366;
     if ($367) {
      $368 = HEAP32[(651924)>>2]|0;
      $369 = $362 * 1.2;
      $370 = $369;
      HEAPF32[$360>>2] = $370;
      $371 = ((($pad$0)) + 36|0);
      $372 = +HEAPF32[$371>>2];
      $373 = $372;
      $374 = $373 * 1.1000000000000001;
      $375 = $374;
      HEAPF32[$371>>2] = $375;
      $AsyncCtx57 = _emscripten_alloc_async_context(8,sp)|0;
      FUNCTION_TABLE_vidd[$368 & 255]($pad$0,$370,$375);
      $IsAsync58 = ___async;
      if ($IsAsync58) {
       label = 183;
       break L32;
      }
      _emscripten_free_async_context(($AsyncCtx57|0));
     } else {
      $377 = ((($pad$0)) + 44|0);
      HEAP8[$377>>0] = 0;
     }
     $378 = ((($pad$0)) + 4|0);
     $379 = HEAP32[$378>>2]|0;
     if ((($379|0) == 0)) {
      HEAP32[$378>>2] = 1;
      break;
     } else if ((($379|0) == 10)) {
      HEAP32[$378>>2] = 11;
      break;
     } else {
      break;
     }
    }
   }
  } while(0);
  $380 = HEAP8[382784>>0]|0;
  $381 = ($380<<24>>24)==(0);
  if ($381) {
   $382 = 389544;
   $383 = $382;
   $384 = HEAP32[$383>>2]|0;
   $385 = (($382) + 4)|0;
   $386 = $385;
   $387 = HEAP32[$386>>2]|0;
   $424 = $384;$425 = $387;
  } else {
   $388 = HEAP8[104>>0]|0;
   $389 = ($388<<24>>24)==(0);
   $390 = 389544;
   $391 = $390;
   $392 = HEAP32[$391>>2]|0;
   $393 = (($390) + 4)|0;
   $394 = $393;
   $395 = HEAP32[$394>>2]|0;
   $396 = 382800;
   $397 = $396;
   $398 = HEAP32[$397>>2]|0;
   $399 = (($396) + 4)|0;
   $400 = $399;
   $401 = HEAP32[$400>>2]|0;
   $402 = (_i64Subtract(($392|0),($395|0),($398|0),($401|0))|0);
   $403 = tempRet0;
   $404 = ($403>>>0)>(0);
   $405 = ($402>>>0)>(3000000);
   $406 = ($403|0)==(0);
   $407 = $406 & $405;
   $408 = $404 | $407;
   $or$cond42 = $389 & $408;
   $409 = (_i64Subtract(($392|0),($395|0),($398|0),($401|0))|0);
   $410 = tempRet0;
   $411 = ($410>>>0)>(0);
   $412 = ($409>>>0)>(6000000);
   $413 = ($410|0)==(0);
   $414 = $413 & $412;
   $415 = $411 | $414;
   $or$cond44 = $or$cond42 | $415;
   if ($or$cond44) {
    $416 = HEAP32[35096>>2]|0;
    $417 = ($416|0)==(6);
    if ($417) {
     $418 = HEAP32[(389556)>>2]|0;
     $419 = HEAP32[$418>>2]|0;
     $420 = ($419|0)==(1);
     if ($420) {
      $421 = ((($418)) + 4|0);
      HEAP8[$421>>0] = 1;
     } else {
      label = 195;
     }
    } else {
     label = 195;
    }
    if ((label|0) == 195) {
     label = 0;
     HEAP32[(651780)>>2] = 0;
    }
    HEAP8[128>>0] = 0;
    $424 = $392;$425 = $395;
   } else {
    $424 = $392;$425 = $395;
   }
  }
  $422 = HEAP32[216>>2]|0;
  $423 = (($422) + -40000)|0;
  HEAP32[216>>2] = $423;
  $426 = (_i64Add(($424|0),($425|0),40000,0)|0);
  $427 = tempRet0;
  $428 = 389544;
  $429 = $428;
  HEAP32[$429>>2] = $426;
  $430 = (($428) + 4)|0;
  $431 = $430;
  HEAP32[$431>>2] = $427;
  $22 = $423;
 }
 switch (label|0) {
  case 25: {
   HEAP32[$AsyncCtx61>>2] = 94;
   sp = STACKTOP;
   return;
   break;
  }
  case 34: {
   HEAP32[$AsyncCtx3>>2] = 95;
   sp = STACKTOP;
   return;
   break;
  }
  case 36: {
   HEAP32[$AsyncCtx6>>2] = 96;
   sp = STACKTOP;
   return;
   break;
  }
  case 39: {
   HEAP32[$AsyncCtx10>>2] = 97;
   sp = STACKTOP;
   return;
   break;
  }
  case 41: {
   HEAP32[$AsyncCtx13>>2] = 98;
   sp = STACKTOP;
   return;
   break;
  }
  case 47: {
   HEAP32[$AsyncCtx17>>2] = 99;
   sp = STACKTOP;
   return;
   break;
  }
  case 50: {
   HEAP32[$AsyncCtx21>>2] = 100;
   sp = STACKTOP;
   return;
   break;
  }
  case 53: {
   HEAP32[$AsyncCtx25>>2] = 101;
   sp = STACKTOP;
   return;
   break;
  }
  case 57: {
   HEAP32[$AsyncCtx29>>2] = 102;
   sp = STACKTOP;
   return;
   break;
  }
  case 59: {
   HEAP32[$AsyncCtx148>>2] = 103;
   sp = STACKTOP;
   return;
   break;
  }
  case 64: {
   HEAP32[$AsyncCtx96>>2] = 104;
   sp = STACKTOP;
   return;
   break;
  }
  case 67: {
   HEAP32[$AsyncCtx92>>2] = 105;
   sp = STACKTOP;
   return;
   break;
  }
  case 72: {
   HEAP32[$AsyncCtx88>>2] = 106;
   sp = STACKTOP;
   return;
   break;
  }
  case 75: {
   HEAP32[$AsyncCtx84>>2] = 107;
   sp = STACKTOP;
   return;
   break;
  }
  case 80: {
   HEAP32[$AsyncCtx80>>2] = 108;
   sp = STACKTOP;
   return;
   break;
  }
  case 84: {
   HEAP32[$AsyncCtx76>>2] = 109;
   sp = STACKTOP;
   return;
   break;
  }
  case 88: {
   HEAP32[$AsyncCtx72>>2] = 110;
   sp = STACKTOP;
   return;
   break;
  }
  case 93: {
   HEAP32[$AsyncCtx145>>2] = 111;
   sp = STACKTOP;
   return;
   break;
  }
  case 119: {
   HEAP32[$AsyncCtx141>>2] = 112;
   sp = STACKTOP;
   return;
   break;
  }
  case 122: {
   HEAP32[$AsyncCtx112>>2] = 113;
   sp = STACKTOP;
   return;
   break;
  }
  case 127: {
   HEAP32[$AsyncCtx33>>2] = 114;
   sp = STACKTOP;
   return;
   break;
  }
  case 130: {
   HEAP32[$AsyncCtx108>>2] = 115;
   sp = STACKTOP;
   return;
   break;
  }
  case 135: {
   HEAP32[$AsyncCtx37>>2] = 116;
   sp = STACKTOP;
   return;
   break;
  }
  case 138: {
   HEAP32[$AsyncCtx127>>2] = 117;
   sp = STACKTOP;
   return;
   break;
  }
  case 143: {
   HEAP32[$AsyncCtx41>>2] = 118;
   sp = STACKTOP;
   return;
   break;
  }
  case 146: {
   HEAP32[$AsyncCtx134>>2] = 119;
   sp = STACKTOP;
   return;
   break;
  }
  case 153: {
   HEAP32[$AsyncCtx45>>2] = 120;
   sp = STACKTOP;
   return;
   break;
  }
  case 156: {
   HEAP32[$AsyncCtx104>>2] = 121;
   sp = STACKTOP;
   return;
   break;
  }
  case 161: {
   HEAP32[$AsyncCtx49>>2] = 122;
   sp = STACKTOP;
   return;
   break;
  }
  case 164: {
   HEAP32[$AsyncCtx123>>2] = 123;
   sp = STACKTOP;
   return;
   break;
  }
  case 172: {
   HEAP32[$AsyncCtx119>>2] = 124;
   sp = STACKTOP;
   return;
   break;
  }
  case 178: {
   HEAP32[$AsyncCtx53>>2] = 125;
   $359 = ((($AsyncCtx53)) + 4|0);
   HEAP32[$359>>2] = $pad$0;
   sp = STACKTOP;
   return;
   break;
  }
  case 183: {
   HEAP32[$AsyncCtx57>>2] = 126;
   $376 = ((($AsyncCtx57)) + 4|0);
   HEAP32[$376>>2] = $pad$0;
   sp = STACKTOP;
   return;
   break;
  }
  case 199: {
   return;
   break;
  }
 }
}
function _initialize_score() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx5 = 0, $IsAsync = 0, $IsAsync6 = 0;
 var $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[(651908)>>2]|0;
 $1 = HEAP32[(389572)>>2]|0;
 $2 = (+($1|0));
 $3 = $2 * 0.375;
 $4 = (~~(($3)));
 $5 = HEAP32[(389576)>>2]|0;
 $6 = (($5) + -100)|0;
 $7 = (($1|0) / 40)&-1;
 $8 = ($7*3)|0;
 $9 = ($5*5)|0;
 $10 = (($9|0) / 27)&-1;
 $AsyncCtx = _emscripten_alloc_async_context(16,sp)|0;
 $11 = (FUNCTION_TABLE_iiiiiii[$0 & 255](8,$4,$6,$8,$10,$vararg_buffer)|0);
 $IsAsync = ___async;
 if ($IsAsync) {
  HEAP32[$AsyncCtx>>2] = 127;
  $12 = ((($AsyncCtx)) + 4|0);
  HEAP32[$12>>2] = $vararg_buffer;
  $13 = ((($AsyncCtx)) + 8|0);
  HEAP32[$13>>2] = $vararg_buffer1;
  $14 = ((($AsyncCtx)) + 12|0);
  HEAP32[$14>>2] = $vararg_buffer1;
  sp = STACKTOP;
  STACKTOP = sp;return;
 }
 _emscripten_free_async_context(($AsyncCtx|0));
 HEAP32[40>>2] = $11;
 $15 = HEAP32[(651908)>>2]|0;
 $16 = HEAP32[(389572)>>2]|0;
 $17 = (+($16|0));
 $18 = $17 * 0.625;
 $19 = (~~(($18)));
 $20 = HEAP32[(389576)>>2]|0;
 $21 = (($20) + -100)|0;
 $22 = (($16|0) / 40)&-1;
 $23 = ($22*3)|0;
 $24 = ($20*5)|0;
 $25 = (($24|0) / 27)&-1;
 $AsyncCtx5 = _emscripten_alloc_async_context(8,sp)|0;
 $26 = (FUNCTION_TABLE_iiiiiii[$15 & 255](8,$19,$21,$23,$25,$vararg_buffer1)|0);
 $IsAsync6 = ___async;
 if ($IsAsync6) {
  HEAP32[$AsyncCtx5>>2] = 128;
  $27 = ((($AsyncCtx5)) + 4|0);
  HEAP32[$27>>2] = $vararg_buffer1;
  sp = STACKTOP;
  STACKTOP = sp;return;
 }
 _emscripten_free_async_context(($AsyncCtx5|0));
 HEAP32[35104>>2] = $26;
 $28 = HEAP32[(389556)>>2]|0;
 $29 = ((($28)) + 4|0);
 $30 = HEAP8[$29>>0]|0;
 $31 = ($30<<24>>24)==(0);
 $32 = HEAP32[40>>2]|0;
 $33 = ((($32)) + 4|0);
 if ($31) {
  HEAP32[$33>>2] = 0;
  $35 = ((($26)) + 4|0);
  HEAP32[$35>>2] = 0;
  STACKTOP = sp;return;
 } else {
  HEAP32[$33>>2] = 10;
  $34 = ((($26)) + 4|0);
  HEAP32[$34>>2] = 10;
  STACKTOP = sp;return;
 }
}
function _get_score($score) {
 $score = $score|0;
 var $$0 = 0, $$0$in = 0, $$0$in$in = 0, $$pn = 0, $0 = 0, $score1$score2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($score|0)==(1);
 $score1$score2 = $0 ? 40 : 35104;
 $$pn = HEAP32[$score1$score2>>2]|0;
 $$0$in$in = ((($$pn)) + 4|0);
 $$0$in = HEAP32[$$0$in$in>>2]|0;
 $$0 = (($$0$in|0) % 10)&-1;
 return ($$0|0);
}
function _update_score($score) {
 $score = $score|0;
 var $$off = 0, $$off2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 if ((($score|0) == 2)) {
  $6 = HEAP32[35104>>2]|0;
  $7 = ((($6)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)<(5);
  $$off = (($8) + -11)|0;
  $10 = ($$off>>>0)<(4);
  $or$cond5 = $9 | $10;
  if (!($or$cond5)) {
   return;
  }
  $11 = (($8) + 1)|0;
  HEAP32[$7>>2] = $11;
  return;
 } else if ((($score|0) == 1)) {
  $0 = HEAP32[40>>2]|0;
  $1 = ((($0)) + 4|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ($2|0)<(5);
  $$off2 = (($2) + -11)|0;
  $4 = ($$off2>>>0)<(4);
  $or$cond = $3 | $4;
  if (!($or$cond)) {
   return;
  }
  $5 = (($2) + 1)|0;
  HEAP32[$1>>2] = $5;
  return;
 } else {
  return;
 }
}
function _title() {
 var $$lcssa = 0, $$not = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0.0, $84 = 0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0;
 var $AsyncCtx = 0, $AsyncCtx14 = 0, $AsyncCtx17 = 0, $AsyncCtx20 = 0, $AsyncCtx23 = 0, $AsyncCtx26 = 0, $AsyncCtx29 = 0, $AsyncCtx32 = 0, $AsyncCtx35 = 0, $AsyncCtx38 = 0, $AsyncCtx41 = 0, $AsyncCtx44 = 0, $AsyncCtx47 = 0, $AsyncCtx50 = 0, $AsyncCtx53 = 0, $AsyncCtx57 = 0, $AsyncCtx60 = 0, $AsyncCtx64 = 0, $AsyncCtx67 = 0, $AsyncCtx71 = 0;
 var $AsyncCtx75 = 0, $AsyncCtx79 = 0, $AsyncCtx83 = 0, $AsyncCtx87 = 0, $IsAsync = 0, $IsAsync15 = 0, $IsAsync18 = 0, $IsAsync21 = 0, $IsAsync24 = 0, $IsAsync27 = 0, $IsAsync30 = 0, $IsAsync33 = 0, $IsAsync36 = 0, $IsAsync39 = 0, $IsAsync42 = 0, $IsAsync45 = 0, $IsAsync48 = 0, $IsAsync51 = 0, $IsAsync54 = 0, $IsAsync58 = 0;
 var $IsAsync61 = 0, $IsAsync65 = 0, $IsAsync68 = 0, $IsAsync72 = 0, $IsAsync76 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP8[128>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $AsyncCtx87 = _emscripten_alloc_async_context(4,sp)|0;
  __exit_loop();
  // unreachable;
 }
 $2 = HEAP8[120>>0]|0;
 $3 = ($2<<24>>24)==(0);
 if (!($3)) {
  $4 = HEAP32[(651908)>>2]|0;
  $5 = HEAP32[(389572)>>2]|0;
  $6 = (($5|0) / 2)&-1;
  $7 = HEAP32[(389576)>>2]|0;
  $8 = (($7) + -100)|0;
  $AsyncCtx = _emscripten_alloc_async_context(32,sp)|0;
  $9 = (FUNCTION_TABLE_iiiiiii[$4 & 255](1,$6,$8,250,100,$vararg_buffer)|0);
  $IsAsync = ___async;
  if ($IsAsync) {
   HEAP32[$AsyncCtx>>2] = 129;
   $10 = ((($AsyncCtx)) + 4|0);
   HEAP32[$10>>2] = $vararg_buffer;
   $11 = ((($AsyncCtx)) + 8|0);
   HEAP32[$11>>2] = $vararg_buffer1;
   $12 = ((($AsyncCtx)) + 12|0);
   HEAP32[$12>>2] = $vararg_buffer4;
   $13 = ((($AsyncCtx)) + 16|0);
   HEAP32[$13>>2] = $vararg_buffer7;
   $14 = ((($AsyncCtx)) + 20|0);
   HEAP32[$14>>2] = $vararg_buffer7;
   $15 = ((($AsyncCtx)) + 24|0);
   HEAP32[$15>>2] = $vararg_buffer1;
   $16 = ((($AsyncCtx)) + 28|0);
   HEAP32[$16>>2] = $vararg_buffer4;
   sp = STACKTOP;
   STACKTOP = sp;return;
  }
  _emscripten_free_async_context(($AsyncCtx|0));
  HEAP32[382816>>2] = $9;
  $17 = HEAP32[(651908)>>2]|0;
  $18 = HEAP32[(389572)>>2]|0;
  $19 = (($18|0) / 2)&-1;
  $AsyncCtx14 = _emscripten_alloc_async_context(24,sp)|0;
  $20 = (FUNCTION_TABLE_iiiiiii[$17 & 255](2,$19,250,200,25,$vararg_buffer1)|0);
  $IsAsync15 = ___async;
  if ($IsAsync15) {
   HEAP32[$AsyncCtx14>>2] = 130;
   $21 = ((($AsyncCtx14)) + 4|0);
   HEAP32[$21>>2] = $vararg_buffer4;
   $22 = ((($AsyncCtx14)) + 8|0);
   HEAP32[$22>>2] = $vararg_buffer7;
   $23 = ((($AsyncCtx14)) + 12|0);
   HEAP32[$23>>2] = $vararg_buffer7;
   $24 = ((($AsyncCtx14)) + 16|0);
   HEAP32[$24>>2] = $vararg_buffer1;
   $25 = ((($AsyncCtx14)) + 20|0);
   HEAP32[$25>>2] = $vararg_buffer4;
   sp = STACKTOP;
   STACKTOP = sp;return;
  }
  _emscripten_free_async_context(($AsyncCtx14|0));
  HEAP32[382824>>2] = $20;
  $26 = HEAP32[(651908)>>2]|0;
  $27 = HEAP32[(389572)>>2]|0;
  $28 = (($27|0) / 2)&-1;
  $AsyncCtx17 = _emscripten_alloc_async_context(16,sp)|0;
  $29 = (FUNCTION_TABLE_iiiiiii[$26 & 255](2,$28,200,200,25,$vararg_buffer4)|0);
  $IsAsync18 = ___async;
  if ($IsAsync18) {
   HEAP32[$AsyncCtx17>>2] = 131;
   $30 = ((($AsyncCtx17)) + 4|0);
   HEAP32[$30>>2] = $vararg_buffer4;
   $31 = ((($AsyncCtx17)) + 8|0);
   HEAP32[$31>>2] = $vararg_buffer7;
   $32 = ((($AsyncCtx17)) + 12|0);
   HEAP32[$32>>2] = $vararg_buffer7;
   sp = STACKTOP;
   STACKTOP = sp;return;
  }
  _emscripten_free_async_context(($AsyncCtx17|0));
  HEAP32[382832>>2] = $29;
  $33 = HEAP32[(651908)>>2]|0;
  $34 = HEAP32[(389572)>>2]|0;
  $35 = (($34|0) / 2)&-1;
  HEAPF64[$vararg_buffer7>>3] = 1.0;
  $vararg_ptr9 = ((($vararg_buffer7)) + 8|0);
  HEAPF64[$vararg_ptr9>>3] = 1.0;
  $vararg_ptr10 = ((($vararg_buffer7)) + 16|0);
  HEAPF64[$vararg_ptr10>>3] = 1.0;
  $vararg_ptr11 = ((($vararg_buffer7)) + 24|0);
  HEAPF64[$vararg_ptr11>>3] = 1.0;
  $AsyncCtx20 = _emscripten_alloc_async_context(8,sp)|0;
  $36 = (FUNCTION_TABLE_iiiiiii[$33 & 255](-2,$35,250,210,35,$vararg_buffer7)|0);
  $IsAsync21 = ___async;
  if ($IsAsync21) {
   HEAP32[$AsyncCtx20>>2] = 132;
   $37 = ((($AsyncCtx20)) + 4|0);
   HEAP32[$37>>2] = $vararg_buffer7;
   sp = STACKTOP;
   STACKTOP = sp;return;
  }
  _emscripten_free_async_context(($AsyncCtx20|0));
  HEAP32[382840>>2] = $36;
  $38 = HEAP32[(651948)>>2]|0;
  $AsyncCtx23 = _emscripten_alloc_async_context(4,sp)|0;
  $39 = (FUNCTION_TABLE_ii[$38 & 255](382848)|0);
  $IsAsync24 = ___async;
  if ($IsAsync24) {
   HEAP32[$AsyncCtx23>>2] = 133;
   sp = STACKTOP;
   STACKTOP = sp;return;
  }
  _emscripten_free_async_context(($AsyncCtx23|0));
  HEAP32[64>>2] = $39;
  $40 = HEAP32[(651948)>>2]|0;
  $AsyncCtx26 = _emscripten_alloc_async_context(4,sp)|0;
  $41 = (FUNCTION_TABLE_ii[$40 & 255](382864)|0);
  $IsAsync27 = ___async;
  if ($IsAsync27) {
   HEAP32[$AsyncCtx26>>2] = 134;
   sp = STACKTOP;
   STACKTOP = sp;return;
  }
  _emscripten_free_async_context(($AsyncCtx26|0));
  HEAP32[72>>2] = $41;
  $42 = HEAP32[(651948)>>2]|0;
  $AsyncCtx29 = _emscripten_alloc_async_context(4,sp)|0;
  $43 = (FUNCTION_TABLE_ii[$42 & 255](382880)|0);
  $IsAsync30 = ___async;
  if ($IsAsync30) {
   HEAP32[$AsyncCtx29>>2] = 135;
   sp = STACKTOP;
   STACKTOP = sp;return;
  }
  _emscripten_free_async_context(($AsyncCtx29|0));
  HEAP32[35184>>2] = $43;
  $44 = HEAP32[(651948)>>2]|0;
  $AsyncCtx32 = _emscripten_alloc_async_context(4,sp)|0;
  $45 = (FUNCTION_TABLE_ii[$44 & 255](382896)|0);
  $IsAsync33 = ___async;
  if ($IsAsync33) {
   HEAP32[$AsyncCtx32>>2] = 136;
   sp = STACKTOP;
   STACKTOP = sp;return;
  }
  _emscripten_free_async_context(($AsyncCtx32|0));
  HEAP32[35128>>2] = $45;
  $46 = HEAP32[(651948)>>2]|0;
  $AsyncCtx35 = _emscripten_alloc_async_context(4,sp)|0;
  $47 = (FUNCTION_TABLE_ii[$46 & 255](382912)|0);
  $IsAsync36 = ___async;
  if ($IsAsync36) {
   HEAP32[$AsyncCtx35>>2] = 137;
   sp = STACKTOP;
   STACKTOP = sp;return;
  }
  _emscripten_free_async_context(($AsyncCtx35|0));
  HEAP32[35136>>2] = $47;
  $48 = HEAP32[(651948)>>2]|0;
  $AsyncCtx38 = _emscripten_alloc_async_context(4,sp)|0;
  $49 = (FUNCTION_TABLE_ii[$48 & 255](382928)|0);
  $IsAsync39 = ___async;
  if ($IsAsync39) {
   HEAP32[$AsyncCtx38>>2] = 138;
   sp = STACKTOP;
   STACKTOP = sp;return;
  }
  _emscripten_free_async_context(($AsyncCtx38|0));
  HEAP32[35144>>2] = $49;
  $50 = HEAP32[(651948)>>2]|0;
  $AsyncCtx41 = _emscripten_alloc_async_context(4,sp)|0;
  $51 = (FUNCTION_TABLE_ii[$50 & 255](382944)|0);
  $IsAsync42 = ___async;
  if ($IsAsync42) {
   HEAP32[$AsyncCtx41>>2] = 139;
   sp = STACKTOP;
   STACKTOP = sp;return;
  }
  _emscripten_free_async_context(($AsyncCtx41|0));
  HEAP32[35152>>2] = $51;
  $52 = HEAP32[(651948)>>2]|0;
  $AsyncCtx44 = _emscripten_alloc_async_context(4,sp)|0;
  $53 = (FUNCTION_TABLE_ii[$52 & 255](382960)|0);
  $IsAsync45 = ___async;
  if ($IsAsync45) {
   HEAP32[$AsyncCtx44>>2] = 140;
   sp = STACKTOP;
   STACKTOP = sp;return;
  }
  _emscripten_free_async_context(($AsyncCtx44|0));
  HEAP32[35160>>2] = $53;
  $54 = HEAP32[(651948)>>2]|0;
  $AsyncCtx47 = _emscripten_alloc_async_context(4,sp)|0;
  $55 = (FUNCTION_TABLE_ii[$54 & 255](382976)|0);
  $IsAsync48 = ___async;
  if ($IsAsync48) {
   HEAP32[$AsyncCtx47>>2] = 141;
   sp = STACKTOP;
   STACKTOP = sp;return;
  }
  _emscripten_free_async_context(($AsyncCtx47|0));
  HEAP32[35168>>2] = $55;
  $56 = HEAP32[(651948)>>2]|0;
  $AsyncCtx50 = _emscripten_alloc_async_context(4,sp)|0;
  $57 = (FUNCTION_TABLE_ii[$56 & 255](382992)|0);
  $IsAsync51 = ___async;
  if ($IsAsync51) {
   HEAP32[$AsyncCtx50>>2] = 142;
   sp = STACKTOP;
   STACKTOP = sp;return;
  }
  _emscripten_free_async_context(($AsyncCtx50|0));
  HEAP32[35176>>2] = $57;
  HEAP32[383008>>2] = 0;
  $58 = HEAP32[382824>>2]|0;
  $59 = ((($58)) + 4|0);
  HEAP32[$59>>2] = 1;
  $60 = HEAP32[382832>>2]|0;
  $61 = ((($60)) + 4|0);
  HEAP32[$61>>2] = 2;
  $62 = HEAP32[(651936)>>2]|0;
  $AsyncCtx53 = _emscripten_alloc_async_context(4,sp)|0;
  FUNCTION_TABLE_vi[$62 & 255](4);
  $IsAsync54 = ___async;
  if ($IsAsync54) {
   HEAP32[$AsyncCtx53>>2] = 143;
   sp = STACKTOP;
   STACKTOP = sp;return;
  }
  _emscripten_free_async_context(($AsyncCtx53|0));
  $63 = HEAP32[(389556)>>2]|0;
  $64 = ((($63)) + 4|0);
  $65 = HEAP8[$64>>0]|0;
  $66 = ($65<<24>>24)==(0);
  if (!($66)) {
   HEAP32[(651780)>>2] = 1;
  }
  HEAP8[120>>0] = 0;
 }
 $67 = (__update_time()|0);
 $68 = HEAP32[216>>2]|0;
 $69 = (($68) + ($67))|0;
 HEAP32[216>>2] = $69;
 $70 = $69;
 L55: while(1) {
  $71 = ($70|0)>(39999);
  if ($71) {
   $AsyncCtx75 = _emscripten_alloc_async_context(4,sp)|0;
   __update();
   $IsAsync76 = ___async;
   if ($IsAsync76) {
    label = 40;
    break;
   }
   _emscripten_free_async_context(($AsyncCtx75|0));
  } else {
   __render();
   $128 = HEAP8[128>>0]|0;
   $$not = ($128<<24>>24)==(0);
   $129 = 389544;
   $130 = $129;
   $131 = HEAP32[$130>>2]|0;
   $132 = (($129) + 4)|0;
   $133 = $132;
   $134 = HEAP32[$133>>2]|0;
   $135 = ($131|0)==(0);
   $136 = ($134|0)==(0);
   $137 = $135 & $136;
   $or$cond = $$not & $137;
   if (!($or$cond)) {
    label = 67;
    break;
   }
  }
  $72 = HEAP32[(394012)>>2]|0;
  $73 = ($72|0)==(1);
  do {
   if ($73) {
    $74 = HEAP32[383008>>2]|0;
    $75 = ($74|0)==(0);
    if (!($75)) {
     $76 = HEAP32[(651952)>>2]|0;
     $77 = HEAP32[64>>2]|0;
     $AsyncCtx57 = _emscripten_alloc_async_context(4,sp)|0;
     FUNCTION_TABLE_vi[$76 & 255]($77);
     $IsAsync58 = ___async;
     if ($IsAsync58) {
      label = 45;
      break L55;
     }
     _emscripten_free_async_context(($AsyncCtx57|0));
     $78 = HEAP32[383008>>2]|0;
     $79 = (($78) + -1)|0;
     HEAP32[383008>>2] = $79;
     $80 = HEAP32[(651920)>>2]|0;
     $81 = HEAP32[382840>>2]|0;
     $82 = ((($81)) + 8|0);
     $83 = +HEAPF32[$82>>2];
     $84 = ((($81)) + 12|0);
     $85 = +HEAPF32[$84>>2];
     $86 = $85 + 50.0;
     $AsyncCtx60 = _emscripten_alloc_async_context(4,sp)|0;
     FUNCTION_TABLE_vidd[$80 & 255]($81,$83,$86);
     $IsAsync61 = ___async;
     if ($IsAsync61) {
      label = 47;
      break L55;
     }
     _emscripten_free_async_context(($AsyncCtx60|0));
    }
   } else {
    $87 = HEAP32[(394008)>>2]|0;
    $88 = ($87|0)==(1);
    if ($88) {
     $89 = HEAP32[383008>>2]|0;
     $90 = ($89|0)==(1);
     if ($90) {
      break;
     }
     $91 = HEAP32[(651952)>>2]|0;
     $92 = HEAP32[72>>2]|0;
     $AsyncCtx64 = _emscripten_alloc_async_context(4,sp)|0;
     FUNCTION_TABLE_vi[$91 & 255]($92);
     $IsAsync65 = ___async;
     if ($IsAsync65) {
      label = 52;
      break L55;
     }
     _emscripten_free_async_context(($AsyncCtx64|0));
     $93 = HEAP32[383008>>2]|0;
     $94 = (($93) + 1)|0;
     HEAP32[383008>>2] = $94;
     $95 = HEAP32[(651920)>>2]|0;
     $96 = HEAP32[382840>>2]|0;
     $97 = ((($96)) + 8|0);
     $98 = +HEAPF32[$97>>2];
     $99 = ((($96)) + 12|0);
     $100 = +HEAPF32[$99>>2];
     $101 = $100 + -50.0;
     $AsyncCtx67 = _emscripten_alloc_async_context(4,sp)|0;
     FUNCTION_TABLE_vidd[$95 & 255]($96,$98,$101);
     $IsAsync68 = ___async;
     if ($IsAsync68) {
      label = 54;
      break L55;
     }
     _emscripten_free_async_context(($AsyncCtx67|0));
     break;
    }
    $102 = HEAP32[(389640)>>2]|0;
    $103 = ($102|0)==(1);
    if ($103) {
     $104 = HEAP32[(651952)>>2]|0;
     $105 = HEAP32[35184>>2]|0;
     $AsyncCtx71 = _emscripten_alloc_async_context(4,sp)|0;
     FUNCTION_TABLE_vi[$104 & 255]($105);
     $IsAsync72 = ___async;
     if ($IsAsync72) {
      label = 58;
      break L55;
     }
     _emscripten_free_async_context(($AsyncCtx71|0));
     $106 = HEAP32[383008>>2]|0;
     $107 = ($106|0)==(0);
     if ($107) {
      label = 60;
      break L55;
     }
     $109 = ($106|0)==(1);
     $110 = HEAP32[(389556)>>2]|0;
     if ($109) {
      $$lcssa = $110;
      label = 62;
      break L55;
     }
     $111 = ((($110)) + 4|0);
     $112 = HEAP8[$111>>0]|0;
     $113 = ($112<<24>>24)==(0);
     if (!($113)) {
      HEAP32[(651780)>>2] = 1;
     }
    }
   }
  } while(0);
  $114 = HEAP32[216>>2]|0;
  $115 = (($114) + -40000)|0;
  HEAP32[216>>2] = $115;
  $116 = 389544;
  $117 = $116;
  $118 = HEAP32[$117>>2]|0;
  $119 = (($116) + 4)|0;
  $120 = $119;
  $121 = HEAP32[$120>>2]|0;
  $122 = (_i64Add(($118|0),($121|0),40000,0)|0);
  $123 = tempRet0;
  $124 = 389544;
  $125 = $124;
  HEAP32[$125>>2] = $122;
  $126 = (($124) + 4)|0;
  $127 = $126;
  HEAP32[$127>>2] = $123;
  $70 = $115;
 }
 if ((label|0) == 40) {
  HEAP32[$AsyncCtx75>>2] = 144;
  sp = STACKTOP;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 45) {
  HEAP32[$AsyncCtx57>>2] = 145;
  sp = STACKTOP;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 47) {
  HEAP32[$AsyncCtx60>>2] = 146;
  sp = STACKTOP;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 52) {
  HEAP32[$AsyncCtx64>>2] = 147;
  sp = STACKTOP;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 54) {
  HEAP32[$AsyncCtx67>>2] = 148;
  sp = STACKTOP;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 58) {
  HEAP32[$AsyncCtx71>>2] = 149;
  sp = STACKTOP;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 60) {
  $108 = HEAP32[(389556)>>2]|0;
  HEAP32[$108>>2] = 1;
  $AsyncCtx79 = _emscripten_alloc_async_context(4,sp)|0;
  _Wsubloop(150);
  // unreachable;
 }
 else if ((label|0) == 62) {
  HEAP32[$$lcssa>>2] = 2;
  $AsyncCtx83 = _emscripten_alloc_async_context(4,sp)|0;
  _Wsubloop(150);
  // unreachable;
 }
 else if ((label|0) == 67) {
  STACKTOP = sp;return;
 }
}
function __initialize_canvas() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 (_SDL_Init(32)|0);
 (_SDL_GL_SetAttribute(17,3)|0);
 (_SDL_GL_SetAttribute(18,3)|0);
 $0 = (_emscripten_run_script_int((383016|0))|0);
 HEAP32[(389560)>>2] = $0;
 $1 = (_emscripten_run_script_int((383040|0))|0);
 HEAP32[(389564)>>2] = $1;
 HEAP32[(389568)>>2] = 60;
 $2 = HEAP32[(389560)>>2]|0;
 $3 = (($2|0) / 2)&-1;
 HEAP32[(389580)>>2] = $3;
 $4 = (($1|0) / 2)&-1;
 HEAP32[(389584)>>2] = $4;
 HEAP32[(389572)>>2] = $2;
 HEAP32[(389576)>>2] = $1;
 $5 = (_SDL_SetVideoMode(($2|0),($1|0),0,67108865)|0);
 HEAP32[383064>>2] = $5;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = HEAP32[_stderr>>2]|0;
  $8 = (_SDL_GetError()|0);
  HEAP32[$vararg_buffer>>2] = $8;
  (_fprintf(($7|0),(383072|0),($vararg_buffer|0))|0);
  _exit(1);
  // unreachable;
 } else {
  _emscripten_asm_const_0(0);
  STACKTOP = sp;return;
 }
}
function __finalize_canvas() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[383064>>2]|0;
 _SDL_FreeSurface(($0|0));
 return;
}
function __Wresize_window($width,$height) {
 $width = $width|0;
 $height = $height|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $IsAsync = 0, $IsAsync3 = 0, $exitcond = 0, $exitcond3 = 0, $i$02 = 0;
 var $j$01 = 0, $new_height$0 = 0.0, $new_width$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_SDL_SetVideoMode(($width|0),($height|0),0,67108864)|0);
 HEAP32[383064>>2] = $0;
 $1 = HEAP32[(389572)>>2]|0;
 $2 = HEAP32[(389576)>>2]|0;
 HEAP32[(389572)>>2] = $width;
 HEAP32[(389576)>>2] = $height;
 _glViewport(0,0,($width|0),($height|0));
 __update_interface_screen_size();
 $3 = (+($width|0));
 $4 = (+($1|0));
 $5 = (+($height|0));
 $6 = (+($2|0));
 $7 = $3 / $4;
 $8 = $5 / $6;
 $i$02 = 0;
 L1: while(1) {
  $j$01 = 0;
  while(1) {
   $9 = ((2280 + (($i$02*1856)|0)|0) + (($j$01*116)|0)|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==(0);
   if (!($11)) {
    $12 = HEAP32[(651920)>>2]|0;
    $13 = ((((2280 + (($i$02*1856)|0)|0) + (($j$01*116)|0)|0)) + 8|0);
    $14 = +HEAPF32[$13>>2];
    $15 = $3 * $14;
    $16 = $15 / $4;
    $17 = ((((2280 + (($i$02*1856)|0)|0) + (($j$01*116)|0)|0)) + 12|0);
    $18 = +HEAPF32[$17>>2];
    $19 = $5 * $18;
    $20 = $19 / $6;
    $AsyncCtx = _emscripten_alloc_async_context(40,sp)|0;
    FUNCTION_TABLE_vidd[$12 & 255]($9,$16,$20);
    $IsAsync = ___async;
    if ($IsAsync) {
     label = 5;
     break L1;
    }
    _emscripten_free_async_context(($AsyncCtx|0));
    $30 = ((((2280 + (($i$02*1856)|0)|0) + (($j$01*116)|0)|0)) + 45|0);
    $31 = HEAP8[$30>>0]|0;
    $32 = ($31<<24>>24)==(0);
    $33 = ((((2280 + (($i$02*1856)|0)|0) + (($j$01*116)|0)|0)) + 40|0);
    $34 = +HEAPF32[$33>>2];
    $35 = $34 * $7;
    $new_width$0 = $32 ? $34 : $35;
    $36 = ((((2280 + (($i$02*1856)|0)|0) + (($j$01*116)|0)|0)) + 46|0);
    $37 = HEAP8[$36>>0]|0;
    $38 = ($37<<24>>24)==(0);
    $39 = ((((2280 + (($i$02*1856)|0)|0) + (($j$01*116)|0)|0)) + 36|0);
    $40 = +HEAPF32[$39>>2];
    $41 = $40 * $8;
    $new_height$0 = $38 ? $40 : $41;
    $42 = HEAP32[(651924)>>2]|0;
    $AsyncCtx2 = _emscripten_alloc_async_context(36,sp)|0;
    FUNCTION_TABLE_vidd[$42 & 255]($9,$new_width$0,$new_height$0);
    $IsAsync3 = ___async;
    if ($IsAsync3) {
     label = 7;
     break L1;
    }
    _emscripten_free_async_context(($AsyncCtx2|0));
   }
   $51 = (($j$01) + 1)|0;
   $exitcond = ($51|0)==(16);
   if ($exitcond) {
    break;
   } else {
    $j$01 = $51;
   }
  }
  $52 = (($i$02) + 1)|0;
  $exitcond3 = ($52|0)==(16);
  if ($exitcond3) {
   label = 11;
   break;
  } else {
   $i$02 = $52;
  }
 }
 if ((label|0) == 5) {
  HEAP32[$AsyncCtx>>2] = 151;
  $21 = ((($AsyncCtx)) + 4|0);
  HEAP32[$21>>2] = $i$02;
  $22 = ((($AsyncCtx)) + 8|0);
  HEAP32[$22>>2] = $j$01;
  $23 = ((($AsyncCtx)) + 12|0);
  HEAPF32[$23>>2] = $7;
  $24 = ((($AsyncCtx)) + 16|0);
  HEAPF32[$24>>2] = $8;
  $25 = ((($AsyncCtx)) + 20|0);
  HEAP32[$25>>2] = $9;
  $26 = ((($AsyncCtx)) + 24|0);
  HEAPF32[$26>>2] = $3;
  $27 = ((($AsyncCtx)) + 28|0);
  HEAPF32[$27>>2] = $4;
  $28 = ((($AsyncCtx)) + 32|0);
  HEAPF32[$28>>2] = $5;
  $29 = ((($AsyncCtx)) + 36|0);
  HEAPF32[$29>>2] = $6;
  sp = STACKTOP;
  return;
 }
 else if ((label|0) == 7) {
  HEAP32[$AsyncCtx2>>2] = 152;
  $43 = ((($AsyncCtx2)) + 4|0);
  HEAP32[$43>>2] = $j$01;
  $44 = ((($AsyncCtx2)) + 8|0);
  HEAP32[$44>>2] = $i$02;
  $45 = ((($AsyncCtx2)) + 12|0);
  HEAPF32[$45>>2] = $3;
  $46 = ((($AsyncCtx2)) + 16|0);
  HEAPF32[$46>>2] = $4;
  $47 = ((($AsyncCtx2)) + 20|0);
  HEAPF32[$47>>2] = $5;
  $48 = ((($AsyncCtx2)) + 24|0);
  HEAPF32[$48>>2] = $6;
  $49 = ((($AsyncCtx2)) + 28|0);
  HEAPF32[$49>>2] = $7;
  $50 = ((($AsyncCtx2)) + 32|0);
  HEAPF32[$50>>2] = $8;
  sp = STACKTOP;
  return;
 }
 else if ((label|0) == 11) {
  return;
 }
}
function __Wmove_window($width,$height) {
 $width = $width|0;
 $height = $height|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __flush_interfaces() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[144>>2]|0;
 $1 = (2280 + (($0*1856)|0)|0);
 HEAP32[$1>>2] = 0;
 $2 = (((2280 + (($0*1856)|0)|0)) + 116|0);
 HEAP32[$2>>2] = 0;
 $3 = (((2280 + (($0*1856)|0)|0)) + 232|0);
 HEAP32[$3>>2] = 0;
 $4 = (((2280 + (($0*1856)|0)|0)) + 348|0);
 HEAP32[$4>>2] = 0;
 $5 = (((2280 + (($0*1856)|0)|0)) + 464|0);
 HEAP32[$5>>2] = 0;
 $6 = (((2280 + (($0*1856)|0)|0)) + 580|0);
 HEAP32[$6>>2] = 0;
 $7 = (((2280 + (($0*1856)|0)|0)) + 696|0);
 HEAP32[$7>>2] = 0;
 $8 = (((2280 + (($0*1856)|0)|0)) + 812|0);
 HEAP32[$8>>2] = 0;
 $9 = (((2280 + (($0*1856)|0)|0)) + 928|0);
 HEAP32[$9>>2] = 0;
 $10 = (((2280 + (($0*1856)|0)|0)) + 1044|0);
 HEAP32[$10>>2] = 0;
 $11 = (((2280 + (($0*1856)|0)|0)) + 1160|0);
 HEAP32[$11>>2] = 0;
 $12 = (((2280 + (($0*1856)|0)|0)) + 1276|0);
 HEAP32[$12>>2] = 0;
 $13 = (((2280 + (($0*1856)|0)|0)) + 1392|0);
 HEAP32[$13>>2] = 0;
 $14 = (((2280 + (($0*1856)|0)|0)) + 1508|0);
 HEAP32[$14>>2] = 0;
 $15 = (((2280 + (($0*1856)|0)|0)) + 1624|0);
 HEAP32[$15>>2] = 0;
 $16 = (((2280 + (($0*1856)|0)|0)) + 1740|0);
 HEAP32[$16>>2] = 0;
 return;
}
function __new_interface($type,$x,$y,$width,$height,$varargs) {
 $type = $type|0;
 $x = $x|0;
 $y = $y|0;
 $width = $width|0;
 $height = $height|0;
 $varargs = $varargs|0;
 var $$lcssa = 0, $$old$i = 0, $$phi$trans$insert = 0, $$phi$trans$insert30 = 0, $$phi$trans$insert32 = 0, $$phi$trans$insert34 = 0, $$phi$trans$insert36 = 0, $$pre = 0, $$pre29 = 0.0, $$pre31 = 0.0, $$pre33 = 0.0, $$pre35 = 0.0, $$pre37 = 0.0, $$pre38 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0.0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0.0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $2 = 0, $20 = 0;
 var $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0;
 var $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0.0, $arglist_current = 0, $arglist_current2 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $begin$0$i$lcssa = 0, $begin$0$i14 = 0, $begin$0$i8 = 0, $begin$0$ph$i = 0, $begin$1$i = 0, $end$0$ph$i = 0;
 var $end$1$i = 0, $expanded = 0, $expanded10 = 0, $expanded12 = 0, $expanded13 = 0, $expanded14 = 0, $expanded16 = 0, $expanded17 = 0, $expanded19 = 0, $expanded20 = 0, $expanded21 = 0, $expanded23 = 0, $expanded24 = 0, $expanded26 = 0, $expanded27 = 0, $expanded28 = 0, $expanded3 = 0, $expanded5 = 0, $expanded6 = 0, $expanded7 = 0;
 var $expanded9 = 0, $i$017$lcssa = 0, $middle$0$i$lcssa = 0, $middle$0$i13 = 0, $middle$0$i4 = 0, $middle$0$i5 = 0, $middle$0$ph$i = 0, $new_interface$0 = 0, $or$cond$i = 0, $tmp$03$i = 0, $valist = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $valist = sp;
 $0 = HEAP32[144>>2]|0;
 $1 = (2280 + (($0*1856)|0)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  $i$017$lcssa = 0;
 } else {
  $4 = (((2280 + (($0*1856)|0)|0)) + 116|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0);
  if ($6) {
   $i$017$lcssa = 1;
  } else {
   $149 = (((2280 + (($0*1856)|0)|0)) + 232|0);
   $150 = HEAP32[$149>>2]|0;
   $151 = ($150|0)==(0);
   if ($151) {
    $i$017$lcssa = 2;
   } else {
    $152 = (((2280 + (($0*1856)|0)|0)) + 348|0);
    $153 = HEAP32[$152>>2]|0;
    $154 = ($153|0)==(0);
    if ($154) {
     $i$017$lcssa = 3;
    } else {
     $155 = (((2280 + (($0*1856)|0)|0)) + 464|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($156|0)==(0);
     if ($157) {
      $i$017$lcssa = 4;
     } else {
      $158 = (((2280 + (($0*1856)|0)|0)) + 580|0);
      $159 = HEAP32[$158>>2]|0;
      $160 = ($159|0)==(0);
      if ($160) {
       $i$017$lcssa = 5;
      } else {
       $161 = (((2280 + (($0*1856)|0)|0)) + 696|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = ($162|0)==(0);
       if ($163) {
        $i$017$lcssa = 6;
       } else {
        $164 = (((2280 + (($0*1856)|0)|0)) + 812|0);
        $165 = HEAP32[$164>>2]|0;
        $166 = ($165|0)==(0);
        if ($166) {
         $i$017$lcssa = 7;
        } else {
         $167 = (((2280 + (($0*1856)|0)|0)) + 928|0);
         $168 = HEAP32[$167>>2]|0;
         $169 = ($168|0)==(0);
         if ($169) {
          $i$017$lcssa = 8;
         } else {
          $170 = (((2280 + (($0*1856)|0)|0)) + 1044|0);
          $171 = HEAP32[$170>>2]|0;
          $172 = ($171|0)==(0);
          if ($172) {
           $i$017$lcssa = 9;
          } else {
           $173 = (((2280 + (($0*1856)|0)|0)) + 1160|0);
           $174 = HEAP32[$173>>2]|0;
           $175 = ($174|0)==(0);
           if ($175) {
            $i$017$lcssa = 10;
           } else {
            $176 = (((2280 + (($0*1856)|0)|0)) + 1276|0);
            $177 = HEAP32[$176>>2]|0;
            $178 = ($177|0)==(0);
            if ($178) {
             $i$017$lcssa = 11;
            } else {
             $179 = (((2280 + (($0*1856)|0)|0)) + 1392|0);
             $180 = HEAP32[$179>>2]|0;
             $181 = ($180|0)==(0);
             if ($181) {
              $i$017$lcssa = 12;
             } else {
              $182 = (((2280 + (($0*1856)|0)|0)) + 1508|0);
              $183 = HEAP32[$182>>2]|0;
              $184 = ($183|0)==(0);
              if ($184) {
               $i$017$lcssa = 13;
              } else {
               $185 = (((2280 + (($0*1856)|0)|0)) + 1624|0);
               $186 = HEAP32[$185>>2]|0;
               $187 = ($186|0)==(0);
               if ($187) {
                $i$017$lcssa = 14;
               } else {
                $188 = (((2280 + (($0*1856)|0)|0)) + 1740|0);
                $189 = HEAP32[$188>>2]|0;
                $190 = ($189|0)==(0);
                if ($190) {
                 $i$017$lcssa = 15;
                } else {
                 $new_interface$0 = 0;
                 STACKTOP = sp;return ($new_interface$0|0);
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
 $7 = ((2280 + (($0*1856)|0)|0) + (($i$017$lcssa*116)|0)|0);
 HEAP32[$7>>2] = $type;
 $8 = ((((2280 + (($0*1856)|0)|0) + (($i$017$lcssa*116)|0)|0)) + 44|0);
 HEAP8[$8>>0] = 1;
 $9 = ((((2280 + (($0*1856)|0)|0) + (($i$017$lcssa*116)|0)|0)) + 4|0);
 HEAP32[$9>>2] = 0;
 $10 = ((((2280 + (($0*1856)|0)|0) + (($i$017$lcssa*116)|0)|0)) + 45|0);
 HEAP8[$10>>0] = 0;
 $11 = ((((2280 + (($0*1856)|0)|0) + (($i$017$lcssa*116)|0)|0)) + 46|0);
 HEAP8[$11>>0] = 0;
 $12 = ((((2280 + (($0*1856)|0)|0) + (($i$017$lcssa*116)|0)|0)) + 20|0);
 HEAPF32[$12>>2] = 1.0;
 $13 = ((((2280 + (($0*1856)|0)|0) + (($i$017$lcssa*116)|0)|0)) + 24|0);
 HEAPF32[$13>>2] = 1.0;
 $14 = ((((2280 + (($0*1856)|0)|0) + (($i$017$lcssa*116)|0)|0)) + 28|0);
 HEAPF32[$14>>2] = 1.0;
 $15 = ((((2280 + (($0*1856)|0)|0) + (($i$017$lcssa*116)|0)|0)) + 32|0);
 HEAPF32[$15>>2] = 1.0;
 $16 = (+($x|0));
 $17 = ((((2280 + (($0*1856)|0)|0) + (($i$017$lcssa*116)|0)|0)) + 8|0);
 HEAPF32[$17>>2] = $16;
 $18 = (+($y|0));
 $19 = ((((2280 + (($0*1856)|0)|0) + (($i$017$lcssa*116)|0)|0)) + 12|0);
 HEAPF32[$19>>2] = $18;
 $20 = ((((2280 + (($0*1856)|0)|0) + (($i$017$lcssa*116)|0)|0)) + 16|0);
 HEAPF32[$20>>2] = 0.0;
 $21 = (+($width|0));
 $22 = ((((2280 + (($0*1856)|0)|0) + (($i$017$lcssa*116)|0)|0)) + 40|0);
 HEAPF32[$22>>2] = $21;
 $23 = (+($height|0));
 $24 = ((((2280 + (($0*1856)|0)|0) + (($i$017$lcssa*116)|0)|0)) + 36|0);
 HEAPF32[$24>>2] = $23;
 $25 = ((((2280 + (($0*1856)|0)|0) + (($i$017$lcssa*116)|0)|0)) + 112|0);
 HEAP32[$25>>2] = 6;
 if ((($type|0) == -2)) {
  HEAP32[$25>>2] = 2;
  label = 5;
 } else if ((($type|0) == -1)) {
  label = 5;
 } else {
  $64 = $21;$66 = $23;$67 = 0.0;$73 = $16;$81 = $18;$89 = $0;
 }
 if ((label|0) == 5) {
  HEAP32[$valist>>2] = $varargs;
  $arglist_current = HEAP32[$valist>>2]|0;
  $26 = $arglist_current;
  $27 = ((0) + 8|0);
  $expanded3 = $27;
  $expanded = (($expanded3) - 1)|0;
  $28 = (($26) + ($expanded))|0;
  $29 = ((0) + 8|0);
  $expanded7 = $29;
  $expanded6 = (($expanded7) - 1)|0;
  $expanded5 = $expanded6 ^ -1;
  $30 = $28 & $expanded5;
  $31 = $30;
  $32 = +HEAPF64[$31>>3];
  $arglist_next = ((($31)) + 8|0);
  HEAP32[$valist>>2] = $arglist_next;
  $33 = $32;
  $34 = HEAP32[144>>2]|0;
  $35 = ((((2280 + (($34*1856)|0)|0) + (($i$017$lcssa*116)|0)|0)) + 20|0);
  HEAPF32[$35>>2] = $33;
  $arglist_current2 = HEAP32[$valist>>2]|0;
  $36 = $arglist_current2;
  $37 = ((0) + 8|0);
  $expanded10 = $37;
  $expanded9 = (($expanded10) - 1)|0;
  $38 = (($36) + ($expanded9))|0;
  $39 = ((0) + 8|0);
  $expanded14 = $39;
  $expanded13 = (($expanded14) - 1)|0;
  $expanded12 = $expanded13 ^ -1;
  $40 = $38 & $expanded12;
  $41 = $40;
  $42 = +HEAPF64[$41>>3];
  $arglist_next3 = ((($41)) + 8|0);
  HEAP32[$valist>>2] = $arglist_next3;
  $43 = $42;
  $44 = ((((2280 + (($34*1856)|0)|0) + (($i$017$lcssa*116)|0)|0)) + 24|0);
  HEAPF32[$44>>2] = $43;
  $arglist_current5 = HEAP32[$valist>>2]|0;
  $45 = $arglist_current5;
  $46 = ((0) + 8|0);
  $expanded17 = $46;
  $expanded16 = (($expanded17) - 1)|0;
  $47 = (($45) + ($expanded16))|0;
  $48 = ((0) + 8|0);
  $expanded21 = $48;
  $expanded20 = (($expanded21) - 1)|0;
  $expanded19 = $expanded20 ^ -1;
  $49 = $47 & $expanded19;
  $50 = $49;
  $51 = +HEAPF64[$50>>3];
  $arglist_next6 = ((($50)) + 8|0);
  HEAP32[$valist>>2] = $arglist_next6;
  $52 = $51;
  $53 = ((((2280 + (($34*1856)|0)|0) + (($i$017$lcssa*116)|0)|0)) + 28|0);
  HEAPF32[$53>>2] = $52;
  $arglist_current8 = HEAP32[$valist>>2]|0;
  $54 = $arglist_current8;
  $55 = ((0) + 8|0);
  $expanded24 = $55;
  $expanded23 = (($expanded24) - 1)|0;
  $56 = (($54) + ($expanded23))|0;
  $57 = ((0) + 8|0);
  $expanded28 = $57;
  $expanded27 = (($expanded28) - 1)|0;
  $expanded26 = $expanded27 ^ -1;
  $58 = $56 & $expanded26;
  $59 = $58;
  $60 = +HEAPF64[$59>>3];
  $arglist_next9 = ((($59)) + 8|0);
  HEAP32[$valist>>2] = $arglist_next9;
  $61 = $60;
  $62 = ((((2280 + (($34*1856)|0)|0) + (($i$017$lcssa*116)|0)|0)) + 32|0);
  HEAPF32[$62>>2] = $61;
  $$pre = HEAP32[144>>2]|0;
  $$phi$trans$insert = ((((2280 + (($$pre*1856)|0)|0) + (($i$017$lcssa*116)|0)|0)) + 40|0);
  $$pre29 = +HEAPF32[$$phi$trans$insert>>2];
  $$phi$trans$insert30 = ((((2280 + (($$pre*1856)|0)|0) + (($i$017$lcssa*116)|0)|0)) + 36|0);
  $$pre31 = +HEAPF32[$$phi$trans$insert30>>2];
  $$phi$trans$insert32 = ((((2280 + (($$pre*1856)|0)|0) + (($i$017$lcssa*116)|0)|0)) + 16|0);
  $$pre33 = +HEAPF32[$$phi$trans$insert32>>2];
  $$phi$trans$insert34 = ((((2280 + (($$pre*1856)|0)|0) + (($i$017$lcssa*116)|0)|0)) + 8|0);
  $$pre35 = +HEAPF32[$$phi$trans$insert34>>2];
  $$phi$trans$insert36 = ((((2280 + (($$pre*1856)|0)|0) + (($i$017$lcssa*116)|0)|0)) + 12|0);
  $$pre37 = +HEAPF32[$$phi$trans$insert36>>2];
  $64 = $$pre29;$66 = $$pre31;$67 = $$pre33;$73 = $$pre35;$81 = $$pre37;$89 = $$pre;
 }
 $63 = $64 * 2.0;
 $65 = $66 * 2.0;
 $68 = (+Math_cos((+$67)));
 $69 = (+Math_sin((+$67)));
 $70 = HEAP32[(389572)>>2]|0;
 $71 = (+($70|0));
 $72 = $73 / $71;
 $74 = $72;
 $75 = $74 * 2.0;
 $76 = $75 + -1.0;
 $77 = $76;
 $78 = HEAP32[(389576)>>2]|0;
 $79 = (+($78|0));
 $80 = $81 / $79;
 $82 = $80;
 $83 = $82 * 2.0;
 $84 = $83 + -1.0;
 $85 = $84;
 $86 = $63 * $68;
 $87 = $86 / $71;
 $88 = ((((2280 + (($89*1856)|0)|0) + (($i$017$lcssa*116)|0)|0)) + 48|0);
 HEAPF32[$88>>2] = $87;
 $90 = $65 * $69;
 $91 = -$90;
 $92 = $91 / $71;
 $93 = ((((2280 + (($89*1856)|0)|0) + (($i$017$lcssa*116)|0)|0)) + 64|0);
 HEAPF32[$93>>2] = $92;
 $94 = ((((2280 + (($89*1856)|0)|0) + (($i$017$lcssa*116)|0)|0)) + 80|0);
 HEAPF32[$94>>2] = 0.0;
 $95 = ((((2280 + (($89*1856)|0)|0) + (($i$017$lcssa*116)|0)|0)) + 96|0);
 HEAPF32[$95>>2] = $77;
 $96 = $63 * $69;
 $97 = $96 / $79;
 $98 = ((((2280 + (($89*1856)|0)|0) + (($i$017$lcssa*116)|0)|0)) + 52|0);
 HEAPF32[$98>>2] = $97;
 $99 = $65 * $68;
 $100 = $99 / $79;
 $101 = ((((2280 + (($89*1856)|0)|0) + (($i$017$lcssa*116)|0)|0)) + 68|0);
 HEAPF32[$101>>2] = $100;
 $102 = ((((2280 + (($89*1856)|0)|0) + (($i$017$lcssa*116)|0)|0)) + 84|0);
 HEAPF32[$102>>2] = 0.0;
 $103 = ((((2280 + (($89*1856)|0)|0) + (($i$017$lcssa*116)|0)|0)) + 100|0);
 HEAPF32[$103>>2] = $85;
 $104 = ((((2280 + (($89*1856)|0)|0) + (($i$017$lcssa*116)|0)|0)) + 56|0);
 HEAPF32[$104>>2] = 0.0;
 $105 = ((((2280 + (($89*1856)|0)|0) + (($i$017$lcssa*116)|0)|0)) + 60|0);
 $106 = ((((2280 + (($89*1856)|0)|0) + (($i$017$lcssa*116)|0)|0)) + 88|0);
 HEAPF32[$106>>2] = 1.0;
 $107 = ((((2280 + (($89*1856)|0)|0) + (($i$017$lcssa*116)|0)|0)) + 104|0);
 HEAPF32[$107>>2] = 0.0;
 HEAPF32[$105>>2] = 0.0;
 $108 = ((((2280 + (($89*1856)|0)|0) + (($i$017$lcssa*116)|0)|0)) + 76|0);
 HEAPF32[$108>>2] = 0.0;
 $109 = ((((2280 + (($89*1856)|0)|0) + (($i$017$lcssa*116)|0)|0)) + 92|0);
 HEAPF32[$109>>2] = 0.0;
 $110 = ((((2280 + (($89*1856)|0)|0) + (($i$017$lcssa*116)|0)|0)) + 108|0);
 HEAPF32[$110>>2] = 1.0;
 $111 = ((2280 + (($89*1856)|0)|0) + (($i$017$lcssa*116)|0)|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = (((32040 + ($89<<6)|0)) + 60|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = ($114|0)==(0|0);
 if ($115) {
  $begin$0$ph$i = 0;$end$0$ph$i = 15;$middle$0$ph$i = 7;
  L25: while(1) {
   $129 = ((32040 + ($89<<6)|0) + ($middle$0$ph$i<<2)|0);
   $130 = HEAP32[$129>>2]|0;
   $131 = ($130|0)==(0|0);
   L27: do {
    if ($131) {
     $$lcssa = $129;$begin$0$i$lcssa = $begin$0$ph$i;$middle$0$i$lcssa = $middle$0$ph$i;
     label = 10;
    } else {
     $118 = $130;$191 = $129;$begin$0$i14 = $begin$0$ph$i;$middle$0$i13 = $middle$0$ph$i;
     while(1) {
      $117 = HEAP32[$118>>2]|0;
      $119 = ($117|0)==($112|0);
      $120 = ($begin$0$i14|0)==($end$0$ph$i|0);
      $or$cond$i = $120 | $119;
      if ($or$cond$i) {
       $146 = $191;$middle$0$i5 = $middle$0$i13;
       break L25;
      }
      $122 = ($117|0)<($112|0);
      if ($122) {
       $begin$0$i8 = $begin$0$i14;$middle$0$i4 = $middle$0$i13;
       break L27;
      }
      $132 = (($begin$0$i14) + ($middle$0$i13))|0;
      $133 = (($132|0) / 2)&-1;
      $134 = ($133|0)==($begin$0$i14|0);
      $135 = (($begin$0$i14) + 1)|0;
      $begin$1$i = $134 ? $135 : $133;
      $136 = (($begin$1$i) + ($end$0$ph$i))|0;
      $137 = (($136|0) / 2)&-1;
      $138 = ((32040 + ($89<<6)|0) + ($137<<2)|0);
      $139 = HEAP32[$138>>2]|0;
      $140 = ($139|0)==(0|0);
      if ($140) {
       $$lcssa = $138;$begin$0$i$lcssa = $begin$1$i;$middle$0$i$lcssa = $137;
       label = 10;
       break;
      } else {
       $118 = $139;$191 = $138;$begin$0$i14 = $begin$1$i;$middle$0$i13 = $137;
      }
     }
    }
   } while(0);
   if ((label|0) == 10) {
    label = 0;
    $$old$i = ($begin$0$i$lcssa|0)==($end$0$ph$i|0);
    if ($$old$i) {
     $146 = $$lcssa;$middle$0$i5 = $middle$0$i$lcssa;
     break;
    } else {
     $begin$0$i8 = $begin$0$i$lcssa;$middle$0$i4 = $middle$0$i$lcssa;
    }
   }
   $123 = (($middle$0$i4) + ($end$0$ph$i))|0;
   $124 = (($123|0) / 2)&-1;
   $125 = ($124|0)==($end$0$ph$i|0);
   $126 = (($end$0$ph$i) + -1)|0;
   $end$1$i = $125 ? $126 : $124;
   $127 = (($end$1$i) + ($begin$0$i8))|0;
   $128 = (($127|0) / 2)&-1;
   $begin$0$ph$i = $begin$0$i8;$end$0$ph$i = $end$1$i;$middle$0$ph$i = $128;
  }
  $121 = ($middle$0$i5|0)>(15);
  if (!($121)) {
   $tmp$03$i = 15;
   while(1) {
    $141 = (($tmp$03$i) + -1)|0;
    $142 = ((32040 + ($89<<6)|0) + ($141<<2)|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = ((32040 + ($89<<6)|0) + ($tmp$03$i<<2)|0);
    HEAP32[$144>>2] = $143;
    $145 = ($tmp$03$i|0)>($middle$0$i5|0);
    if ($145) {
     $tmp$03$i = $141;
    } else {
     break;
    }
   }
  }
  HEAP32[$146>>2] = $111;
  $148 = $89;
 } else {
  $116 = HEAP32[_stderr>>2]|0;
  (_fwrite((383376|0),154,1,($116|0))|0);
  $$pre38 = HEAP32[144>>2]|0;
  $148 = $$pre38;
 }
 $147 = ((2280 + (($148*1856)|0)|0) + (($i$017$lcssa*116)|0)|0);
 $new_interface$0 = $147;
 STACKTOP = sp;return ($new_interface$0|0);
}
function __destroy_interface($inter) {
 $inter = $inter|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $i$03$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[144>>2]|0;
 $1 = (2280 + (($0*1856)|0)|0);
 $2 = ($1|0)==($inter|0);
 if ($2) {
  $3 = HEAP32[$inter>>2]|0;
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $i$03$lcssa = 0;
  }
 } else {
  label = 3;
 }
 do {
  if ((label|0) == 3) {
   $5 = (((2280 + (($0*1856)|0)|0)) + 116|0);
   $6 = ($5|0)==($inter|0);
   if ($6) {
    $9 = HEAP32[$inter>>2]|0;
    $10 = ($9|0)==(0);
    if (!($10)) {
     $i$03$lcssa = 1;
     break;
    }
   }
   $11 = (((2280 + (($0*1856)|0)|0)) + 232|0);
   $12 = ($11|0)==($inter|0);
   if ($12) {
    $13 = HEAP32[$inter>>2]|0;
    $14 = ($13|0)==(0);
    if (!($14)) {
     $i$03$lcssa = 2;
     break;
    }
   }
   $15 = (((2280 + (($0*1856)|0)|0)) + 348|0);
   $16 = ($15|0)==($inter|0);
   if ($16) {
    $17 = HEAP32[$inter>>2]|0;
    $18 = ($17|0)==(0);
    if (!($18)) {
     $i$03$lcssa = 3;
     break;
    }
   }
   $19 = (((2280 + (($0*1856)|0)|0)) + 464|0);
   $20 = ($19|0)==($inter|0);
   if ($20) {
    $21 = HEAP32[$inter>>2]|0;
    $22 = ($21|0)==(0);
    if (!($22)) {
     $i$03$lcssa = 4;
     break;
    }
   }
   $23 = (((2280 + (($0*1856)|0)|0)) + 580|0);
   $24 = ($23|0)==($inter|0);
   if ($24) {
    $25 = HEAP32[$inter>>2]|0;
    $26 = ($25|0)==(0);
    if (!($26)) {
     $i$03$lcssa = 5;
     break;
    }
   }
   $27 = (((2280 + (($0*1856)|0)|0)) + 696|0);
   $28 = ($27|0)==($inter|0);
   if ($28) {
    $29 = HEAP32[$inter>>2]|0;
    $30 = ($29|0)==(0);
    if (!($30)) {
     $i$03$lcssa = 6;
     break;
    }
   }
   $31 = (((2280 + (($0*1856)|0)|0)) + 812|0);
   $32 = ($31|0)==($inter|0);
   if ($32) {
    $33 = HEAP32[$inter>>2]|0;
    $34 = ($33|0)==(0);
    if (!($34)) {
     $i$03$lcssa = 7;
     break;
    }
   }
   $35 = (((2280 + (($0*1856)|0)|0)) + 928|0);
   $36 = ($35|0)==($inter|0);
   if ($36) {
    $37 = HEAP32[$inter>>2]|0;
    $38 = ($37|0)==(0);
    if (!($38)) {
     $i$03$lcssa = 8;
     break;
    }
   }
   $39 = (((2280 + (($0*1856)|0)|0)) + 1044|0);
   $40 = ($39|0)==($inter|0);
   if ($40) {
    $41 = HEAP32[$inter>>2]|0;
    $42 = ($41|0)==(0);
    if (!($42)) {
     $i$03$lcssa = 9;
     break;
    }
   }
   $43 = (((2280 + (($0*1856)|0)|0)) + 1160|0);
   $44 = ($43|0)==($inter|0);
   if ($44) {
    $45 = HEAP32[$inter>>2]|0;
    $46 = ($45|0)==(0);
    if (!($46)) {
     $i$03$lcssa = 10;
     break;
    }
   }
   $47 = (((2280 + (($0*1856)|0)|0)) + 1276|0);
   $48 = ($47|0)==($inter|0);
   if ($48) {
    $49 = HEAP32[$inter>>2]|0;
    $50 = ($49|0)==(0);
    if (!($50)) {
     $i$03$lcssa = 11;
     break;
    }
   }
   $51 = (((2280 + (($0*1856)|0)|0)) + 1392|0);
   $52 = ($51|0)==($inter|0);
   if ($52) {
    $53 = HEAP32[$inter>>2]|0;
    $54 = ($53|0)==(0);
    if (!($54)) {
     $i$03$lcssa = 12;
     break;
    }
   }
   $55 = (((2280 + (($0*1856)|0)|0)) + 1508|0);
   $56 = ($55|0)==($inter|0);
   if ($56) {
    $57 = HEAP32[$inter>>2]|0;
    $58 = ($57|0)==(0);
    if (!($58)) {
     $i$03$lcssa = 13;
     break;
    }
   }
   $59 = (((2280 + (($0*1856)|0)|0)) + 1624|0);
   $60 = ($59|0)==($inter|0);
   if ($60) {
    $61 = HEAP32[$inter>>2]|0;
    $62 = ($61|0)==(0);
    if (!($62)) {
     $i$03$lcssa = 14;
     break;
    }
   }
   $63 = (((2280 + (($0*1856)|0)|0)) + 1740|0);
   $64 = ($63|0)==($inter|0);
   if (!($64)) {
    $$0 = 0;
    return ($$0|0);
   }
   $65 = HEAP32[$inter>>2]|0;
   $66 = ($65|0)==(0);
   if ($66) {
    $$0 = 0;
    return ($$0|0);
   } else {
    $i$03$lcssa = 15;
   }
  }
 } while(0);
 $7 = ((2280 + (($0*1856)|0)|0) + (($i$03$lcssa*116)|0)|0);
 HEAP32[$7>>2] = 0;
 $8 = ((2280 + (($0*1856)|0)|0) + (($i$03$lcssa*116)|0)|0);
 __remove_interface_queue($8);
 $$0 = 1;
 return ($$0|0);
}
function __remove_interface_queue($inter) {
 $inter = $inter|0;
 var $$ = 0, $$old = 0, $$pre = 0, $$pre20 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, $begin$0$lcssa = 0, $begin$0$ph = 0, $begin$046 = 0, $begin$055 = 0, $begin$1 = 0, $end$0$ph = 0, $end$1 = 0, $middle$0$lcssa = 0, $middle$0$ph = 0, $middle$043 = 0, $middle$054 = 0, $middle$1 = 0, $middle$1$lcssa = 0, $middle$2$lcssa = 0, $middle$2849 = 0;
 var $middle$37 = 0, $or$cond = 0, $or$cond37 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$inter>>2]|0;
 $1 = HEAP32[144>>2]|0;
 $begin$0$ph = 0;$end$0$ph = 15;$middle$0$ph = 7;
 L1: while(1) {
  $2 = ((32040 + ($1<<6)|0) + ($middle$0$ph<<2)|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)==(0|0);
  L3: do {
   if ($4) {
    $begin$0$lcssa = $begin$0$ph;$middle$0$lcssa = $middle$0$ph;
    label = 4;
   } else {
    $6 = $3;$begin$055 = $begin$0$ph;$middle$054 = $middle$0$ph;
    while(1) {
     $5 = HEAP32[$6>>2]|0;
     $7 = ($5|0)==($0|0);
     $8 = ($begin$055|0)==($end$0$ph|0);
     $or$cond = $8 | $7;
     if ($or$cond) {
      $27 = $6;$middle$1 = $middle$054;
      break L1;
     }
     $9 = HEAP32[$6>>2]|0;
     $10 = ($9|0)<($0|0);
     if ($10) {
      $begin$046 = $begin$055;$middle$043 = $middle$054;
      break L3;
     }
     $17 = (($begin$055) + ($middle$054))|0;
     $18 = (($17|0) / 2)&-1;
     $19 = ($18|0)==($begin$055|0);
     $20 = (($begin$055) + 1)|0;
     $begin$1 = $19 ? $20 : $18;
     $21 = (($begin$1) + ($end$0$ph))|0;
     $22 = (($21|0) / 2)&-1;
     $23 = ((32040 + ($1<<6)|0) + ($22<<2)|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($24|0)==(0|0);
     if ($25) {
      $begin$0$lcssa = $begin$1;$middle$0$lcssa = $22;
      label = 4;
      break;
     } else {
      $6 = $24;$begin$055 = $begin$1;$middle$054 = $22;
     }
    }
   }
  } while(0);
  if ((label|0) == 4) {
   label = 0;
   $$old = ($begin$0$lcssa|0)==($end$0$ph|0);
   if ($$old) {
    $27 = 0;$middle$1 = $middle$0$lcssa;
    break;
   } else {
    $begin$046 = $begin$0$lcssa;$middle$043 = $middle$0$lcssa;
   }
  }
  $11 = (($middle$043) + ($end$0$ph))|0;
  $12 = (($11|0) / 2)&-1;
  $13 = ($12|0)==($end$0$ph|0);
  $14 = (($end$0$ph) + -1)|0;
  $end$1 = $13 ? $14 : $12;
  $15 = (($end$1) + ($begin$046))|0;
  $16 = (($15|0) / 2)&-1;
  $begin$0$ph = $begin$046;$end$0$ph = $end$1;$middle$0$ph = $16;
 }
 while(1) {
  $26 = ($middle$1|0)<(1);
  $28 = ($27|0)==(0|0);
  $or$cond37 = $26 | $28;
  if ($or$cond37) {
   $middle$1$lcssa = $middle$1;
   break;
  }
  $29 = HEAP32[$27>>2]|0;
  $30 = (($middle$1) + -1)|0;
  $31 = ((32040 + ($1<<6)|0) + ($30<<2)|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = HEAP32[$32>>2]|0;
  $34 = ($29|0)==($33|0);
  if ($34) {
   $27 = $32;$middle$1 = $30;
  } else {
   $middle$1$lcssa = $middle$1;
   break;
  }
 }
 $$pre20 = ((32040 + ($1<<6)|0) + ($middle$1$lcssa<<2)|0);
 $35 = HEAP32[$$pre20>>2]|0;
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)==($0|0);
 if (!($37)) {
  return;
 }
 $38 = ($35|0)==(0|0);
 L18: do {
  if ($38) {
   $46 = 0;$middle$2$lcssa = $middle$1$lcssa;
  } else {
   $39 = ($35|0)==($inter|0);
   if ($39) {
    $46 = $35;$middle$2$lcssa = $middle$1$lcssa;
   } else {
    $middle$2849 = $middle$1$lcssa;
    while(1) {
     $40 = (($middle$2849) + 1)|0;
     $41 = ((32040 + ($1<<6)|0) + ($40<<2)|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = ($42|0)==(0|0);
     if ($43) {
      $46 = 0;$middle$2$lcssa = $40;
      break L18;
     }
     $$pre = HEAP32[$42>>2]|0;
     $44 = ($$pre|0)==($0|0);
     $45 = ($42|0)!=($inter|0);
     $$ = $45 & $44;
     if ($$) {
      $middle$2849 = $40;
     } else {
      $46 = $42;$middle$2$lcssa = $40;
      break;
     }
    }
   }
  }
 } while(0);
 $47 = ($46|0)==($inter|0);
 if (!($47)) {
  return;
 }
 $48 = ($inter|0)!=(0|0);
 $49 = ($middle$2$lcssa|0)!=(15);
 $50 = $49 & $48;
 if ($50) {
  $51 = ((32040 + ($1<<6)|0) + ($middle$2$lcssa<<2)|0);
  $55 = $51;$middle$37 = $middle$2$lcssa;
  while(1) {
   $52 = (($middle$37) + 1)|0;
   $53 = ((32040 + ($1<<6)|0) + ($52<<2)|0);
   $54 = HEAP32[$53>>2]|0;
   HEAP32[$55>>2] = $54;
   $56 = HEAP32[$53>>2]|0;
   $57 = ($56|0)!=(0|0);
   $58 = ($52|0)!=(15);
   $59 = $58 & $57;
   if ($59) {
    $55 = $53;$middle$37 = $52;
   } else {
    break;
   }
  }
 }
 $60 = (((32040 + ($1<<6)|0)) + 60|0);
 HEAP32[$60>>2] = 0;
 return;
}
function __copy_interface($inter) {
 $inter = $inter|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$03$lcssa = 0, $new_interface$0 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $0 = HEAP32[144>>2]|0;
 $1 = (2280 + (($0*1856)|0)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  $i$03$lcssa = 0;
 } else {
  $4 = (((2280 + (($0*1856)|0)|0)) + 116|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0);
  if ($6) {
   $i$03$lcssa = 1;
  } else {
   $8 = (((2280 + (($0*1856)|0)|0)) + 232|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(0);
   if ($10) {
    $i$03$lcssa = 2;
   } else {
    $11 = (((2280 + (($0*1856)|0)|0)) + 348|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==(0);
    if ($13) {
     $i$03$lcssa = 3;
    } else {
     $14 = (((2280 + (($0*1856)|0)|0)) + 464|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)==(0);
     if ($16) {
      $i$03$lcssa = 4;
     } else {
      $17 = (((2280 + (($0*1856)|0)|0)) + 580|0);
      $18 = HEAP32[$17>>2]|0;
      $19 = ($18|0)==(0);
      if ($19) {
       $i$03$lcssa = 5;
      } else {
       $20 = (((2280 + (($0*1856)|0)|0)) + 696|0);
       $21 = HEAP32[$20>>2]|0;
       $22 = ($21|0)==(0);
       if ($22) {
        $i$03$lcssa = 6;
       } else {
        $23 = (((2280 + (($0*1856)|0)|0)) + 812|0);
        $24 = HEAP32[$23>>2]|0;
        $25 = ($24|0)==(0);
        if ($25) {
         $i$03$lcssa = 7;
        } else {
         $26 = (((2280 + (($0*1856)|0)|0)) + 928|0);
         $27 = HEAP32[$26>>2]|0;
         $28 = ($27|0)==(0);
         if ($28) {
          $i$03$lcssa = 8;
         } else {
          $29 = (((2280 + (($0*1856)|0)|0)) + 1044|0);
          $30 = HEAP32[$29>>2]|0;
          $31 = ($30|0)==(0);
          if ($31) {
           $i$03$lcssa = 9;
          } else {
           $32 = (((2280 + (($0*1856)|0)|0)) + 1160|0);
           $33 = HEAP32[$32>>2]|0;
           $34 = ($33|0)==(0);
           if ($34) {
            $i$03$lcssa = 10;
           } else {
            $35 = (((2280 + (($0*1856)|0)|0)) + 1276|0);
            $36 = HEAP32[$35>>2]|0;
            $37 = ($36|0)==(0);
            if ($37) {
             $i$03$lcssa = 11;
            } else {
             $38 = (((2280 + (($0*1856)|0)|0)) + 1392|0);
             $39 = HEAP32[$38>>2]|0;
             $40 = ($39|0)==(0);
             if ($40) {
              $i$03$lcssa = 12;
             } else {
              $41 = (((2280 + (($0*1856)|0)|0)) + 1508|0);
              $42 = HEAP32[$41>>2]|0;
              $43 = ($42|0)==(0);
              if ($43) {
               $i$03$lcssa = 13;
              } else {
               $44 = (((2280 + (($0*1856)|0)|0)) + 1624|0);
               $45 = HEAP32[$44>>2]|0;
               $46 = ($45|0)==(0);
               if ($46) {
                $i$03$lcssa = 14;
               } else {
                $47 = (((2280 + (($0*1856)|0)|0)) + 1740|0);
                $48 = HEAP32[$47>>2]|0;
                $49 = ($48|0)==(0);
                if ($49) {
                 $i$03$lcssa = 15;
                } else {
                 $new_interface$0 = 0;
                 return ($new_interface$0|0);
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
 $7 = ((2280 + (($0*1856)|0)|0) + (($i$03$lcssa*116)|0)|0);
 dest=$7; src=$inter; stop=dest+116|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $new_interface$0 = $7;
 return ($new_interface$0|0);
}
function __move_interface($inter,$x,$y) {
 $inter = $inter|0;
 $x = +$x;
 $y = +$y;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($inter)) + 8|0);
 HEAPF32[$0>>2] = $x;
 $1 = ((($inter)) + 12|0);
 HEAPF32[$1>>2] = $y;
 $2 = HEAP32[(389572)>>2]|0;
 $3 = (+($2|0));
 $4 = $x / $3;
 $5 = $4;
 $6 = $5 * 2.0;
 $7 = $6 + -1.0;
 $8 = $7;
 $9 = HEAP32[(389576)>>2]|0;
 $10 = (+($9|0));
 $11 = $y / $10;
 $12 = $11;
 $13 = $12 * 2.0;
 $14 = $13 + -1.0;
 $15 = $14;
 $16 = ((($inter)) + 96|0);
 HEAPF32[$16>>2] = $8;
 $17 = ((($inter)) + 100|0);
 HEAPF32[$17>>2] = $15;
 return;
}
function __resize_interface($inter,$size_x,$size_y) {
 $inter = $inter|0;
 $size_x = +$size_x;
 $size_y = +$size_y;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $3 = 0.0, $4 = 0;
 var $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($inter)) + 36|0);
 HEAPF32[$0>>2] = $size_y;
 $1 = ((($inter)) + 40|0);
 HEAPF32[$1>>2] = $size_x;
 $2 = $size_x * 2.0;
 $3 = $size_y * 2.0;
 $4 = ((($inter)) + 16|0);
 $5 = +HEAPF32[$4>>2];
 $6 = (+Math_cos((+$5)));
 $7 = (+Math_sin((+$5)));
 $8 = $2 * $6;
 $9 = HEAP32[(389572)>>2]|0;
 $10 = (+($9|0));
 $11 = $8 / $10;
 $12 = ((($inter)) + 48|0);
 HEAPF32[$12>>2] = $11;
 $13 = $3 * $7;
 $14 = -$13;
 $15 = $14 / $10;
 $16 = ((($inter)) + 64|0);
 HEAPF32[$16>>2] = $15;
 $17 = $2 * $7;
 $18 = HEAP32[(389576)>>2]|0;
 $19 = (+($18|0));
 $20 = $17 / $19;
 $21 = ((($inter)) + 52|0);
 HEAPF32[$21>>2] = $20;
 $22 = $3 * $6;
 $23 = $22 / $19;
 $24 = ((($inter)) + 68|0);
 HEAPF32[$24>>2] = $23;
 return;
}
function __rotate_interface($inter,$rotation) {
 $inter = $inter|0;
 $rotation = +$rotation;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $3 = 0.0;
 var $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($inter)) + 16|0);
 HEAPF32[$0>>2] = $rotation;
 $1 = ((($inter)) + 40|0);
 $2 = +HEAPF32[$1>>2];
 $3 = $2 * 2.0;
 $4 = ((($inter)) + 36|0);
 $5 = +HEAPF32[$4>>2];
 $6 = $5 * 2.0;
 $7 = (+Math_cos((+$rotation)));
 $8 = (+Math_sin((+$rotation)));
 $9 = $3 * $7;
 $10 = HEAP32[(389572)>>2]|0;
 $11 = (+($10|0));
 $12 = $9 / $11;
 $13 = ((($inter)) + 48|0);
 HEAPF32[$13>>2] = $12;
 $14 = $6 * $8;
 $15 = -$14;
 $16 = $15 / $11;
 $17 = ((($inter)) + 64|0);
 HEAPF32[$17>>2] = $16;
 $18 = $3 * $8;
 $19 = HEAP32[(389576)>>2]|0;
 $20 = (+($19|0));
 $21 = $18 / $20;
 $22 = ((($inter)) + 52|0);
 HEAPF32[$22>>2] = $21;
 $23 = $6 * $7;
 $24 = $23 / $20;
 $25 = ((($inter)) + 68|0);
 HEAPF32[$25>>2] = $24;
 return;
}
function __update_interface_screen_size() {
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0;
 var $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$02 = 0, $j$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[144>>2]|0;
 $1 = ($0|0)>(0);
 if (!($1)) {
  return;
 }
 $2 = HEAP32[(389572)>>2]|0;
 $3 = (+($2|0));
 $4 = HEAP32[(389576)>>2]|0;
 $5 = (+($4|0));
 $i$02 = 0;
 while(1) {
  $j$01 = 0;
  while(1) {
   $6 = ((2280 + (($i$02*1856)|0)|0) + (($j$01*116)|0)|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(0);
   if (!($8)) {
    $9 = ((((2280 + (($i$02*1856)|0)|0) + (($j$01*116)|0)|0)) + 40|0);
    $10 = +HEAPF32[$9>>2];
    $11 = $10 * 2.0;
    $12 = ((((2280 + (($i$02*1856)|0)|0) + (($j$01*116)|0)|0)) + 36|0);
    $13 = +HEAPF32[$12>>2];
    $14 = $13 * 2.0;
    $15 = ((((2280 + (($i$02*1856)|0)|0) + (($j$01*116)|0)|0)) + 16|0);
    $16 = +HEAPF32[$15>>2];
    $17 = (+Math_cos((+$16)));
    $18 = (+Math_sin((+$16)));
    $19 = $11 * $17;
    $20 = $19 / $3;
    $21 = ((((2280 + (($i$02*1856)|0)|0) + (($j$01*116)|0)|0)) + 48|0);
    HEAPF32[$21>>2] = $20;
    $22 = $14 * $18;
    $23 = -$22;
    $24 = $23 / $3;
    $25 = ((((2280 + (($i$02*1856)|0)|0) + (($j$01*116)|0)|0)) + 64|0);
    HEAPF32[$25>>2] = $24;
    $26 = $11 * $18;
    $27 = $26 / $5;
    $28 = ((((2280 + (($i$02*1856)|0)|0) + (($j$01*116)|0)|0)) + 52|0);
    HEAPF32[$28>>2] = $27;
    $29 = $14 * $17;
    $30 = $29 / $5;
    $31 = ((((2280 + (($i$02*1856)|0)|0) + (($j$01*116)|0)|0)) + 68|0);
    HEAPF32[$31>>2] = $30;
   }
   $32 = (($j$01) + 1)|0;
   $exitcond = ($32|0)==(16);
   if ($exitcond) {
    break;
   } else {
    $j$01 = $32;
   }
  }
  $33 = (($i$02) + 1)|0;
  $34 = ($33|0)<($0|0);
  if ($34) {
   $i$02 = $33;
  } else {
   break;
  }
 }
 return;
}
function __clean_interface_queue() {
 var $0 = 0, $scevgep = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = HEAP32[144>>2]|0;
 $scevgep = (32040 + ($0<<6)|0);
 dest=$scevgep; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 return;
}
function __Wcreate_arena($size) {
 $size = $size|0;
 var $$ = 0, $0 = 0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sysconf(30)|0);
 $1 = (+($size>>>0));
 $2 = (+($0|0));
 $3 = $1 / $2;
 $4 = (+Math_ceil((+$3)));
 $5 = (~~(($4)));
 $6 = Math_imul($5, $0)|0;
 $7 = (_mmap((0|0),($6|0),3,34,-1,0)|0);
 $8 = ($7|0)==((-1)|0);
 $$ = $8 ? 0 : $7;
 $9 = ($$|0)==(0|0);
 if ($9) {
  return ($$|0);
 }
 HEAP32[$$>>2] = $6;
 $10 = ((($$)) + 4|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($$)) + 20|0);
 $12 = ((($$)) + 8|0);
 HEAP32[$12>>2] = $11;
 $13 = ((($$)) + 16|0);
 HEAP32[$13>>2] = $11;
 $14 = ((($$)) + 40|0);
 $15 = ((($$)) + 12|0);
 HEAP32[$15>>2] = $14;
 HEAP32[$11>>2] = 285278465;
 $16 = ((($$)) + 24|0);
 HEAP32[$16>>2] = $11;
 $17 = ((($$)) + 28|0);
 HEAP32[$17>>2] = $$;
 $18 = ((($$)) + 32|0);
 HEAP32[$18>>2] = $11;
 $19 = ((($$)) + 36|0);
 HEAP32[$19>>2] = -20;
 return ($$|0);
}
function _Wdestroy_arena($arena) {
 $arena = $arena|0;
 var $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$arena>>2]|0;
 $1 = (_munmap(($arena|0),($0|0))|0);
 $2 = ($1|0)==(-1);
 $3 = ($arena|0)==(0|0);
 $4 = $3 | $2;
 $5 = $4&1;
 $$01 = $5 ^ 1;
 return ($$01|0);
}
function __alloc($arena,$size) {
 $arena = $arena|0;
 $size = $size|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0.0, $4 = 0.0;
 var $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, $ceilf = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($arena)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($arena)) + 16|0);
 $3 = (+($size>>>0));
 $4 = $3 * 0.25;
 $ceilf = (+Math_ceil((+$4)));
 $5 = $ceilf;
 $6 = $5 * 4.0;
 $7 = (~~(($6))>>>0);
 $8 = ((($arena)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 24)|0;
 $11 = (($10) + ($7))|0;
 $12 = HEAP32[$arena>>2]|0;
 $13 = ($11>>>0)>($12>>>0);
 if ($13) {
  $$0 = 0;
  return ($$0|0);
 }
 $14 = HEAP32[$2>>2]|0;
 $15 = (($7) + 24)|0;
 $16 = (($15) + ($9))|0;
 HEAP32[$8>>2] = $16;
 $17 = ((($1)) + 24|0);
 HEAP32[$2>>2] = $1;
 $18 = (($1) + ($15)|0);
 HEAP32[$0>>2] = $18;
 HEAP32[$1>>2] = 269488144;
 $19 = ((($1)) + 4|0);
 HEAP32[$19>>2] = $14;
 $20 = ((($1)) + 12|0);
 HEAP32[$20>>2] = $7;
 $21 = ((($1)) + 16|0);
 HEAP32[$21>>2] = $size;
 $22 = ((($1)) + 20|0);
 HEAP32[$22>>2] = 1;
 $23 = ((($1)) + 8|0);
 HEAP32[$23>>2] = $arena;
 $$0 = $17;
 return ($$0|0);
}
function __free($mem) {
 $mem = $mem|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $last_freed_element$0$lcssa = 0, $last_freed_element$02 = 0, $last_freed_element$02$phi = 0, $mem_header$0 = 0, $mem_header$0$lcssa = 0, $mem_header$01 = 0, $mem_header$04 = 0, $memory_freed$0$lcssa = 0, $memory_freed$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($mem)) + -24|0);
 $1 = ((($mem)) + -16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==($0|0);
 if (!($5)) {
  $6 = ((($mem)) + -4|0);
  HEAP32[$6>>2] = 0;
  return;
 }
 $7 = ((($mem)) + -12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 24)|0;
 $10 = ((($mem)) + -20|0);
 $mem_header$01 = HEAP32[$10>>2]|0;
 $11 = HEAP32[$mem_header$01>>2]|0;
 $12 = ($11|0)==(285278465);
 L5: do {
  if ($12) {
   $last_freed_element$0$lcssa = $0;$mem_header$0$lcssa = $mem_header$01;$memory_freed$0$lcssa = $9;
  } else {
   $last_freed_element$02 = $0;$mem_header$04 = $mem_header$01;$memory_freed$03 = $9;
   while(1) {
    $13 = ((($mem_header$04)) + 20|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($14|0)==(0);
    if (!($15)) {
     $last_freed_element$0$lcssa = $last_freed_element$02;$mem_header$0$lcssa = $mem_header$04;$memory_freed$0$lcssa = $memory_freed$03;
     break L5;
    }
    $16 = ((($mem_header$04)) + 12|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = (($memory_freed$03) + 24)|0;
    $19 = (($18) + ($17))|0;
    $20 = ((($mem_header$04)) + 4|0);
    $mem_header$0 = HEAP32[$20>>2]|0;
    $21 = HEAP32[$mem_header$0>>2]|0;
    $22 = ($21|0)==(285278465);
    if ($22) {
     $last_freed_element$0$lcssa = $mem_header$04;$mem_header$0$lcssa = $mem_header$0;$memory_freed$0$lcssa = $19;
     break;
    } else {
     $last_freed_element$02$phi = $mem_header$04;$mem_header$04 = $mem_header$0;$memory_freed$03 = $19;$last_freed_element$02 = $last_freed_element$02$phi;
    }
   }
  }
 } while(0);
 HEAP32[$3>>2] = $mem_header$0$lcssa;
 $23 = ((($2)) + 12|0);
 HEAP32[$23>>2] = $last_freed_element$0$lcssa;
 $24 = ((($2)) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($25) - ($memory_freed$0$lcssa))|0;
 HEAP32[$24>>2] = $26;
 return;
}
function __new_breakpoint($arena) {
 $arena = $arena|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($arena)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 20)|0;
 $3 = HEAP32[$arena>>2]|0;
 $4 = ($2>>>0)>($3>>>0);
 if ($4) {
  $$0 = 0;
  return ($$0|0);
 }
 $5 = ((($arena)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($arena)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$0>>2] = $2;
 $9 = ((($arena)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 HEAP32[$5>>2] = $10;
 $11 = ((($10)) + 20|0);
 HEAP32[$9>>2] = $11;
 $12 = $10;
 HEAP32[$7>>2] = $12;
 HEAP32[$10>>2] = 285278465;
 $13 = ((($10)) + 4|0);
 HEAP32[$13>>2] = $8;
 $14 = ((($10)) + 8|0);
 HEAP32[$14>>2] = $arena;
 $15 = ((($10)) + 12|0);
 HEAP32[$15>>2] = $6;
 $16 = ((($10)) + 16|0);
 HEAP32[$16>>2] = $1;
 $$0 = 1;
 return ($$0|0);
}
function _Wtrash_arena($arena) {
 $arena = $arena|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ((($arena)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)==($3|0);
 if ($4) {
  $5 = ((($arena)) + 16|0);
  HEAP32[$5>>2] = $1;
  $6 = ((($1)) + 20|0);
  $7 = ((($arena)) + 12|0);
  HEAP32[$7>>2] = $6;
  $8 = ((($1)) + 16|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (($9) + 20)|0;
  $11 = ((($arena)) + 4|0);
  HEAP32[$11>>2] = $10;
  return;
 } else {
  $12 = ((($1)) + 16|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($arena)) + 4|0);
  HEAP32[$14>>2] = $13;
  $15 = ((($arena)) + 12|0);
  HEAP32[$15>>2] = $1;
  $16 = ((($1)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($arena)) + 16|0);
  HEAP32[$18>>2] = $17;
  HEAP32[$0>>2] = $3;
  return;
 }
}
function __initialize_memory() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $IsAsync = 0, $IsAsync3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(651796)>>2]|0;
 $AsyncCtx = _emscripten_alloc_async_context(4,sp)|0;
 $1 = (FUNCTION_TABLE_ii[$0 & 255](1048576)|0);
 $IsAsync = ___async;
 if ($IsAsync) {
  HEAP32[$AsyncCtx>>2] = 153;
  sp = STACKTOP;
  return;
 }
 _emscripten_free_async_context(($AsyncCtx|0));
 HEAP32[383536>>2] = $1;
 $2 = HEAP32[(651796)>>2]|0;
 $AsyncCtx2 = _emscripten_alloc_async_context(4,sp)|0;
 $3 = (FUNCTION_TABLE_ii[$2 & 255](32768)|0);
 $IsAsync3 = ___async;
 if ($IsAsync3) {
  HEAP32[$AsyncCtx2>>2] = 154;
  sp = STACKTOP;
  return;
 } else {
  _emscripten_free_async_context(($AsyncCtx2|0));
  HEAP32[383544>>2] = $3;
  return;
 }
}
function __finalize_memory() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[383536>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 (_munmap(($0|0),($1|0))|0);
 $2 = HEAP32[383544>>2]|0;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4|0)==($6|0);
 $8 = ((($4)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 if ($7) {
  $10 = ((($2)) + 16|0);
  HEAP32[$10>>2] = $4;
  $11 = ((($4)) + 20|0);
  $12 = ((($2)) + 12|0);
  HEAP32[$12>>2] = $11;
  $13 = (($9) + 20)|0;
  $14 = ((($2)) + 4|0);
  HEAP32[$14>>2] = $13;
  $20 = HEAP32[383544>>2]|0;
  $21 = HEAP32[$20>>2]|0;
  (_munmap(($20|0),($21|0))|0);
  return;
 } else {
  $15 = ((($2)) + 4|0);
  HEAP32[$15>>2] = $9;
  $16 = ((($2)) + 12|0);
  HEAP32[$16>>2] = $4;
  $17 = ((($4)) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($2)) + 16|0);
  HEAP32[$19>>2] = $18;
  HEAP32[$3>>2] = $6;
  $20 = HEAP32[383544>>2]|0;
  $21 = HEAP32[$20>>2]|0;
  (_munmap(($20|0),($21|0))|0);
  return;
 }
}
function __Walloc($size) {
 $size = $size|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0;
 var $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $ceilf$i = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[383536>>2]|0;
 $1 = ((($0)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 16|0);
 $4 = (+($size>>>0));
 $5 = $4 * 0.25;
 $ceilf$i = (+Math_ceil((+$5)));
 $6 = $ceilf$i;
 $7 = $6 * 4.0;
 $8 = (~~(($7))>>>0);
 $9 = ((($0)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + 24)|0;
 $12 = (($11) + ($8))|0;
 $13 = HEAP32[$0>>2]|0;
 $14 = ($12>>>0)>($13>>>0);
 if ($14) {
  $$0$i = 0;
  return ($$0$i|0);
 }
 $15 = HEAP32[$3>>2]|0;
 $16 = (($8) + 24)|0;
 $17 = (($16) + ($10))|0;
 HEAP32[$9>>2] = $17;
 $18 = ((($2)) + 24|0);
 HEAP32[$3>>2] = $2;
 $19 = (($2) + ($16)|0);
 HEAP32[$1>>2] = $19;
 HEAP32[$2>>2] = 269488144;
 $20 = ((($2)) + 4|0);
 HEAP32[$20>>2] = $15;
 $21 = ((($2)) + 12|0);
 HEAP32[$21>>2] = $8;
 $22 = ((($2)) + 16|0);
 HEAP32[$22>>2] = $size;
 $23 = ((($2)) + 20|0);
 HEAP32[$23>>2] = 1;
 $24 = ((($2)) + 8|0);
 HEAP32[$24>>2] = $0;
 $$0$i = $18;
 return ($$0$i|0);
}
function __Winternal_alloc($size) {
 $size = $size|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0;
 var $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $ceilf$i = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[383544>>2]|0;
 $1 = ((($0)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 16|0);
 $4 = (+($size>>>0));
 $5 = $4 * 0.25;
 $ceilf$i = (+Math_ceil((+$5)));
 $6 = $ceilf$i;
 $7 = $6 * 4.0;
 $8 = (~~(($7))>>>0);
 $9 = ((($0)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + 24)|0;
 $12 = (($11) + ($8))|0;
 $13 = HEAP32[$0>>2]|0;
 $14 = ($12>>>0)>($13>>>0);
 if ($14) {
  $$0$i = 0;
  return ($$0$i|0);
 }
 $15 = HEAP32[$3>>2]|0;
 $16 = (($8) + 24)|0;
 $17 = (($16) + ($10))|0;
 HEAP32[$9>>2] = $17;
 $18 = ((($2)) + 24|0);
 HEAP32[$3>>2] = $2;
 $19 = (($2) + ($16)|0);
 HEAP32[$1>>2] = $19;
 HEAP32[$2>>2] = 269488144;
 $20 = ((($2)) + 4|0);
 HEAP32[$20>>2] = $15;
 $21 = ((($2)) + 12|0);
 HEAP32[$21>>2] = $8;
 $22 = ((($2)) + 16|0);
 HEAP32[$22>>2] = $size;
 $23 = ((($2)) + 20|0);
 HEAP32[$23>>2] = 1;
 $24 = ((($2)) + 8|0);
 HEAP32[$24>>2] = $0;
 $$0$i = $18;
 return ($$0$i|0);
}
function __Wbreakpoint() {
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[383536>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 20)|0;
 $4 = HEAP32[$0>>2]|0;
 $5 = ($3>>>0)>($4>>>0);
 if ($5) {
  $$0$i = 0;
  return ($$0$i|0);
 }
 $6 = ((($0)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($0)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$1>>2] = $3;
 $10 = ((($0)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 HEAP32[$6>>2] = $11;
 $12 = ((($11)) + 20|0);
 HEAP32[$10>>2] = $12;
 $13 = $11;
 HEAP32[$8>>2] = $13;
 HEAP32[$11>>2] = 285278465;
 $14 = ((($11)) + 4|0);
 HEAP32[$14>>2] = $9;
 $15 = ((($11)) + 8|0);
 HEAP32[$15>>2] = $0;
 $16 = ((($11)) + 12|0);
 HEAP32[$16>>2] = $7;
 $17 = ((($11)) + 16|0);
 HEAP32[$17>>2] = $2;
 $$0$i = 1;
 return ($$0$i|0);
}
function __Wtrash() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[383536>>2]|0;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2|0)==($4|0);
 $6 = ((($2)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 if ($5) {
  $8 = ((($0)) + 16|0);
  HEAP32[$8>>2] = $2;
  $9 = ((($2)) + 20|0);
  $10 = ((($0)) + 12|0);
  HEAP32[$10>>2] = $9;
  $11 = (($7) + 20)|0;
  $12 = ((($0)) + 4|0);
  HEAP32[$12>>2] = $11;
  return;
 } else {
  $13 = ((($0)) + 4|0);
  HEAP32[$13>>2] = $7;
  $14 = ((($0)) + 12|0);
  HEAP32[$14>>2] = $2;
  $15 = ((($2)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($0)) + 16|0);
  HEAP32[$17>>2] = $16;
  HEAP32[$1>>2] = $4;
  return;
 }
}
function __initialize_numeric_functions() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$03 = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $t = sp;
 (_ftime(($t|0))|0);
 $0 = HEAP32[$t>>2]|0;
 $1 = ((($t)) + 4|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = $2&65535;
 $4 = $3 << 2;
 $5 = (($4) + ($0))|0;
 HEAP32[383552>>2] = $5;
 $7 = $5;$i$03 = 1;
 while(1) {
  $6 = $7 >>> 30;
  $8 = $6 ^ $7;
  $9 = Math_imul($8, 1812433253)|0;
  $10 = (($9) + ($i$03))|0;
  $11 = (383552 + ($i$03<<2)|0);
  HEAP32[$11>>2] = $10;
  $12 = (($i$03) + 1)|0;
  $exitcond = ($12|0)==(624);
  if ($exitcond) {
   break;
  } else {
   $7 = $10;$i$03 = $12;
  }
 }
 HEAP32[386048>>2] = 0;
 $13 = HEAP32[383552>>2]|0;
 $14 = $13 & 1;
 $15 = HEAP32[(383564)>>2]|0;
 $16 = $15 & 331998852;
 $17 = $16 | $14;
 $18 = $16 >>> 16;
 $19 = $18 ^ $17;
 $20 = $19 >>> 8;
 $21 = $20 ^ $19;
 $22 = $21 >>> 4;
 $23 = $22 ^ $21;
 $24 = $23 >>> 2;
 $25 = $24 ^ $23;
 $26 = $25 >>> 1;
 $27 = $26 ^ $25;
 $28 = $27 & 1;
 $29 = ($28|0)==(0);
 if (!($29)) {
  HEAP32[386048>>2] = -1;
  __regenerate_sequence();
  STACKTOP = sp;return;
 }
 $30 = ($14|0)==(0);
 if ($30) {
  $32 = (($13) + 1)|0;
  HEAP32[383552>>2] = $32;
  HEAP32[386048>>2] = -1;
  __regenerate_sequence();
  STACKTOP = sp;return;
 } else {
  $31 = (($13) + -1)|0;
  HEAP32[383552>>2] = $31;
  HEAP32[386048>>2] = -1;
  __regenerate_sequence();
  STACKTOP = sp;return;
 }
}
function __finalize_numeric_functions() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __random() {
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[386048>>2]|0;
 $1 = ($0|0)<(623);
 if ($1) {
  $2 = (($0) + 1)|0;
  HEAP32[386048>>2] = $2;
  $4 = $2;
 } else {
  HEAP32[386048>>2] = 0;
  __regenerate_sequence();
  $$pre = HEAP32[386048>>2]|0;
  $4 = $$pre;
 }
 $3 = (383552 + ($4<<2)|0);
 $5 = HEAP32[$3>>2]|0;
 return ($5|0);
}
function __regenerate_sequence() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$012 = 0, $j$0 = 0, $j$0$v = 0, $r1$sroa$0$08 = 0, $r1$sroa$0$08$phi = 0;
 var $r1$sroa$3$09 = 0, $r1$sroa$3$09$phi = 0, $r1$sroa$5$010 = 0, $r1$sroa$5$010$phi = 0, $r1$sroa$7$011 = 0, $r1$sroa$7$011$phi = 0, $r2$sroa$0$016 = 0, $r2$sroa$0$016$pre = 0, $r2$sroa$4$015 = 0, $r2$sroa$4$015$pre = 0, $r2$sroa$5$014 = 0, $r2$sroa$5$014$pre = 0, $r2$sroa$6$013 = 0, $r2$sroa$6$013$pre = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(386016)>>2]|0;
 $1 = HEAP32[(386020)>>2]|0;
 $2 = HEAP32[(386024)>>2]|0;
 $3 = HEAP32[(386028)>>2]|0;
 $r2$sroa$6$013$pre = HEAP32[(386044)>>2]|0;
 $r2$sroa$5$014$pre = HEAP32[(386040)>>2]|0;
 $r2$sroa$4$015$pre = HEAP32[(386036)>>2]|0;
 $r2$sroa$0$016$pre = HEAP32[(386032)>>2]|0;
 $i$012 = 0;$r1$sroa$0$08 = $0;$r1$sroa$3$09 = $1;$r1$sroa$5$010 = $2;$r1$sroa$7$011 = $3;$r2$sroa$0$016 = $r2$sroa$0$016$pre;$r2$sroa$4$015 = $r2$sroa$4$015$pre;$r2$sroa$5$014 = $r2$sroa$5$014$pre;$r2$sroa$6$013 = $r2$sroa$6$013$pre;
 while(1) {
  $4 = $i$012 << 2;
  $5 = $4 | 3;
  $6 = (383552 + ($5<<2)|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $4 | 2;
  $9 = (383552 + ($8<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $4 | 1;
  $12 = (383552 + ($11<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (383552 + ($4<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $10 << 8;
  $17 = $15 << 8;
  $18 = $13 >>> 24;
  $19 = $18 | $16;
  $20 = (_bitshift64Lshr(($15|0),($13|0),24)|0);
  $21 = tempRet0;
  $22 = (_bitshift64Lshr(($10|0),($7|0),24)|0);
  $23 = tempRet0;
  $24 = (_bitshift64Lshr(($r1$sroa$5$010|0),($r1$sroa$7$011|0),8)|0);
  $25 = tempRet0;
  $26 = (_bitshift64Lshr(($r1$sroa$0$08|0),($r1$sroa$3$09|0),8)|0);
  $27 = tempRet0;
  $28 = (_bitshift64Shl(($r1$sroa$5$010|0),0,56)|0);
  $29 = tempRet0;
  $26 | $28;
  $30 = $27 | $29;
  $31 = $r1$sroa$7$011 >>> 8;
  $32 = ($i$012|0)<(34);
  $j$0$v = $32 ? 122 : -34;
  $j$0 = (($j$0$v) + ($i$012))|0;
  $33 = $j$0 << 2;
  $34 = (383552 + ($33<<2)|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $35 >>> 11;
  $37 = $36 & 2097135;
  $38 = $r2$sroa$0$016 << 18;
  $39 = $38 ^ $26;
  $40 = $39 ^ $15;
  $41 = $40 ^ $17;
  $42 = $41 ^ $37;
  HEAP32[$14>>2] = $42;
  $43 = $33 | 1;
  $44 = (383552 + ($43<<2)|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = $45 >>> 11;
  $47 = $46 & 2018175;
  $48 = $r2$sroa$4$015 << 18;
  $49 = $48 ^ $30;
  $50 = $49 ^ $13;
  $51 = $50 ^ $20;
  $52 = $51 ^ $47;
  HEAP32[$12>>2] = $52;
  $53 = $33 | 2;
  $54 = (383552 + ($53<<2)|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = $55 >>> 11;
  $57 = $56 & 1769471;
  $58 = $r2$sroa$5$014 << 18;
  $59 = $24 ^ $58;
  $60 = $59 ^ $19;
  $61 = $60 ^ $10;
  $62 = $61 ^ $57;
  HEAP32[$9>>2] = $62;
  $63 = $33 | 3;
  $64 = (383552 + ($63<<2)|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = $65 >>> 11;
  $67 = $66 & 2097142;
  $68 = $r2$sroa$6$013 << 18;
  $69 = $68 ^ $31;
  $70 = $69 ^ $22;
  $71 = $70 ^ $7;
  $72 = $71 ^ $67;
  HEAP32[$6>>2] = $72;
  $73 = (($i$012) + 1)|0;
  $exitcond = ($73|0)==(156);
  if ($exitcond) {
   break;
  } else {
   $r1$sroa$7$011$phi = $r2$sroa$6$013;$r1$sroa$5$010$phi = $r2$sroa$5$014;$r1$sroa$3$09$phi = $r2$sroa$4$015;$r1$sroa$0$08$phi = $r2$sroa$0$016;$i$012 = $73;$r2$sroa$0$016 = $42;$r2$sroa$4$015 = $52;$r2$sroa$5$014 = $62;$r2$sroa$6$013 = $72;$r1$sroa$7$011 = $r1$sroa$7$011$phi;$r1$sroa$5$010 = $r1$sroa$5$010$phi;$r1$sroa$3$09 = $r1$sroa$3$09$phi;$r1$sroa$0$08 = $r1$sroa$0$08$phi;
  }
 }
 return;
}
function __reload_plugin($plugin_id) {
 $plugin_id = $plugin_id|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($plugin_id|0)!=(-1);
 return ($0|0);
}
function __compile_shader($source,$vertex) {
 $source = $source|0;
 $vertex = $vertex|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $IsAsync = 0, $logSize = 0, $shader$0 = 0, $success = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = sp + 12|0;
 $success = sp + 8|0;
 $logSize = sp + 4|0;
 HEAP32[$0>>2] = $source;
 HEAP32[$success>>2] = 0;
 HEAP32[$logSize>>2] = 0;
 if ($vertex) {
  $1 = (_glCreateShader(35633)|0);
  $shader$0 = $1;
 } else {
  $2 = (_glCreateShader(35632)|0);
  $shader$0 = $2;
 }
 _glShaderSource(($shader$0|0),1,($0|0),(0|0));
 _glCompileShader(($shader$0|0));
 _glGetShaderiv(($shader$0|0),35713,($success|0));
 $3 = HEAP32[$success>>2]|0;
 $4 = ($3|0)==(0);
 if (!($4)) {
  STACKTOP = sp;return ($shader$0|0);
 }
 _glGetShaderiv(($shader$0|0),35716,($logSize|0));
 $5 = HEAP32[$logSize>>2]|0;
 $6 = (__Winternal_alloc($5)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  $8 = HEAP32[_stderr>>2]|0;
  (_fwrite((387640|0),213,1,($8|0))|0);
  _exit(1);
  // unreachable;
 }
 $9 = HEAP32[$logSize>>2]|0;
 _glGetShaderInfoLog(($shader$0|0),($9|0),(0|0),($6|0));
 $10 = HEAP32[_stderr>>2]|0;
 HEAP32[$vararg_buffer>>2] = $6;
 (_fprintf(($10|0),(387856|0),($vararg_buffer|0))|0);
 $11 = HEAP32[(651808)>>2]|0;
 $AsyncCtx = _emscripten_alloc_async_context(4,sp)|0;
 FUNCTION_TABLE_vi[$11 & 255]($6);
 $IsAsync = ___async;
 if ($IsAsync) {
  HEAP32[$AsyncCtx>>2] = 155;
  sp = STACKTOP;
  STACKTOP = sp;return 0;
 } else {
  _emscripten_free_async_context(($AsyncCtx|0));
  _exit(1);
  // unreachable;
 }
 return (0)|0;
}
function __link_and_clean_shaders($vertex,$fragment) {
 $vertex = $vertex|0;
 $fragment = $fragment|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $IsAsync = 0, $isLinked = 0, $logSize = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $isLinked = sp + 8|0;
 $logSize = sp + 4|0;
 $0 = (_glCreateProgram()|0);
 _glAttachShader(($0|0),($vertex|0));
 _glAttachShader(($0|0),($fragment|0));
 _glLinkProgram(($0|0));
 HEAP32[$isLinked>>2] = 0;
 HEAP32[$logSize>>2] = 0;
 _glGetProgramiv(($0|0),35714,($isLinked|0));
 $1 = HEAP32[$isLinked>>2]|0;
 $2 = ($1|0)==(0);
 if (!($2)) {
  _glDetachShader(($0|0),($vertex|0));
  _glDetachShader(($0|0),($fragment|0));
  STACKTOP = sp;return ($0|0);
 }
 _glGetShaderiv(($0|0),35716,($logSize|0));
 $3 = HEAP32[$logSize>>2]|0;
 $4 = (__Winternal_alloc($3)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  $6 = HEAP32[_stderr>>2]|0;
  (_fwrite((387904|0),211,1,($6|0))|0);
  _exit(1);
  // unreachable;
 }
 $7 = HEAP32[$logSize>>2]|0;
 _glGetShaderInfoLog(($0|0),($7|0),(0|0),($4|0));
 $8 = HEAP32[_stderr>>2]|0;
 HEAP32[$vararg_buffer>>2] = $4;
 (_fprintf(($8|0),(388120|0),($vararg_buffer|0))|0);
 $9 = HEAP32[(651808)>>2]|0;
 $AsyncCtx = _emscripten_alloc_async_context(4,sp)|0;
 FUNCTION_TABLE_vi[$9 & 255]($4);
 $IsAsync = ___async;
 if ($IsAsync) {
  HEAP32[$AsyncCtx>>2] = 156;
  sp = STACKTOP;
  STACKTOP = sp;return 0;
 } else {
  _emscripten_free_async_context(($AsyncCtx|0));
  _exit(1);
  // unreachable;
 }
 return (0)|0;
}
function __compile_and_insert_new_shader($dir,$position) {
 $dir = $dir|0;
 $position = $position|0;
 var $$lcssa8 = 0, $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $AsyncCtx = 0, $AsyncCtx28 = 0, $AsyncCtx32 = 0, $AsyncCtx36 = 0, $AsyncCtx40 = 0, $AsyncCtx44 = 0, $AsyncCtx48 = 0, $AsyncCtx52 = 0, $AsyncCtx56 = 0, $IsAsync = 0;
 var $IsAsync29 = 0, $IsAsync33 = 0, $IsAsync37 = 0, $IsAsync41 = 0, $IsAsync45 = 0, $IsAsync49 = 0, $IsAsync53 = 0, $IsAsync57 = 0, $attr = 0, $attr2 = 0, $endptr = 0, $endptr2 = 0, $fragment$0 = 0, $fragment_file$0 = 0, $fragment_size$0 = 0, $fragment_size$1 = 0, $fragment_size$2 = 0, $fragment_source$0 = 0, $i$0 = 0, $i$0$lcssa = 0;
 var $or$cond = 0, $or$cond5 = 0, $p$0 = 0, $p$1 = 0, $p$1$lcssa = 0, $p$2$lcssa = 0, $p$26 = 0, $p$26$phi = 0, $strlen = 0, $strlen1 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer17 = 0, $vararg_buffer20 = 0, $vararg_buffer23 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0;
 var $vertex$0 = 0, $vertex_file$0 = 0, $vertex_size$0 = 0, $vertex_size$1 = 0, $vertex_source$0 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer23 = sp + 72|0;
 $vararg_buffer20 = sp + 64|0;
 $vararg_buffer17 = sp + 56|0;
 $vararg_buffer14 = sp + 48|0;
 $vararg_buffer11 = sp + 40|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $attr = sp + 152|0;
 $attr2 = sp + 76|0;
 $0 = (33240 + (($position*172)|0)|0);
 HEAP8[$0>>0] = 1;
 $p$0 = $dir;
 while(1) {
  $1 = HEAP8[$p$0>>0]|0;
  $2 = ($1<<24>>24)==(0);
  $3 = ((($p$0)) + 1|0);
  if ($2) {
   $p$1 = $p$0;
   break;
  } else {
   $p$0 = $3;
  }
 }
 while(1) {
  $4 = ((($p$1)) + -1|0);
  $5 = HEAP8[$4>>0]|0;
  $6 = ($5<<24>>24)==(47);
  if ($6) {
   $p$1 = $4;
  } else {
   $$lcssa8 = $5;$p$1$lcssa = $p$1;
   break;
  }
 }
 $7 = ((($p$1$lcssa)) + -1|0);
 $8 = ($$lcssa8<<24>>24)==(47);
 $9 = ($7|0)==($dir|0);
 $or$cond5 = $8 | $9;
 if ($or$cond5) {
  $p$2$lcssa = $p$1$lcssa;
 } else {
  $11 = $7;$p$26 = $p$1$lcssa;
  while(1) {
   $$phi$trans$insert = ((($p$26)) + -2|0);
   $$pre = HEAP8[$$phi$trans$insert>>0]|0;
   $10 = ((($11)) + -1|0);
   $12 = ($$pre<<24>>24)==(47);
   $13 = ($10|0)==($dir|0);
   $or$cond = $12 | $13;
   if ($or$cond) {
    $p$2$lcssa = $11;
    break;
   } else {
    $p$26$phi = $11;$11 = $10;$p$26 = $p$26$phi;
   }
  }
 }
 $i$0 = 0;
 while(1) {
  $14 = (($p$2$lcssa) + ($i$0)|0);
  $15 = HEAP8[$14>>0]|0;
  if ((($15<<24>>24) == 47) | (($15<<24>>24) == 0)) {
   $i$0$lcssa = $i$0;
   break;
  }
  $16 = ($i$0|0)<(127);
  if (!($16)) {
   $i$0$lcssa = $i$0;
   break;
  }
  $17 = ((((33240 + (($position*172)|0)|0)) + 8|0) + ($i$0)|0);
  HEAP8[$17>>0] = $15;
  $18 = (($i$0) + 1)|0;
  $i$0 = $18;
 }
 $19 = ((((33240 + (($position*172)|0)|0)) + 8|0) + ($i$0$lcssa)|0);
 HEAP8[$19>>0] = 0;
 $20 = (_strlen(($dir|0))|0);
 $21 = (($20) + 13)|0;
 $22 = (__Winternal_alloc($21)|0);
 HEAP8[$22>>0] = 0;
 (_strcat(($22|0),($dir|0))|0);
 $strlen = (_strlen(($22|0))|0);
 $endptr = (($22) + ($strlen)|0);
 dest=$endptr; src=388160; stop=dest+13|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $23 = (_fopen(($22|0),(389080|0))|0);
 $24 = ($23|0)==(0|0);
 $25 = (((33240 + (($position*172)|0)|0)) + 164|0);
 do {
  if ($24) {
   HEAP32[$25>>2] = 0;
   $26 = HEAP32[(651808)>>2]|0;
   $AsyncCtx = _emscripten_alloc_async_context(104,sp)|0;
   FUNCTION_TABLE_vi[$26 & 255]($22);
   $IsAsync = ___async;
   if ($IsAsync) {
    HEAP32[$AsyncCtx>>2] = 157;
    $27 = ((($AsyncCtx)) + 4|0);
    HEAP32[$27>>2] = $vararg_buffer14;
    $28 = ((($AsyncCtx)) + 8|0);
    HEAP32[$28>>2] = $vararg_buffer14;
    $29 = ((($AsyncCtx)) + 12|0);
    HEAP32[$29>>2] = $25;
    $30 = ((($AsyncCtx)) + 16|0);
    HEAP32[$30>>2] = $dir;
    $31 = ((($AsyncCtx)) + 20|0);
    HEAP32[$31>>2] = $position;
    $32 = ((($AsyncCtx)) + 24|0);
    HEAP32[$32>>2] = $attr2;
    $33 = ((($AsyncCtx)) + 28|0);
    HEAP32[$33>>2] = $vararg_buffer11;
    $34 = ((($AsyncCtx)) + 32|0);
    HEAP32[$34>>2] = $vararg_buffer11;
    $35 = ((($AsyncCtx)) + 36|0);
    HEAP32[$35>>2] = $vararg_buffer8;
    $36 = ((($AsyncCtx)) + 40|0);
    HEAP32[$36>>2] = $vararg_buffer8;
    $37 = ((($AsyncCtx)) + 44|0);
    HEAP32[$37>>2] = $vararg_buffer6;
    $38 = ((($AsyncCtx)) + 48|0);
    HEAP32[$38>>2] = $vararg_buffer6;
    $39 = ((($AsyncCtx)) + 52|0);
    HEAP32[$39>>2] = $vararg_buffer3;
    $40 = ((($AsyncCtx)) + 56|0);
    HEAP32[$40>>2] = $vararg_buffer3;
    $41 = ((($AsyncCtx)) + 60|0);
    HEAP32[$41>>2] = $vararg_buffer23;
    $42 = ((($AsyncCtx)) + 64|0);
    HEAP32[$42>>2] = $vararg_buffer23;
    $43 = ((($AsyncCtx)) + 68|0);
    HEAP32[$43>>2] = $attr;
    $44 = ((($AsyncCtx)) + 72|0);
    HEAP32[$44>>2] = $vararg_buffer1;
    $45 = ((($AsyncCtx)) + 76|0);
    HEAP32[$45>>2] = $vararg_buffer1;
    $46 = ((($AsyncCtx)) + 80|0);
    HEAP32[$46>>2] = $vararg_buffer;
    $47 = ((($AsyncCtx)) + 84|0);
    HEAP32[$47>>2] = $vararg_buffer;
    $48 = ((($AsyncCtx)) + 88|0);
    HEAP32[$48>>2] = $vararg_buffer20;
    $49 = ((($AsyncCtx)) + 92|0);
    HEAP32[$49>>2] = $vararg_buffer20;
    $50 = ((($AsyncCtx)) + 96|0);
    HEAP32[$50>>2] = $vararg_buffer17;
    $51 = ((($AsyncCtx)) + 100|0);
    HEAP32[$51>>2] = $vararg_buffer17;
    sp = STACKTOP;
    STACKTOP = sp;return;
   } else {
    _emscripten_free_async_context(($AsyncCtx|0));
    $vertex_file$0 = 0;
    break;
   }
  } else {
   HEAP32[$25>>2] = $22;
   (_fclose(($23|0))|0);
   $vertex_file$0 = $22;
  }
 } while(0);
 $52 = (_strlen(($dir|0))|0);
 $53 = (($52) + 15)|0;
 $54 = (__Winternal_alloc($53)|0);
 HEAP8[$54>>0] = 0;
 (_strcat(($54|0),($dir|0))|0);
 $strlen1 = (_strlen(($54|0))|0);
 $endptr2 = (($54) + ($strlen1)|0);
 dest=$endptr2; src=388176; stop=dest+15|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $55 = (_fopen(($54|0),(389080|0))|0);
 $56 = ($55|0)==(0|0);
 $57 = (((33240 + (($position*172)|0)|0)) + 168|0);
 do {
  if ($56) {
   HEAP32[$57>>2] = 0;
   $58 = HEAP32[(651808)>>2]|0;
   $AsyncCtx28 = _emscripten_alloc_async_context(108,sp)|0;
   FUNCTION_TABLE_vi[$58 & 255]($54);
   $IsAsync29 = ___async;
   if ($IsAsync29) {
    HEAP32[$AsyncCtx28>>2] = 158;
    $59 = ((($AsyncCtx28)) + 4|0);
    HEAP32[$59>>2] = $vararg_buffer14;
    $60 = ((($AsyncCtx28)) + 8|0);
    HEAP32[$60>>2] = $vertex_file$0;
    $61 = ((($AsyncCtx28)) + 12|0);
    HEAP32[$61>>2] = $vararg_buffer14;
    $62 = ((($AsyncCtx28)) + 16|0);
    HEAP32[$62>>2] = $25;
    $63 = ((($AsyncCtx28)) + 20|0);
    HEAP32[$63>>2] = $57;
    $64 = ((($AsyncCtx28)) + 24|0);
    HEAP32[$64>>2] = $attr2;
    $65 = ((($AsyncCtx28)) + 28|0);
    HEAP32[$65>>2] = $vararg_buffer11;
    $66 = ((($AsyncCtx28)) + 32|0);
    HEAP32[$66>>2] = $vararg_buffer11;
    $67 = ((($AsyncCtx28)) + 36|0);
    HEAP32[$67>>2] = $vararg_buffer8;
    $68 = ((($AsyncCtx28)) + 40|0);
    HEAP32[$68>>2] = $vararg_buffer8;
    $69 = ((($AsyncCtx28)) + 44|0);
    HEAP32[$69>>2] = $vararg_buffer6;
    $70 = ((($AsyncCtx28)) + 48|0);
    HEAP32[$70>>2] = $vararg_buffer6;
    $71 = ((($AsyncCtx28)) + 52|0);
    HEAP32[$71>>2] = $vararg_buffer3;
    $72 = ((($AsyncCtx28)) + 56|0);
    HEAP32[$72>>2] = $vararg_buffer3;
    $73 = ((($AsyncCtx28)) + 60|0);
    HEAP32[$73>>2] = $vararg_buffer23;
    $74 = ((($AsyncCtx28)) + 64|0);
    HEAP32[$74>>2] = $vararg_buffer23;
    $75 = ((($AsyncCtx28)) + 68|0);
    HEAP32[$75>>2] = $attr;
    $76 = ((($AsyncCtx28)) + 72|0);
    HEAP32[$76>>2] = $vararg_buffer1;
    $77 = ((($AsyncCtx28)) + 76|0);
    HEAP32[$77>>2] = $vararg_buffer1;
    $78 = ((($AsyncCtx28)) + 80|0);
    HEAP32[$78>>2] = $vararg_buffer;
    $79 = ((($AsyncCtx28)) + 84|0);
    HEAP32[$79>>2] = $vararg_buffer;
    $80 = ((($AsyncCtx28)) + 88|0);
    HEAP32[$80>>2] = $vararg_buffer20;
    $81 = ((($AsyncCtx28)) + 92|0);
    HEAP32[$81>>2] = $vararg_buffer20;
    $82 = ((($AsyncCtx28)) + 96|0);
    HEAP32[$82>>2] = $position;
    $83 = ((($AsyncCtx28)) + 100|0);
    HEAP32[$83>>2] = $vararg_buffer17;
    $84 = ((($AsyncCtx28)) + 104|0);
    HEAP32[$84>>2] = $vararg_buffer17;
    sp = STACKTOP;
    STACKTOP = sp;return;
   } else {
    _emscripten_free_async_context(($AsyncCtx28|0));
    $fragment_file$0 = 0;
    break;
   }
  } else {
   HEAP32[$57>>2] = $54;
   (_fclose(($55|0))|0);
   $fragment_file$0 = $54;
  }
 } while(0);
 $85 = HEAP32[$25>>2]|0;
 $86 = ($85|0)==(0|0);
 do {
  if ($86) {
   $vertex_size$1 = 0;
  } else {
   $87 = (_open(($85|0),0,($vararg_buffer|0))|0);
   $88 = ($87|0)<(0);
   if ($88) {
    $89 = HEAP32[_stderr>>2]|0;
    $90 = HEAP32[$25>>2]|0;
    HEAP32[$vararg_buffer1>>2] = $90;
    (_fprintf(($89|0),(388192|0),($vararg_buffer1|0))|0);
    HEAP32[$25>>2] = 0;
    $vertex_size$1 = 0;
    break;
   }
   $91 = (_fstat(($87|0),($attr|0))|0);
   $92 = ($91|0)<(0);
   if ($92) {
    $93 = HEAP32[_stderr>>2]|0;
    $94 = HEAP32[$25>>2]|0;
    HEAP32[$vararg_buffer3>>2] = $94;
    (_fprintf(($93|0),(388288|0),($vararg_buffer3|0))|0);
    HEAP32[$25>>2] = 0;
    $vertex_size$0 = 0;
   } else {
    $95 = ((($attr)) + 36|0);
    $96 = HEAP32[$95>>2]|0;
    $vertex_size$0 = $96;
   }
   (_close(($87|0))|0);
   $vertex_size$1 = $vertex_size$0;
  }
 } while(0);
 $97 = HEAP32[$57>>2]|0;
 $98 = ($97|0)==(0|0);
 if ($98) {
  $fragment_size$2 = 0;
 } else {
  $99 = (_open(($97|0),0,($vararg_buffer6|0))|0);
  $100 = ($99|0)<(0);
  if ($100) {
   $101 = HEAP32[_stderr>>2]|0;
   $102 = HEAP32[$57>>2]|0;
   HEAP32[$vararg_buffer8>>2] = $102;
   (_fprintf(($101|0),(388400|0),($vararg_buffer8|0))|0);
   HEAP32[$57>>2] = 0;
   $fragment_size$1 = 0;
  } else {
   $103 = (_fstat(($99|0),($attr2|0))|0);
   $104 = ($103|0)<(0);
   if ($104) {
    $105 = HEAP32[_stderr>>2]|0;
    $106 = HEAP32[$57>>2]|0;
    HEAP32[$vararg_buffer11>>2] = $106;
    (_fprintf(($105|0),(388288|0),($vararg_buffer11|0))|0);
    HEAP32[$57>>2] = 0;
    $fragment_size$0 = 0;
   } else {
    $107 = ((($attr2)) + 36|0);
    $108 = HEAP32[$107>>2]|0;
    $fragment_size$0 = $108;
   }
   (_close(($99|0))|0);
   $fragment_size$1 = $fragment_size$0;
  }
  $fragment_size$2 = $fragment_size$1;
 }
 $109 = HEAP32[$25>>2]|0;
 $110 = ($109|0)==(0|0);
 if ($110) {
  $vertex_source$0 = 0;
 } else {
  $111 = (__Winternal_alloc($vertex_size$1)|0);
  $112 = ($111|0)==(0|0);
  if ($112) {
   $113 = HEAP32[_stderr>>2]|0;
   HEAP32[$vararg_buffer14>>2] = $vertex_file$0;
   (_fprintf(($113|0),(388496|0),($vararg_buffer14|0))|0);
   HEAP32[$25>>2] = 0;
   $vertex_source$0 = 0;
  } else {
   $vertex_source$0 = $111;
  }
 }
 $114 = HEAP32[$57>>2]|0;
 $115 = ($114|0)==(0|0);
 if ($115) {
  $fragment_source$0 = 0;
 } else {
  $116 = (__Winternal_alloc($fragment_size$2)|0);
  $117 = ($116|0)==(0|0);
  if ($117) {
   $118 = HEAP32[_stderr>>2]|0;
   HEAP32[$vararg_buffer17>>2] = $fragment_file$0;
   (_fprintf(($118|0),(388496|0),($vararg_buffer17|0))|0);
   HEAP32[$57>>2] = 0;
   $fragment_source$0 = 0;
  } else {
   $fragment_source$0 = $116;
  }
 }
 $119 = HEAP32[$25>>2]|0;
 $120 = ($119|0)==(0|0);
 do {
  if (!($120)) {
   $121 = (_fopen(($119|0),(389080|0))|0);
   $122 = ($121|0)==(0|0);
   if ($122) {
    $123 = HEAP32[_stderr>>2]|0;
    HEAP32[$vararg_buffer20>>2] = $vertex_file$0;
    (_fprintf(($123|0),(388568|0),($vararg_buffer20|0))|0);
    _perror((0|0));
    HEAP32[$25>>2] = 0;
    break;
   } else {
    (_fread(($vertex_source$0|0),1,($vertex_size$1|0),($121|0))|0);
    $124 = (($vertex_size$1) + -1)|0;
    $125 = (($vertex_source$0) + ($124)|0);
    HEAP8[$125>>0] = 0;
    (_fclose(($121|0))|0);
    break;
   }
  }
 } while(0);
 $126 = HEAP32[$57>>2]|0;
 $127 = ($126|0)==(0|0);
 do {
  if (!($127)) {
   $128 = (_fopen(($126|0),(389080|0))|0);
   $129 = ($128|0)==(0|0);
   if ($129) {
    $130 = HEAP32[_stderr>>2]|0;
    HEAP32[$vararg_buffer23>>2] = $fragment_file$0;
    (_fprintf(($130|0),(388568|0),($vararg_buffer23|0))|0);
    _perror((0|0));
    HEAP32[$57>>2] = 0;
    break;
   } else {
    (_fread(($fragment_source$0|0),1,($fragment_size$2|0),($128|0))|0);
    $131 = (($fragment_size$2) + -1)|0;
    $132 = (($fragment_source$0) + ($131)|0);
    HEAP8[$132>>0] = 0;
    (_fclose(($128|0))|0);
    break;
   }
  }
 } while(0);
 $133 = HEAP32[$25>>2]|0;
 $134 = ($133|0)==(0|0);
 do {
  if ($134) {
   $AsyncCtx52 = _emscripten_alloc_async_context(20,sp)|0;
   $140 = (__compile_shader(386056,1)|0);
   $IsAsync53 = ___async;
   if ($IsAsync53) {
    HEAP32[$AsyncCtx52>>2] = 160;
    $141 = ((($AsyncCtx52)) + 4|0);
    HEAP32[$141>>2] = $vertex_source$0;
    $142 = ((($AsyncCtx52)) + 8|0);
    HEAP32[$142>>2] = $fragment_source$0;
    $143 = ((($AsyncCtx52)) + 12|0);
    HEAP32[$143>>2] = $57;
    $144 = ((($AsyncCtx52)) + 16|0);
    HEAP32[$144>>2] = $position;
    sp = STACKTOP;
    STACKTOP = sp;return;
   } else {
    _emscripten_free_async_context(($AsyncCtx52|0));
    $vertex$0 = $140;
    break;
   }
  } else {
   $AsyncCtx56 = _emscripten_alloc_async_context(20,sp)|0;
   $135 = (__compile_shader($vertex_source$0,1)|0);
   $IsAsync57 = ___async;
   if ($IsAsync57) {
    HEAP32[$AsyncCtx56>>2] = 159;
    $136 = ((($AsyncCtx56)) + 4|0);
    HEAP32[$136>>2] = $vertex_source$0;
    $137 = ((($AsyncCtx56)) + 8|0);
    HEAP32[$137>>2] = $fragment_source$0;
    $138 = ((($AsyncCtx56)) + 12|0);
    HEAP32[$138>>2] = $57;
    $139 = ((($AsyncCtx56)) + 16|0);
    HEAP32[$139>>2] = $position;
    sp = STACKTOP;
    STACKTOP = sp;return;
   } else {
    _emscripten_free_async_context(($AsyncCtx56|0));
    $vertex$0 = $135;
    break;
   }
  }
 } while(0);
 $145 = HEAP32[$57>>2]|0;
 $146 = ($145|0)==(0|0);
 do {
  if ($146) {
   $AsyncCtx44 = _emscripten_alloc_async_context(20,sp)|0;
   $152 = (__compile_shader(386600,0)|0);
   $IsAsync45 = ___async;
   if ($IsAsync45) {
    HEAP32[$AsyncCtx44>>2] = 162;
    $153 = ((($AsyncCtx44)) + 4|0);
    HEAP32[$153>>2] = $vertex$0;
    $154 = ((($AsyncCtx44)) + 8|0);
    HEAP32[$154>>2] = $position;
    $155 = ((($AsyncCtx44)) + 12|0);
    HEAP32[$155>>2] = $fragment_source$0;
    $156 = ((($AsyncCtx44)) + 16|0);
    HEAP32[$156>>2] = $vertex_source$0;
    sp = STACKTOP;
    STACKTOP = sp;return;
   } else {
    _emscripten_free_async_context(($AsyncCtx44|0));
    $fragment$0 = $152;
    break;
   }
  } else {
   $AsyncCtx48 = _emscripten_alloc_async_context(20,sp)|0;
   $147 = (__compile_shader($fragment_source$0,0)|0);
   $IsAsync49 = ___async;
   if ($IsAsync49) {
    HEAP32[$AsyncCtx48>>2] = 161;
    $148 = ((($AsyncCtx48)) + 4|0);
    HEAP32[$148>>2] = $vertex$0;
    $149 = ((($AsyncCtx48)) + 8|0);
    HEAP32[$149>>2] = $position;
    $150 = ((($AsyncCtx48)) + 12|0);
    HEAP32[$150>>2] = $fragment_source$0;
    $151 = ((($AsyncCtx48)) + 16|0);
    HEAP32[$151>>2] = $vertex_source$0;
    sp = STACKTOP;
    STACKTOP = sp;return;
   } else {
    _emscripten_free_async_context(($AsyncCtx48|0));
    $fragment$0 = $147;
    break;
   }
  }
 } while(0);
 $AsyncCtx40 = _emscripten_alloc_async_context(16,sp)|0;
 $157 = (__link_and_clean_shaders($vertex$0,$fragment$0)|0);
 $IsAsync41 = ___async;
 if ($IsAsync41) {
  HEAP32[$AsyncCtx40>>2] = 163;
  $158 = ((($AsyncCtx40)) + 4|0);
  HEAP32[$158>>2] = $position;
  $159 = ((($AsyncCtx40)) + 8|0);
  HEAP32[$159>>2] = $fragment_source$0;
  $160 = ((($AsyncCtx40)) + 12|0);
  HEAP32[$160>>2] = $vertex_source$0;
  sp = STACKTOP;
  STACKTOP = sp;return;
 }
 _emscripten_free_async_context(($AsyncCtx40|0));
 $161 = (((33240 + (($position*172)|0)|0)) + 4|0);
 HEAP32[$161>>2] = $157;
 $162 = (_glGetUniformLocation(($157|0),(652368|0))|0);
 $163 = (((33240 + (($position*172)|0)|0)) + 136|0);
 HEAP32[$163>>2] = $162;
 $164 = HEAP32[$161>>2]|0;
 $165 = (_glGetUniformLocation(($164|0),(652408|0))|0);
 $166 = (((33240 + (($position*172)|0)|0)) + 144|0);
 HEAP32[$166>>2] = $165;
 $167 = HEAP32[$161>>2]|0;
 $168 = (_glGetUniformLocation(($167|0),(652432|0))|0);
 $169 = (((33240 + (($position*172)|0)|0)) + 148|0);
 HEAP32[$169>>2] = $168;
 $170 = HEAP32[$161>>2]|0;
 $171 = (_glGetUniformLocation(($170|0),(652424|0))|0);
 $172 = (((33240 + (($position*172)|0)|0)) + 156|0);
 HEAP32[$172>>2] = $171;
 $173 = HEAP32[$161>>2]|0;
 $174 = (_glGetUniformLocation(($173|0),(652720|0))|0);
 $175 = (((33240 + (($position*172)|0)|0)) + 152|0);
 HEAP32[$175>>2] = $174;
 $176 = HEAP32[$161>>2]|0;
 $177 = (_glGetUniformLocation(($176|0),(652384|0))|0);
 $178 = (((33240 + (($position*172)|0)|0)) + 140|0);
 HEAP32[$178>>2] = $177;
 $179 = HEAP32[$161>>2]|0;
 $180 = (_glGetAttribLocation(($179|0),(652440|0))|0);
 $181 = (((33240 + (($position*172)|0)|0)) + 160|0);
 HEAP32[$181>>2] = $180;
 $182 = ($fragment_source$0|0)==(0|0);
 do {
  if (!($182)) {
   $183 = HEAP32[(651808)>>2]|0;
   $AsyncCtx32 = _emscripten_alloc_async_context(8,sp)|0;
   FUNCTION_TABLE_vi[$183 & 255]($fragment_source$0);
   $IsAsync33 = ___async;
   if ($IsAsync33) {
    HEAP32[$AsyncCtx32>>2] = 164;
    $184 = ((($AsyncCtx32)) + 4|0);
    HEAP32[$184>>2] = $vertex_source$0;
    sp = STACKTOP;
    STACKTOP = sp;return;
   } else {
    _emscripten_free_async_context(($AsyncCtx32|0));
    break;
   }
  }
 } while(0);
 $185 = ($vertex_source$0|0)==(0|0);
 if ($185) {
  STACKTOP = sp;return;
 }
 $186 = HEAP32[(651808)>>2]|0;
 $AsyncCtx36 = _emscripten_alloc_async_context(4,sp)|0;
 FUNCTION_TABLE_vi[$186 & 255]($vertex_source$0);
 $IsAsync37 = ___async;
 if ($IsAsync37) {
  HEAP32[$AsyncCtx36>>2] = 165;
  sp = STACKTOP;
  STACKTOP = sp;return;
 }
 _emscripten_free_async_context(($AsyncCtx36|0));
 STACKTOP = sp;return;
}
function __change_resolution($resolution_x,$resolution_y) {
 $resolution_x = $resolution_x|0;
 $resolution_y = $resolution_y|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0;
 var $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0;
 var $AsyncCtx2 = 0, $AsyncCtx5 = 0, $IsAsync = 0, $IsAsync3 = 0, $IsAsync6 = 0, $exitcond = 0, $exitcond4 = 0, $i$03 = 0, $j$01 = 0, $new_height$0 = 0.0, $new_width$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(389572)>>2]|0;
 $1 = HEAP32[(389576)>>2]|0;
 HEAP8[35040>>0] = 1;
 $2 = ($resolution_x|0)>(0);
 $3 = $2 ? $resolution_x : $0;
 HEAP32[(389572)>>2] = $3;
 $4 = ($resolution_y|0)>(0);
 $5 = $4 ? $resolution_y : $1;
 HEAP32[(389576)>>2] = $5;
 $6 = HEAP32[35048>>2]|0;
 _glBindFramebuffer(36160,($6|0));
 _glDeleteTextures(1,(35056|0));
 _glGenTextures(1,(35056|0));
 $7 = HEAP32[35056>>2]|0;
 _glBindTexture(3553,($7|0));
 $8 = HEAP32[(389572)>>2]|0;
 $9 = HEAP32[(389576)>>2]|0;
 _glTexImage2D(3553,0,6407,($8|0),($9|0),0,6407,5121,(0|0));
 _glTexParameteri(3553,10241,9729);
 _glTexParameteri(3553,10240,9729);
 $10 = HEAP32[35056>>2]|0;
 _glFramebufferTexture2D(36160,36064,3553,($10|0),0);
 _glDeleteRenderbuffers(1,(35064|0));
 _glGenRenderbuffers(1,(35064|0));
 $11 = HEAP32[35064>>2]|0;
 _glBindRenderbuffer(36161,($11|0));
 $12 = HEAP32[(389572)>>2]|0;
 $13 = HEAP32[(389576)>>2]|0;
 _glRenderbufferStorage(36161,33189,($12|0),($13|0));
 $14 = HEAP32[35064>>2]|0;
 _glFramebufferRenderbuffer(36160,36096,36161,($14|0));
 _glBindFramebuffer(36160,0);
 $15 = (+($3|0));
 $16 = (+($0|0));
 $17 = (+($5|0));
 $18 = (+($1|0));
 $19 = $15 / $16;
 $20 = $17 / $18;
 $i$03 = 0;
 L1: while(1) {
  $j$01 = 0;
  while(1) {
   $21 = ((2280 + (($i$03*1856)|0)|0) + (($j$01*116)|0)|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)==(0);
   if (!($23)) {
    $24 = HEAP32[(651920)>>2]|0;
    $25 = ((((2280 + (($i$03*1856)|0)|0) + (($j$01*116)|0)|0)) + 8|0);
    $26 = +HEAPF32[$25>>2];
    $27 = $15 * $26;
    $28 = $27 / $16;
    $29 = ((((2280 + (($i$03*1856)|0)|0) + (($j$01*116)|0)|0)) + 12|0);
    $30 = +HEAPF32[$29>>2];
    $31 = $17 * $30;
    $32 = $31 / $18;
    $AsyncCtx = _emscripten_alloc_async_context(40,sp)|0;
    FUNCTION_TABLE_vidd[$24 & 255]($21,$28,$32);
    $IsAsync = ___async;
    if ($IsAsync) {
     label = 5;
     break L1;
    }
    _emscripten_free_async_context(($AsyncCtx|0));
    $42 = HEAP32[(651928)>>2]|0;
    $43 = ((((2280 + (($i$03*1856)|0)|0) + (($j$01*116)|0)|0)) + 16|0);
    $44 = +HEAPF32[$43>>2];
    $AsyncCtx2 = _emscripten_alloc_async_context(40,sp)|0;
    FUNCTION_TABLE_vid[$42 & 255]($21,$44);
    $IsAsync3 = ___async;
    if ($IsAsync3) {
     label = 7;
     break L1;
    }
    _emscripten_free_async_context(($AsyncCtx2|0));
    $54 = ((((2280 + (($i$03*1856)|0)|0) + (($j$01*116)|0)|0)) + 45|0);
    $55 = HEAP8[$54>>0]|0;
    $56 = ((((2280 + (($i$03*1856)|0)|0) + (($j$01*116)|0)|0)) + 46|0);
    $57 = HEAP8[$56>>0]|0;
    $58 = $55 | $57;
    $59 = ($58<<24>>24)==(0);
    if (!($59)) {
     $60 = ($55<<24>>24)==(0);
     $61 = ((((2280 + (($i$03*1856)|0)|0) + (($j$01*116)|0)|0)) + 36|0);
     $62 = +HEAPF32[$61>>2];
     $63 = ((((2280 + (($i$03*1856)|0)|0) + (($j$01*116)|0)|0)) + 40|0);
     $64 = +HEAPF32[$63>>2];
     $65 = $64 * $19;
     $new_width$0 = $60 ? $64 : $65;
     $66 = ($57<<24>>24)==(0);
     $67 = $62 * $20;
     $new_height$0 = $66 ? $62 : $67;
     $68 = HEAP32[(651924)>>2]|0;
     $AsyncCtx5 = _emscripten_alloc_async_context(36,sp)|0;
     FUNCTION_TABLE_vidd[$68 & 255]($21,$new_width$0,$new_height$0);
     $IsAsync6 = ___async;
     if ($IsAsync6) {
      label = 10;
      break L1;
     }
     _emscripten_free_async_context(($AsyncCtx5|0));
    }
   }
   $77 = (($j$01) + 1)|0;
   $exitcond = ($77|0)==(16);
   if ($exitcond) {
    break;
   } else {
    $j$01 = $77;
   }
  }
  $78 = (($i$03) + 1)|0;
  $exitcond4 = ($78|0)==(16);
  if ($exitcond4) {
   label = 14;
   break;
  } else {
   $i$03 = $78;
  }
 }
 if ((label|0) == 5) {
  HEAP32[$AsyncCtx>>2] = 166;
  $33 = ((($AsyncCtx)) + 4|0);
  HEAP32[$33>>2] = $i$03;
  $34 = ((($AsyncCtx)) + 8|0);
  HEAP32[$34>>2] = $j$01;
  $35 = ((($AsyncCtx)) + 12|0);
  HEAP32[$35>>2] = $21;
  $36 = ((($AsyncCtx)) + 16|0);
  HEAPF32[$36>>2] = $19;
  $37 = ((($AsyncCtx)) + 20|0);
  HEAPF32[$37>>2] = $20;
  $38 = ((($AsyncCtx)) + 24|0);
  HEAPF32[$38>>2] = $15;
  $39 = ((($AsyncCtx)) + 28|0);
  HEAPF32[$39>>2] = $16;
  $40 = ((($AsyncCtx)) + 32|0);
  HEAPF32[$40>>2] = $17;
  $41 = ((($AsyncCtx)) + 36|0);
  HEAPF32[$41>>2] = $18;
  sp = STACKTOP;
  return;
 }
 else if ((label|0) == 7) {
  HEAP32[$AsyncCtx2>>2] = 167;
  $45 = ((($AsyncCtx2)) + 4|0);
  HEAP32[$45>>2] = $i$03;
  $46 = ((($AsyncCtx2)) + 8|0);
  HEAP32[$46>>2] = $j$01;
  $47 = ((($AsyncCtx2)) + 12|0);
  HEAPF32[$47>>2] = $19;
  $48 = ((($AsyncCtx2)) + 16|0);
  HEAPF32[$48>>2] = $20;
  $49 = ((($AsyncCtx2)) + 20|0);
  HEAP32[$49>>2] = $21;
  $50 = ((($AsyncCtx2)) + 24|0);
  HEAPF32[$50>>2] = $15;
  $51 = ((($AsyncCtx2)) + 28|0);
  HEAPF32[$51>>2] = $16;
  $52 = ((($AsyncCtx2)) + 32|0);
  HEAPF32[$52>>2] = $17;
  $53 = ((($AsyncCtx2)) + 36|0);
  HEAPF32[$53>>2] = $18;
  sp = STACKTOP;
  return;
 }
 else if ((label|0) == 10) {
  HEAP32[$AsyncCtx5>>2] = 168;
  $69 = ((($AsyncCtx5)) + 4|0);
  HEAP32[$69>>2] = $j$01;
  $70 = ((($AsyncCtx5)) + 8|0);
  HEAP32[$70>>2] = $i$03;
  $71 = ((($AsyncCtx5)) + 12|0);
  HEAPF32[$71>>2] = $15;
  $72 = ((($AsyncCtx5)) + 16|0);
  HEAPF32[$72>>2] = $16;
  $73 = ((($AsyncCtx5)) + 20|0);
  HEAPF32[$73>>2] = $17;
  $74 = ((($AsyncCtx5)) + 24|0);
  HEAPF32[$74>>2] = $18;
  $75 = ((($AsyncCtx5)) + 28|0);
  HEAPF32[$75>>2] = $19;
  $76 = ((($AsyncCtx5)) + 32|0);
  HEAPF32[$76>>2] = $20;
  sp = STACKTOP;
  return;
 }
 else if ((label|0) == 14) {
  return;
 }
}
function __change_final_shader($type) {
 $type = $type|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[35040>>0] = 1;
 HEAP32[35032>>2] = $type;
 return;
}
function __initialize_sound() {
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $AsyncCtx = 0, $IsAsync = 0, $c$02 = 0, $c$02$be = 0, $c2$0 = 0, $c2$0$lcssa = 0, $c2$0$ph = 0, $end$01 = 0, $end$01$be = 0, $i$0$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_alcOpenDevice((0|0))|0);
 HEAP32[388624>>2] = $0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $2 = HEAP32[_stderr>>2]|0;
  (_fwrite((388632|0),39,1,($2|0))|0);
 }
 HEAP32[(651784)>>2] = 0;
 HEAP32[(651788)>>2] = 0;
 $3 = (_alcGetString((0|0),4100)|0);
 $c$02 = $3;$end$01 = 0;
 while(1) {
  $4 = HEAP8[$c$02>>0]|0;
  $5 = ($4<<24>>24)==(0);
  if ($5) {
   $6 = (($end$01) + 1)|0;
   $7 = ($c$02|0)==($3|0);
   if (!($7)) {
    $8 = ((($c$02)) + -1|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = ($9<<24>>24)==(0);
    if (!($10)) {
     $11 = HEAP32[(651784)>>2]|0;
     $12 = (($11) + 1)|0;
     HEAP32[(651784)>>2] = $12;
    }
   }
   $13 = ($6|0)==(2);
   if ($13) {
    break;
   } else {
    $end$01$be = $6;
   }
  } else {
   $end$01$be = 0;
  }
  $c$02$be = ((($c$02)) + 1|0);
  $c$02 = $c$02$be;$end$01 = $end$01$be;
 }
 $14 = HEAP32[(651784)>>2]|0;
 $15 = ($14|0)==(0);
 if ($15) {
  return;
 }
 $16 = HEAP32[(651820)>>2]|0;
 $17 = $14 << 2;
 $AsyncCtx = _emscripten_alloc_async_context(4,sp)|0;
 $18 = (FUNCTION_TABLE_ii[$16 & 255]($17)|0);
 $IsAsync = ___async;
 if ($IsAsync) {
  HEAP32[$AsyncCtx>>2] = 169;
  sp = STACKTOP;
  return;
 }
 _emscripten_free_async_context(($AsyncCtx|0));
 HEAP32[(651788)>>2] = $18;
 $19 = ($18|0)==(0|0);
 if ($19) {
  $20 = HEAP32[_stderr>>2]|0;
  (_fwrite((388672|0),123,1,($20|0))|0);
  _exit(1);
  // unreachable;
 }
 $21 = (_alcGetString((0|0),4100)|0);
 $22 = HEAP32[(651788)>>2]|0;
 HEAP32[$22>>2] = $21;
 $c2$0$ph = $21;$i$0$ph = 0;
 while(1) {
  $c2$0 = $c2$0$ph;
  while(1) {
   $23 = HEAP8[$c2$0>>0]|0;
   $24 = ($23<<24>>24)==(0);
   $$pre = ((($c2$0)) + 1|0);
   if ($24) {
    $c2$0$lcssa = $c2$0;
    break;
   } else {
    $c2$0 = $$pre;
   }
  }
  $25 = (($i$0$ph) + 1)|0;
  $26 = HEAP32[(651784)>>2]|0;
  $27 = ($25|0)<($26|0);
  if (!($27)) {
   break;
  }
  $28 = ((($c2$0$lcssa)) + 1|0);
  $29 = HEAP32[(651788)>>2]|0;
  $30 = (($29) + ($25<<2)|0);
  HEAP32[$30>>2] = $28;
  $c2$0$ph = $28;$i$0$ph = $25;
 }
 $31 = HEAP32[388624>>2]|0;
 $32 = ($31|0)==(0|0);
 if (!($32)) {
  $33 = (_alcCreateContext(($31|0),(0|0))|0);
  HEAP32[388800>>2] = $33;
  (_alcMakeContextCurrent(($33|0))|0);
 }
 (_alGetError()|0);
 $34 = HEAP32[388624>>2]|0;
 $35 = ($34|0)==(0|0);
 if ($35) {
  return;
 }
 _alGenSources(5,(388808|0));
 $36 = (_alGetError()|0);
 $37 = ($36|0)==(0);
 if ($37) {
  return;
 }
 $38 = HEAP32[_stderr>>2]|0;
 (_fwrite((388832|0),95,1,($38|0))|0);
 return;
}
function __select_sound_device($position) {
 $position = $position|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($position|0)>(-1);
 $1 = HEAP32[(651784)>>2]|0;
 $2 = ($1|0)>($position|0);
 $or$cond = $0 & $2;
 if (!($or$cond)) {
  $$0 = 0;
  return ($$0|0);
 }
 _alDeleteSources(5,(388808|0));
 $3 = HEAP32[388800>>2]|0;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  _alcDestroyContext(($3|0));
 }
 $5 = HEAP32[388624>>2]|0;
 (_alcCloseDevice(($5|0))|0);
 $6 = HEAP32[(651788)>>2]|0;
 $7 = (($6) + ($position<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (_alcOpenDevice(($8|0))|0);
 HEAP32[388624>>2] = $9;
 $$0 = 1;
 return ($$0|0);
}
function __current_sound_device() {
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(651788)>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = -1;
  return ($$0|0);
 }
 $2 = (_alcGetString((0|0),4100)|0);
 $3 = HEAP32[(651784)>>2]|0;
 $4 = ($3|0)>(0);
 if (!($4)) {
  $$0 = -1;
  return ($$0|0);
 }
 $5 = HEAP32[(651788)>>2]|0;
 $i$01 = 0;
 while(1) {
  $6 = (($5) + ($i$01<<2)|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (_strcmp($2,$7)|0);
  $9 = ($8|0)==(0);
  if ($9) {
   $$0 = $i$01;
   label = 6;
   break;
  }
  $10 = (($i$01) + 1)|0;
  $11 = ($10|0)<($3|0);
  if ($11) {
   $i$01 = $10;
  } else {
   $$0 = -1;
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  return ($$0|0);
 }
 return (0)|0;
}
function __new_sound($filename) {
 $filename = $filename|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx14 = 0, $AsyncCtx6 = 0, $IsAsync = 0, $IsAsync11 = 0, $IsAsync15 = 0, $IsAsync7 = 0;
 var $dir = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $dir = sp + 12|0;
 ;HEAP8[$dir>>0]=HEAP8[388928>>0]|0;HEAP8[$dir+1>>0]=HEAP8[388928+1>>0]|0;HEAP8[$dir+2>>0]=HEAP8[388928+2>>0]|0;HEAP8[$dir+3>>0]=HEAP8[388928+3>>0]|0;HEAP8[$dir+4>>0]=HEAP8[388928+4>>0]|0;HEAP8[$dir+5>>0]=HEAP8[388928+5>>0]|0;HEAP8[$dir+6>>0]=HEAP8[388928+6>>0]|0;
 $0 = HEAP32[(651820)>>2]|0;
 $AsyncCtx = _emscripten_alloc_async_context(28,sp)|0;
 $1 = (FUNCTION_TABLE_ii[$0 & 255](24)|0);
 $IsAsync = ___async;
 if ($IsAsync) {
  HEAP32[$AsyncCtx>>2] = 170;
  $2 = ((($AsyncCtx)) + 4|0);
  HEAP32[$2>>2] = $vararg_buffer;
  $3 = ((($AsyncCtx)) + 8|0);
  HEAP32[$3>>2] = $filename;
  $4 = ((($AsyncCtx)) + 12|0);
  HEAP32[$4>>2] = $vararg_buffer;
  $5 = ((($AsyncCtx)) + 16|0);
  HEAP32[$5>>2] = $dir;
  $6 = ((($AsyncCtx)) + 20|0);
  HEAP32[$6>>2] = $vararg_buffer1;
  $7 = ((($AsyncCtx)) + 24|0);
  HEAP32[$7>>2] = $vararg_buffer1;
  sp = STACKTOP;
  STACKTOP = sp;return (0|0);
 }
 _emscripten_free_async_context(($AsyncCtx|0));
 $8 = ($1|0)==(0|0);
 if ($8) {
  HEAP32[$vararg_buffer>>2] = $filename;
  (_printf((388936|0),($vararg_buffer|0))|0);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = ((($1)) + 20|0);
 HEAP8[$9>>0] = 0;
 $10 = HEAP32[(651820)>>2]|0;
 $11 = (_strlen(($filename|0))|0);
 $12 = (_strlen(($dir|0))|0);
 $13 = (($11) + 1)|0;
 $14 = (($13) + ($12))|0;
 $AsyncCtx6 = _emscripten_alloc_async_context(28,sp)|0;
 $15 = (FUNCTION_TABLE_ii[$10 & 255]($14)|0);
 $IsAsync7 = ___async;
 if ($IsAsync7) {
  HEAP32[$AsyncCtx6>>2] = 171;
  $16 = ((($AsyncCtx6)) + 4|0);
  HEAP32[$16>>2] = $1;
  $17 = ((($AsyncCtx6)) + 8|0);
  HEAP32[$17>>2] = $dir;
  $18 = ((($AsyncCtx6)) + 12|0);
  HEAP32[$18>>2] = $filename;
  $19 = ((($AsyncCtx6)) + 16|0);
  HEAP32[$19>>2] = $1;
  $20 = ((($AsyncCtx6)) + 20|0);
  HEAP32[$20>>2] = $vararg_buffer1;
  $21 = ((($AsyncCtx6)) + 24|0);
  HEAP32[$21>>2] = $vararg_buffer1;
  sp = STACKTOP;
  STACKTOP = sp;return (0|0);
 }
 _emscripten_free_async_context(($AsyncCtx6|0));
 $22 = ($15|0)==(0|0);
 if ($22) {
  $23 = HEAP32[(651808)>>2]|0;
  $AsyncCtx10 = _emscripten_alloc_async_context(16,sp)|0;
  FUNCTION_TABLE_vi[$23 & 255]($1);
  $IsAsync11 = ___async;
  if ($IsAsync11) {
   HEAP32[$AsyncCtx10>>2] = 172;
   $24 = ((($AsyncCtx10)) + 4|0);
   HEAP32[$24>>2] = $vararg_buffer1;
   $25 = ((($AsyncCtx10)) + 8|0);
   HEAP32[$25>>2] = $filename;
   $26 = ((($AsyncCtx10)) + 12|0);
   HEAP32[$26>>2] = $vararg_buffer1;
   sp = STACKTOP;
   STACKTOP = sp;return (0|0);
  }
  _emscripten_free_async_context(($AsyncCtx10|0));
  HEAP32[$vararg_buffer1>>2] = $filename;
  (_printf((388936|0),($vararg_buffer1|0))|0);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  (_strcpy(($15|0),($dir|0))|0);
  (_strcat(($15|0),($filename|0))|0);
  (_mkdir((388928|0),511)|0);
  $27 = HEAP32[(651792)>>2]|0;
  $28 = (($27) + 1)|0;
  HEAP32[(651792)>>2] = $28;
  (_emscripten_async_wget2(($15|0),($15|0),(388992|0),(389000|0),($1|0),(173|0),(174|0),(175|0))|0);
  $29 = HEAP32[(651808)>>2]|0;
  $AsyncCtx14 = _emscripten_alloc_async_context(8,sp)|0;
  FUNCTION_TABLE_vi[$29 & 255]($15);
  $IsAsync15 = ___async;
  if ($IsAsync15) {
   HEAP32[$AsyncCtx14>>2] = 176;
   $30 = ((($AsyncCtx14)) + 4|0);
   HEAP32[$30>>2] = $1;
   sp = STACKTOP;
   STACKTOP = sp;return (0|0);
  }
  _emscripten_free_async_context(($AsyncCtx14|0));
  $$0 = $1;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __play_sound($snd) {
 $snd = $snd|0;
 var $$pre = 0, $$pre$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($snd)) + 20|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  return;
 }
 $3 = ((($snd)) + 16|0);
 $i$0 = -1;
 while(1) {
  $4 = (($i$0) + 1)|0;
  $5 = ($i$0|0)>(3);
  $$pre = (388808 + ($4<<2)|0);
  if ($5) {
   $$pre$lcssa = $$pre;
   break;
  }
  $6 = HEAP32[$$pre>>2]|0;
  $7 = HEAP32[$3>>2]|0;
  _alSourcei(($6|0),4105,($7|0));
  $8 = (_alGetError()|0);
  $9 = ($8|0)==(0);
  if ($9) {
   $$pre$lcssa = $$pre;
   break;
  } else {
   $i$0 = $4;
  }
 }
 $10 = HEAP32[$$pre$lcssa>>2]|0;
 _alSourcePlay(($10|0));
 return;
}
function __destroy_sound($snd) {
 $snd = $snd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $IsAsync = 0, $IsAsync3 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ((($snd)) + 20|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 $3 = HEAP32[(651792)>>2]|0;
 $4 = ($3|0)!=(0);
 $5 = $2 & $4;
 L1: do {
  if ($5) {
   while(1) {
    $AsyncCtx2 = _emscripten_alloc_async_context(12,sp)|0;
    _emscripten_sleep(1);
    $IsAsync3 = ___async;
    if ($IsAsync3) {
     break;
    }
    _emscripten_free_async_context(($AsyncCtx2|0));
    $8 = HEAP8[$0>>0]|0;
    $9 = ($8<<24>>24)==(0);
    $10 = HEAP32[(651792)>>2]|0;
    $11 = ($10|0)!=(0);
    $12 = $9 & $11;
    if (!($12)) {
     break L1;
    }
   }
   HEAP32[$AsyncCtx2>>2] = 177;
   $6 = ((($AsyncCtx2)) + 4|0);
   HEAP32[$6>>2] = $0;
   $7 = ((($AsyncCtx2)) + 8|0);
   HEAP32[$7>>2] = $snd;
   sp = STACKTOP;
   return;
  }
 } while(0);
 $13 = ((($snd)) + 16|0);
 _alDeleteBuffers(1,($13|0));
 $14 = HEAP32[(651808)>>2]|0;
 $AsyncCtx = _emscripten_alloc_async_context(4,sp)|0;
 FUNCTION_TABLE_vi[$14 & 255]($snd);
 $IsAsync = ___async;
 if ($IsAsync) {
  HEAP32[$AsyncCtx>>2] = 178;
  sp = STACKTOP;
  return;
 } else {
  _emscripten_free_async_context(($AsyncCtx|0));
  return;
 }
}
function _onload_sound($undocumented,$snd,$filename) {
 $undocumented = $undocumented|0;
 $snd = $snd|0;
 $filename = $filename|0;
 var $$$i = 0, $$0$i = 0, $$1$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $AsyncCtx = 0, $AsyncCtx45 = 0, $AsyncCtx49 = 0, $AsyncCtx53 = 0, $IsAsync = 0, $IsAsync46 = 0, $IsAsync50 = 0, $IsAsync54 = 0, $bitrate_tmp$i = 0, $channel_tmp$i = 0, $data$i = 0, $data1$i = 0, $format15$0$i = 0, $format_tmp$i = 0, $freq_tmp$i = 0, $returned_buffer$i = 0, $size_tmp$i = 0;
 var $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer22 = 0, $vararg_buffer25 = 0, $vararg_buffer28 = 0, $vararg_buffer31 = 0, $vararg_buffer34 = 0, $vararg_buffer37 = 0, $vararg_buffer4 = 0, $vararg_buffer40 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer40 = sp + 112|0;
 $vararg_buffer37 = sp + 104|0;
 $vararg_buffer34 = sp + 96|0;
 $vararg_buffer31 = sp + 88|0;
 $vararg_buffer28 = sp + 80|0;
 $vararg_buffer25 = sp + 72|0;
 $vararg_buffer22 = sp + 64|0;
 $vararg_buffer19 = sp + 56|0;
 $vararg_buffer16 = sp + 48|0;
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $returned_buffer$i = sp + 136|0;
 $data$i = sp + 145|0;
 $size_tmp$i = sp + 132|0;
 $data1$i = sp + 140|0;
 $format_tmp$i = sp + 128|0;
 $channel_tmp$i = sp + 124|0;
 $freq_tmp$i = sp + 120|0;
 $bitrate_tmp$i = sp + 116|0;
 $0 = (_strrchr($filename,46)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $2 = HEAP32[_stderr>>2]|0;
  HEAP32[$vararg_buffer>>2] = 0;
  (_fprintf(($2|0),(389008|0),($vararg_buffer|0))|0);
  $3 = HEAP32[(651792)>>2]|0;
  $4 = (($3) + -1)|0;
  HEAP32[(651792)>>2] = $4;
  STACKTOP = sp;return;
 }
 $5 = (_strcmp($0,389064)|0);
 $6 = ($5|0)==(0);
 if ($6) {
  label = 5;
 } else {
  $7 = (_strcmp($0,389072)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   label = 5;
  }
 }
 if ((label|0) == 5) {
  $9 = ((($snd)) + 8|0);
  $10 = ((($snd)) + 4|0);
  $11 = ((($snd)) + 12|0);
  HEAP32[$returned_buffer$i>>2] = 0;
  $12 = (_fopen(($filename|0),(389080|0))|0);
  $13 = ($12|0)==(0|0);
  L9: do {
   if ($13) {
    $$0$i = 0;$259 = 1;
   } else {
    HEAP8[$data$i>>0] = 0;
    (_fread(($data$i|0),1,4,($12|0))|0);
    $14 = ((($data$i)) + 4|0);
    HEAP8[$14>>0] = 0;
    $15 = (_strcmp($data$i,389088)|0);
    $16 = ($15|0)==(0);
    if (!($16)) {
     $17 = HEAP32[_stderr>>2]|0;
     HEAP32[$vararg_buffer1>>2] = $filename;
     (_fprintf(($17|0),(389096|0),($vararg_buffer1|0))|0);
     (_fclose(($12|0))|0);
     $$0$i = 0;$259 = 0;
     break;
    }
    HEAP32[$snd>>2] = 0;
    HEAP32[$size_tmp$i>>2] = 0;
    $18 = (_fread(($size_tmp$i|0),1,1,($12|0))|0);
    $19 = ($18|0)==(1);
    if ($19) {
     $21 = HEAP32[$size_tmp$i>>2]|0;
     $22 = HEAP32[$snd>>2]|0;
     $23 = (($22) + ($21))|0;
     HEAP32[$snd>>2] = $23;
     HEAP32[$size_tmp$i>>2] = 0;
     $24 = (_fread(($size_tmp$i|0),1,1,($12|0))|0);
     $25 = ($24|0)==(1);
     if ($25) {
      $233 = HEAP32[$size_tmp$i>>2]|0;
      $234 = $233 << 8;
      $235 = HEAP32[$snd>>2]|0;
      $236 = (($235) + ($234))|0;
      HEAP32[$snd>>2] = $236;
      HEAP32[$size_tmp$i>>2] = 0;
      $237 = (_fread(($size_tmp$i|0),1,1,($12|0))|0);
      $238 = ($237|0)==(1);
      if ($238) {
       $239 = HEAP32[$size_tmp$i>>2]|0;
       $240 = $239 << 16;
       $241 = HEAP32[$snd>>2]|0;
       $242 = (($241) + ($240))|0;
       HEAP32[$snd>>2] = $242;
       HEAP32[$size_tmp$i>>2] = 0;
       $243 = (_fread(($size_tmp$i|0),1,1,($12|0))|0);
       $244 = ($243|0)==(1);
       if ($244) {
        $245 = HEAP32[$size_tmp$i>>2]|0;
        $246 = $245 << 24;
        $247 = HEAP32[$snd>>2]|0;
        $248 = (($247) + ($246))|0;
        HEAP32[$snd>>2] = $248;
        HEAP8[$data1$i>>0] = 0;
        (_fread(($data1$i|0),1,4,($12|0))|0);
        $249 = ((($data1$i)) + 4|0);
        HEAP8[$249>>0] = 0;
        $250 = (_strcmp($data1$i,389536)|0);
        $251 = ($250|0)==(0);
        if (!($251)) {
         $26 = HEAP32[_stderr>>2]|0;
         HEAP32[$vararg_buffer7>>2] = $filename;
         (_fprintf(($26|0),(389096|0),($vararg_buffer7|0))|0);
         (_fclose(($12|0))|0);
         $$0$i = 0;$259 = 0;
         break;
        }
        $27 = HEAP32[$snd>>2]|0;
        $28 = (($27) + -4)|0;
        HEAP32[$snd>>2] = $28;
        $29 = (_getc(($12|0))|0);
        $30 = ($29|0)==(-1);
        do {
         if (!($30)) {
          $31 = (_getc(($12|0))|0);
          $32 = ($31|0)==(-1);
          if (!($32)) {
           $217 = (_getc(($12|0))|0);
           $218 = ($217|0)==(-1);
           if (!($218)) {
            $219 = (_getc(($12|0))|0);
            $220 = ($219|0)==(-1);
            if (!($220)) {
             $221 = (_getc(($12|0))|0);
             $222 = ($221|0)==(-1);
             if (!($222)) {
              $223 = (_getc(($12|0))|0);
              $224 = ($223|0)==(-1);
              if (!($224)) {
               $225 = (_getc(($12|0))|0);
               $226 = ($225|0)==(-1);
               if (!($226)) {
                $227 = (_getc(($12|0))|0);
                $228 = ($227|0)==(-1);
                if ($228) {
                 break;
                }
                $229 = HEAP32[$snd>>2]|0;
                $230 = (($229) + -8)|0;
                HEAP32[$snd>>2] = $230;
                HEAP32[$format_tmp$i>>2] = 0;
                $231 = (_fread(($format_tmp$i|0),1,1,($12|0))|0);
                $232 = ($231|0)==(1);
                do {
                 if ($232) {
                  $35 = HEAP32[$format_tmp$i>>2]|0;
                  HEAP32[$format_tmp$i>>2] = 0;
                  $36 = (_fread(($format_tmp$i|0),1,1,($12|0))|0);
                  $37 = ($36|0)==(1);
                  if (!($37)) {
                   break;
                  }
                  $213 = HEAP32[$format_tmp$i>>2]|0;
                  $214 = $213 << 8;
                  $215 = (($214) + ($35))|0;
                  $216 = ($215|0)==(1);
                  if (!($216)) {
                   $38 = HEAP32[_stderr>>2]|0;
                   HEAP32[$vararg_buffer16>>2] = $filename;
                   (_fprintf(($38|0),(389216|0),($vararg_buffer16|0))|0);
                   (_fclose(($12|0))|0);
                   $$0$i = 0;$259 = 0;
                   break L9;
                  }
                  $39 = HEAP32[$snd>>2]|0;
                  $40 = (($39) + -2)|0;
                  HEAP32[$snd>>2] = $40;
                  HEAP32[$10>>2] = 0;
                  HEAP32[$channel_tmp$i>>2] = 0;
                  $41 = (_fread(($channel_tmp$i|0),1,1,($12|0))|0);
                  $42 = ($41|0)==(1);
                  do {
                   if ($42) {
                    $44 = HEAP32[$channel_tmp$i>>2]|0;
                    $45 = HEAP32[$10>>2]|0;
                    $46 = (($45) + ($44))|0;
                    HEAP32[$10>>2] = $46;
                    HEAP32[$channel_tmp$i>>2] = 0;
                    $47 = (_fread(($channel_tmp$i|0),1,1,($12|0))|0);
                    $48 = ($47|0)==(1);
                    if (!($48)) {
                     break;
                    }
                    $205 = HEAP32[$channel_tmp$i>>2]|0;
                    $206 = $205 << 8;
                    $207 = HEAP32[$10>>2]|0;
                    $208 = (($207) + ($206))|0;
                    HEAP32[$10>>2] = $208;
                    $209 = HEAP32[$snd>>2]|0;
                    $210 = (($209) + -2)|0;
                    HEAP32[$snd>>2] = $210;
                    HEAP32[$9>>2] = 0;
                    HEAP32[$freq_tmp$i>>2] = 0;
                    $211 = (_fread(($freq_tmp$i|0),1,1,($12|0))|0);
                    $212 = ($211|0)==(1);
                    do {
                     if ($212) {
                      $50 = HEAP32[$freq_tmp$i>>2]|0;
                      $51 = HEAP32[$9>>2]|0;
                      $52 = (($51) + ($50))|0;
                      HEAP32[$9>>2] = $52;
                      HEAP32[$freq_tmp$i>>2] = 0;
                      $53 = (_fread(($freq_tmp$i|0),1,1,($12|0))|0);
                      $54 = ($53|0)==(1);
                      if (!($54)) {
                       break;
                      }
                      $185 = HEAP32[$freq_tmp$i>>2]|0;
                      $186 = $185 << 8;
                      $187 = HEAP32[$9>>2]|0;
                      $188 = (($187) + ($186))|0;
                      HEAP32[$9>>2] = $188;
                      HEAP32[$freq_tmp$i>>2] = 0;
                      $189 = (_fread(($freq_tmp$i|0),1,1,($12|0))|0);
                      $190 = ($189|0)==(1);
                      if (!($190)) {
                       break;
                      }
                      $191 = HEAP32[$freq_tmp$i>>2]|0;
                      $192 = $191 << 16;
                      $193 = HEAP32[$9>>2]|0;
                      $194 = (($193) + ($192))|0;
                      HEAP32[$9>>2] = $194;
                      HEAP32[$freq_tmp$i>>2] = 0;
                      $195 = (_fread(($freq_tmp$i|0),1,1,($12|0))|0);
                      $196 = ($195|0)==(1);
                      if (!($196)) {
                       break;
                      }
                      $197 = HEAP32[$freq_tmp$i>>2]|0;
                      $198 = $197 << 24;
                      $199 = HEAP32[$9>>2]|0;
                      $200 = (($199) + ($198))|0;
                      HEAP32[$9>>2] = $200;
                      $201 = HEAP32[$snd>>2]|0;
                      $202 = (($201) + -4)|0;
                      HEAP32[$snd>>2] = $202;
                      $203 = (_getc(($12|0))|0);
                      $204 = ($203|0)==(-1);
                      do {
                       if (!($204)) {
                        $55 = (_getc(($12|0))|0);
                        $56 = ($55|0)==(-1);
                        if ($56) {
                         break;
                        }
                        $173 = (_getc(($12|0))|0);
                        $174 = ($173|0)==(-1);
                        if ($174) {
                         break;
                        }
                        $175 = (_getc(($12|0))|0);
                        $176 = ($175|0)==(-1);
                        if ($176) {
                         break;
                        }
                        $177 = (_getc(($12|0))|0);
                        $178 = ($177|0)==(-1);
                        if ($178) {
                         break;
                        }
                        $179 = (_getc(($12|0))|0);
                        $180 = ($179|0)==(-1);
                        if ($180) {
                         break;
                        }
                        $181 = HEAP32[$snd>>2]|0;
                        $182 = (($181) + -6)|0;
                        HEAP32[$snd>>2] = $182;
                        HEAP32[$11>>2] = 0;
                        HEAP32[$bitrate_tmp$i>>2] = 0;
                        $183 = (_fread(($bitrate_tmp$i|0),1,1,($12|0))|0);
                        $184 = ($183|0)==(1);
                        do {
                         if ($184) {
                          $59 = HEAP32[$bitrate_tmp$i>>2]|0;
                          $60 = HEAP32[$11>>2]|0;
                          $61 = (($60) + ($59))|0;
                          HEAP32[$11>>2] = $61;
                          HEAP32[$bitrate_tmp$i>>2] = 0;
                          $62 = (_fread(($bitrate_tmp$i|0),1,1,($12|0))|0);
                          $63 = ($62|0)==(1);
                          if (!($63)) {
                           break;
                          }
                          $165 = HEAP32[$bitrate_tmp$i>>2]|0;
                          $166 = $165 << 8;
                          $167 = HEAP32[$11>>2]|0;
                          $168 = (($167) + ($166))|0;
                          HEAP32[$11>>2] = $168;
                          $169 = HEAP32[$snd>>2]|0;
                          $170 = (($169) + -2)|0;
                          HEAP32[$snd>>2] = $170;
                          $171 = (_getc(($12|0))|0);
                          $172 = ($171|0)==(-1);
                          do {
                           if (!($172)) {
                            $64 = (_getc(($12|0))|0);
                            $65 = ($64|0)==(-1);
                            if ($65) {
                             break;
                            }
                            $127 = (_getc(($12|0))|0);
                            $128 = ($127|0)==(-1);
                            if ($128) {
                             break;
                            }
                            $129 = (_getc(($12|0))|0);
                            $130 = ($129|0)==(-1);
                            if ($130) {
                             break;
                            }
                            $131 = (_getc(($12|0))|0);
                            $132 = ($131|0)==(-1);
                            if ($132) {
                             break;
                            }
                            $133 = (_getc(($12|0))|0);
                            $134 = ($133|0)==(-1);
                            if ($134) {
                             break;
                            }
                            $135 = (_getc(($12|0))|0);
                            $136 = ($135|0)==(-1);
                            if ($136) {
                             break;
                            }
                            $137 = (_getc(($12|0))|0);
                            $138 = ($137|0)==(-1);
                            if ($138) {
                             break;
                            }
                            $139 = HEAP32[$snd>>2]|0;
                            $140 = (($139) + -8)|0;
                            HEAP32[$snd>>2] = $140;
                            $141 = HEAP32[(651820)>>2]|0;
                            $AsyncCtx53 = _emscripten_alloc_async_context(92,sp)|0;
                            $68 = (FUNCTION_TABLE_ii[$141 & 255]($140)|0);
                            $IsAsync54 = ___async;
                            if ($IsAsync54) {
                             HEAP32[$AsyncCtx53>>2] = 182;
                             $142 = ((($AsyncCtx53)) + 4|0);
                             HEAP32[$142>>2] = $vararg_buffer34;
                             $143 = ((($AsyncCtx53)) + 8|0);
                             HEAP32[$143>>2] = $filename;
                             $144 = ((($AsyncCtx53)) + 12|0);
                             HEAP32[$144>>2] = $vararg_buffer34;
                             $145 = ((($AsyncCtx53)) + 16|0);
                             HEAP32[$145>>2] = $12;
                             $146 = ((($AsyncCtx53)) + 20|0);
                             HEAP32[$146>>2] = $returned_buffer$i;
                             $147 = ((($AsyncCtx53)) + 24|0);
                             HEAP32[$147>>2] = $returned_buffer$i;
                             $148 = ((($AsyncCtx53)) + 28|0);
                             HEAP32[$148>>2] = $data$i;
                             $149 = ((($AsyncCtx53)) + 32|0);
                             HEAP32[$149>>2] = $size_tmp$i;
                             $150 = ((($AsyncCtx53)) + 36|0);
                             HEAP32[$150>>2] = $data1$i;
                             $151 = ((($AsyncCtx53)) + 40|0);
                             HEAP32[$151>>2] = $format_tmp$i;
                             $152 = ((($AsyncCtx53)) + 44|0);
                             HEAP32[$152>>2] = $channel_tmp$i;
                             $153 = ((($AsyncCtx53)) + 48|0);
                             HEAP32[$153>>2] = $freq_tmp$i;
                             $154 = ((($AsyncCtx53)) + 52|0);
                             HEAP32[$154>>2] = $bitrate_tmp$i;
                             $155 = ((($AsyncCtx53)) + 56|0);
                             HEAP32[$155>>2] = $snd;
                             $156 = ((($AsyncCtx53)) + 60|0);
                             HEAP32[$156>>2] = $vararg_buffer40;
                             $157 = ((($AsyncCtx53)) + 64|0);
                             HEAP32[$157>>2] = $vararg_buffer40;
                             $158 = ((($AsyncCtx53)) + 68|0);
                             HEAP32[$158>>2] = $snd;
                             $159 = ((($AsyncCtx53)) + 72|0);
                             HEAP32[$159>>2] = $vararg_buffer37;
                             $160 = ((($AsyncCtx53)) + 76|0);
                             HEAP32[$160>>2] = $vararg_buffer37;
                             $161 = ((($AsyncCtx53)) + 80|0);
                             HEAP32[$161>>2] = $10;
                             $162 = ((($AsyncCtx53)) + 84|0);
                             HEAP32[$162>>2] = $11;
                             $163 = ((($AsyncCtx53)) + 88|0);
                             HEAP32[$163>>2] = $9;
                             sp = STACKTOP;
                             STACKTOP = sp;return;
                            }
                            _emscripten_free_async_context(($AsyncCtx53|0));
                            $164 = ($68|0)==(0|0);
                            if ($164) {
                             HEAP32[$vararg_buffer34>>2] = $filename;
                             (_printf((388936|0),($vararg_buffer34|0))|0);
                             (_fclose(($12|0))|0);
                             $$0$i = 0;$259 = 0;
                             break L9;
                            }
                            $67 = HEAP32[$snd>>2]|0;
                            (_fread(($68|0),($67|0),1,($12|0))|0);
                            _alGenBuffers(1,($returned_buffer$i|0));
                            $69 = (_alGetError()|0);
                            $70 = ($69|0)==(0);
                            if (!($70)) {
                             $71 = HEAP32[_stderr>>2]|0;
                             (_fwrite((389264|0),68,1,($71|0))|0);
                             if ((($69|0) == 40963)) {
                              (_fwrite((389336|0),49,1,($71|0))|0);
                             } else if ((($69|0) == 40965)) {
                              (_fwrite((389392|0),31,1,($71|0))|0);
                             } else {
                              HEAP32[$vararg_buffer37>>2] = $69;
                              (_fprintf(($71|0),(389424|0),($vararg_buffer37|0))|0);
                             }
                             $72 = HEAP32[(651808)>>2]|0;
                             $AsyncCtx = _emscripten_alloc_async_context(52,sp)|0;
                             FUNCTION_TABLE_vi[$72 & 255]($68);
                             $IsAsync = ___async;
                             if ($IsAsync) {
                              HEAP32[$AsyncCtx>>2] = 179;
                              $73 = ((($AsyncCtx)) + 4|0);
                              HEAP32[$73>>2] = $12;
                              $74 = ((($AsyncCtx)) + 8|0);
                              HEAP32[$74>>2] = $returned_buffer$i;
                              $75 = ((($AsyncCtx)) + 12|0);
                              HEAP32[$75>>2] = $data$i;
                              $76 = ((($AsyncCtx)) + 16|0);
                              HEAP32[$76>>2] = $size_tmp$i;
                              $77 = ((($AsyncCtx)) + 20|0);
                              HEAP32[$77>>2] = $data1$i;
                              $78 = ((($AsyncCtx)) + 24|0);
                              HEAP32[$78>>2] = $format_tmp$i;
                              $79 = ((($AsyncCtx)) + 28|0);
                              HEAP32[$79>>2] = $channel_tmp$i;
                              $80 = ((($AsyncCtx)) + 32|0);
                              HEAP32[$80>>2] = $freq_tmp$i;
                              $81 = ((($AsyncCtx)) + 36|0);
                              HEAP32[$81>>2] = $bitrate_tmp$i;
                              $82 = ((($AsyncCtx)) + 40|0);
                              HEAP32[$82>>2] = $snd;
                              $83 = ((($AsyncCtx)) + 44|0);
                              HEAP32[$83>>2] = $vararg_buffer40;
                              $84 = ((($AsyncCtx)) + 48|0);
                              HEAP32[$84>>2] = $vararg_buffer40;
                              sp = STACKTOP;
                              STACKTOP = sp;return;
                             } else {
                              _emscripten_free_async_context(($AsyncCtx|0));
                              (_fclose(($12|0))|0);
                              $$0$i = 0;$259 = 0;
                              break L9;
                             }
                            }
                            $85 = HEAP32[$11>>2]|0;
                            do {
                             if ((($85|0) == 16)) {
                              $89 = HEAP32[$10>>2]|0;
                              $90 = ($89|0)==(1);
                              if ($90) {
                               $format15$0$i = 4353;
                               break;
                              }
                              $91 = ($89|0)==(2);
                              $$1$i = $91 ? 4355 : 0;
                              $format15$0$i = $$1$i;
                             } else if ((($85|0) == 8)) {
                              $86 = HEAP32[$10>>2]|0;
                              $87 = ($86|0)==(1);
                              if ($87) {
                               $format15$0$i = 4352;
                               break;
                              }
                              $88 = ($86|0)==(2);
                              $$$i = $88 ? 4354 : 0;
                              $format15$0$i = $$$i;
                             } else {
                              $format15$0$i = 0;
                             }
                            } while(0);
                            $92 = HEAP32[$returned_buffer$i>>2]|0;
                            $93 = HEAP32[$snd>>2]|0;
                            $94 = HEAP32[$9>>2]|0;
                            _alBufferData(($92|0),($format15$0$i|0),($68|0),($93|0),($94|0));
                            $95 = (_alGetError()|0);
                            $96 = ($95|0)==(0);
                            if ($96) {
                             $112 = HEAP32[(651808)>>2]|0;
                             $AsyncCtx49 = _emscripten_alloc_async_context(56,sp)|0;
                             FUNCTION_TABLE_vi[$112 & 255]($68);
                             $IsAsync50 = ___async;
                             if ($IsAsync50) {
                              HEAP32[$AsyncCtx49>>2] = 181;
                              $113 = ((($AsyncCtx49)) + 4|0);
                              HEAP32[$113>>2] = $12;
                              $114 = ((($AsyncCtx49)) + 8|0);
                              HEAP32[$114>>2] = $returned_buffer$i;
                              $115 = ((($AsyncCtx49)) + 12|0);
                              HEAP32[$115>>2] = $returned_buffer$i;
                              $116 = ((($AsyncCtx49)) + 16|0);
                              HEAP32[$116>>2] = $data$i;
                              $117 = ((($AsyncCtx49)) + 20|0);
                              HEAP32[$117>>2] = $size_tmp$i;
                              $118 = ((($AsyncCtx49)) + 24|0);
                              HEAP32[$118>>2] = $data1$i;
                              $119 = ((($AsyncCtx49)) + 28|0);
                              HEAP32[$119>>2] = $format_tmp$i;
                              $120 = ((($AsyncCtx49)) + 32|0);
                              HEAP32[$120>>2] = $channel_tmp$i;
                              $121 = ((($AsyncCtx49)) + 36|0);
                              HEAP32[$121>>2] = $freq_tmp$i;
                              $122 = ((($AsyncCtx49)) + 40|0);
                              HEAP32[$122>>2] = $bitrate_tmp$i;
                              $123 = ((($AsyncCtx49)) + 44|0);
                              HEAP32[$123>>2] = $snd;
                              $124 = ((($AsyncCtx49)) + 48|0);
                              HEAP32[$124>>2] = $vararg_buffer40;
                              $125 = ((($AsyncCtx49)) + 52|0);
                              HEAP32[$125>>2] = $vararg_buffer40;
                              sp = STACKTOP;
                              STACKTOP = sp;return;
                             } else {
                              _emscripten_free_async_context(($AsyncCtx49|0));
                              (_fclose(($12|0))|0);
                              $126 = HEAP32[$returned_buffer$i>>2]|0;
                              $$0$i = $126;$259 = 1;
                              break L9;
                             }
                            } else {
                             $97 = HEAP32[_stderr>>2]|0;
                             (_fwrite((389448|0),82,1,($97|0))|0);
                             $98 = HEAP32[(651808)>>2]|0;
                             $AsyncCtx45 = _emscripten_alloc_async_context(56,sp)|0;
                             FUNCTION_TABLE_vi[$98 & 255]($68);
                             $IsAsync46 = ___async;
                             if ($IsAsync46) {
                              HEAP32[$AsyncCtx45>>2] = 180;
                              $99 = ((($AsyncCtx45)) + 4|0);
                              HEAP32[$99>>2] = $returned_buffer$i;
                              $100 = ((($AsyncCtx45)) + 8|0);
                              HEAP32[$100>>2] = $12;
                              $101 = ((($AsyncCtx45)) + 12|0);
                              HEAP32[$101>>2] = $returned_buffer$i;
                              $102 = ((($AsyncCtx45)) + 16|0);
                              HEAP32[$102>>2] = $data$i;
                              $103 = ((($AsyncCtx45)) + 20|0);
                              HEAP32[$103>>2] = $size_tmp$i;
                              $104 = ((($AsyncCtx45)) + 24|0);
                              HEAP32[$104>>2] = $data1$i;
                              $105 = ((($AsyncCtx45)) + 28|0);
                              HEAP32[$105>>2] = $format_tmp$i;
                              $106 = ((($AsyncCtx45)) + 32|0);
                              HEAP32[$106>>2] = $channel_tmp$i;
                              $107 = ((($AsyncCtx45)) + 36|0);
                              HEAP32[$107>>2] = $freq_tmp$i;
                              $108 = ((($AsyncCtx45)) + 40|0);
                              HEAP32[$108>>2] = $bitrate_tmp$i;
                              $109 = ((($AsyncCtx45)) + 44|0);
                              HEAP32[$109>>2] = $snd;
                              $110 = ((($AsyncCtx45)) + 48|0);
                              HEAP32[$110>>2] = $vararg_buffer40;
                              $111 = ((($AsyncCtx45)) + 52|0);
                              HEAP32[$111>>2] = $vararg_buffer40;
                              sp = STACKTOP;
                              STACKTOP = sp;return;
                             } else {
                              _emscripten_free_async_context(($AsyncCtx45|0));
                              _alDeleteBuffers(1,($returned_buffer$i|0));
                              (_fclose(($12|0))|0);
                              $$0$i = 0;$259 = 0;
                              break L9;
                             }
                            }
                           }
                          } while(0);
                          $66 = HEAP32[_stderr>>2]|0;
                          HEAP32[$vararg_buffer31>>2] = $filename;
                          (_fprintf(($66|0),(389176|0),($vararg_buffer31|0))|0);
                          (_fclose(($12|0))|0);
                          $$0$i = 0;$259 = 0;
                          break L9;
                         }
                        } while(0);
                        $58 = HEAP32[_stderr>>2]|0;
                        HEAP32[$vararg_buffer28>>2] = $filename;
                        (_fprintf(($58|0),(389144|0),($vararg_buffer28|0))|0);
                        (_fclose(($12|0))|0);
                        $$0$i = 0;$259 = 0;
                        break L9;
                       }
                      } while(0);
                      $57 = HEAP32[_stderr>>2]|0;
                      HEAP32[$vararg_buffer25>>2] = $filename;
                      (_fprintf(($57|0),(389176|0),($vararg_buffer25|0))|0);
                      (_fclose(($12|0))|0);
                      $$0$i = 0;$259 = 0;
                      break L9;
                     }
                    } while(0);
                    $49 = HEAP32[_stderr>>2]|0;
                    HEAP32[$vararg_buffer22>>2] = $filename;
                    (_fprintf(($49|0),(389144|0),($vararg_buffer22|0))|0);
                    (_fclose(($12|0))|0);
                    $$0$i = 0;$259 = 0;
                    break L9;
                   }
                  } while(0);
                  $43 = HEAP32[_stderr>>2]|0;
                  HEAP32[$vararg_buffer19>>2] = $filename;
                  (_fprintf(($43|0),(389144|0),($vararg_buffer19|0))|0);
                  (_fclose(($12|0))|0);
                  $$0$i = 0;$259 = 0;
                  break L9;
                 }
                } while(0);
                $34 = HEAP32[_stderr>>2]|0;
                HEAP32[$vararg_buffer13>>2] = $filename;
                (_fprintf(($34|0),(389144|0),($vararg_buffer13|0))|0);
                (_fclose(($12|0))|0);
                $$0$i = 0;$259 = 0;
                break L9;
               }
              }
             }
            }
           }
          }
         }
        } while(0);
        $33 = HEAP32[_stderr>>2]|0;
        HEAP32[$vararg_buffer10>>2] = $filename;
        (_fprintf(($33|0),(389176|0),($vararg_buffer10|0))|0);
        (_fclose(($12|0))|0);
        $$0$i = 0;$259 = 0;
        break;
       }
      }
     }
    }
    $20 = HEAP32[_stderr>>2]|0;
    HEAP32[$vararg_buffer4>>2] = $filename;
    (_fprintf(($20|0),(389144|0),($vararg_buffer4|0))|0);
    (_fclose(($12|0))|0);
    $$0$i = 0;$259 = 0;
   }
  } while(0);
  $252 = ((($snd)) + 16|0);
  HEAP32[$252>>2] = $$0$i;
  if ($259) {
   $256 = ((($snd)) + 20|0);
   HEAP8[$256>>0] = 1;
   $257 = HEAP32[(651792)>>2]|0;
   $258 = (($257) + -1)|0;
   HEAP32[(651792)>>2] = $258;
   STACKTOP = sp;return;
  }
 }
 $253 = HEAP32[_stderr>>2]|0;
 HEAP32[$vararg_buffer40>>2] = 1;
 (_fprintf(($253|0),(389008|0),($vararg_buffer40|0))|0);
 $254 = HEAP32[(651792)>>2]|0;
 $255 = (($254) + -1)|0;
 HEAP32[(651792)>>2] = $255;
 STACKTOP = sp;return;
}
function _onerror_sound($undocumented,$snd,$error_code) {
 $undocumented = $undocumented|0;
 $snd = $snd|0;
 $error_code = $error_code|0;
 var $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[_stderr>>2]|0;
 HEAP32[$vararg_buffer>>2] = $error_code;
 (_fprintf(($0|0),(389008|0),($vararg_buffer|0))|0);
 $1 = HEAP32[(651792)>>2]|0;
 $2 = (($1) + -1)|0;
 HEAP32[(651792)>>2] = $2;
 STACKTOP = sp;return;
}
function _onprogress_sound($undocumented,$snd,$percent) {
 $undocumented = $undocumented|0;
 $snd = $snd|0;
 $percent = $percent|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __update_time() {
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_current_time = 0, $result$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $_current_time = sp;
 (_gettimeofday(($_current_time|0),(0|0))|0);
 $0 = ((($_current_time)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[(116)>>2]|0;
 $3 = ($2|0)>($1|0);
 if ($3) {
  $4 = (($2) - ($1))|0;
  $5 = (($4|0) / 1000000)&-1;
  $6 = (($5) + 1)|0;
  $7 = Math_imul($6, -1000000)|0;
  $8 = (($2) + ($7))|0;
  HEAP32[(116)>>2] = $8;
  $9 = HEAP32[112>>2]|0;
  $10 = (($9) + ($6))|0;
  HEAP32[112>>2] = $10;
  $12 = $8;
 } else {
  $12 = $2;
 }
 $11 = (($1) - ($12))|0;
 $13 = ($11|0)>(1000000);
 if ($13) {
  $14 = (($11|0) / 1000000)&-1;
  $15 = ($14*1000000)|0;
  $16 = (($15) + ($12))|0;
  HEAP32[(116)>>2] = $16;
  $17 = HEAP32[112>>2]|0;
  $18 = (($17) - ($14))|0;
  HEAP32[112>>2] = $18;
  $21 = $18;$24 = $16;
 } else {
  $$pre = HEAP32[112>>2]|0;
  $21 = $$pre;$24 = $12;
 }
 $19 = HEAP32[$_current_time>>2]|0;
 $20 = ($19|0)<($21|0);
 $22 = (($19) - ($21))|0;
 if ($20) {
  $23 = (($1) - ($24))|0;
  $25 = Math_imul($22, -1000000)|0;
  $26 = (($23) + ($25))|0;
  $result$0 = $26;
  HEAP32[112>>2] = $19;
  HEAP32[(116)>>2] = $1;
  STACKTOP = sp;return ($result$0|0);
 } else {
  $27 = ($22*1000000)|0;
  $28 = (($1) + ($27))|0;
  $29 = (($28) - ($24))|0;
  $result$0 = $29;
  HEAP32[112>>2] = $19;
  HEAP32[(116)>>2] = $1;
  STACKTOP = sp;return ($result$0|0);
 }
 return (0)|0;
}
function _Wloop($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx6 = 0, $AsyncCtx9 = 0, $IsAsync = 0, $IsAsync10 = 0, $IsAsync4 = 0, $IsAsync7 = 0, $_current_time$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $_current_time$i = sp;
 $0 = HEAP8[136>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   _emscripten_cancel_main_loop();
   $2 = HEAP32[(651828)>>2]|0;
   $AsyncCtx = _emscripten_alloc_async_context(12,sp)|0;
   FUNCTION_TABLE_v[$2 & 255]();
   $IsAsync = ___async;
   if ($IsAsync) {
    HEAP32[$AsyncCtx>>2] = 183;
    $3 = ((($AsyncCtx)) + 4|0);
    HEAP32[$3>>2] = $f;
    $4 = ((($AsyncCtx)) + 8|0);
    HEAP32[$4>>2] = $_current_time$i;
    sp = STACKTOP;
    STACKTOP = sp;return;
   } else {
    _emscripten_free_async_context(($AsyncCtx|0));
    break;
   }
  } else {
   HEAP8[136>>0] = 0;
  }
 } while(0);
 $5 = HEAP32[(651824)>>2]|0;
 $AsyncCtx3 = _emscripten_alloc_async_context(12,sp)|0;
 (FUNCTION_TABLE_i[$5 & 255]()|0);
 $IsAsync4 = ___async;
 if ($IsAsync4) {
  HEAP32[$AsyncCtx3>>2] = 184;
  $6 = ((($AsyncCtx3)) + 4|0);
  HEAP32[$6>>2] = $f;
  $7 = ((($AsyncCtx3)) + 8|0);
  HEAP32[$7>>2] = $_current_time$i;
  sp = STACKTOP;
  STACKTOP = sp;return;
 }
 _emscripten_free_async_context(($AsyncCtx3|0));
 HEAP8[120>>0] = 1;
 HEAP32[216>>2] = 0;
 $8 = HEAP32[(651852)>>2]|0;
 $AsyncCtx6 = _emscripten_alloc_async_context(12,sp)|0;
 FUNCTION_TABLE_v[$8 & 255]();
 $IsAsync7 = ___async;
 if ($IsAsync7) {
  HEAP32[$AsyncCtx6>>2] = 185;
  $9 = ((($AsyncCtx6)) + 4|0);
  HEAP32[$9>>2] = $f;
  $10 = ((($AsyncCtx6)) + 8|0);
  HEAP32[$10>>2] = $_current_time$i;
  sp = STACKTOP;
  STACKTOP = sp;return;
 }
 _emscripten_free_async_context(($AsyncCtx6|0));
 $11 = HEAP32[144>>2]|0;
 $12 = (((232 + ($11<<7)|0)) + 12|0);
 HEAP32[$12>>2] = 0;
 $13 = (((232 + ($11<<7)|0)) + 28|0);
 HEAP32[$13>>2] = 0;
 $14 = (((232 + ($11<<7)|0)) + 44|0);
 HEAP32[$14>>2] = 0;
 $15 = (((232 + ($11<<7)|0)) + 60|0);
 HEAP32[$15>>2] = 0;
 $16 = (((232 + ($11<<7)|0)) + 76|0);
 HEAP32[$16>>2] = 0;
 $17 = (((232 + ($11<<7)|0)) + 92|0);
 HEAP32[$17>>2] = 0;
 $18 = (((232 + ($11<<7)|0)) + 108|0);
 HEAP32[$18>>2] = 0;
 $19 = (((232 + ($11<<7)|0)) + 124|0);
 HEAP32[$19>>2] = 0;
 __flush_interfaces();
 __clean_interface_queue();
 $20 = HEAP32[(651792)>>2]|0;
 $21 = ($20|0)==(0);
 L14: do {
  if (!($21)) {
   while(1) {
    $AsyncCtx9 = _emscripten_alloc_async_context(12,sp)|0;
    _emscripten_sleep(1);
    $IsAsync10 = ___async;
    if ($IsAsync10) {
     break;
    }
    _emscripten_free_async_context(($AsyncCtx9|0));
    $24 = HEAP32[(651792)>>2]|0;
    $25 = ($24|0)==(0);
    if ($25) {
     break L14;
    }
   }
   HEAP32[$AsyncCtx9>>2] = 186;
   $22 = ((($AsyncCtx9)) + 4|0);
   HEAP32[$22>>2] = $f;
   $23 = ((($AsyncCtx9)) + 8|0);
   HEAP32[$23>>2] = $_current_time$i;
   sp = STACKTOP;
   STACKTOP = sp;return;
  }
 } while(0);
 $26 = HEAP32[144>>2]|0;
 $27 = (152 + ($26<<2)|0);
 HEAP32[$27>>2] = $f;
 HEAP8[128>>0] = 1;
 (_gettimeofday(($_current_time$i|0),(0|0))|0);
 $28 = ((($_current_time$i)) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[(116)>>2]|0;
 $31 = ($30|0)>($29|0);
 if ($31) {
  $32 = (($30) - ($29))|0;
  $33 = (($32|0) / 1000000)&-1;
  $34 = (($33) + 1)|0;
  $35 = Math_imul($34, -1000000)|0;
  $36 = (($30) + ($35))|0;
  HEAP32[(116)>>2] = $36;
  $37 = HEAP32[112>>2]|0;
  $38 = (($37) + ($34))|0;
  HEAP32[112>>2] = $38;
  $40 = $36;
 } else {
  $40 = $30;
 }
 $39 = (($29) - ($40))|0;
 $41 = ($39|0)>(1000000);
 if ($41) {
  $42 = (($39|0) / 1000000)&-1;
  $43 = ($42*1000000)|0;
  $44 = (($43) + ($40))|0;
  HEAP32[(116)>>2] = $44;
  $45 = HEAP32[112>>2]|0;
  $46 = (($45) - ($42))|0;
  HEAP32[112>>2] = $46;
 }
 $47 = HEAP32[$_current_time$i>>2]|0;
 HEAP32[112>>2] = $47;
 HEAP32[(116)>>2] = $29;
 while(1) {
  _emscripten_set_main_loop(($f|0),0,1);
 }
}
function __exit_loop() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, $AsyncCtx9 = 0, $IsAsync = 0, $IsAsync10 = 0, $IsAsync3 = 0, $_current_time$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $_current_time$i = sp;
 $0 = HEAP32[(651828)>>2]|0;
 $AsyncCtx = _emscripten_alloc_async_context(8,sp)|0;
 FUNCTION_TABLE_v[$0 & 255]();
 $IsAsync = ___async;
 if ($IsAsync) {
  HEAP32[$AsyncCtx>>2] = 187;
  $1 = ((($AsyncCtx)) + 4|0);
  HEAP32[$1>>2] = $_current_time$i;
  sp = STACKTOP;
  STACKTOP = sp;return;
 }
 _emscripten_free_async_context(($AsyncCtx|0));
 $2 = HEAP32[144>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  $AsyncCtx6 = _emscripten_alloc_async_context(4,sp)|0;
  __may_the_weaver_sleep();
  // unreachable;
 }
 $4 = (((232 + ($2<<7)|0)) + 12|0);
 HEAP32[$4>>2] = 0;
 $5 = (((232 + ($2<<7)|0)) + 28|0);
 HEAP32[$5>>2] = 0;
 $6 = (((232 + ($2<<7)|0)) + 44|0);
 HEAP32[$6>>2] = 0;
 $7 = (((232 + ($2<<7)|0)) + 60|0);
 HEAP32[$7>>2] = 0;
 $8 = (((232 + ($2<<7)|0)) + 76|0);
 HEAP32[$8>>2] = 0;
 $9 = (((232 + ($2<<7)|0)) + 92|0);
 HEAP32[$9>>2] = 0;
 $10 = (((232 + ($2<<7)|0)) + 108|0);
 HEAP32[$10>>2] = 0;
 $11 = (((232 + ($2<<7)|0)) + 124|0);
 HEAP32[$11>>2] = 0;
 __flush_interfaces();
 __clean_interface_queue();
 $12 = HEAP32[(651792)>>2]|0;
 $13 = ($12|0)==(0);
 L7: do {
  if (!($13)) {
   while(1) {
    $AsyncCtx9 = _emscripten_alloc_async_context(8,sp)|0;
    _emscripten_sleep(1);
    $IsAsync10 = ___async;
    if ($IsAsync10) {
     break;
    }
    _emscripten_free_async_context(($AsyncCtx9|0));
    $15 = HEAP32[(651792)>>2]|0;
    $16 = ($15|0)==(0);
    if ($16) {
     break L7;
    }
   }
   HEAP32[$AsyncCtx9>>2] = 188;
   $14 = ((($AsyncCtx9)) + 4|0);
   HEAP32[$14>>2] = $_current_time$i;
   sp = STACKTOP;
   STACKTOP = sp;return;
  }
 } while(0);
 $17 = HEAP32[144>>2]|0;
 $18 = (($17) + -1)|0;
 HEAP32[144>>2] = $18;
 HEAP32[216>>2] = 0;
 $19 = HEAP32[(651852)>>2]|0;
 $AsyncCtx2 = _emscripten_alloc_async_context(8,sp)|0;
 FUNCTION_TABLE_v[$19 & 255]();
 $IsAsync3 = ___async;
 if ($IsAsync3) {
  HEAP32[$AsyncCtx2>>2] = 189;
  $20 = ((($AsyncCtx2)) + 4|0);
  HEAP32[$20>>2] = $_current_time$i;
  sp = STACKTOP;
  STACKTOP = sp;return;
 }
 _emscripten_free_async_context(($AsyncCtx2|0));
 HEAP8[128>>0] = 1;
 (_gettimeofday(($_current_time$i|0),(0|0))|0);
 $21 = ((($_current_time$i)) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = HEAP32[(116)>>2]|0;
 $24 = ($23|0)>($22|0);
 if ($24) {
  $25 = (($23) - ($22))|0;
  $26 = (($25|0) / 1000000)&-1;
  $27 = (($26) + 1)|0;
  $28 = Math_imul($27, -1000000)|0;
  $29 = (($23) + ($28))|0;
  HEAP32[(116)>>2] = $29;
  $30 = HEAP32[112>>2]|0;
  $31 = (($30) + ($27))|0;
  HEAP32[112>>2] = $31;
  $33 = $29;
 } else {
  $33 = $23;
 }
 $32 = (($22) - ($33))|0;
 $34 = ($32|0)>(1000000);
 if ($34) {
  $35 = (($32|0) / 1000000)&-1;
  $36 = ($35*1000000)|0;
  $37 = (($36) + ($33))|0;
  HEAP32[(116)>>2] = $37;
  $38 = HEAP32[112>>2]|0;
  $39 = (($38) - ($35))|0;
  HEAP32[112>>2] = $39;
 }
 $40 = HEAP32[$_current_time$i>>2]|0;
 HEAP32[112>>2] = $40;
 HEAP32[(116)>>2] = $22;
 _emscripten_cancel_main_loop();
 while(1) {
  $41 = HEAP32[144>>2]|0;
  $42 = (152 + ($41<<2)|0);
  $43 = HEAP32[$42>>2]|0;
  _emscripten_set_main_loop(($43|0),0,1);
 }
}
function __may_the_weaver_sleep() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $IsAsync = 0, $IsAsync3 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __finalize_canvas();
 $0 = HEAP32[(651808)>>2]|0;
 $1 = HEAP32[35072>>2]|0;
 $AsyncCtx = _emscripten_alloc_async_context(4,sp)|0;
 FUNCTION_TABLE_vi[$0 & 255]($1);
 $IsAsync = ___async;
 if ($IsAsync) {
  HEAP32[$AsyncCtx>>2] = 190;
  sp = STACKTOP;
  return;
 }
 _emscripten_free_async_context(($AsyncCtx|0));
 $2 = HEAP32[35080>>2]|0;
 $3 = ($2|0)>(0);
 L4: do {
  if ($3) {
   $i$01 = 0;
   while(1) {
    $4 = HEAP32[35072>>2]|0;
    $5 = (((($4) + (($i$01*156)|0)|0)) + 132|0);
    $6 = HEAP32[$5>>2]|0;
    $AsyncCtx2 = _emscripten_alloc_async_context(8,sp)|0;
    FUNCTION_TABLE_vi[$6 & 255](389544);
    $IsAsync3 = ___async;
    if ($IsAsync3) {
     break;
    }
    _emscripten_free_async_context(($AsyncCtx2|0));
    $8 = (($i$01) + 1)|0;
    $9 = HEAP32[35080>>2]|0;
    $10 = ($8|0)<($9|0);
    if ($10) {
     $i$01 = $8;
    } else {
     break L4;
    }
   }
   HEAP32[$AsyncCtx2>>2] = 191;
   $7 = ((($AsyncCtx2)) + 4|0);
   HEAP32[$7>>2] = $i$01;
   sp = STACKTOP;
   return;
  }
 } while(0);
 __finalize_memory();
 $11 = HEAP32[(33068)>>2]|0;
 _glDeleteProgram(($11|0));
 _glDeleteFramebuffers(1,(35048|0));
 _glDeleteTextures(1,(35056|0));
 _glDeleteRenderbuffers(1,(35064|0));
 _exit(0);
 // unreachable;
}
function _Wsubloop($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $IsAsync = 0, $IsAsync3 = 0, $_current_time$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $_current_time$i = sp;
 _emscripten_cancel_main_loop();
 $0 = HEAP32[(651824)>>2]|0;
 $AsyncCtx = _emscripten_alloc_async_context(12,sp)|0;
 (FUNCTION_TABLE_i[$0 & 255]()|0);
 $IsAsync = ___async;
 if ($IsAsync) {
  HEAP32[$AsyncCtx>>2] = 192;
  $1 = ((($AsyncCtx)) + 4|0);
  HEAP32[$1>>2] = $f;
  $2 = ((($AsyncCtx)) + 8|0);
  HEAP32[$2>>2] = $_current_time$i;
  sp = STACKTOP;
  STACKTOP = sp;return;
 }
 _emscripten_free_async_context(($AsyncCtx|0));
 HEAP8[120>>0] = 1;
 $3 = HEAP32[144>>2]|0;
 $4 = (($3) + 1)|0;
 HEAP32[144>>2] = $4;
 HEAP32[216>>2] = 0;
 $5 = HEAP32[(651852)>>2]|0;
 $AsyncCtx2 = _emscripten_alloc_async_context(12,sp)|0;
 FUNCTION_TABLE_v[$5 & 255]();
 $IsAsync3 = ___async;
 if ($IsAsync3) {
  HEAP32[$AsyncCtx2>>2] = 193;
  $6 = ((($AsyncCtx2)) + 4|0);
  HEAP32[$6>>2] = $f;
  $7 = ((($AsyncCtx2)) + 8|0);
  HEAP32[$7>>2] = $_current_time$i;
  sp = STACKTOP;
  STACKTOP = sp;return;
 }
 _emscripten_free_async_context(($AsyncCtx2|0));
 $8 = HEAP32[144>>2]|0;
 $9 = (152 + ($8<<2)|0);
 HEAP32[$9>>2] = $f;
 HEAP8[128>>0] = 1;
 (_gettimeofday(($_current_time$i|0),(0|0))|0);
 $10 = ((($_current_time$i)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = HEAP32[(116)>>2]|0;
 $13 = ($12|0)>($11|0);
 if ($13) {
  $14 = (($12) - ($11))|0;
  $15 = (($14|0) / 1000000)&-1;
  $16 = (($15) + 1)|0;
  $17 = Math_imul($16, -1000000)|0;
  $18 = (($12) + ($17))|0;
  HEAP32[(116)>>2] = $18;
  $19 = HEAP32[112>>2]|0;
  $20 = (($19) + ($16))|0;
  HEAP32[112>>2] = $20;
  $22 = $18;
 } else {
  $22 = $12;
 }
 $21 = (($11) - ($22))|0;
 $23 = ($21|0)>(1000000);
 if ($23) {
  $24 = (($21|0) / 1000000)&-1;
  $25 = ($24*1000000)|0;
  $26 = (($25) + ($22))|0;
  HEAP32[(116)>>2] = $26;
  $27 = HEAP32[112>>2]|0;
  $28 = (($27) - ($24))|0;
  HEAP32[112>>2] = $28;
 }
 $29 = HEAP32[$_current_time$i>>2]|0;
 HEAP32[112>>2] = $29;
 HEAP32[(116)>>2] = $11;
 while(1) {
  _emscripten_set_main_loop(($f|0),0,1);
 }
}
function __Wkey_translate($old_value,$new_value) {
 $old_value = $old_value|0;
 $new_value = $new_value|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __Werase_key_translations() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __Wflush_input() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $exitcond = 0, $i$04 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $i$04 = 0;
 while(1) {
  $0 = (652008 + ($i$04<<2)|0);
  $1 = HEAP32[$0>>2]|0;
  HEAP32[$0>>2] = 0;
  $2 = (389588 + ($1<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (652088 + ($i$04<<2)|0);
  $4 = HEAP32[$3>>2]|0;
  HEAP32[$3>>2] = 0;
  $5 = (389588 + ($4<<2)|0);
  HEAP32[$5>>2] = 0;
  $6 = (($i$04) + 1)|0;
  $exitcond = ($6|0)==(20);
  if ($exitcond) {
   break;
  } else {
   $i$04 = $6;
  }
 }
 ;HEAP32[651960>>2]=0|0;HEAP32[651960+4>>2]=0|0;HEAP32[651960+8>>2]=0|0;HEAP32[651960+12>>2]=0|0;HEAP32[651960+16>>2]=0|0;
 ;HEAP32[651984>>2]=0|0;HEAP32[651984+4>>2]=0|0;HEAP32[651984+8>>2]=0|0;HEAP32[651984+12>>2]=0|0;HEAP32[651984+16>>2]=0|0;
 ;HEAP32[(651728)>>2]=0|0;HEAP32[(651728)+4>>2]=0|0;HEAP32[(651728)+8>>2]=0|0;HEAP32[(651728)+12>>2]=0|0;HEAP32[(651728)+16>>2]=0|0;HEAP32[(651728)+20>>2]=0|0;HEAP32[(651728)+24>>2]=0|0;
 HEAP32[(651764)>>2] = 0;
 HEAP32[(651768)>>2] = 0;
 return;
}
function __Whide_cursor() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 (_SDL_ShowCursor(0)|0);
 _emscripten_hide_mouse();
 HEAP8[224>>0] = 0;
 return;
}
function __run_periodically($f,$t) {
 $f = $f|0;
 $t = +$t;
 var $$lcssa = 0, $0 = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$02$lcssa = 0, $or$cond = 0, $or$cond$1 = 0, $or$cond$2 = 0, $or$cond$3 = 0, $or$cond$4 = 0, $or$cond$5 = 0, $or$cond$6 = 0, $or$cond$7 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $t * 1.0E+6;
 $1 = (~~(($0))>>>0);
 $2 = HEAP32[144>>2]|0;
 $3 = (((232 + ($2<<7)|0)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 $6 = ($4|0)==($f|0);
 $or$cond = $5 | $6;
 if ($or$cond) {
  $$lcssa = $3;$i$02$lcssa = 0;
 } else {
  $16 = (((232 + ($2<<7)|0)) + 28|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)==(0|0);
  $19 = ($17|0)==($f|0);
  $or$cond$1 = $18 | $19;
  if ($or$cond$1) {
   $$lcssa = $16;$i$02$lcssa = 1;
  } else {
   $21 = (((232 + ($2<<7)|0)) + 44|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)==(0|0);
   $24 = ($22|0)==($f|0);
   $or$cond$2 = $23 | $24;
   if ($or$cond$2) {
    $$lcssa = $21;$i$02$lcssa = 2;
   } else {
    $25 = (((232 + ($2<<7)|0)) + 60|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = ($26|0)==(0|0);
    $28 = ($26|0)==($f|0);
    $or$cond$3 = $27 | $28;
    if ($or$cond$3) {
     $$lcssa = $25;$i$02$lcssa = 3;
    } else {
     $29 = (((232 + ($2<<7)|0)) + 76|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==(0|0);
     $32 = ($30|0)==($f|0);
     $or$cond$4 = $31 | $32;
     if ($or$cond$4) {
      $$lcssa = $29;$i$02$lcssa = 4;
     } else {
      $33 = (((232 + ($2<<7)|0)) + 92|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = ($34|0)==(0|0);
      $36 = ($34|0)==($f|0);
      $or$cond$5 = $35 | $36;
      if ($or$cond$5) {
       $$lcssa = $33;$i$02$lcssa = 5;
      } else {
       $37 = (((232 + ($2<<7)|0)) + 108|0);
       $38 = HEAP32[$37>>2]|0;
       $39 = ($38|0)==(0|0);
       $40 = ($38|0)==($f|0);
       $or$cond$6 = $39 | $40;
       if ($or$cond$6) {
        $$lcssa = $37;$i$02$lcssa = 6;
       } else {
        $41 = (((232 + ($2<<7)|0)) + 124|0);
        $42 = HEAP32[$41>>2]|0;
        $43 = ($42|0)==(0|0);
        $44 = ($42|0)==($f|0);
        $or$cond$7 = $43 | $44;
        if ($or$cond$7) {
         $$lcssa = $41;$i$02$lcssa = 7;
        } else {
         $20 = HEAP32[_stderr>>2]|0;
         (_fwrite((652168|0),41,1,($20|0))|0);
         HEAP32[$vararg_buffer>>2] = 8;
         (_fprintf(($20|0),(652216|0),($vararg_buffer|0))|0);
         STACKTOP = sp;return;
        }
       }
      }
     }
    }
   }
  }
 }
 HEAP32[$$lcssa>>2] = $f;
 $7 = ((((232 + ($2<<7)|0) + ($i$02$lcssa<<4)|0)) + 8|0);
 HEAP32[$7>>2] = $1;
 $8 = ((232 + ($2<<7)|0) + ($i$02$lcssa<<4)|0);
 HEAP8[$8>>0] = 1;
 $9 = 389544;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) + 4)|0;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = ((((232 + ($2<<7)|0) + ($i$02$lcssa<<4)|0)) + 4|0);
 HEAP32[$15>>2] = $11;
 STACKTOP = sp;return;
}
function __run_futurelly($f,$t) {
 $f = $f|0;
 $t = +$t;
 var $$lcssa = 0, $0 = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$02$lcssa = 0, $or$cond = 0, $or$cond$1 = 0, $or$cond$2 = 0, $or$cond$3 = 0, $or$cond$4 = 0, $or$cond$5 = 0, $or$cond$6 = 0, $or$cond$7 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $t * 1.0E+6;
 $1 = (~~(($0))>>>0);
 $2 = HEAP32[144>>2]|0;
 $3 = (((232 + ($2<<7)|0)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 $6 = ($4|0)==($f|0);
 $or$cond = $5 | $6;
 if ($or$cond) {
  $$lcssa = $3;$i$02$lcssa = 0;
 } else {
  $16 = (((232 + ($2<<7)|0)) + 28|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)==(0|0);
  $19 = ($17|0)==($f|0);
  $or$cond$1 = $18 | $19;
  if ($or$cond$1) {
   $$lcssa = $16;$i$02$lcssa = 1;
  } else {
   $21 = (((232 + ($2<<7)|0)) + 44|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)==(0|0);
   $24 = ($22|0)==($f|0);
   $or$cond$2 = $23 | $24;
   if ($or$cond$2) {
    $$lcssa = $21;$i$02$lcssa = 2;
   } else {
    $25 = (((232 + ($2<<7)|0)) + 60|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = ($26|0)==(0|0);
    $28 = ($26|0)==($f|0);
    $or$cond$3 = $27 | $28;
    if ($or$cond$3) {
     $$lcssa = $25;$i$02$lcssa = 3;
    } else {
     $29 = (((232 + ($2<<7)|0)) + 76|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==(0|0);
     $32 = ($30|0)==($f|0);
     $or$cond$4 = $31 | $32;
     if ($or$cond$4) {
      $$lcssa = $29;$i$02$lcssa = 4;
     } else {
      $33 = (((232 + ($2<<7)|0)) + 92|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = ($34|0)==(0|0);
      $36 = ($34|0)==($f|0);
      $or$cond$5 = $35 | $36;
      if ($or$cond$5) {
       $$lcssa = $33;$i$02$lcssa = 5;
      } else {
       $37 = (((232 + ($2<<7)|0)) + 108|0);
       $38 = HEAP32[$37>>2]|0;
       $39 = ($38|0)==(0|0);
       $40 = ($38|0)==($f|0);
       $or$cond$6 = $39 | $40;
       if ($or$cond$6) {
        $$lcssa = $37;$i$02$lcssa = 6;
       } else {
        $41 = (((232 + ($2<<7)|0)) + 124|0);
        $42 = HEAP32[$41>>2]|0;
        $43 = ($42|0)==(0|0);
        $44 = ($42|0)==($f|0);
        $or$cond$7 = $43 | $44;
        if ($or$cond$7) {
         $$lcssa = $41;$i$02$lcssa = 7;
        } else {
         $20 = HEAP32[_stderr>>2]|0;
         (_fwrite((652168|0),41,1,($20|0))|0);
         HEAP32[$vararg_buffer>>2] = 8;
         (_fprintf(($20|0),(652216|0),($vararg_buffer|0))|0);
         STACKTOP = sp;return;
        }
       }
      }
     }
    }
   }
  }
 }
 HEAP32[$$lcssa>>2] = $f;
 $7 = ((((232 + ($2<<7)|0) + ($i$02$lcssa<<4)|0)) + 8|0);
 HEAP32[$7>>2] = $1;
 $8 = ((232 + ($2<<7)|0) + ($i$02$lcssa<<4)|0);
 HEAP8[$8>>0] = 0;
 $9 = 389544;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) + 4)|0;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = ((((232 + ($2<<7)|0) + ($i$02$lcssa<<4)|0)) + 4|0);
 HEAP32[$15>>2] = $11;
 STACKTOP = sp;return;
}
function __cancel($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[144>>2]|0;
 $1 = (((232 + ($0<<7)|0)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==($f|0);
 if ($3) {
  $i$12 = 0;
  label = 2;
 } else {
  $15 = (((232 + ($0<<7)|0)) + 28|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)==($f|0);
  if ($17) {
   $i$12 = 1;
   label = 2;
  } else {
   $18 = (((232 + ($0<<7)|0)) + 44|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==($f|0);
   if ($20) {
    $i$12 = 2;
    label = 2;
   } else {
    $21 = (((232 + ($0<<7)|0)) + 60|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ($22|0)==($f|0);
    if ($23) {
     $i$12 = 3;
     label = 2;
    } else {
     $24 = (((232 + ($0<<7)|0)) + 76|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = ($25|0)==($f|0);
     if ($26) {
      $i$12 = 4;
      label = 2;
     } else {
      $27 = (((232 + ($0<<7)|0)) + 92|0);
      $28 = HEAP32[$27>>2]|0;
      $29 = ($28|0)==($f|0);
      if ($29) {
       $i$12 = 5;
       label = 2;
      } else {
       $30 = (((232 + ($0<<7)|0)) + 108|0);
       $31 = HEAP32[$30>>2]|0;
       $32 = ($31|0)==($f|0);
       if ($32) {
        $i$12 = 6;
        label = 2;
       } else {
        $33 = (((232 + ($0<<7)|0)) + 124|0);
        $34 = HEAP32[$33>>2]|0;
        $35 = ($34|0)==($f|0);
        if (!($35)) {
         return;
        }
       }
      }
     }
    }
   }
  }
 }
 if ((label|0) == 2) {
  while(1) {
   label = 0;
   $4 = (($i$12) + 1)|0;
   $5 = ((((232 + ($0<<7)|0) + ($4<<4)|0)) + 12|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ((((232 + ($0<<7)|0) + ($i$12<<4)|0)) + 12|0);
   HEAP32[$7>>2] = $6;
   $8 = ((((232 + ($0<<7)|0) + ($4<<4)|0)) + 8|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ((((232 + ($0<<7)|0) + ($i$12<<4)|0)) + 8|0);
   HEAP32[$10>>2] = $9;
   $11 = ((((232 + ($0<<7)|0) + ($4<<4)|0)) + 4|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ((((232 + ($0<<7)|0) + ($i$12<<4)|0)) + 4|0);
   HEAP32[$13>>2] = $12;
   $exitcond = ($4|0)==(7);
   if ($exitcond) {
    break;
   } else {
    $i$12 = $4;
    label = 2;
   }
  }
 }
 $14 = (((232 + ($0<<7)|0)) + 124|0);
 HEAP32[$14>>2] = 0;
 return;
}
function __period($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0.0;
 var $81 = 0, $9 = 0.0, $result$1 = 0.0, $result$1$1 = 0.0, $result$1$2 = 0.0, $result$1$3 = 0.0, $result$1$4 = 0.0, $result$1$5 = 0.0, $result$1$6 = 0.0, $result$1$7 = 0.0, $result$2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[144>>2]|0;
 $1 = (((232 + ($0<<7)|0)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==($f|0);
 if ($3) {
  $4 = (232 + ($0<<7)|0);
  $5 = HEAP8[$4>>0]|0;
  $6 = ($5<<24>>24)==(0);
  if ($6) {
   $result$1 = inf;
  } else {
   $7 = (((232 + ($0<<7)|0)) + 8|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = (+($8>>>0));
   $10 = $9 / 1.0E+6;
   $result$1 = $10;
  }
 } else {
  $result$1 = -1.0;
 }
 $11 = (((232 + ($0<<7)|0)) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==($f|0);
 if ($13) {
  $14 = (((232 + ($0<<7)|0)) + 16|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = ($15<<24>>24)==(0);
  if ($16) {
   $result$1$1 = inf;
  } else {
   $17 = (((232 + ($0<<7)|0)) + 24|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (+($18>>>0));
   $20 = $19 / 1.0E+6;
   $result$1$1 = $20;
  }
 } else {
  $result$1$1 = $result$1;
 }
 $21 = (((232 + ($0<<7)|0)) + 44|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)==($f|0);
 if ($23) {
  $24 = (((232 + ($0<<7)|0)) + 32|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = ($25<<24>>24)==(0);
  if ($26) {
   $result$1$2 = inf;
  } else {
   $27 = (((232 + ($0<<7)|0)) + 40|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (+($28>>>0));
   $30 = $29 / 1.0E+6;
   $result$1$2 = $30;
  }
 } else {
  $result$1$2 = $result$1$1;
 }
 $31 = (((232 + ($0<<7)|0)) + 60|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)==($f|0);
 if ($33) {
  $34 = (((232 + ($0<<7)|0)) + 48|0);
  $35 = HEAP8[$34>>0]|0;
  $36 = ($35<<24>>24)==(0);
  if ($36) {
   $result$1$3 = inf;
  } else {
   $37 = (((232 + ($0<<7)|0)) + 56|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = (+($38>>>0));
   $40 = $39 / 1.0E+6;
   $result$1$3 = $40;
  }
 } else {
  $result$1$3 = $result$1$2;
 }
 $41 = (((232 + ($0<<7)|0)) + 76|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ($42|0)==($f|0);
 if ($43) {
  $44 = (((232 + ($0<<7)|0)) + 64|0);
  $45 = HEAP8[$44>>0]|0;
  $46 = ($45<<24>>24)==(0);
  if ($46) {
   $result$1$4 = inf;
  } else {
   $47 = (((232 + ($0<<7)|0)) + 72|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = (+($48>>>0));
   $50 = $49 / 1.0E+6;
   $result$1$4 = $50;
  }
 } else {
  $result$1$4 = $result$1$3;
 }
 $51 = (((232 + ($0<<7)|0)) + 92|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ($52|0)==($f|0);
 if ($53) {
  $54 = (((232 + ($0<<7)|0)) + 80|0);
  $55 = HEAP8[$54>>0]|0;
  $56 = ($55<<24>>24)==(0);
  if ($56) {
   $result$1$5 = inf;
  } else {
   $57 = (((232 + ($0<<7)|0)) + 88|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = (+($58>>>0));
   $60 = $59 / 1.0E+6;
   $result$1$5 = $60;
  }
 } else {
  $result$1$5 = $result$1$4;
 }
 $61 = (((232 + ($0<<7)|0)) + 108|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = ($62|0)==($f|0);
 if ($63) {
  $64 = (((232 + ($0<<7)|0)) + 96|0);
  $65 = HEAP8[$64>>0]|0;
  $66 = ($65<<24>>24)==(0);
  if ($66) {
   $result$1$6 = inf;
  } else {
   $67 = (((232 + ($0<<7)|0)) + 104|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = (+($68>>>0));
   $70 = $69 / 1.0E+6;
   $result$1$6 = $70;
  }
 } else {
  $result$1$6 = $result$1$5;
 }
 $71 = (((232 + ($0<<7)|0)) + 124|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = ($72|0)==($f|0);
 if (!($73)) {
  $result$1$7 = $result$1$6;
  $81 = $result$1$7 < 0.0;
  $result$2 = $81 ? nan : $result$1$7;
  return (+$result$2);
 }
 $74 = (((232 + ($0<<7)|0)) + 112|0);
 $75 = HEAP8[$74>>0]|0;
 $76 = ($75<<24>>24)==(0);
 if ($76) {
  $result$1$7 = inf;
  $81 = $result$1$7 < 0.0;
  $result$2 = $81 ? nan : $result$1$7;
  return (+$result$2);
 }
 $77 = (((232 + ($0<<7)|0)) + 120|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = (+($78>>>0));
 $80 = $79 / 1.0E+6;
 $result$1$7 = $80;
 $81 = $result$1$7 < 0.0;
 $result$2 = $81 ? nan : $result$1$7;
 return (+$result$2);
}
function __awake_the_weaver() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx14 = 0, $AsyncCtx18 = 0, $AsyncCtx22 = 0, $AsyncCtx26 = 0, $AsyncCtx3 = 0, $AsyncCtx30 = 0, $AsyncCtx34 = 0, $AsyncCtx38 = 0, $AsyncCtx42 = 0;
 var $AsyncCtx46 = 0, $AsyncCtx50 = 0, $AsyncCtx54 = 0, $AsyncCtx58 = 0, $AsyncCtx6 = 0, $AsyncCtx62 = 0, $AsyncCtx65 = 0, $IsAsync = 0, $IsAsync11 = 0, $IsAsync15 = 0, $IsAsync19 = 0, $IsAsync23 = 0, $IsAsync27 = 0, $IsAsync31 = 0, $IsAsync35 = 0, $IsAsync39 = 0, $IsAsync4 = 0, $IsAsync43 = 0, $IsAsync47 = 0, $IsAsync51 = 0;
 var $IsAsync55 = 0, $IsAsync59 = 0, $IsAsync63 = 0, $IsAsync66 = 0, $IsAsync7 = 0, $exitcond = 0, $exitcond18 = 0, $i2$011 = 0, $i3$09 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = 389544;
 $1 = $0;
 HEAP32[$1>>2] = 0;
 $2 = (($0) + 4)|0;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 (_gettimeofday((112|0),(0|0))|0);
 HEAP32[(389556)>>2] = 35192;
 HEAP32[(651796)>>2] = 194;
 HEAP32[(651800)>>2] = 195;
 HEAP32[(651804)>>2] = 196;
 HEAP32[(651808)>>2] = 197;
 HEAP32[(651812)>>2] = 198;
 HEAP32[(651816)>>2] = 199;
 $AsyncCtx65 = _emscripten_alloc_async_context(4,sp)|0;
 __initialize_memory();
 $IsAsync66 = ___async;
 if ($IsAsync66) {
  HEAP32[$AsyncCtx65>>2] = 200;
  sp = STACKTOP;
  return;
 }
 _emscripten_free_async_context(($AsyncCtx65|0));
 HEAP32[(651820)>>2] = 201;
 HEAP32[(651824)>>2] = 202;
 HEAP32[(651828)>>2] = 203;
 HEAP8[136>>0] = 1;
 HEAP8[128>>0] = 0;
 HEAP32[144>>2] = 0;
 HEAP32[(389552)>>2] = 40000;
 HEAP32[216>>2] = 0;
 __initialize_numeric_functions();
 HEAP32[(651832)>>2] = 204;
 __initialize_canvas();
 HEAP32[(651836)>>2] = 205;
 HEAP32[(651840)>>2] = 206;
 _glClearColor(0.0,0.0,0.0,1.0);
 _glEnable(2929);
 _glEnable(2884);
 _glEnable(3042);
 _glBlendFunc(770,771);
 _memset(((389588)|0),0,262140)|0;
 dest=652008; stop=dest+80|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 dest=652088; stop=dest+80|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[(651844)>>2] = 207;
 HEAP32[(651848)>>2] = 208;
 HEAP32[(651852)>>2] = 209;
 ;HEAP32[(651728)>>2]=0|0;HEAP32[(651728)+4>>2]=0|0;HEAP32[(651728)+8>>2]=0|0;HEAP32[(651728)+12>>2]=0|0;HEAP32[(651728)+16>>2]=0|0;
 ;HEAP32[651984>>2]=0|0;HEAP32[651984+4>>2]=0|0;HEAP32[651984+8>>2]=0|0;HEAP32[651984+12>>2]=0|0;HEAP32[651984+16>>2]=0|0;
 ;HEAP32[651960>>2]=0|0;HEAP32[651960+4>>2]=0|0;HEAP32[651960+8>>2]=0|0;HEAP32[651960+12>>2]=0|0;HEAP32[651960+16>>2]=0|0;
 (_SDL_GetMouseState(((651756)|0),((651760)|0))|0);
 $4 = HEAP32[(389576)>>2]|0;
 $5 = (($4) + -1)|0;
 $6 = HEAP32[(651760)>>2]|0;
 $7 = (($5) - ($6))|0;
 HEAP32[(651760)>>2] = $7;
 ;HEAP32[(651764)>>2]=0|0;HEAP32[(651764)+4>>2]=0|0;HEAP32[(651764)+8>>2]=0|0;HEAP32[(651764)+12>>2]=0|0;
 HEAP32[652312>>2] = 0;
 HEAP32[652320>>2] = 0;
 HEAP8[224>>0] = 1;
 HEAP32[(651856)>>2] = 210;
 HEAP32[(651860)>>2] = 211;
 $i2$011 = 0;
 while(1) {
  $8 = (((232 + ($i2$011<<7)|0)) + 12|0);
  HEAP32[$8>>2] = 0;
  $9 = (((232 + ($i2$011<<7)|0)) + 28|0);
  HEAP32[$9>>2] = 0;
  $10 = (((232 + ($i2$011<<7)|0)) + 44|0);
  HEAP32[$10>>2] = 0;
  $11 = (((232 + ($i2$011<<7)|0)) + 60|0);
  HEAP32[$11>>2] = 0;
  $12 = (((232 + ($i2$011<<7)|0)) + 76|0);
  HEAP32[$12>>2] = 0;
  $13 = (((232 + ($i2$011<<7)|0)) + 92|0);
  HEAP32[$13>>2] = 0;
  $14 = (((232 + ($i2$011<<7)|0)) + 108|0);
  HEAP32[$14>>2] = 0;
  $15 = (((232 + ($i2$011<<7)|0)) + 124|0);
  HEAP32[$15>>2] = 0;
  $16 = (($i2$011) + 1)|0;
  $exitcond18 = ($16|0)==(16);
  if ($exitcond18) {
   break;
  } else {
   $i2$011 = $16;
  }
 }
 HEAP32[(651872)>>2] = 212;
 HEAP32[(651876)>>2] = 213;
 HEAP32[(651880)>>2] = 214;
 HEAP32[(651884)>>2] = 215;
 $i3$09 = 0;
 while(1) {
  $17 = (2280 + (($i3$09*1856)|0)|0);
  HEAP32[$17>>2] = 0;
  $18 = (((2280 + (($i3$09*1856)|0)|0)) + 116|0);
  HEAP32[$18>>2] = 0;
  $19 = (((2280 + (($i3$09*1856)|0)|0)) + 232|0);
  HEAP32[$19>>2] = 0;
  $20 = (((2280 + (($i3$09*1856)|0)|0)) + 348|0);
  HEAP32[$20>>2] = 0;
  $21 = (((2280 + (($i3$09*1856)|0)|0)) + 464|0);
  HEAP32[$21>>2] = 0;
  $22 = (((2280 + (($i3$09*1856)|0)|0)) + 580|0);
  HEAP32[$22>>2] = 0;
  $23 = (((2280 + (($i3$09*1856)|0)|0)) + 696|0);
  HEAP32[$23>>2] = 0;
  $24 = (((2280 + (($i3$09*1856)|0)|0)) + 812|0);
  HEAP32[$24>>2] = 0;
  $25 = (((2280 + (($i3$09*1856)|0)|0)) + 928|0);
  HEAP32[$25>>2] = 0;
  $26 = (((2280 + (($i3$09*1856)|0)|0)) + 1044|0);
  HEAP32[$26>>2] = 0;
  $27 = (((2280 + (($i3$09*1856)|0)|0)) + 1160|0);
  HEAP32[$27>>2] = 0;
  $28 = (((2280 + (($i3$09*1856)|0)|0)) + 1276|0);
  HEAP32[$28>>2] = 0;
  $29 = (((2280 + (($i3$09*1856)|0)|0)) + 1392|0);
  HEAP32[$29>>2] = 0;
  $30 = (((2280 + (($i3$09*1856)|0)|0)) + 1508|0);
  HEAP32[$30>>2] = 0;
  $31 = (((2280 + (($i3$09*1856)|0)|0)) + 1624|0);
  HEAP32[$31>>2] = 0;
  $32 = (((2280 + (($i3$09*1856)|0)|0)) + 1740|0);
  HEAP32[$32>>2] = 0;
  $33 = (($i3$09) + 1)|0;
  $exitcond = ($33|0)==(16);
  if ($exitcond) {
   break;
  } else {
   $i3$09 = $33;
  }
 }
 HEAP8[652328>>0] = 1;
 $34 = (_glewInit()|0);
 $35 = ($34|0)==(0);
 if (!($35)) {
  $36 = HEAP32[_stderr>>2]|0;
  (_fwrite((652336|0),26,1,($36|0))|0);
  _exit(1);
  // unreachable;
 }
 (_glGetError()|0);
 HEAPF32[31976>>2] = -0.5;
 HEAPF32[(31980)>>2] = -0.5;
 HEAPF32[(31984)>>2] = 0.0;
 HEAPF32[(31988)>>2] = 0.5;
 HEAPF32[(31992)>>2] = -0.5;
 HEAPF32[(31996)>>2] = 0.0;
 HEAPF32[(32000)>>2] = 0.5;
 HEAPF32[(32004)>>2] = 0.5;
 HEAPF32[(32008)>>2] = 0.0;
 HEAPF32[(32012)>>2] = -0.5;
 HEAPF32[(32016)>>2] = 0.5;
 HEAPF32[(32020)>>2] = 0.0;
 _glGenBuffers(1,(32024|0));
 _glGenVertexArrays(1,(32032|0));
 $37 = HEAP32[32032>>2]|0;
 _glBindVertexArray(($37|0));
 $38 = HEAP32[32024>>2]|0;
 _glBindBuffer(34962,($38|0));
 _glBufferData(34962,48,(31976|0),35044);
 _glVertexAttribPointer(0,3,5126,0,0,(0|0));
 _glEnableVertexAttribArray(0);
 _glBindVertexArray(0);
 HEAP32[(651908)>>2] = 216;
 HEAP32[(651912)>>2] = 217;
 HEAP32[(651916)>>2] = 218;
 HEAP32[(651920)>>2] = 219;
 HEAP32[(651924)>>2] = 220;
 HEAP32[(651928)>>2] = 221;
 $AsyncCtx62 = _emscripten_alloc_async_context(4,sp)|0;
 $39 = (__compile_shader(386056,1)|0);
 $IsAsync63 = ___async;
 if ($IsAsync63) {
  HEAP32[$AsyncCtx62>>2] = 222;
  sp = STACKTOP;
  return;
 }
 _emscripten_free_async_context(($AsyncCtx62|0));
 $AsyncCtx58 = _emscripten_alloc_async_context(8,sp)|0;
 $40 = (__compile_shader(386600,0)|0);
 $IsAsync59 = ___async;
 if ($IsAsync59) {
  HEAP32[$AsyncCtx58>>2] = 223;
  $41 = ((($AsyncCtx58)) + 4|0);
  HEAP32[$41>>2] = $39;
  sp = STACKTOP;
  return;
 }
 _emscripten_free_async_context(($AsyncCtx58|0));
 $AsyncCtx46 = _emscripten_alloc_async_context(4,sp)|0;
 $42 = (__link_and_clean_shaders($39,$40)|0);
 $IsAsync47 = ___async;
 if ($IsAsync47) {
  HEAP32[$AsyncCtx46>>2] = 224;
  sp = STACKTOP;
  return;
 }
 _emscripten_free_async_context(($AsyncCtx46|0));
 HEAP32[(33068)>>2] = $42;
 $43 = (_glGetUniformLocation(($42|0),(652368|0))|0);
 HEAP32[(33200)>>2] = $43;
 $44 = HEAP32[(33068)>>2]|0;
 $45 = (_glGetUniformLocation(($44|0),(652384|0))|0);
 HEAP32[(33204)>>2] = $45;
 $46 = HEAP32[(33068)>>2]|0;
 $47 = (_glGetUniformLocation(($46|0),(652408|0))|0);
 HEAP32[(33208)>>2] = $47;
 $48 = HEAP32[(33068)>>2]|0;
 $49 = (_glGetUniformLocation(($48|0),(652424|0))|0);
 HEAP32[(33220)>>2] = $49;
 $50 = HEAP32[(33068)>>2]|0;
 $51 = (_glGetUniformLocation(($50|0),(652432|0))|0);
 HEAP32[(33212)>>2] = $51;
 $52 = HEAP32[(33068)>>2]|0;
 $53 = (_glGetAttribLocation(($52|0),(652440|0))|0);
 HEAP32[(33224)>>2] = $53;
 $54 = (_atoi(652456)|0);
 $55 = ($54|0)<(10);
 do {
  if ($55) {
   $56 = (($54) + -1)|0;
   $AsyncCtx38 = _emscripten_alloc_async_context(4,sp)|0;
   __compile_and_insert_new_shader(652464,$56);
   $IsAsync39 = ___async;
   if ($IsAsync39) {
    HEAP32[$AsyncCtx38>>2] = 225;
    sp = STACKTOP;
    return;
   } else {
    _emscripten_free_async_context(($AsyncCtx38|0));
    break;
   }
  }
 } while(0);
 $57 = (_atoi(652480)|0);
 $58 = ($57|0)<(10);
 do {
  if ($58) {
   $59 = (($57) + -1)|0;
   $AsyncCtx34 = _emscripten_alloc_async_context(4,sp)|0;
   __compile_and_insert_new_shader(652488,$59);
   $IsAsync35 = ___async;
   if ($IsAsync35) {
    HEAP32[$AsyncCtx34>>2] = 226;
    sp = STACKTOP;
    return;
   } else {
    _emscripten_free_async_context(($AsyncCtx34|0));
    break;
   }
  }
 } while(0);
 $60 = (_atoi(652504)|0);
 $61 = ($60|0)<(10);
 do {
  if ($61) {
   $62 = (($60) + -1)|0;
   $AsyncCtx30 = _emscripten_alloc_async_context(4,sp)|0;
   __compile_and_insert_new_shader(652512,$62);
   $IsAsync31 = ___async;
   if ($IsAsync31) {
    HEAP32[$AsyncCtx30>>2] = 227;
    sp = STACKTOP;
    return;
   } else {
    _emscripten_free_async_context(($AsyncCtx30|0));
    break;
   }
  }
 } while(0);
 $63 = (_atoi(652528)|0);
 $64 = ($63|0)<(10);
 do {
  if ($64) {
   $65 = (($63) + -1)|0;
   $AsyncCtx26 = _emscripten_alloc_async_context(4,sp)|0;
   __compile_and_insert_new_shader(652544,$65);
   $IsAsync27 = ___async;
   if ($IsAsync27) {
    HEAP32[$AsyncCtx26>>2] = 228;
    sp = STACKTOP;
    return;
   } else {
    _emscripten_free_async_context(($AsyncCtx26|0));
    break;
   }
  }
 } while(0);
 $66 = (_atoi(652568)|0);
 $67 = ($66|0)<(10);
 do {
  if ($67) {
   $68 = (($66) + -1)|0;
   $AsyncCtx22 = _emscripten_alloc_async_context(4,sp)|0;
   __compile_and_insert_new_shader(652584,$68);
   $IsAsync23 = ___async;
   if ($IsAsync23) {
    HEAP32[$AsyncCtx22>>2] = 229;
    sp = STACKTOP;
    return;
   } else {
    _emscripten_free_async_context(($AsyncCtx22|0));
    break;
   }
  }
 } while(0);
 $69 = (_atoi(652608)|0);
 $70 = ($69|0)<(10);
 do {
  if ($70) {
   $71 = (($69) + -1)|0;
   $AsyncCtx18 = _emscripten_alloc_async_context(4,sp)|0;
   __compile_and_insert_new_shader(652624,$71);
   $IsAsync19 = ___async;
   if ($IsAsync19) {
    HEAP32[$AsyncCtx18>>2] = 230;
    sp = STACKTOP;
    return;
   } else {
    _emscripten_free_async_context(($AsyncCtx18|0));
    break;
   }
  }
 } while(0);
 $72 = (_atoi(652648)|0);
 $73 = ($72|0)<(10);
 do {
  if ($73) {
   $74 = (($72) + -1)|0;
   $AsyncCtx14 = _emscripten_alloc_async_context(4,sp)|0;
   __compile_and_insert_new_shader(652656,$74);
   $IsAsync15 = ___async;
   if ($IsAsync15) {
    HEAP32[$AsyncCtx14>>2] = 231;
    sp = STACKTOP;
    return;
   } else {
    _emscripten_free_async_context(($AsyncCtx14|0));
    break;
   }
  }
 } while(0);
 $75 = (_atoi(652672)|0);
 $76 = ($75|0)<(10);
 do {
  if ($76) {
   $77 = (($75) + -1)|0;
   $AsyncCtx10 = _emscripten_alloc_async_context(4,sp)|0;
   __compile_and_insert_new_shader(652680,$77);
   $IsAsync11 = ___async;
   if ($IsAsync11) {
    HEAP32[$AsyncCtx10>>2] = 232;
    sp = STACKTOP;
    return;
   } else {
    _emscripten_free_async_context(($AsyncCtx10|0));
    break;
   }
  }
 } while(0);
 $78 = (_atoi(652696)|0);
 $79 = ($78|0)<(10);
 do {
  if ($79) {
   $80 = (($78) + -1)|0;
   $AsyncCtx6 = _emscripten_alloc_async_context(4,sp)|0;
   __compile_and_insert_new_shader(652704,$80);
   $IsAsync7 = ___async;
   if ($IsAsync7) {
    HEAP32[$AsyncCtx6>>2] = 233;
    sp = STACKTOP;
    return;
   } else {
    _emscripten_free_async_context(($AsyncCtx6|0));
    break;
   }
  }
 } while(0);
 _memset((32040|0),0,1024)|0;
 HEAP8[35040>>0] = 0;
 _glGenFramebuffers(1,(35048|0));
 $81 = HEAP32[35048>>2]|0;
 _glBindFramebuffer(36160,($81|0));
 _glGenTextures(1,(35056|0));
 $82 = HEAP32[35056>>2]|0;
 _glBindTexture(3553,($82|0));
 $83 = HEAP32[(389572)>>2]|0;
 $84 = HEAP32[(389576)>>2]|0;
 _glTexImage2D(3553,0,6407,($83|0),($84|0),0,6407,5121,(0|0));
 _glTexParameteri(3553,10241,9729);
 _glTexParameteri(3553,10240,9729);
 _glTexParameteri(3553,10242,33071);
 _glTexParameteri(3553,10243,33071);
 $85 = HEAP32[35056>>2]|0;
 _glFramebufferTexture2D(36160,36064,3553,($85|0),0);
 _glGenRenderbuffers(1,(35064|0));
 $86 = HEAP32[35064>>2]|0;
 _glBindRenderbuffer(36161,($86|0));
 $87 = HEAP32[(389572)>>2]|0;
 $88 = HEAP32[(389576)>>2]|0;
 _glRenderbufferStorage(36161,33189,($87|0),($88|0));
 $89 = HEAP32[35064>>2]|0;
 _glFramebufferRenderbuffer(36160,36096,36161,($89|0));
 _glBindFramebuffer(36160,0);
 HEAP32[35032>>2] = 0;
 $AsyncCtx54 = _emscripten_alloc_async_context(4,sp)|0;
 $90 = (__compile_shader(387056,1)|0);
 $IsAsync55 = ___async;
 if ($IsAsync55) {
  HEAP32[$AsyncCtx54>>2] = 234;
  sp = STACKTOP;
  return;
 }
 _emscripten_free_async_context(($AsyncCtx54|0));
 $AsyncCtx50 = _emscripten_alloc_async_context(8,sp)|0;
 $91 = (__compile_shader(387472,0)|0);
 $IsAsync51 = ___async;
 if ($IsAsync51) {
  HEAP32[$AsyncCtx50>>2] = 235;
  $92 = ((($AsyncCtx50)) + 4|0);
  HEAP32[$92>>2] = $90;
  sp = STACKTOP;
  return;
 }
 _emscripten_free_async_context(($AsyncCtx50|0));
 $AsyncCtx42 = _emscripten_alloc_async_context(4,sp)|0;
 $93 = (__link_and_clean_shaders($90,$91)|0);
 $IsAsync43 = ___async;
 if ($IsAsync43) {
  HEAP32[$AsyncCtx42>>2] = 236;
  sp = STACKTOP;
  return;
 }
 _emscripten_free_async_context(($AsyncCtx42|0));
 HEAP32[(34796)>>2] = $93;
 $94 = (_glGetUniformLocation(($93|0),(652720|0))|0);
 HEAP32[(34944)>>2] = $94;
 $95 = HEAP32[(34796)>>2]|0;
 $96 = (_glGetUniformLocation(($95|0),(652368|0))|0);
 HEAP32[(34928)>>2] = $96;
 $97 = HEAP32[(34796)>>2]|0;
 $98 = (_glGetUniformLocation(($97|0),(652384|0))|0);
 HEAP32[(34932)>>2] = $98;
 $99 = HEAP32[(34796)>>2]|0;
 $100 = (_glGetUniformLocation(($99|0),(652408|0))|0);
 HEAP32[(34936)>>2] = $100;
 $101 = HEAP32[(34796)>>2]|0;
 $102 = (_glGetUniformLocation(($101|0),(652432|0))|0);
 HEAP32[(34940)>>2] = $102;
 $103 = HEAP32[(34796)>>2]|0;
 $104 = (_glGetUniformLocation(($103|0),(652424|0))|0);
 HEAP32[(34948)>>2] = $104;
 $105 = HEAP32[(34796)>>2]|0;
 $106 = (_glGetAttribLocation(($105|0),(652440|0))|0);
 HEAP32[(34952)>>2] = $106;
 HEAPF32[(35008)>>2] = 2.0;
 HEAPF32[(34988)>>2] = 2.0;
 HEAPF32[34968>>2] = 2.0;
 HEAPF32[(35028)>>2] = 1.0;
 ;HEAP32[(34972)>>2]=0|0;HEAP32[(34972)+4>>2]=0|0;HEAP32[(34972)+8>>2]=0|0;HEAP32[(34972)+12>>2]=0|0;
 ;HEAP32[(34992)>>2]=0|0;HEAP32[(34992)+4>>2]=0|0;HEAP32[(34992)+8>>2]=0|0;HEAP32[(34992)+12>>2]=0|0;
 ;HEAP32[(35012)>>2]=0|0;HEAP32[(35012)+4>>2]=0|0;HEAP32[(35012)+8>>2]=0|0;HEAP32[(35012)+12>>2]=0|0;
 HEAP32[(651932)>>2] = 237;
 HEAP32[(651936)>>2] = 238;
 HEAP32[(651780)>>2] = 0;
 $AsyncCtx3 = _emscripten_alloc_async_context(4,sp)|0;
 __initialize_sound();
 $IsAsync4 = ___async;
 if ($IsAsync4) {
  HEAP32[$AsyncCtx3>>2] = 239;
  sp = STACKTOP;
  return;
 }
 _emscripten_free_async_context(($AsyncCtx3|0));
 HEAP32[(651940)>>2] = 240;
 HEAP32[(651944)>>2] = 241;
 HEAP32[(651792)>>2] = 0;
 HEAP32[(651948)>>2] = 242;
 HEAP32[(651952)>>2] = 243;
 HEAP32[(651956)>>2] = 244;
 HEAP32[35080>>2] = 0;
 $107 = HEAP32[(651820)>>2]|0;
 $AsyncCtx = _emscripten_alloc_async_context(4,sp)|0;
 $108 = (FUNCTION_TABLE_ii[$107 & 255](0)|0);
 $IsAsync = ___async;
 if ($IsAsync) {
  HEAP32[$AsyncCtx>>2] = 245;
  sp = STACKTOP;
  return;
 } else {
  _emscripten_free_async_context(($AsyncCtx|0));
  HEAP32[35072>>2] = $108;
  return;
 }
}
function __update() {
 var $$lcssa$ph = 0, $$lcssa34 = 0, $$lcssa35 = 0, $$lcssa87 = 0, $$lcssa89 = 0, $$lcssa92$ph = 0, $$lcssa95 = 0, $$lcssa97 = 0, $$pre = 0, $$pre118 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0.0, $146 = 0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0, $151 = 0.0, $152 = 0.0, $153 = 0.0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0.0, $159 = 0, $16 = 0, $160 = 0.0;
 var $161 = 0.0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0.0, $168 = 0.0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0;
 var $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0;
 var $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0;
 var $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0;
 var $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0;
 var $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $IsAsync = 0, $IsAsync4 = 0, $button$0 = 0, $button$0$lcssa = 0, $button$0$us = 0, $button$064 = 0, $event = 0;
 var $exitcond = 0, $exitcond110 = 0, $exitcond114 = 0, $exitcond116 = 0, $i$079 = 0, $i$171 = 0, $i1$068 = 0, $i10$042 = 0, $i11$041 = 0, $i11$1 = 0, $i5$051$lcssa$ph = 0, $i5$152 = 0, $i9$045$lcssa$ph = 0, $i9$146 = 0, $j$072$us = 0, $j2$061$us = 0, $key$0 = 0, $key$0$lcssa = 0, $key$0$us = 0, $key$075 = 0;
 var $or$cond = 0, $or$cond$1 = 0, $or$cond$10 = 0, $or$cond$11 = 0, $or$cond$12 = 0, $or$cond$13 = 0, $or$cond$14 = 0, $or$cond$15 = 0, $or$cond$16 = 0, $or$cond$17 = 0, $or$cond$18 = 0, $or$cond$19 = 0, $or$cond$2 = 0, $or$cond$3 = 0, $or$cond$4 = 0, $or$cond$5 = 0, $or$cond$6 = 0, $or$cond$7 = 0, $or$cond$8 = 0, $or$cond$9 = 0;
 var $or$cond12 = 0, $or$cond12$1 = 0, $or$cond12$10 = 0, $or$cond12$11 = 0, $or$cond12$12 = 0, $or$cond12$13 = 0, $or$cond12$14 = 0, $or$cond12$15 = 0, $or$cond12$16 = 0, $or$cond12$17 = 0, $or$cond12$18 = 0, $or$cond12$19 = 0, $or$cond12$2 = 0, $or$cond12$3 = 0, $or$cond12$4 = 0, $or$cond12$5 = 0, $or$cond12$6 = 0, $or$cond12$7 = 0, $or$cond12$8 = 0, $or$cond12$9 = 0;
 var $or$cond13 = 0, $or$cond13$1 = 0, $or$cond13$2 = 0, $or$cond13$3 = 0, $or$cond13$4 = 0, $or$cond14 = 0, $or$cond14$1 = 0, $or$cond14$2 = 0, $or$cond14$3 = 0, $or$cond14$4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $event = sp;
 $i$079 = 0;
 while(1) {
  $0 = (652088 + ($i$079<<2)|0);
  $key$075 = HEAP32[$0>>2]|0;
  $1 = (389588 + ($key$075<<2)|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ($2|0)>(0);
  L3: do {
   if ($3) {
    $4 = ($i$079|0)<(19);
    if ($4) {
     $j$072$us = $i$079;
    } else {
     while(1) {
      HEAP32[(652164)>>2] = 0;
      $key$0 = HEAP32[$0>>2]|0;
      $12 = (389588 + ($key$0<<2)|0);
      $13 = HEAP32[$12>>2]|0;
      $14 = ($13|0)>(0);
      if (!($14)) {
       $$lcssa35 = $12;$key$0$lcssa = $key$0;
       break L3;
      }
     }
    }
    while(1) {
     $8 = (($j$072$us) + 1)|0;
     $9 = (652088 + ($8<<2)|0);
     $10 = HEAP32[$9>>2]|0;
     $11 = (652088 + ($j$072$us<<2)|0);
     HEAP32[$11>>2] = $10;
     $exitcond116 = ($8|0)==(19);
     if (!($exitcond116)) {
      $j$072$us = $8;
      continue;
     }
     HEAP32[(652164)>>2] = 0;
     $key$0$us = HEAP32[$0>>2]|0;
     $5 = (389588 + ($key$0$us<<2)|0);
     $6 = HEAP32[$5>>2]|0;
     $7 = ($6|0)>(0);
     if ($7) {
      $j$072$us = $i$079;
     } else {
      $$lcssa35 = $5;$key$0$lcssa = $key$0$us;
      break;
     }
    }
   } else {
    $$lcssa35 = $1;$key$0$lcssa = $key$075;
   }
  } while(0);
  $15 = ($key$0$lcssa|0)==(0);
  if ($15) {
   $i$171 = 0;
   break;
  }
  $16 = $key$0$lcssa & -5;
  if ((($16|0) == 1250)) {
   HEAP32[(389604)>>2] = 0;
  } else if ((($16|0) == 1248)) {
   HEAP32[(389600)>>2] = 0;
  } else if ((($16|0) == 1249)) {
   HEAP32[(389596)>>2] = 0;
  }
  HEAP32[$$lcssa35>>2] = 0;
  HEAP32[$0>>2] = 0;
  $17 = (($i$079) + 1)|0;
  $18 = ($17|0)<(20);
  if ($18) {
   $i$079 = $17;
  } else {
   $i$171 = 0;
   break;
  }
 }
 while(1) {
  $19 = (652008 + ($i$171<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(0);
  if ($21) {
   $i1$068 = 0;
   break;
  }
  $22 = $20 & -5;
  if ((($22|0) == 1248)) {
   $23 = HEAP32[(389552)>>2]|0;
   $24 = HEAP32[(389600)>>2]|0;
   $25 = (($24) + ($23))|0;
   HEAP32[(389600)>>2] = $25;
  } else if ((($22|0) == 1249)) {
   $26 = HEAP32[(389552)>>2]|0;
   $27 = HEAP32[(389596)>>2]|0;
   $28 = (($27) + ($26))|0;
   HEAP32[(389596)>>2] = $28;
  } else if ((($22|0) == 1250)) {
   $29 = HEAP32[(389552)>>2]|0;
   $30 = HEAP32[(389604)>>2]|0;
   $31 = (($30) + ($29))|0;
   HEAP32[(389604)>>2] = $31;
  }
  $32 = HEAP32[(389552)>>2]|0;
  $33 = (389588 + ($20<<2)|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (($34) + ($32))|0;
  HEAP32[$33>>2] = $35;
  $36 = (($i$171) + 1)|0;
  $37 = ($36|0)<(20);
  if ($37) {
   $i$171 = $36;
  } else {
   $i1$068 = 0;
   break;
  }
 }
 while(1) {
  $40 = (651960 + ($i1$068<<2)|0);
  $button$064 = HEAP32[$40>>2]|0;
  $41 = (651728 + ($button$064<<2)|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = ($42|0)>(0);
  L28: do {
   if ($43) {
    $44 = ($i1$068|0)<(4);
    if ($44) {
     $j2$061$us = $i1$068;
    } else {
     while(1) {
      HEAP32[(651976)>>2] = 0;
      $button$0 = HEAP32[$40>>2]|0;
      $52 = (651728 + ($button$0<<2)|0);
      $53 = HEAP32[$52>>2]|0;
      $54 = ($53|0)>(0);
      if (!($54)) {
       $$lcssa34 = $52;$button$0$lcssa = $button$0;
       break L28;
      }
     }
    }
    while(1) {
     $48 = (($j2$061$us) + 1)|0;
     $49 = (651960 + ($48<<2)|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = (651960 + ($j2$061$us<<2)|0);
     HEAP32[$51>>2] = $50;
     $exitcond114 = ($48|0)==(4);
     if (!($exitcond114)) {
      $j2$061$us = $48;
      continue;
     }
     HEAP32[(651976)>>2] = 0;
     $button$0$us = HEAP32[$40>>2]|0;
     $45 = (651728 + ($button$0$us<<2)|0);
     $46 = HEAP32[$45>>2]|0;
     $47 = ($46|0)>(0);
     if ($47) {
      $j2$061$us = $i1$068;
     } else {
      $$lcssa34 = $45;$button$0$lcssa = $button$0$us;
      break;
     }
    }
   } else {
    $$lcssa34 = $41;$button$0$lcssa = $button$064;
   }
  } while(0);
  $55 = ($button$0$lcssa|0)==(0);
  if ($55) {
   break;
  }
  HEAP32[$$lcssa34>>2] = 0;
  HEAP32[$40>>2] = 0;
  $56 = (($i1$068) + 1)|0;
  $57 = ($56|0)<(5);
  if ($57) {
   $i1$068 = $56;
  } else {
   break;
  }
 }
 $38 = HEAP32[651984>>2]|0;
 $39 = ($38|0)==(0);
 if (!($39)) {
  $58 = HEAP32[(389552)>>2]|0;
  $59 = (651728 + ($38<<2)|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = (($60) + ($58))|0;
  HEAP32[$59>>2] = $61;
  $62 = HEAP32[(651988)>>2]|0;
  $63 = ($62|0)==(0);
  if (!($63)) {
   $397 = HEAP32[(389552)>>2]|0;
   $398 = (651728 + ($62<<2)|0);
   $399 = HEAP32[$398>>2]|0;
   $400 = (($399) + ($397))|0;
   HEAP32[$398>>2] = $400;
   $401 = HEAP32[(651992)>>2]|0;
   $402 = ($401|0)==(0);
   if (!($402)) {
    $403 = HEAP32[(389552)>>2]|0;
    $404 = (651728 + ($401<<2)|0);
    $405 = HEAP32[$404>>2]|0;
    $406 = (($405) + ($403))|0;
    HEAP32[$404>>2] = $406;
    $407 = HEAP32[(651996)>>2]|0;
    $408 = ($407|0)==(0);
    if (!($408)) {
     $409 = HEAP32[(389552)>>2]|0;
     $410 = (651728 + ($407<<2)|0);
     $411 = HEAP32[$410>>2]|0;
     $412 = (($411) + ($409))|0;
     HEAP32[$410>>2] = $412;
     $413 = HEAP32[(652000)>>2]|0;
     $414 = ($413|0)==(0);
     if (!($414)) {
      $415 = HEAP32[(389552)>>2]|0;
      $416 = (651728 + ($413<<2)|0);
      $417 = HEAP32[$416>>2]|0;
      $418 = (($417) + ($415))|0;
      HEAP32[$416>>2] = $418;
     }
    }
   }
  }
 }
 $64 = HEAP32[(651764)>>2]|0;
 HEAP32[652320>>2] = $64;
 $65 = HEAP32[(651768)>>2]|0;
 HEAP32[652312>>2] = $65;
 HEAP32[(651768)>>2] = 0;
 HEAP32[(651764)>>2] = 0;
 $66 = (_SDL_PollEvent(($event|0))|0);
 $67 = ($66|0)==(0);
 L46: do {
  if (!($67)) {
   $68 = ((($event)) + 16|0);
   $69 = ((($event)) + 20|0);
   $70 = ((($event)) + 24|0);
   while(1) {
    $71 = HEAP32[$event>>2]|0;
    L50: do {
     switch ($71|0) {
     case 769:  {
      $84 = HEAP32[$68>>2]|0;
      $85 = HEAP32[652008>>2]|0;
      $86 = ($85|0)==($84|0);
      do {
       if ($86) {
        $$lcssa92$ph = 652008;$i5$051$lcssa$ph = 0;
        label = 39;
       } else {
        $87 = HEAP32[(652012)>>2]|0;
        $88 = ($87|0)==($84|0);
        if ($88) {
         $$lcssa92$ph = (652012);$i5$051$lcssa$ph = 1;
         label = 39;
        } else {
         $253 = HEAP32[(652016)>>2]|0;
         $254 = ($253|0)==($84|0);
         if ($254) {
          $$lcssa92$ph = (652016);$i5$051$lcssa$ph = 2;
          label = 39;
         } else {
          $255 = HEAP32[(652020)>>2]|0;
          $256 = ($255|0)==($84|0);
          if ($256) {
           $$lcssa92$ph = (652020);$i5$051$lcssa$ph = 3;
           label = 39;
          } else {
           $257 = HEAP32[(652024)>>2]|0;
           $258 = ($257|0)==($84|0);
           if ($258) {
            $$lcssa92$ph = (652024);$i5$051$lcssa$ph = 4;
            label = 39;
           } else {
            $259 = HEAP32[(652028)>>2]|0;
            $260 = ($259|0)==($84|0);
            if ($260) {
             $$lcssa92$ph = (652028);$i5$051$lcssa$ph = 5;
             label = 39;
            } else {
             $261 = HEAP32[(652032)>>2]|0;
             $262 = ($261|0)==($84|0);
             if ($262) {
              $$lcssa92$ph = (652032);$i5$051$lcssa$ph = 6;
              label = 39;
             } else {
              $263 = HEAP32[(652036)>>2]|0;
              $264 = ($263|0)==($84|0);
              if ($264) {
               $$lcssa92$ph = (652036);$i5$051$lcssa$ph = 7;
               label = 39;
              } else {
               $265 = HEAP32[(652040)>>2]|0;
               $266 = ($265|0)==($84|0);
               if ($266) {
                $$lcssa92$ph = (652040);$i5$051$lcssa$ph = 8;
                label = 39;
               } else {
                $267 = HEAP32[(652044)>>2]|0;
                $268 = ($267|0)==($84|0);
                if ($268) {
                 $$lcssa92$ph = (652044);$i5$051$lcssa$ph = 9;
                 label = 39;
                } else {
                 $269 = HEAP32[(652048)>>2]|0;
                 $270 = ($269|0)==($84|0);
                 if ($270) {
                  $$lcssa92$ph = (652048);$i5$051$lcssa$ph = 10;
                  label = 39;
                 } else {
                  $271 = HEAP32[(652052)>>2]|0;
                  $272 = ($271|0)==($84|0);
                  if ($272) {
                   $$lcssa92$ph = (652052);$i5$051$lcssa$ph = 11;
                   label = 39;
                  } else {
                   $273 = HEAP32[(652056)>>2]|0;
                   $274 = ($273|0)==($84|0);
                   if ($274) {
                    $$lcssa92$ph = (652056);$i5$051$lcssa$ph = 12;
                    label = 39;
                   } else {
                    $275 = HEAP32[(652060)>>2]|0;
                    $276 = ($275|0)==($84|0);
                    if ($276) {
                     $$lcssa92$ph = (652060);$i5$051$lcssa$ph = 13;
                     label = 39;
                    } else {
                     $277 = HEAP32[(652064)>>2]|0;
                     $278 = ($277|0)==($84|0);
                     if ($278) {
                      $$lcssa92$ph = (652064);$i5$051$lcssa$ph = 14;
                      label = 39;
                      break;
                     }
                     $279 = HEAP32[(652068)>>2]|0;
                     $280 = ($279|0)==($84|0);
                     if ($280) {
                      $$lcssa92$ph = (652068);$i5$051$lcssa$ph = 15;
                      label = 39;
                      break;
                     }
                     $281 = HEAP32[(652072)>>2]|0;
                     $282 = ($281|0)==($84|0);
                     if ($282) {
                      $$lcssa92$ph = (652072);$i5$051$lcssa$ph = 16;
                      label = 39;
                      break;
                     }
                     $283 = HEAP32[(652076)>>2]|0;
                     $284 = ($283|0)==($84|0);
                     if ($284) {
                      $$lcssa92$ph = (652076);$i5$051$lcssa$ph = 17;
                      label = 39;
                      break;
                     }
                     $285 = HEAP32[(652080)>>2]|0;
                     $286 = ($285|0)==($84|0);
                     if ($286) {
                      $$lcssa92$ph = (652080);$i5$051$lcssa$ph = 18;
                      label = 39;
                      break;
                     }
                     $287 = HEAP32[(652084)>>2]|0;
                     $288 = ($287|0)==($84|0);
                     if (!($288)) {
                      break;
                     }
                     HEAP32[(652084)>>2] = 0;
                    }
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      } while(0);
      if ((label|0) == 39) {
       label = 0;
       HEAP32[$$lcssa92$ph>>2] = 0;
       $i5$152 = $i5$051$lcssa$ph;
       while(1) {
        $89 = (($i5$152) + 1)|0;
        $90 = (652008 + ($89<<2)|0);
        $91 = HEAP32[$90>>2]|0;
        $92 = (652008 + ($i5$152<<2)|0);
        HEAP32[$92>>2] = $91;
        $exitcond110 = ($89|0)==(19);
        if ($exitcond110) {
         break;
        } else {
         $i5$152 = $89;
        }
       }
      }
      HEAP32[(652084)>>2] = 0;
      $93 = HEAP32[652088>>2]|0;
      $94 = ($93|0)==(0);
      $95 = ($93|0)==($84|0);
      $or$cond12 = $94 | $95;
      do {
       if ($or$cond12) {
        $$lcssa95 = 652088;
        label = 44;
       } else {
        $96 = HEAP32[(652092)>>2]|0;
        $97 = ($96|0)==(0);
        $98 = ($96|0)==($84|0);
        $or$cond12$1 = $97 | $98;
        if ($or$cond12$1) {
         $$lcssa95 = (652092);
         label = 44;
        } else {
         $289 = HEAP32[(652096)>>2]|0;
         $290 = ($289|0)==(0);
         $291 = ($289|0)==($84|0);
         $or$cond12$2 = $290 | $291;
         if ($or$cond12$2) {
          $$lcssa95 = (652096);
          label = 44;
         } else {
          $292 = HEAP32[(652100)>>2]|0;
          $293 = ($292|0)==(0);
          $294 = ($292|0)==($84|0);
          $or$cond12$3 = $293 | $294;
          if ($or$cond12$3) {
           $$lcssa95 = (652100);
           label = 44;
          } else {
           $295 = HEAP32[(652104)>>2]|0;
           $296 = ($295|0)==(0);
           $297 = ($295|0)==($84|0);
           $or$cond12$4 = $296 | $297;
           if ($or$cond12$4) {
            $$lcssa95 = (652104);
            label = 44;
           } else {
            $298 = HEAP32[(652108)>>2]|0;
            $299 = ($298|0)==(0);
            $300 = ($298|0)==($84|0);
            $or$cond12$5 = $299 | $300;
            if ($or$cond12$5) {
             $$lcssa95 = (652108);
             label = 44;
            } else {
             $301 = HEAP32[(652112)>>2]|0;
             $302 = ($301|0)==(0);
             $303 = ($301|0)==($84|0);
             $or$cond12$6 = $302 | $303;
             if ($or$cond12$6) {
              $$lcssa95 = (652112);
              label = 44;
             } else {
              $304 = HEAP32[(652116)>>2]|0;
              $305 = ($304|0)==(0);
              $306 = ($304|0)==($84|0);
              $or$cond12$7 = $305 | $306;
              if ($or$cond12$7) {
               $$lcssa95 = (652116);
               label = 44;
              } else {
               $307 = HEAP32[(652120)>>2]|0;
               $308 = ($307|0)==(0);
               $309 = ($307|0)==($84|0);
               $or$cond12$8 = $308 | $309;
               if ($or$cond12$8) {
                $$lcssa95 = (652120);
                label = 44;
               } else {
                $310 = HEAP32[(652124)>>2]|0;
                $311 = ($310|0)==(0);
                $312 = ($310|0)==($84|0);
                $or$cond12$9 = $311 | $312;
                if ($or$cond12$9) {
                 $$lcssa95 = (652124);
                 label = 44;
                } else {
                 $313 = HEAP32[(652128)>>2]|0;
                 $314 = ($313|0)==(0);
                 $315 = ($313|0)==($84|0);
                 $or$cond12$10 = $314 | $315;
                 if ($or$cond12$10) {
                  $$lcssa95 = (652128);
                  label = 44;
                 } else {
                  $316 = HEAP32[(652132)>>2]|0;
                  $317 = ($316|0)==(0);
                  $318 = ($316|0)==($84|0);
                  $or$cond12$11 = $317 | $318;
                  if ($or$cond12$11) {
                   $$lcssa95 = (652132);
                   label = 44;
                  } else {
                   $319 = HEAP32[(652136)>>2]|0;
                   $320 = ($319|0)==(0);
                   $321 = ($319|0)==($84|0);
                   $or$cond12$12 = $320 | $321;
                   if ($or$cond12$12) {
                    $$lcssa95 = (652136);
                    label = 44;
                   } else {
                    $322 = HEAP32[(652140)>>2]|0;
                    $323 = ($322|0)==(0);
                    $324 = ($322|0)==($84|0);
                    $or$cond12$13 = $323 | $324;
                    if ($or$cond12$13) {
                     $$lcssa95 = (652140);
                     label = 44;
                     break;
                    }
                    $325 = HEAP32[(652144)>>2]|0;
                    $326 = ($325|0)==(0);
                    $327 = ($325|0)==($84|0);
                    $or$cond12$14 = $326 | $327;
                    if ($or$cond12$14) {
                     $$lcssa95 = (652144);
                     label = 44;
                     break;
                    }
                    $328 = HEAP32[(652148)>>2]|0;
                    $329 = ($328|0)==(0);
                    $330 = ($328|0)==($84|0);
                    $or$cond12$15 = $329 | $330;
                    if ($or$cond12$15) {
                     $$lcssa95 = (652148);
                     label = 44;
                     break;
                    }
                    $331 = HEAP32[(652152)>>2]|0;
                    $332 = ($331|0)==(0);
                    $333 = ($331|0)==($84|0);
                    $or$cond12$16 = $332 | $333;
                    if ($or$cond12$16) {
                     $$lcssa95 = (652152);
                     label = 44;
                     break;
                    }
                    $334 = HEAP32[(652156)>>2]|0;
                    $335 = ($334|0)==(0);
                    $336 = ($334|0)==($84|0);
                    $or$cond12$17 = $335 | $336;
                    if ($or$cond12$17) {
                     $$lcssa95 = (652156);
                     label = 44;
                     break;
                    }
                    $337 = HEAP32[(652160)>>2]|0;
                    $338 = ($337|0)==(0);
                    $339 = ($337|0)==($84|0);
                    $or$cond12$18 = $338 | $339;
                    if ($or$cond12$18) {
                     $$lcssa95 = (652160);
                     label = 44;
                     break;
                    }
                    $340 = HEAP32[(652164)>>2]|0;
                    $341 = ($340|0)==(0);
                    $342 = ($340|0)==($84|0);
                    $or$cond12$19 = $341 | $342;
                    if ($or$cond12$19) {
                     $$lcssa95 = (652164);
                     label = 44;
                    }
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      } while(0);
      if ((label|0) == 44) {
       label = 0;
       HEAP32[$$lcssa95>>2] = $84;
      }
      $99 = (389588 + ($84<<2)|0);
      $100 = HEAP32[$99>>2]|0;
      $101 = (0 - ($100))|0;
      HEAP32[$99>>2] = $101;
      break;
     }
     case 1024:  {
      $136 = HEAP32[$69>>2]|0;
      $137 = HEAP32[(389576)>>2]|0;
      $138 = (($137) + -1)|0;
      $139 = HEAP32[$70>>2]|0;
      $140 = (($138) - ($139))|0;
      $141 = HEAP32[(651756)>>2]|0;
      $142 = (($136) - ($141))|0;
      $143 = HEAP32[(651760)>>2]|0;
      $144 = (($140) - ($143))|0;
      $145 = (+($142|0));
      $146 = HEAP32[(389552)>>2]|0;
      $147 = (+($146>>>0));
      $148 = $145 / $147;
      $149 = $148 * 1.0E+6;
      $150 = (~~(($149)));
      HEAP32[(651764)>>2] = $150;
      $151 = (+($144|0));
      $152 = $151 / $147;
      $153 = $152 * 1.0E+6;
      $154 = (~~(($153)));
      HEAP32[(651768)>>2] = $154;
      HEAP32[(651756)>>2] = $136;
      HEAP32[(651760)>>2] = $140;
      break;
     }
     case 768:  {
      $72 = HEAP32[$68>>2]|0;
      $73 = HEAP32[652008>>2]|0;
      $74 = ($73|0)==(0);
      $75 = ($73|0)==($72|0);
      $or$cond = $74 | $75;
      do {
       if ($or$cond) {
        $$lcssa97 = 652008;
        label = 33;
       } else {
        $76 = HEAP32[(652012)>>2]|0;
        $77 = ($76|0)==(0);
        $78 = ($76|0)==($72|0);
        $or$cond$1 = $77 | $78;
        if ($or$cond$1) {
         $$lcssa97 = (652012);
         label = 33;
        } else {
         $343 = HEAP32[(652016)>>2]|0;
         $344 = ($343|0)==(0);
         $345 = ($343|0)==($72|0);
         $or$cond$2 = $344 | $345;
         if ($or$cond$2) {
          $$lcssa97 = (652016);
          label = 33;
         } else {
          $346 = HEAP32[(652020)>>2]|0;
          $347 = ($346|0)==(0);
          $348 = ($346|0)==($72|0);
          $or$cond$3 = $347 | $348;
          if ($or$cond$3) {
           $$lcssa97 = (652020);
           label = 33;
          } else {
           $349 = HEAP32[(652024)>>2]|0;
           $350 = ($349|0)==(0);
           $351 = ($349|0)==($72|0);
           $or$cond$4 = $350 | $351;
           if ($or$cond$4) {
            $$lcssa97 = (652024);
            label = 33;
           } else {
            $352 = HEAP32[(652028)>>2]|0;
            $353 = ($352|0)==(0);
            $354 = ($352|0)==($72|0);
            $or$cond$5 = $353 | $354;
            if ($or$cond$5) {
             $$lcssa97 = (652028);
             label = 33;
            } else {
             $355 = HEAP32[(652032)>>2]|0;
             $356 = ($355|0)==(0);
             $357 = ($355|0)==($72|0);
             $or$cond$6 = $356 | $357;
             if ($or$cond$6) {
              $$lcssa97 = (652032);
              label = 33;
             } else {
              $358 = HEAP32[(652036)>>2]|0;
              $359 = ($358|0)==(0);
              $360 = ($358|0)==($72|0);
              $or$cond$7 = $359 | $360;
              if ($or$cond$7) {
               $$lcssa97 = (652036);
               label = 33;
              } else {
               $361 = HEAP32[(652040)>>2]|0;
               $362 = ($361|0)==(0);
               $363 = ($361|0)==($72|0);
               $or$cond$8 = $362 | $363;
               if ($or$cond$8) {
                $$lcssa97 = (652040);
                label = 33;
               } else {
                $364 = HEAP32[(652044)>>2]|0;
                $365 = ($364|0)==(0);
                $366 = ($364|0)==($72|0);
                $or$cond$9 = $365 | $366;
                if ($or$cond$9) {
                 $$lcssa97 = (652044);
                 label = 33;
                } else {
                 $367 = HEAP32[(652048)>>2]|0;
                 $368 = ($367|0)==(0);
                 $369 = ($367|0)==($72|0);
                 $or$cond$10 = $368 | $369;
                 if ($or$cond$10) {
                  $$lcssa97 = (652048);
                  label = 33;
                 } else {
                  $370 = HEAP32[(652052)>>2]|0;
                  $371 = ($370|0)==(0);
                  $372 = ($370|0)==($72|0);
                  $or$cond$11 = $371 | $372;
                  if ($or$cond$11) {
                   $$lcssa97 = (652052);
                   label = 33;
                  } else {
                   $373 = HEAP32[(652056)>>2]|0;
                   $374 = ($373|0)==(0);
                   $375 = ($373|0)==($72|0);
                   $or$cond$12 = $374 | $375;
                   if ($or$cond$12) {
                    $$lcssa97 = (652056);
                    label = 33;
                   } else {
                    $376 = HEAP32[(652060)>>2]|0;
                    $377 = ($376|0)==(0);
                    $378 = ($376|0)==($72|0);
                    $or$cond$13 = $377 | $378;
                    if ($or$cond$13) {
                     $$lcssa97 = (652060);
                     label = 33;
                    } else {
                     $379 = HEAP32[(652064)>>2]|0;
                     $380 = ($379|0)==(0);
                     $381 = ($379|0)==($72|0);
                     $or$cond$14 = $380 | $381;
                     if ($or$cond$14) {
                      $$lcssa97 = (652064);
                      label = 33;
                      break;
                     }
                     $382 = HEAP32[(652068)>>2]|0;
                     $383 = ($382|0)==(0);
                     $384 = ($382|0)==($72|0);
                     $or$cond$15 = $383 | $384;
                     if ($or$cond$15) {
                      $$lcssa97 = (652068);
                      label = 33;
                      break;
                     }
                     $385 = HEAP32[(652072)>>2]|0;
                     $386 = ($385|0)==(0);
                     $387 = ($385|0)==($72|0);
                     $or$cond$16 = $386 | $387;
                     if ($or$cond$16) {
                      $$lcssa97 = (652072);
                      label = 33;
                      break;
                     }
                     $388 = HEAP32[(652076)>>2]|0;
                     $389 = ($388|0)==(0);
                     $390 = ($388|0)==($72|0);
                     $or$cond$17 = $389 | $390;
                     if ($or$cond$17) {
                      $$lcssa97 = (652076);
                      label = 33;
                      break;
                     }
                     $391 = HEAP32[(652080)>>2]|0;
                     $392 = ($391|0)==(0);
                     $393 = ($391|0)==($72|0);
                     $or$cond$18 = $392 | $393;
                     if ($or$cond$18) {
                      $$lcssa97 = (652080);
                      label = 33;
                      break;
                     }
                     $394 = HEAP32[(652084)>>2]|0;
                     $395 = ($394|0)==(0);
                     $396 = ($394|0)==($72|0);
                     $or$cond$19 = $395 | $396;
                     if ($or$cond$19) {
                      $$lcssa97 = (652084);
                      label = 33;
                     }
                    }
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      } while(0);
      if ((label|0) == 33) {
       label = 0;
       HEAP32[$$lcssa97>>2] = $72;
      }
      $79 = (389588 + ($72<<2)|0);
      $80 = HEAP32[$79>>2]|0;
      $81 = ($80|0)==(0);
      if ($81) {
       HEAP32[$79>>2] = 1;
       break L50;
      }
      $82 = ($80|0)<(0);
      if ($82) {
       $83 = (0 - ($80))|0;
       HEAP32[$79>>2] = $83;
      }
      break;
     }
     case 1025:  {
      $104 = HEAP8[$68>>0]|0;
      $105 = $104&255;
      $106 = HEAP32[651984>>2]|0;
      $107 = ($106|0)==(0);
      $108 = ($106|0)==($105|0);
      $or$cond13 = $107 | $108;
      if ($or$cond13) {
       $$lcssa89 = 651984;
       label = 49;
      } else {
       $109 = HEAP32[(651988)>>2]|0;
       $110 = ($109|0)==(0);
       $111 = ($109|0)==($105|0);
       $or$cond13$1 = $110 | $111;
       if ($or$cond13$1) {
        $$lcssa89 = (651988);
        label = 49;
       } else {
        $244 = HEAP32[(651992)>>2]|0;
        $245 = ($244|0)==(0);
        $246 = ($244|0)==($105|0);
        $or$cond13$2 = $245 | $246;
        if ($or$cond13$2) {
         $$lcssa89 = (651992);
         label = 49;
        } else {
         $247 = HEAP32[(651996)>>2]|0;
         $248 = ($247|0)==(0);
         $249 = ($247|0)==($105|0);
         $or$cond13$3 = $248 | $249;
         if ($or$cond13$3) {
          $$lcssa89 = (651996);
          label = 49;
         } else {
          $250 = HEAP32[(652000)>>2]|0;
          $251 = ($250|0)==(0);
          $252 = ($250|0)==($105|0);
          $or$cond13$4 = $251 | $252;
          if ($or$cond13$4) {
           $$lcssa89 = (652000);
           label = 49;
          }
         }
        }
       }
      }
      if ((label|0) == 49) {
       label = 0;
       HEAP32[$$lcssa89>>2] = $105;
      }
      $112 = (651728 + ($105<<2)|0);
      $113 = HEAP32[$112>>2]|0;
      $114 = ($113|0)==(0);
      if ($114) {
       HEAP32[$112>>2] = 1;
       break L50;
      }
      $115 = ($113|0)<(0);
      if ($115) {
       $116 = (0 - ($113))|0;
       HEAP32[$112>>2] = $116;
      }
      break;
     }
     case 1026:  {
      $117 = HEAP8[$68>>0]|0;
      $118 = $117&255;
      $119 = HEAP32[651984>>2]|0;
      $120 = ($119|0)==($118|0);
      if ($120) {
       $$lcssa$ph = 651984;$i9$045$lcssa$ph = 0;
       label = 55;
      } else {
       $121 = HEAP32[(651988)>>2]|0;
       $122 = ($121|0)==($118|0);
       if ($122) {
        $$lcssa$ph = (651988);$i9$045$lcssa$ph = 1;
        label = 55;
       } else {
        $229 = HEAP32[(651992)>>2]|0;
        $230 = ($229|0)==($118|0);
        if ($230) {
         $$lcssa$ph = (651992);$i9$045$lcssa$ph = 2;
         label = 55;
        } else {
         $231 = HEAP32[(651996)>>2]|0;
         $232 = ($231|0)==($118|0);
         if ($232) {
          $$lcssa$ph = (651996);$i9$045$lcssa$ph = 3;
          label = 55;
         } else {
          $233 = HEAP32[(652000)>>2]|0;
          $234 = ($233|0)==($118|0);
          if ($234) {
           HEAP32[(652000)>>2] = 0;
          }
         }
        }
       }
      }
      if ((label|0) == 55) {
       label = 0;
       HEAP32[$$lcssa$ph>>2] = 0;
       $i9$146 = $i9$045$lcssa$ph;
       while(1) {
        $123 = (($i9$146) + 1)|0;
        $124 = (651984 + ($123<<2)|0);
        $125 = HEAP32[$124>>2]|0;
        $126 = (651984 + ($i9$146<<2)|0);
        HEAP32[$126>>2] = $125;
        $exitcond = ($123|0)==(4);
        if ($exitcond) {
         break;
        } else {
         $i9$146 = $123;
        }
       }
      }
      HEAP32[(652000)>>2] = 0;
      $127 = HEAP32[651960>>2]|0;
      $128 = ($127|0)==(0);
      $129 = ($127|0)==($118|0);
      $or$cond14 = $128 | $129;
      if ($or$cond14) {
       $$lcssa87 = 651960;
       label = 60;
      } else {
       $130 = HEAP32[(651964)>>2]|0;
       $131 = ($130|0)==(0);
       $132 = ($130|0)==($118|0);
       $or$cond14$1 = $131 | $132;
       if ($or$cond14$1) {
        $$lcssa87 = (651964);
        label = 60;
       } else {
        $235 = HEAP32[(651968)>>2]|0;
        $236 = ($235|0)==(0);
        $237 = ($235|0)==($118|0);
        $or$cond14$2 = $236 | $237;
        if ($or$cond14$2) {
         $$lcssa87 = (651968);
         label = 60;
        } else {
         $238 = HEAP32[(651972)>>2]|0;
         $239 = ($238|0)==(0);
         $240 = ($238|0)==($118|0);
         $or$cond14$3 = $239 | $240;
         if ($or$cond14$3) {
          $$lcssa87 = (651972);
          label = 60;
         } else {
          $241 = HEAP32[(651976)>>2]|0;
          $242 = ($241|0)==(0);
          $243 = ($241|0)==($118|0);
          $or$cond14$4 = $242 | $243;
          if ($or$cond14$4) {
           $$lcssa87 = (651976);
           label = 60;
          }
         }
        }
       }
      }
      if ((label|0) == 60) {
       label = 0;
       HEAP32[$$lcssa87>>2] = $118;
      }
      $133 = (651728 + ($118<<2)|0);
      $134 = HEAP32[$133>>2]|0;
      $135 = (0 - ($134))|0;
      HEAP32[$133>>2] = $135;
      break;
     }
     default: {
     }
     }
    } while(0);
    $102 = (_SDL_PollEvent(($event|0))|0);
    $103 = ($102|0)==(0);
    if ($103) {
     break L46;
    }
   }
  }
 } while(0);
 $155 = HEAP32[(651764)>>2]|0;
 $156 = HEAP32[652320>>2]|0;
 $157 = (($155) - ($156))|0;
 $158 = (+($157|0));
 $159 = HEAP32[(389552)>>2]|0;
 $160 = (+($159>>>0));
 $161 = $158 / $160;
 $162 = (~~(($161)));
 $163 = ($162*1000000)|0;
 HEAP32[(651772)>>2] = $163;
 $164 = HEAP32[(651768)>>2]|0;
 $165 = HEAP32[652312>>2]|0;
 $166 = (($164) - ($165))|0;
 $167 = (+($166|0));
 $168 = $167 / $160;
 $169 = (~~(($168)));
 $170 = ($169*1000000)|0;
 HEAP32[(651776)>>2] = $170;
 _glClear(16384);
 $171 = HEAP32[652008>>2]|0;
 $172 = ($171|0)!=(0);
 $173 = $172&1;
 HEAP32[(389612)>>2] = $173;
 $174 = HEAP32[651984>>2]|0;
 $175 = ($174|0)!=(0);
 $176 = $175&1;
 HEAP32[(651752)>>2] = $176;
 $177 = HEAP32[35080>>2]|0;
 $178 = ($177|0)>(0);
 L165: do {
  if ($178) {
   $419 = $177;$i10$042 = 0;
   while(1) {
    $179 = HEAP32[35072>>2]|0;
    $180 = (((($179) + (($i10$042*156)|0)|0)) + 153|0);
    $181 = HEAP8[$180>>0]|0;
    $182 = ($181<<24>>24)==(0);
    if ($182) {
     $191 = $419;
    } else {
     $183 = (((($179) + (($i10$042*156)|0)|0)) + 152|0);
     $184 = HEAP8[$183>>0]|0;
     $185 = ($184<<24>>24)==(0);
     if ($185) {
      $191 = $419;
     } else {
      $186 = (((($179) + (($i10$042*156)|0)|0)) + 136|0);
      $187 = HEAP32[$186>>2]|0;
      $AsyncCtx = _emscripten_alloc_async_context(8,sp)|0;
      FUNCTION_TABLE_vi[$187 & 255](389544);
      $IsAsync = ___async;
      if ($IsAsync) {
       break;
      }
      _emscripten_free_async_context(($AsyncCtx|0));
      $$pre = HEAP32[35080>>2]|0;
      $191 = $$pre;
     }
    }
    $189 = (($i10$042) + 1)|0;
    $190 = ($189|0)<($191|0);
    if ($190) {
     $419 = $191;$i10$042 = $189;
    } else {
     break L165;
    }
   }
   HEAP32[$AsyncCtx>>2] = 246;
   $188 = ((($AsyncCtx)) + 4|0);
   HEAP32[$188>>2] = $i10$042;
   sp = STACKTOP;
   STACKTOP = sp;return;
  }
 } while(0);
 $$pre118 = HEAP32[144>>2]|0;
 $193 = $$pre118;$i11$041 = 0;
 while(1) {
  $192 = ((((232 + ($193<<7)|0) + ($i11$041<<4)|0)) + 12|0);
  $194 = HEAP32[$192>>2]|0;
  $195 = ($194|0)==(0|0);
  if ($195) {
   label = 78;
   break;
  }
  $196 = ((((232 + ($193<<7)|0) + ($i11$041<<4)|0)) + 8|0);
  $197 = HEAP32[$196>>2]|0;
  $198 = 389544;
  $199 = $198;
  $200 = HEAP32[$199>>2]|0;
  $201 = (($198) + 4)|0;
  $202 = $201;
  $203 = HEAP32[$202>>2]|0;
  $204 = ((((232 + ($193<<7)|0) + ($i11$041<<4)|0)) + 4|0);
  $205 = HEAP32[$204>>2]|0;
  $206 = (_i64Subtract(($200|0),($203|0),($205|0),0)|0);
  $207 = tempRet0;
  $208 = (0)<($207>>>0);
  $209 = ($197>>>0)<($206>>>0);
  $210 = (0)==($207|0);
  $211 = $210 & $209;
  $212 = $208 | $211;
  if ($212) {
   $AsyncCtx3 = _emscripten_alloc_async_context(8,sp)|0;
   FUNCTION_TABLE_v[$194 & 255]();
   $IsAsync4 = ___async;
   if ($IsAsync4) {
    label = 74;
    break;
   }
   _emscripten_free_async_context(($AsyncCtx3|0));
   $214 = 389544;
   $215 = $214;
   $216 = HEAP32[$215>>2]|0;
   $217 = (($214) + 4)|0;
   $218 = $217;
   $219 = HEAP32[$218>>2]|0;
   $220 = HEAP32[144>>2]|0;
   $221 = ((((232 + ($220<<7)|0) + ($i11$041<<4)|0)) + 4|0);
   HEAP32[$221>>2] = $216;
   $222 = ((232 + ($220<<7)|0) + ($i11$041<<4)|0);
   $223 = HEAP8[$222>>0]|0;
   $224 = ($223<<24>>24)==(0);
   if ($224) {
    $225 = ((((232 + ($220<<7)|0) + ($i11$041<<4)|0)) + 12|0);
    HEAP32[$225>>2] = 0;
    $226 = (($i11$041) + -1)|0;
    $420 = $220;$i11$1 = $226;
   } else {
    $420 = $220;$i11$1 = $i11$041;
   }
  } else {
   $420 = $193;$i11$1 = $i11$041;
  }
  $227 = (($i11$1) + 1)|0;
  $228 = ($227|0)<(8);
  if ($228) {
   $193 = $420;$i11$041 = $227;
  } else {
   label = 78;
   break;
  }
 }
 if ((label|0) == 74) {
  HEAP32[$AsyncCtx3>>2] = 247;
  $213 = ((($AsyncCtx3)) + 4|0);
  HEAP32[$213>>2] = $i11$041;
  sp = STACKTOP;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 78) {
  STACKTOP = sp;return;
 }
}
function __render() {
 var $$phi$trans$insert11 = 0, $$pre = 0, $$pre10 = 0, $$pre12 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0;
 var $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0, $98 = 0.0;
 var $99 = 0, $current_shader$09 = 0, $current_shader$1 = 0, $current_shader$2 = 0, $current_shader$3 = 0, $current_shader1$0 = 0, $first_element$0$off08 = 0, $first_element$0$off08$not = 0, $first_element$2$off0 = 0, $i$05 = 0, $last_type$04 = 0, $last_type$1 = 0, $last_type$2 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _glClear(16640);
 $0 = HEAP8[35040>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $2 = HEAP32[35048>>2]|0;
  _glBindFramebuffer(36160,($2|0));
  $3 = HEAP32[(389572)>>2]|0;
  $4 = HEAP32[(389576)>>2]|0;
  _glViewport(0,0,($3|0),($4|0));
  _glEnable(2929);
  _glClear(16640);
 }
 $5 = HEAP32[32024>>2]|0;
 _glBindBuffer(34962,($5|0));
 _glDisable(2929);
 $6 = HEAP32[32032>>2]|0;
 _glBindVertexArray(($6|0));
 $current_shader$09 = 0;$first_element$0$off08 = 1;$i$05 = 0;$last_type$04 = 0;
 while(1) {
  $7 = HEAP32[144>>2]|0;
  $8 = ((32040 + ($7<<6)|0) + ($i$05<<2)|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(0|0);
  if ($10) {
   break;
  }
  $11 = ((($9)) + 44|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = ($12<<24>>24)==(0);
  if ($13) {
   $current_shader$3 = $current_shader$09;$first_element$2$off0 = $first_element$0$off08;$last_type$2 = $last_type$04;
  } else {
   $$pre = HEAP32[$9>>2]|0;
   $first_element$0$off08$not = $first_element$0$off08 ^ 1;
   $14 = ($$pre|0)==($last_type$04|0);
   $or$cond = $14 & $first_element$0$off08$not;
   if ($or$cond) {
    $23 = $9;$current_shader$2 = $current_shader$09;$last_type$1 = $last_type$04;
   } else {
    $15 = ($$pre|0)>(0);
    $16 = (($$pre) + -1)|0;
    $17 = (33240 + (($16*172)|0)|0);
    $current_shader$1 = $15 ? $17 : 33064;
    $18 = ((($current_shader$1)) + 4|0);
    $19 = HEAP32[$18>>2]|0;
    _glUseProgram(($19|0));
    $$pre10 = HEAP32[144>>2]|0;
    $$phi$trans$insert11 = ((32040 + ($$pre10<<6)|0) + ($i$05<<2)|0);
    $$pre12 = HEAP32[$$phi$trans$insert11>>2]|0;
    $23 = $$pre12;$current_shader$2 = $current_shader$1;$last_type$1 = $$pre;
   }
   $20 = ((($current_shader$2)) + 136|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ((($23)) + 20|0);
   $24 = +HEAPF32[$22>>2];
   $25 = ((($23)) + 24|0);
   $26 = +HEAPF32[$25>>2];
   $27 = ((($23)) + 28|0);
   $28 = +HEAPF32[$27>>2];
   $29 = ((($23)) + 32|0);
   $30 = +HEAPF32[$29>>2];
   _glUniform4f(($21|0),(+$24),(+$26),(+$28),(+$30));
   $31 = ((($current_shader$2)) + 144|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = HEAP32[144>>2]|0;
   $34 = ((32040 + ($33<<6)|0) + ($i$05<<2)|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ((($35)) + 40|0);
   $37 = +HEAPF32[$36>>2];
   $38 = ((($35)) + 36|0);
   $39 = +HEAPF32[$38>>2];
   _glUniform2f(($32|0),(+$37),(+$39));
   $40 = ((($current_shader$2)) + 148|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = 389544;
   $43 = $42;
   $44 = HEAP32[$43>>2]|0;
   $45 = (($42) + 4)|0;
   $46 = $45;
   $47 = HEAP32[$46>>2]|0;
   $48 = (+($44>>>0)) + (4294967296.0*(+($47>>>0)));
   $49 = $48 / 1.0E+6;
   _glUniform1f(($41|0),(+$49));
   $50 = ((($current_shader$2)) + 156|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = HEAP32[144>>2]|0;
   $53 = ((32040 + ($52<<6)|0) + ($i$05<<2)|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = ((($54)) + 4|0);
   $56 = HEAP32[$55>>2]|0;
   _glUniform1i(($51|0),($56|0));
   $57 = ((($current_shader$2)) + 140|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = HEAP32[144>>2]|0;
   $60 = ((32040 + ($59<<6)|0) + ($i$05<<2)|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ((($61)) + 48|0);
   _glUniformMatrix4fv(($58|0),1,0,($62|0));
   $63 = ((($current_shader$2)) + 160|0);
   $64 = HEAP32[$63>>2]|0;
   _glEnableVertexAttribArray(($64|0));
   $65 = HEAP32[$63>>2]|0;
   _glVertexAttribPointer(($65|0),3,5126,0,0,(0|0));
   $66 = HEAP32[144>>2]|0;
   $67 = ((32040 + ($66<<6)|0) + ($i$05<<2)|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = ((($68)) + 112|0);
   $70 = HEAP32[$69>>2]|0;
   _glDrawArrays(($70|0),0,4);
   $71 = HEAP32[$63>>2]|0;
   _glDisableVertexAttribArray(($71|0));
   $current_shader$3 = $current_shader$2;$first_element$2$off0 = 0;$last_type$2 = $last_type$1;
  }
  $72 = (($i$05) + 1)|0;
  $73 = ($72|0)<(16);
  if ($73) {
   $current_shader$09 = $current_shader$3;$first_element$0$off08 = $first_element$2$off0;$i$05 = $72;$last_type$04 = $last_type$2;
  } else {
   break;
  }
 }
 _glBindVertexArray(0);
 _glEnable(2929);
 $74 = HEAP8[35040>>0]|0;
 $75 = ($74<<24>>24)==(0);
 if ($75) {
  _glFlush();
  return;
 }
 $76 = HEAP32[32024>>2]|0;
 _glBindBuffer(34962,($76|0));
 _glBindFramebuffer(36160,0);
 $77 = HEAP32[(389560)>>2]|0;
 $78 = HEAP32[(389564)>>2]|0;
 _glViewport(0,0,($77|0),($78|0));
 $79 = HEAP32[32032>>2]|0;
 _glBindVertexArray(($79|0));
 _glDisable(2929);
 $80 = HEAP32[35032>>2]|0;
 $81 = ($80|0)==(0);
 if ($81) {
  $88 = HEAP32[(34796)>>2]|0;
  _glUseProgram(($88|0));
  $current_shader1$0 = 34792;
 } else {
  $82 = (($80) + -1)|0;
  $83 = (((33240 + (($82*172)|0)|0)) + 4|0);
  $84 = HEAP32[$83>>2]|0;
  _glUseProgram(($84|0));
  $85 = HEAP32[35032>>2]|0;
  $86 = (($85) + -1)|0;
  $87 = (33240 + (($86*172)|0)|0);
  $current_shader1$0 = $87;
 }
 _glActiveTexture(33984);
 $89 = HEAP32[35056>>2]|0;
 _glBindTexture(3553,($89|0));
 $90 = ((($current_shader1$0)) + 160|0);
 $91 = HEAP32[$90>>2]|0;
 _glEnableVertexAttribArray(($91|0));
 $92 = HEAP32[$90>>2]|0;
 _glVertexAttribPointer(($92|0),3,5126,0,0,(0|0));
 $93 = ((($current_shader1$0)) + 144|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = HEAP32[(389572)>>2]|0;
 $96 = (+($95|0));
 $97 = HEAP32[(389576)>>2]|0;
 $98 = (+($97|0));
 _glUniform2f(($94|0),(+$96),(+$98));
 $99 = ((($current_shader1$0)) + 136|0);
 $100 = HEAP32[$99>>2]|0;
 _glUniform4f(($100|0),0.0,0.0,0.0,1.0);
 $101 = ((($current_shader1$0)) + 148|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = 389544;
 $104 = $103;
 $105 = HEAP32[$104>>2]|0;
 $106 = (($103) + 4)|0;
 $107 = $106;
 $108 = HEAP32[$107>>2]|0;
 $109 = (+($105>>>0)) + (4294967296.0*(+($108>>>0)));
 $110 = $109 / 1.0E+6;
 _glUniform1f(($102|0),(+$110));
 $111 = ((($current_shader1$0)) + 140|0);
 $112 = HEAP32[$111>>2]|0;
 _glUniformMatrix4fv(($112|0),1,0,(34968|0));
 $113 = ((($current_shader1$0)) + 156|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = HEAP32[(651780)>>2]|0;
 _glUniform1i(($114|0),($115|0));
 _glDrawArrays(6,0,4);
 $116 = HEAP32[$90>>2]|0;
 _glDisableVertexAttribArray(($116|0));
 _glFlush();
 return;
}
function ___memrchr($m,$c,$n) {
 $m = $m|0;
 $c = $c|0;
 $n = $n|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c&255;
 $$01 = $n;
 while(1) {
  $1 = (($$01) + -1)|0;
  $2 = ($$01|0)==(0);
  if ($2) {
   $$0 = 0;
   label = 4;
   break;
  }
  $3 = (($m) + ($1)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)==($0<<24>>24);
  if ($5) {
   $$0 = $3;
   label = 4;
   break;
  } else {
   $$01 = $1;
  }
 }
 if ((label|0) == 4) {
  return ($$0|0);
 }
 return (0)|0;
}
function _strrchr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($s|0))|0);
 $1 = (($0) + 1)|0;
 $2 = (___memrchr($s,$c,$1)|0);
 return ($2|0);
}
function _isspace($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c|0)==(32);
 $1 = (($c) + -9)|0;
 $2 = ($1>>>0)<(5);
 $3 = $0 | $2;
 $4 = $3&1;
 return ($4|0);
}
function _atoi($s) {
 $s = $s|0;
 var $$0 = 0, $$0$lcssa = 0, $$1$ph = 0, $$13 = 0, $$lcssa9 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigit2 = 0, $isdigittmp = 0, $isdigittmp1 = 0, $isdigittmp5 = 0, $n$0$lcssa = 0, $n$04 = 0, $neg$0 = 0, $neg$1$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $s;
 while(1) {
  $0 = HEAP8[$$0>>0]|0;
  $1 = $0 << 24 >> 24;
  $2 = (_isspace($1)|0);
  $3 = ($2|0)==(0);
  $4 = ((($$0)) + 1|0);
  if ($3) {
   $$0$lcssa = $$0;$$lcssa9 = $4;
   break;
  } else {
   $$0 = $4;
  }
 }
 $5 = HEAP8[$$0$lcssa>>0]|0;
 $6 = $5 << 24 >> 24;
 if ((($6|0) == 45)) {
  $neg$0 = 1;
  label = 5;
 } else if ((($6|0) == 43)) {
  $neg$0 = 0;
  label = 5;
 } else {
  $$1$ph = $$0$lcssa;$8 = $5;$neg$1$ph = 0;
 }
 if ((label|0) == 5) {
  $$pre = HEAP8[$$lcssa9>>0]|0;
  $$1$ph = $$lcssa9;$8 = $$pre;$neg$1$ph = $neg$0;
 }
 $7 = $8 << 24 >> 24;
 $isdigittmp1 = (($7) + -48)|0;
 $isdigit2 = ($isdigittmp1>>>0)<(10);
 if ($isdigit2) {
  $$13 = $$1$ph;$isdigittmp5 = $isdigittmp1;$n$04 = 0;
 } else {
  $n$0$lcssa = 0;
  $14 = ($neg$1$ph|0)!=(0);
  $15 = (0 - ($n$0$lcssa))|0;
  $16 = $14 ? $n$0$lcssa : $15;
  return ($16|0);
 }
 while(1) {
  $9 = ($n$04*10)|0;
  $10 = ((($$13)) + 1|0);
  $11 = (($9) - ($isdigittmp5))|0;
  $12 = HEAP8[$10>>0]|0;
  $13 = $12 << 24 >> 24;
  $isdigittmp = (($13) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $$13 = $10;$isdigittmp5 = $isdigittmp;$n$04 = $11;
  } else {
   $n$0$lcssa = $11;
   break;
  }
 }
 $14 = ($neg$1$ph|0)!=(0);
 $15 = (0 - ($n$0$lcssa))|0;
 $16 = $14 ? $n$0$lcssa : $15;
 return ($16|0);
}
function _strcmp($l,$r) {
 $l = $l|0;
 $r = $r|0;
 var $$014 = 0, $$05 = 0, $$lcssa = 0, $$lcssa2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$l>>0]|0;
 $1 = HEAP8[$r>>0]|0;
 $2 = ($0<<24>>24)!=($1<<24>>24);
 $3 = ($0<<24>>24)==(0);
 $or$cond3 = $3 | $2;
 if ($or$cond3) {
  $$lcssa = $0;$$lcssa2 = $1;
 } else {
  $$014 = $l;$$05 = $r;
  while(1) {
   $4 = ((($$014)) + 1|0);
   $5 = ((($$05)) + 1|0);
   $6 = HEAP8[$4>>0]|0;
   $7 = HEAP8[$5>>0]|0;
   $8 = ($6<<24>>24)!=($7<<24>>24);
   $9 = ($6<<24>>24)==(0);
   $or$cond = $9 | $8;
   if ($or$cond) {
    $$lcssa = $6;$$lcssa2 = $7;
    break;
   } else {
    $$014 = $4;$$05 = $5;
   }
  }
 }
 $10 = $$lcssa&255;
 $11 = $$lcssa2&255;
 $12 = (($10) - ($11))|0;
 return ($12|0);
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$3$i = 0, $$lcssa = 0, $$lcssa211 = 0, $$lcssa215 = 0, $$lcssa216 = 0, $$lcssa217 = 0, $$lcssa219 = 0, $$lcssa222 = 0, $$lcssa224 = 0, $$lcssa226 = 0, $$lcssa228 = 0, $$lcssa230 = 0, $$lcssa232 = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i22$i = 0, $$pre$i25 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i23$iZ2D = 0;
 var $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi58$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre105 = 0, $$pre106 = 0, $$pre14$i$i = 0, $$pre43$i = 0, $$pre56$i$i = 0, $$pre57$i$i = 0, $$pre8$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0, $$sum$i13$i = 0, $$sum$i14$i = 0, $$sum$i17$i = 0, $$sum$i19$i = 0;
 var $$sum$i2334 = 0, $$sum$i32 = 0, $$sum$i35 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0, $$sum1$i15$i = 0, $$sum1$i20$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum11$i = 0, $$sum11$i$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum116$i = 0;
 var $$sum117$i = 0, $$sum118$i = 0, $$sum119$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum120$i = 0, $$sum121$i = 0, $$sum122$i = 0, $$sum123$i = 0, $$sum124$i = 0, $$sum125$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0, $$sum15$i = 0, $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0, $$sum17$i$i = 0;
 var $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i16$i = 0, $$sum2$i18$i = 0, $$sum2$i21$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0, $$sum23$i$i = 0, $$sum24$i$i = 0, $$sum25$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0, $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i27 = 0;
 var $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0, $$sum41$i$i = 0, $$sum42$i$i = 0, $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0, $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0;
 var $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0;
 var $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0;
 var $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0;
 var $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0;
 var $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0;
 var $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0;
 var $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0;
 var $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0;
 var $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0;
 var $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0;
 var $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0;
 var $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0;
 var $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0;
 var $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0;
 var $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0;
 var $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0;
 var $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0;
 var $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0;
 var $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0;
 var $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0;
 var $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0;
 var $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0;
 var $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0;
 var $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0;
 var $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0;
 var $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0;
 var $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0;
 var $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0;
 var $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0;
 var $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0;
 var $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0;
 var $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0;
 var $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0;
 var $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0;
 var $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0;
 var $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0;
 var $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0;
 var $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0;
 var $F5$0$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$029$i = 0, $K2$07$i$i = 0, $K8$051$i$i = 0, $R$0$i = 0, $R$0$i$i = 0, $R$0$i$i$lcssa = 0, $R$0$i$lcssa = 0, $R$0$i18 = 0, $R$0$i18$lcssa = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i$i$lcssa = 0, $RP$0$i$lcssa = 0;
 var $RP$0$i17 = 0, $RP$0$i17$lcssa = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i25$i = 0, $T$028$i = 0, $T$028$i$lcssa = 0, $T$050$i$i = 0, $T$050$i$i$lcssa = 0, $T$06$i$i = 0, $T$06$i$i$lcssa = 0, $br$0$ph$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0, $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0;
 var $not$$i = 0, $not$$i$i = 0, $not$$i26$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i30 = 0, $or$cond1$i = 0, $or$cond19$i = 0, $or$cond2$i = 0, $or$cond3$i = 0, $or$cond5$i = 0, $or$cond57$i = 0, $or$cond6$i = 0, $or$cond8$i = 0, $or$cond9$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i$lcssa = 0, $rsize$0$i15 = 0, $rsize$1$i = 0;
 var $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$331$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$084$i = 0, $sp$084$i$lcssa = 0, $sp$183$i = 0, $sp$183$i$lcssa = 0, $ssize$0$$i = 0, $ssize$0$i = 0, $ssize$1$ph$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0, $t$1$i = 0, $t$2$ph$i = 0;
 var $t$2$v$3$i = 0, $t$230$i = 0, $tbase$255$i = 0, $tsize$0$ph$i = 0, $tsize$0323944$i = 0, $tsize$1$i = 0, $tsize$254$i = 0, $v$0$i = 0, $v$0$i$lcssa = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0, $v$3$ph$i = 0, $v$332$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   $2 = (($bytes) + 11)|0;
   $3 = $2 & -8;
   $4 = $1 ? 16 : $3;
   $5 = $4 >>> 3;
   $6 = HEAP32[652736>>2]|0;
   $7 = $6 >>> $5;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($5))|0;
    $13 = $12 << 1;
    $14 = (652776 + ($13<<2)|0);
    $$sum10 = (($13) + 2)|0;
    $15 = (652776 + ($$sum10<<2)|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[652736>>2] = $22;
     } else {
      $23 = HEAP32[(652752)>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = ((($18)) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = ((($16)) + 4|0);
    HEAP32[$30>>2] = $29;
    $$sum1112 = $28 | 4;
    $31 = (($16) + ($$sum1112)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 | 1;
    HEAP32[$31>>2] = $33;
    $mem$0 = $17;
    return ($mem$0|0);
   }
   $34 = HEAP32[(652744)>>2]|0;
   $35 = ($4>>>0)>($34>>>0);
   if ($35) {
    $36 = ($7|0)==(0);
    if (!($36)) {
     $37 = $7 << $5;
     $38 = 2 << $5;
     $39 = (0 - ($38))|0;
     $40 = $38 | $39;
     $41 = $37 & $40;
     $42 = (0 - ($41))|0;
     $43 = $41 & $42;
     $44 = (($43) + -1)|0;
     $45 = $44 >>> 12;
     $46 = $45 & 16;
     $47 = $44 >>> $46;
     $48 = $47 >>> 5;
     $49 = $48 & 8;
     $50 = $49 | $46;
     $51 = $47 >>> $49;
     $52 = $51 >>> 2;
     $53 = $52 & 4;
     $54 = $50 | $53;
     $55 = $51 >>> $53;
     $56 = $55 >>> 1;
     $57 = $56 & 2;
     $58 = $54 | $57;
     $59 = $55 >>> $57;
     $60 = $59 >>> 1;
     $61 = $60 & 1;
     $62 = $58 | $61;
     $63 = $59 >>> $61;
     $64 = (($62) + ($63))|0;
     $65 = $64 << 1;
     $66 = (652776 + ($65<<2)|0);
     $$sum4 = (($65) + 2)|0;
     $67 = (652776 + ($$sum4<<2)|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = ((($68)) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($66|0)==($70|0);
     do {
      if ($71) {
       $72 = 1 << $64;
       $73 = $72 ^ -1;
       $74 = $6 & $73;
       HEAP32[652736>>2] = $74;
       $88 = $34;
      } else {
       $75 = HEAP32[(652752)>>2]|0;
       $76 = ($70>>>0)<($75>>>0);
       if ($76) {
        _abort();
        // unreachable;
       }
       $77 = ((($70)) + 12|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ($78|0)==($68|0);
       if ($79) {
        HEAP32[$77>>2] = $66;
        HEAP32[$67>>2] = $70;
        $$pre = HEAP32[(652744)>>2]|0;
        $88 = $$pre;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $80 = $64 << 3;
     $81 = (($80) - ($4))|0;
     $82 = $4 | 3;
     $83 = ((($68)) + 4|0);
     HEAP32[$83>>2] = $82;
     $84 = (($68) + ($4)|0);
     $85 = $81 | 1;
     $$sum56 = $4 | 4;
     $86 = (($68) + ($$sum56)|0);
     HEAP32[$86>>2] = $85;
     $87 = (($68) + ($80)|0);
     HEAP32[$87>>2] = $81;
     $89 = ($88|0)==(0);
     if (!($89)) {
      $90 = HEAP32[(652756)>>2]|0;
      $91 = $88 >>> 3;
      $92 = $91 << 1;
      $93 = (652776 + ($92<<2)|0);
      $94 = HEAP32[652736>>2]|0;
      $95 = 1 << $91;
      $96 = $94 & $95;
      $97 = ($96|0)==(0);
      if ($97) {
       $98 = $94 | $95;
       HEAP32[652736>>2] = $98;
       $$pre105 = (($92) + 2)|0;
       $$pre106 = (652776 + ($$pre105<<2)|0);
       $$pre$phiZ2D = $$pre106;$F4$0 = $93;
      } else {
       $$sum9 = (($92) + 2)|0;
       $99 = (652776 + ($$sum9<<2)|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = HEAP32[(652752)>>2]|0;
       $102 = ($100>>>0)<($101>>>0);
       if ($102) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $99;$F4$0 = $100;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $90;
      $103 = ((($F4$0)) + 12|0);
      HEAP32[$103>>2] = $90;
      $104 = ((($90)) + 8|0);
      HEAP32[$104>>2] = $F4$0;
      $105 = ((($90)) + 12|0);
      HEAP32[$105>>2] = $93;
     }
     HEAP32[(652744)>>2] = $81;
     HEAP32[(652756)>>2] = $84;
     $mem$0 = $69;
     return ($mem$0|0);
    }
    $106 = HEAP32[(652740)>>2]|0;
    $107 = ($106|0)==(0);
    if ($107) {
     $nb$0 = $4;
    } else {
     $108 = (0 - ($106))|0;
     $109 = $106 & $108;
     $110 = (($109) + -1)|0;
     $111 = $110 >>> 12;
     $112 = $111 & 16;
     $113 = $110 >>> $112;
     $114 = $113 >>> 5;
     $115 = $114 & 8;
     $116 = $115 | $112;
     $117 = $113 >>> $115;
     $118 = $117 >>> 2;
     $119 = $118 & 4;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = $121 >>> 1;
     $123 = $122 & 2;
     $124 = $120 | $123;
     $125 = $121 >>> $123;
     $126 = $125 >>> 1;
     $127 = $126 & 1;
     $128 = $124 | $127;
     $129 = $125 >>> $127;
     $130 = (($128) + ($129))|0;
     $131 = (653040 + ($130<<2)|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = ((($132)) + 4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 & -8;
     $136 = (($135) - ($4))|0;
     $rsize$0$i = $136;$t$0$i = $132;$v$0$i = $132;
     while(1) {
      $137 = ((($t$0$i)) + 16|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138|0)==(0|0);
      if ($139) {
       $140 = ((($t$0$i)) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        $rsize$0$i$lcssa = $rsize$0$i;$v$0$i$lcssa = $v$0$i;
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $143 = ((($144)) + 4|0);
      $145 = HEAP32[$143>>2]|0;
      $146 = $145 & -8;
      $147 = (($146) - ($4))|0;
      $148 = ($147>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $148 ? $147 : $rsize$0$i;
      $$v$0$i = $148 ? $144 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $144;$v$0$i = $$v$0$i;
     }
     $149 = HEAP32[(652752)>>2]|0;
     $150 = ($v$0$i$lcssa>>>0)<($149>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($v$0$i$lcssa) + ($4)|0);
     $152 = ($v$0$i$lcssa>>>0)<($151>>>0);
     if (!($152)) {
      _abort();
      // unreachable;
     }
     $153 = ((($v$0$i$lcssa)) + 24|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = ((($v$0$i$lcssa)) + 12|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($156|0)==($v$0$i$lcssa|0);
     do {
      if ($157) {
       $167 = ((($v$0$i$lcssa)) + 20|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==(0|0);
       if ($169) {
        $170 = ((($v$0$i$lcssa)) + 16|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = ($171|0)==(0|0);
        if ($172) {
         $R$1$i = 0;
         break;
        } else {
         $R$0$i = $171;$RP$0$i = $170;
        }
       } else {
        $R$0$i = $168;$RP$0$i = $167;
       }
       while(1) {
        $173 = ((($R$0$i)) + 20|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($174|0)==(0|0);
        if (!($175)) {
         $R$0$i = $174;$RP$0$i = $173;
         continue;
        }
        $176 = ((($R$0$i)) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($177|0)==(0|0);
        if ($178) {
         $R$0$i$lcssa = $R$0$i;$RP$0$i$lcssa = $RP$0$i;
         break;
        } else {
         $R$0$i = $177;$RP$0$i = $176;
        }
       }
       $179 = ($RP$0$i$lcssa>>>0)<($149>>>0);
       if ($179) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$0$i$lcssa>>2] = 0;
        $R$1$i = $R$0$i$lcssa;
        break;
       }
      } else {
       $158 = ((($v$0$i$lcssa)) + 8|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($159>>>0)<($149>>>0);
       if ($160) {
        _abort();
        // unreachable;
       }
       $161 = ((($159)) + 12|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = ($162|0)==($v$0$i$lcssa|0);
       if (!($163)) {
        _abort();
        // unreachable;
       }
       $164 = ((($156)) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165|0)==($v$0$i$lcssa|0);
       if ($166) {
        HEAP32[$161>>2] = $156;
        HEAP32[$164>>2] = $159;
        $R$1$i = $156;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $180 = ($154|0)==(0|0);
     do {
      if (!($180)) {
       $181 = ((($v$0$i$lcssa)) + 28|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = (653040 + ($182<<2)|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($v$0$i$lcssa|0)==($184|0);
       if ($185) {
        HEAP32[$183>>2] = $R$1$i;
        $cond$i = ($R$1$i|0)==(0|0);
        if ($cond$i) {
         $186 = 1 << $182;
         $187 = $186 ^ -1;
         $188 = HEAP32[(652740)>>2]|0;
         $189 = $188 & $187;
         HEAP32[(652740)>>2] = $189;
         break;
        }
       } else {
        $190 = HEAP32[(652752)>>2]|0;
        $191 = ($154>>>0)<($190>>>0);
        if ($191) {
         _abort();
         // unreachable;
        }
        $192 = ((($154)) + 16|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = ($193|0)==($v$0$i$lcssa|0);
        if ($194) {
         HEAP32[$192>>2] = $R$1$i;
        } else {
         $195 = ((($154)) + 20|0);
         HEAP32[$195>>2] = $R$1$i;
        }
        $196 = ($R$1$i|0)==(0|0);
        if ($196) {
         break;
        }
       }
       $197 = HEAP32[(652752)>>2]|0;
       $198 = ($R$1$i>>>0)<($197>>>0);
       if ($198) {
        _abort();
        // unreachable;
       }
       $199 = ((($R$1$i)) + 24|0);
       HEAP32[$199>>2] = $154;
       $200 = ((($v$0$i$lcssa)) + 16|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = ($201|0)==(0|0);
       do {
        if (!($202)) {
         $203 = ($201>>>0)<($197>>>0);
         if ($203) {
          _abort();
          // unreachable;
         } else {
          $204 = ((($R$1$i)) + 16|0);
          HEAP32[$204>>2] = $201;
          $205 = ((($201)) + 24|0);
          HEAP32[$205>>2] = $R$1$i;
          break;
         }
        }
       } while(0);
       $206 = ((($v$0$i$lcssa)) + 20|0);
       $207 = HEAP32[$206>>2]|0;
       $208 = ($207|0)==(0|0);
       if (!($208)) {
        $209 = HEAP32[(652752)>>2]|0;
        $210 = ($207>>>0)<($209>>>0);
        if ($210) {
         _abort();
         // unreachable;
        } else {
         $211 = ((($R$1$i)) + 20|0);
         HEAP32[$211>>2] = $207;
         $212 = ((($207)) + 24|0);
         HEAP32[$212>>2] = $R$1$i;
         break;
        }
       }
      }
     } while(0);
     $213 = ($rsize$0$i$lcssa>>>0)<(16);
     if ($213) {
      $214 = (($rsize$0$i$lcssa) + ($4))|0;
      $215 = $214 | 3;
      $216 = ((($v$0$i$lcssa)) + 4|0);
      HEAP32[$216>>2] = $215;
      $$sum4$i = (($214) + 4)|0;
      $217 = (($v$0$i$lcssa) + ($$sum4$i)|0);
      $218 = HEAP32[$217>>2]|0;
      $219 = $218 | 1;
      HEAP32[$217>>2] = $219;
     } else {
      $220 = $4 | 3;
      $221 = ((($v$0$i$lcssa)) + 4|0);
      HEAP32[$221>>2] = $220;
      $222 = $rsize$0$i$lcssa | 1;
      $$sum$i35 = $4 | 4;
      $223 = (($v$0$i$lcssa) + ($$sum$i35)|0);
      HEAP32[$223>>2] = $222;
      $$sum1$i = (($rsize$0$i$lcssa) + ($4))|0;
      $224 = (($v$0$i$lcssa) + ($$sum1$i)|0);
      HEAP32[$224>>2] = $rsize$0$i$lcssa;
      $225 = HEAP32[(652744)>>2]|0;
      $226 = ($225|0)==(0);
      if (!($226)) {
       $227 = HEAP32[(652756)>>2]|0;
       $228 = $225 >>> 3;
       $229 = $228 << 1;
       $230 = (652776 + ($229<<2)|0);
       $231 = HEAP32[652736>>2]|0;
       $232 = 1 << $228;
       $233 = $231 & $232;
       $234 = ($233|0)==(0);
       if ($234) {
        $235 = $231 | $232;
        HEAP32[652736>>2] = $235;
        $$pre$i = (($229) + 2)|0;
        $$pre8$i = (652776 + ($$pre$i<<2)|0);
        $$pre$phi$iZ2D = $$pre8$i;$F1$0$i = $230;
       } else {
        $$sum3$i = (($229) + 2)|0;
        $236 = (652776 + ($$sum3$i<<2)|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = HEAP32[(652752)>>2]|0;
        $239 = ($237>>>0)<($238>>>0);
        if ($239) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $236;$F1$0$i = $237;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $227;
       $240 = ((($F1$0$i)) + 12|0);
       HEAP32[$240>>2] = $227;
       $241 = ((($227)) + 8|0);
       HEAP32[$241>>2] = $F1$0$i;
       $242 = ((($227)) + 12|0);
       HEAP32[$242>>2] = $230;
      }
      HEAP32[(652744)>>2] = $rsize$0$i$lcssa;
      HEAP32[(652756)>>2] = $151;
     }
     $243 = ((($v$0$i$lcssa)) + 8|0);
     $mem$0 = $243;
     return ($mem$0|0);
    }
   } else {
    $nb$0 = $4;
   }
  } else {
   $244 = ($bytes>>>0)>(4294967231);
   if ($244) {
    $nb$0 = -1;
   } else {
    $245 = (($bytes) + 11)|0;
    $246 = $245 & -8;
    $247 = HEAP32[(652740)>>2]|0;
    $248 = ($247|0)==(0);
    if ($248) {
     $nb$0 = $246;
    } else {
     $249 = (0 - ($246))|0;
     $250 = $245 >>> 8;
     $251 = ($250|0)==(0);
     if ($251) {
      $idx$0$i = 0;
     } else {
      $252 = ($246>>>0)>(16777215);
      if ($252) {
       $idx$0$i = 31;
      } else {
       $253 = (($250) + 1048320)|0;
       $254 = $253 >>> 16;
       $255 = $254 & 8;
       $256 = $250 << $255;
       $257 = (($256) + 520192)|0;
       $258 = $257 >>> 16;
       $259 = $258 & 4;
       $260 = $259 | $255;
       $261 = $256 << $259;
       $262 = (($261) + 245760)|0;
       $263 = $262 >>> 16;
       $264 = $263 & 2;
       $265 = $260 | $264;
       $266 = (14 - ($265))|0;
       $267 = $261 << $264;
       $268 = $267 >>> 15;
       $269 = (($266) + ($268))|0;
       $270 = $269 << 1;
       $271 = (($269) + 7)|0;
       $272 = $246 >>> $271;
       $273 = $272 & 1;
       $274 = $273 | $270;
       $idx$0$i = $274;
      }
     }
     $275 = (653040 + ($idx$0$i<<2)|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ($276|0)==(0|0);
     L123: do {
      if ($277) {
       $rsize$2$i = $249;$t$1$i = 0;$v$2$i = 0;
       label = 86;
      } else {
       $278 = ($idx$0$i|0)==(31);
       $279 = $idx$0$i >>> 1;
       $280 = (25 - ($279))|0;
       $281 = $278 ? 0 : $280;
       $282 = $246 << $281;
       $rsize$0$i15 = $249;$rst$0$i = 0;$sizebits$0$i = $282;$t$0$i14 = $276;$v$0$i16 = 0;
       while(1) {
        $283 = ((($t$0$i14)) + 4|0);
        $284 = HEAP32[$283>>2]|0;
        $285 = $284 & -8;
        $286 = (($285) - ($246))|0;
        $287 = ($286>>>0)<($rsize$0$i15>>>0);
        if ($287) {
         $288 = ($285|0)==($246|0);
         if ($288) {
          $rsize$331$i = $286;$t$230$i = $t$0$i14;$v$332$i = $t$0$i14;
          label = 90;
          break L123;
         } else {
          $rsize$1$i = $286;$v$1$i = $t$0$i14;
         }
        } else {
         $rsize$1$i = $rsize$0$i15;$v$1$i = $v$0$i16;
        }
        $289 = ((($t$0$i14)) + 20|0);
        $290 = HEAP32[$289>>2]|0;
        $291 = $sizebits$0$i >>> 31;
        $292 = (((($t$0$i14)) + 16|0) + ($291<<2)|0);
        $293 = HEAP32[$292>>2]|0;
        $294 = ($290|0)==(0|0);
        $295 = ($290|0)==($293|0);
        $or$cond19$i = $294 | $295;
        $rst$1$i = $or$cond19$i ? $rst$0$i : $290;
        $296 = ($293|0)==(0|0);
        $297 = $sizebits$0$i << 1;
        if ($296) {
         $rsize$2$i = $rsize$1$i;$t$1$i = $rst$1$i;$v$2$i = $v$1$i;
         label = 86;
         break;
        } else {
         $rsize$0$i15 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $297;$t$0$i14 = $293;$v$0$i16 = $v$1$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 86) {
      $298 = ($t$1$i|0)==(0|0);
      $299 = ($v$2$i|0)==(0|0);
      $or$cond$i = $298 & $299;
      if ($or$cond$i) {
       $300 = 2 << $idx$0$i;
       $301 = (0 - ($300))|0;
       $302 = $300 | $301;
       $303 = $247 & $302;
       $304 = ($303|0)==(0);
       if ($304) {
        $nb$0 = $246;
        break;
       }
       $305 = (0 - ($303))|0;
       $306 = $303 & $305;
       $307 = (($306) + -1)|0;
       $308 = $307 >>> 12;
       $309 = $308 & 16;
       $310 = $307 >>> $309;
       $311 = $310 >>> 5;
       $312 = $311 & 8;
       $313 = $312 | $309;
       $314 = $310 >>> $312;
       $315 = $314 >>> 2;
       $316 = $315 & 4;
       $317 = $313 | $316;
       $318 = $314 >>> $316;
       $319 = $318 >>> 1;
       $320 = $319 & 2;
       $321 = $317 | $320;
       $322 = $318 >>> $320;
       $323 = $322 >>> 1;
       $324 = $323 & 1;
       $325 = $321 | $324;
       $326 = $322 >>> $324;
       $327 = (($325) + ($326))|0;
       $328 = (653040 + ($327<<2)|0);
       $329 = HEAP32[$328>>2]|0;
       $t$2$ph$i = $329;$v$3$ph$i = 0;
      } else {
       $t$2$ph$i = $t$1$i;$v$3$ph$i = $v$2$i;
      }
      $330 = ($t$2$ph$i|0)==(0|0);
      if ($330) {
       $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$3$ph$i;
      } else {
       $rsize$331$i = $rsize$2$i;$t$230$i = $t$2$ph$i;$v$332$i = $v$3$ph$i;
       label = 90;
      }
     }
     if ((label|0) == 90) {
      while(1) {
       label = 0;
       $331 = ((($t$230$i)) + 4|0);
       $332 = HEAP32[$331>>2]|0;
       $333 = $332 & -8;
       $334 = (($333) - ($246))|0;
       $335 = ($334>>>0)<($rsize$331$i>>>0);
       $$rsize$3$i = $335 ? $334 : $rsize$331$i;
       $t$2$v$3$i = $335 ? $t$230$i : $v$332$i;
       $336 = ((($t$230$i)) + 16|0);
       $337 = HEAP32[$336>>2]|0;
       $338 = ($337|0)==(0|0);
       if (!($338)) {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $337;$v$332$i = $t$2$v$3$i;
        label = 90;
        continue;
       }
       $339 = ((($t$230$i)) + 20|0);
       $340 = HEAP32[$339>>2]|0;
       $341 = ($340|0)==(0|0);
       if ($341) {
        $rsize$3$lcssa$i = $$rsize$3$i;$v$3$lcssa$i = $t$2$v$3$i;
        break;
       } else {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $340;$v$332$i = $t$2$v$3$i;
        label = 90;
       }
      }
     }
     $342 = ($v$3$lcssa$i|0)==(0|0);
     if ($342) {
      $nb$0 = $246;
     } else {
      $343 = HEAP32[(652744)>>2]|0;
      $344 = (($343) - ($246))|0;
      $345 = ($rsize$3$lcssa$i>>>0)<($344>>>0);
      if ($345) {
       $346 = HEAP32[(652752)>>2]|0;
       $347 = ($v$3$lcssa$i>>>0)<($346>>>0);
       if ($347) {
        _abort();
        // unreachable;
       }
       $348 = (($v$3$lcssa$i) + ($246)|0);
       $349 = ($v$3$lcssa$i>>>0)<($348>>>0);
       if (!($349)) {
        _abort();
        // unreachable;
       }
       $350 = ((($v$3$lcssa$i)) + 24|0);
       $351 = HEAP32[$350>>2]|0;
       $352 = ((($v$3$lcssa$i)) + 12|0);
       $353 = HEAP32[$352>>2]|0;
       $354 = ($353|0)==($v$3$lcssa$i|0);
       do {
        if ($354) {
         $364 = ((($v$3$lcssa$i)) + 20|0);
         $365 = HEAP32[$364>>2]|0;
         $366 = ($365|0)==(0|0);
         if ($366) {
          $367 = ((($v$3$lcssa$i)) + 16|0);
          $368 = HEAP32[$367>>2]|0;
          $369 = ($368|0)==(0|0);
          if ($369) {
           $R$1$i20 = 0;
           break;
          } else {
           $R$0$i18 = $368;$RP$0$i17 = $367;
          }
         } else {
          $R$0$i18 = $365;$RP$0$i17 = $364;
         }
         while(1) {
          $370 = ((($R$0$i18)) + 20|0);
          $371 = HEAP32[$370>>2]|0;
          $372 = ($371|0)==(0|0);
          if (!($372)) {
           $R$0$i18 = $371;$RP$0$i17 = $370;
           continue;
          }
          $373 = ((($R$0$i18)) + 16|0);
          $374 = HEAP32[$373>>2]|0;
          $375 = ($374|0)==(0|0);
          if ($375) {
           $R$0$i18$lcssa = $R$0$i18;$RP$0$i17$lcssa = $RP$0$i17;
           break;
          } else {
           $R$0$i18 = $374;$RP$0$i17 = $373;
          }
         }
         $376 = ($RP$0$i17$lcssa>>>0)<($346>>>0);
         if ($376) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i17$lcssa>>2] = 0;
          $R$1$i20 = $R$0$i18$lcssa;
          break;
         }
        } else {
         $355 = ((($v$3$lcssa$i)) + 8|0);
         $356 = HEAP32[$355>>2]|0;
         $357 = ($356>>>0)<($346>>>0);
         if ($357) {
          _abort();
          // unreachable;
         }
         $358 = ((($356)) + 12|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = ($359|0)==($v$3$lcssa$i|0);
         if (!($360)) {
          _abort();
          // unreachable;
         }
         $361 = ((($353)) + 8|0);
         $362 = HEAP32[$361>>2]|0;
         $363 = ($362|0)==($v$3$lcssa$i|0);
         if ($363) {
          HEAP32[$358>>2] = $353;
          HEAP32[$361>>2] = $356;
          $R$1$i20 = $353;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $377 = ($351|0)==(0|0);
       do {
        if (!($377)) {
         $378 = ((($v$3$lcssa$i)) + 28|0);
         $379 = HEAP32[$378>>2]|0;
         $380 = (653040 + ($379<<2)|0);
         $381 = HEAP32[$380>>2]|0;
         $382 = ($v$3$lcssa$i|0)==($381|0);
         if ($382) {
          HEAP32[$380>>2] = $R$1$i20;
          $cond$i21 = ($R$1$i20|0)==(0|0);
          if ($cond$i21) {
           $383 = 1 << $379;
           $384 = $383 ^ -1;
           $385 = HEAP32[(652740)>>2]|0;
           $386 = $385 & $384;
           HEAP32[(652740)>>2] = $386;
           break;
          }
         } else {
          $387 = HEAP32[(652752)>>2]|0;
          $388 = ($351>>>0)<($387>>>0);
          if ($388) {
           _abort();
           // unreachable;
          }
          $389 = ((($351)) + 16|0);
          $390 = HEAP32[$389>>2]|0;
          $391 = ($390|0)==($v$3$lcssa$i|0);
          if ($391) {
           HEAP32[$389>>2] = $R$1$i20;
          } else {
           $392 = ((($351)) + 20|0);
           HEAP32[$392>>2] = $R$1$i20;
          }
          $393 = ($R$1$i20|0)==(0|0);
          if ($393) {
           break;
          }
         }
         $394 = HEAP32[(652752)>>2]|0;
         $395 = ($R$1$i20>>>0)<($394>>>0);
         if ($395) {
          _abort();
          // unreachable;
         }
         $396 = ((($R$1$i20)) + 24|0);
         HEAP32[$396>>2] = $351;
         $397 = ((($v$3$lcssa$i)) + 16|0);
         $398 = HEAP32[$397>>2]|0;
         $399 = ($398|0)==(0|0);
         do {
          if (!($399)) {
           $400 = ($398>>>0)<($394>>>0);
           if ($400) {
            _abort();
            // unreachable;
           } else {
            $401 = ((($R$1$i20)) + 16|0);
            HEAP32[$401>>2] = $398;
            $402 = ((($398)) + 24|0);
            HEAP32[$402>>2] = $R$1$i20;
            break;
           }
          }
         } while(0);
         $403 = ((($v$3$lcssa$i)) + 20|0);
         $404 = HEAP32[$403>>2]|0;
         $405 = ($404|0)==(0|0);
         if (!($405)) {
          $406 = HEAP32[(652752)>>2]|0;
          $407 = ($404>>>0)<($406>>>0);
          if ($407) {
           _abort();
           // unreachable;
          } else {
           $408 = ((($R$1$i20)) + 20|0);
           HEAP32[$408>>2] = $404;
           $409 = ((($404)) + 24|0);
           HEAP32[$409>>2] = $R$1$i20;
           break;
          }
         }
        }
       } while(0);
       $410 = ($rsize$3$lcssa$i>>>0)<(16);
       L199: do {
        if ($410) {
         $411 = (($rsize$3$lcssa$i) + ($246))|0;
         $412 = $411 | 3;
         $413 = ((($v$3$lcssa$i)) + 4|0);
         HEAP32[$413>>2] = $412;
         $$sum18$i = (($411) + 4)|0;
         $414 = (($v$3$lcssa$i) + ($$sum18$i)|0);
         $415 = HEAP32[$414>>2]|0;
         $416 = $415 | 1;
         HEAP32[$414>>2] = $416;
        } else {
         $417 = $246 | 3;
         $418 = ((($v$3$lcssa$i)) + 4|0);
         HEAP32[$418>>2] = $417;
         $419 = $rsize$3$lcssa$i | 1;
         $$sum$i2334 = $246 | 4;
         $420 = (($v$3$lcssa$i) + ($$sum$i2334)|0);
         HEAP32[$420>>2] = $419;
         $$sum1$i24 = (($rsize$3$lcssa$i) + ($246))|0;
         $421 = (($v$3$lcssa$i) + ($$sum1$i24)|0);
         HEAP32[$421>>2] = $rsize$3$lcssa$i;
         $422 = $rsize$3$lcssa$i >>> 3;
         $423 = ($rsize$3$lcssa$i>>>0)<(256);
         if ($423) {
          $424 = $422 << 1;
          $425 = (652776 + ($424<<2)|0);
          $426 = HEAP32[652736>>2]|0;
          $427 = 1 << $422;
          $428 = $426 & $427;
          $429 = ($428|0)==(0);
          if ($429) {
           $430 = $426 | $427;
           HEAP32[652736>>2] = $430;
           $$pre$i25 = (($424) + 2)|0;
           $$pre43$i = (652776 + ($$pre$i25<<2)|0);
           $$pre$phi$i26Z2D = $$pre43$i;$F5$0$i = $425;
          } else {
           $$sum17$i = (($424) + 2)|0;
           $431 = (652776 + ($$sum17$i<<2)|0);
           $432 = HEAP32[$431>>2]|0;
           $433 = HEAP32[(652752)>>2]|0;
           $434 = ($432>>>0)<($433>>>0);
           if ($434) {
            _abort();
            // unreachable;
           } else {
            $$pre$phi$i26Z2D = $431;$F5$0$i = $432;
           }
          }
          HEAP32[$$pre$phi$i26Z2D>>2] = $348;
          $435 = ((($F5$0$i)) + 12|0);
          HEAP32[$435>>2] = $348;
          $$sum15$i = (($246) + 8)|0;
          $436 = (($v$3$lcssa$i) + ($$sum15$i)|0);
          HEAP32[$436>>2] = $F5$0$i;
          $$sum16$i = (($246) + 12)|0;
          $437 = (($v$3$lcssa$i) + ($$sum16$i)|0);
          HEAP32[$437>>2] = $425;
          break;
         }
         $438 = $rsize$3$lcssa$i >>> 8;
         $439 = ($438|0)==(0);
         if ($439) {
          $I7$0$i = 0;
         } else {
          $440 = ($rsize$3$lcssa$i>>>0)>(16777215);
          if ($440) {
           $I7$0$i = 31;
          } else {
           $441 = (($438) + 1048320)|0;
           $442 = $441 >>> 16;
           $443 = $442 & 8;
           $444 = $438 << $443;
           $445 = (($444) + 520192)|0;
           $446 = $445 >>> 16;
           $447 = $446 & 4;
           $448 = $447 | $443;
           $449 = $444 << $447;
           $450 = (($449) + 245760)|0;
           $451 = $450 >>> 16;
           $452 = $451 & 2;
           $453 = $448 | $452;
           $454 = (14 - ($453))|0;
           $455 = $449 << $452;
           $456 = $455 >>> 15;
           $457 = (($454) + ($456))|0;
           $458 = $457 << 1;
           $459 = (($457) + 7)|0;
           $460 = $rsize$3$lcssa$i >>> $459;
           $461 = $460 & 1;
           $462 = $461 | $458;
           $I7$0$i = $462;
          }
         }
         $463 = (653040 + ($I7$0$i<<2)|0);
         $$sum2$i = (($246) + 28)|0;
         $464 = (($v$3$lcssa$i) + ($$sum2$i)|0);
         HEAP32[$464>>2] = $I7$0$i;
         $$sum3$i27 = (($246) + 16)|0;
         $465 = (($v$3$lcssa$i) + ($$sum3$i27)|0);
         $$sum4$i28 = (($246) + 20)|0;
         $466 = (($v$3$lcssa$i) + ($$sum4$i28)|0);
         HEAP32[$466>>2] = 0;
         HEAP32[$465>>2] = 0;
         $467 = HEAP32[(652740)>>2]|0;
         $468 = 1 << $I7$0$i;
         $469 = $467 & $468;
         $470 = ($469|0)==(0);
         if ($470) {
          $471 = $467 | $468;
          HEAP32[(652740)>>2] = $471;
          HEAP32[$463>>2] = $348;
          $$sum5$i = (($246) + 24)|0;
          $472 = (($v$3$lcssa$i) + ($$sum5$i)|0);
          HEAP32[$472>>2] = $463;
          $$sum6$i = (($246) + 12)|0;
          $473 = (($v$3$lcssa$i) + ($$sum6$i)|0);
          HEAP32[$473>>2] = $348;
          $$sum7$i = (($246) + 8)|0;
          $474 = (($v$3$lcssa$i) + ($$sum7$i)|0);
          HEAP32[$474>>2] = $348;
          break;
         }
         $475 = HEAP32[$463>>2]|0;
         $476 = ((($475)) + 4|0);
         $477 = HEAP32[$476>>2]|0;
         $478 = $477 & -8;
         $479 = ($478|0)==($rsize$3$lcssa$i|0);
         L217: do {
          if ($479) {
           $T$0$lcssa$i = $475;
          } else {
           $480 = ($I7$0$i|0)==(31);
           $481 = $I7$0$i >>> 1;
           $482 = (25 - ($481))|0;
           $483 = $480 ? 0 : $482;
           $484 = $rsize$3$lcssa$i << $483;
           $K12$029$i = $484;$T$028$i = $475;
           while(1) {
            $491 = $K12$029$i >>> 31;
            $492 = (((($T$028$i)) + 16|0) + ($491<<2)|0);
            $487 = HEAP32[$492>>2]|0;
            $493 = ($487|0)==(0|0);
            if ($493) {
             $$lcssa232 = $492;$T$028$i$lcssa = $T$028$i;
             break;
            }
            $485 = $K12$029$i << 1;
            $486 = ((($487)) + 4|0);
            $488 = HEAP32[$486>>2]|0;
            $489 = $488 & -8;
            $490 = ($489|0)==($rsize$3$lcssa$i|0);
            if ($490) {
             $T$0$lcssa$i = $487;
             break L217;
            } else {
             $K12$029$i = $485;$T$028$i = $487;
            }
           }
           $494 = HEAP32[(652752)>>2]|0;
           $495 = ($$lcssa232>>>0)<($494>>>0);
           if ($495) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$$lcssa232>>2] = $348;
            $$sum11$i = (($246) + 24)|0;
            $496 = (($v$3$lcssa$i) + ($$sum11$i)|0);
            HEAP32[$496>>2] = $T$028$i$lcssa;
            $$sum12$i = (($246) + 12)|0;
            $497 = (($v$3$lcssa$i) + ($$sum12$i)|0);
            HEAP32[$497>>2] = $348;
            $$sum13$i = (($246) + 8)|0;
            $498 = (($v$3$lcssa$i) + ($$sum13$i)|0);
            HEAP32[$498>>2] = $348;
            break L199;
           }
          }
         } while(0);
         $499 = ((($T$0$lcssa$i)) + 8|0);
         $500 = HEAP32[$499>>2]|0;
         $501 = HEAP32[(652752)>>2]|0;
         $502 = ($500>>>0)>=($501>>>0);
         $not$$i = ($T$0$lcssa$i>>>0)>=($501>>>0);
         $503 = $502 & $not$$i;
         if ($503) {
          $504 = ((($500)) + 12|0);
          HEAP32[$504>>2] = $348;
          HEAP32[$499>>2] = $348;
          $$sum8$i = (($246) + 8)|0;
          $505 = (($v$3$lcssa$i) + ($$sum8$i)|0);
          HEAP32[$505>>2] = $500;
          $$sum9$i = (($246) + 12)|0;
          $506 = (($v$3$lcssa$i) + ($$sum9$i)|0);
          HEAP32[$506>>2] = $T$0$lcssa$i;
          $$sum10$i = (($246) + 24)|0;
          $507 = (($v$3$lcssa$i) + ($$sum10$i)|0);
          HEAP32[$507>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $508 = ((($v$3$lcssa$i)) + 8|0);
       $mem$0 = $508;
       return ($mem$0|0);
      } else {
       $nb$0 = $246;
      }
     }
    }
   }
  }
 } while(0);
 $509 = HEAP32[(652744)>>2]|0;
 $510 = ($509>>>0)<($nb$0>>>0);
 if (!($510)) {
  $511 = (($509) - ($nb$0))|0;
  $512 = HEAP32[(652756)>>2]|0;
  $513 = ($511>>>0)>(15);
  if ($513) {
   $514 = (($512) + ($nb$0)|0);
   HEAP32[(652756)>>2] = $514;
   HEAP32[(652744)>>2] = $511;
   $515 = $511 | 1;
   $$sum2 = (($nb$0) + 4)|0;
   $516 = (($512) + ($$sum2)|0);
   HEAP32[$516>>2] = $515;
   $517 = (($512) + ($509)|0);
   HEAP32[$517>>2] = $511;
   $518 = $nb$0 | 3;
   $519 = ((($512)) + 4|0);
   HEAP32[$519>>2] = $518;
  } else {
   HEAP32[(652744)>>2] = 0;
   HEAP32[(652756)>>2] = 0;
   $520 = $509 | 3;
   $521 = ((($512)) + 4|0);
   HEAP32[$521>>2] = $520;
   $$sum1 = (($509) + 4)|0;
   $522 = (($512) + ($$sum1)|0);
   $523 = HEAP32[$522>>2]|0;
   $524 = $523 | 1;
   HEAP32[$522>>2] = $524;
  }
  $525 = ((($512)) + 8|0);
  $mem$0 = $525;
  return ($mem$0|0);
 }
 $526 = HEAP32[(652748)>>2]|0;
 $527 = ($526>>>0)>($nb$0>>>0);
 if ($527) {
  $528 = (($526) - ($nb$0))|0;
  HEAP32[(652748)>>2] = $528;
  $529 = HEAP32[(652760)>>2]|0;
  $530 = (($529) + ($nb$0)|0);
  HEAP32[(652760)>>2] = $530;
  $531 = $528 | 1;
  $$sum = (($nb$0) + 4)|0;
  $532 = (($529) + ($$sum)|0);
  HEAP32[$532>>2] = $531;
  $533 = $nb$0 | 3;
  $534 = ((($529)) + 4|0);
  HEAP32[$534>>2] = $533;
  $535 = ((($529)) + 8|0);
  $mem$0 = $535;
  return ($mem$0|0);
 }
 $536 = HEAP32[653208>>2]|0;
 $537 = ($536|0)==(0);
 do {
  if ($537) {
   $538 = (_sysconf(30)|0);
   $539 = (($538) + -1)|0;
   $540 = $539 & $538;
   $541 = ($540|0)==(0);
   if ($541) {
    HEAP32[(653216)>>2] = $538;
    HEAP32[(653212)>>2] = $538;
    HEAP32[(653220)>>2] = -1;
    HEAP32[(653224)>>2] = -1;
    HEAP32[(653228)>>2] = 0;
    HEAP32[(653180)>>2] = 0;
    $542 = (_time((0|0))|0);
    $543 = $542 & -16;
    $544 = $543 ^ 1431655768;
    HEAP32[653208>>2] = $544;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $545 = (($nb$0) + 48)|0;
 $546 = HEAP32[(653216)>>2]|0;
 $547 = (($nb$0) + 47)|0;
 $548 = (($546) + ($547))|0;
 $549 = (0 - ($546))|0;
 $550 = $548 & $549;
 $551 = ($550>>>0)>($nb$0>>>0);
 if (!($551)) {
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $552 = HEAP32[(653176)>>2]|0;
 $553 = ($552|0)==(0);
 if (!($553)) {
  $554 = HEAP32[(653168)>>2]|0;
  $555 = (($554) + ($550))|0;
  $556 = ($555>>>0)<=($554>>>0);
  $557 = ($555>>>0)>($552>>>0);
  $or$cond1$i = $556 | $557;
  if ($or$cond1$i) {
   $mem$0 = 0;
   return ($mem$0|0);
  }
 }
 $558 = HEAP32[(653180)>>2]|0;
 $559 = $558 & 4;
 $560 = ($559|0)==(0);
 L258: do {
  if ($560) {
   $561 = HEAP32[(652760)>>2]|0;
   $562 = ($561|0)==(0|0);
   L260: do {
    if ($562) {
     label = 174;
    } else {
     $sp$0$i$i = (653184);
     while(1) {
      $563 = HEAP32[$sp$0$i$i>>2]|0;
      $564 = ($563>>>0)>($561>>>0);
      if (!($564)) {
       $565 = ((($sp$0$i$i)) + 4|0);
       $566 = HEAP32[$565>>2]|0;
       $567 = (($563) + ($566)|0);
       $568 = ($567>>>0)>($561>>>0);
       if ($568) {
        $$lcssa228 = $sp$0$i$i;$$lcssa230 = $565;
        break;
       }
      }
      $569 = ((($sp$0$i$i)) + 8|0);
      $570 = HEAP32[$569>>2]|0;
      $571 = ($570|0)==(0|0);
      if ($571) {
       label = 174;
       break L260;
      } else {
       $sp$0$i$i = $570;
      }
     }
     $594 = HEAP32[(652748)>>2]|0;
     $595 = (($548) - ($594))|0;
     $596 = $595 & $549;
     $597 = ($596>>>0)<(2147483647);
     if ($597) {
      $598 = (_sbrk(($596|0))|0);
      $599 = HEAP32[$$lcssa228>>2]|0;
      $600 = HEAP32[$$lcssa230>>2]|0;
      $601 = (($599) + ($600)|0);
      $602 = ($598|0)==($601|0);
      $$3$i = $602 ? $596 : 0;
      if ($602) {
       $603 = ($598|0)==((-1)|0);
       if ($603) {
        $tsize$0323944$i = $$3$i;
       } else {
        $tbase$255$i = $598;$tsize$254$i = $$3$i;
        label = 194;
        break L258;
       }
      } else {
       $br$0$ph$i = $598;$ssize$1$ph$i = $596;$tsize$0$ph$i = $$3$i;
       label = 184;
      }
     } else {
      $tsize$0323944$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 174) {
     $572 = (_sbrk(0)|0);
     $573 = ($572|0)==((-1)|0);
     if ($573) {
      $tsize$0323944$i = 0;
     } else {
      $574 = $572;
      $575 = HEAP32[(653212)>>2]|0;
      $576 = (($575) + -1)|0;
      $577 = $576 & $574;
      $578 = ($577|0)==(0);
      if ($578) {
       $ssize$0$i = $550;
      } else {
       $579 = (($576) + ($574))|0;
       $580 = (0 - ($575))|0;
       $581 = $579 & $580;
       $582 = (($550) - ($574))|0;
       $583 = (($582) + ($581))|0;
       $ssize$0$i = $583;
      }
      $584 = HEAP32[(653168)>>2]|0;
      $585 = (($584) + ($ssize$0$i))|0;
      $586 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $587 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i30 = $586 & $587;
      if ($or$cond$i30) {
       $588 = HEAP32[(653176)>>2]|0;
       $589 = ($588|0)==(0);
       if (!($589)) {
        $590 = ($585>>>0)<=($584>>>0);
        $591 = ($585>>>0)>($588>>>0);
        $or$cond2$i = $590 | $591;
        if ($or$cond2$i) {
         $tsize$0323944$i = 0;
         break;
        }
       }
       $592 = (_sbrk(($ssize$0$i|0))|0);
       $593 = ($592|0)==($572|0);
       $ssize$0$$i = $593 ? $ssize$0$i : 0;
       if ($593) {
        $tbase$255$i = $572;$tsize$254$i = $ssize$0$$i;
        label = 194;
        break L258;
       } else {
        $br$0$ph$i = $592;$ssize$1$ph$i = $ssize$0$i;$tsize$0$ph$i = $ssize$0$$i;
        label = 184;
       }
      } else {
       $tsize$0323944$i = 0;
      }
     }
    }
   } while(0);
   L280: do {
    if ((label|0) == 184) {
     $604 = (0 - ($ssize$1$ph$i))|0;
     $605 = ($br$0$ph$i|0)!=((-1)|0);
     $606 = ($ssize$1$ph$i>>>0)<(2147483647);
     $or$cond5$i = $606 & $605;
     $607 = ($545>>>0)>($ssize$1$ph$i>>>0);
     $or$cond6$i = $607 & $or$cond5$i;
     do {
      if ($or$cond6$i) {
       $608 = HEAP32[(653216)>>2]|0;
       $609 = (($547) - ($ssize$1$ph$i))|0;
       $610 = (($609) + ($608))|0;
       $611 = (0 - ($608))|0;
       $612 = $610 & $611;
       $613 = ($612>>>0)<(2147483647);
       if ($613) {
        $614 = (_sbrk(($612|0))|0);
        $615 = ($614|0)==((-1)|0);
        if ($615) {
         (_sbrk(($604|0))|0);
         $tsize$0323944$i = $tsize$0$ph$i;
         break L280;
        } else {
         $616 = (($612) + ($ssize$1$ph$i))|0;
         $ssize$2$i = $616;
         break;
        }
       } else {
        $ssize$2$i = $ssize$1$ph$i;
       }
      } else {
       $ssize$2$i = $ssize$1$ph$i;
      }
     } while(0);
     $617 = ($br$0$ph$i|0)==((-1)|0);
     if ($617) {
      $tsize$0323944$i = $tsize$0$ph$i;
     } else {
      $tbase$255$i = $br$0$ph$i;$tsize$254$i = $ssize$2$i;
      label = 194;
      break L258;
     }
    }
   } while(0);
   $618 = HEAP32[(653180)>>2]|0;
   $619 = $618 | 4;
   HEAP32[(653180)>>2] = $619;
   $tsize$1$i = $tsize$0323944$i;
   label = 191;
  } else {
   $tsize$1$i = 0;
   label = 191;
  }
 } while(0);
 if ((label|0) == 191) {
  $620 = ($550>>>0)<(2147483647);
  if ($620) {
   $621 = (_sbrk(($550|0))|0);
   $622 = (_sbrk(0)|0);
   $623 = ($621|0)!=((-1)|0);
   $624 = ($622|0)!=((-1)|0);
   $or$cond3$i = $623 & $624;
   $625 = ($621>>>0)<($622>>>0);
   $or$cond8$i = $625 & $or$cond3$i;
   if ($or$cond8$i) {
    $626 = $622;
    $627 = $621;
    $628 = (($626) - ($627))|0;
    $629 = (($nb$0) + 40)|0;
    $630 = ($628>>>0)>($629>>>0);
    $$tsize$1$i = $630 ? $628 : $tsize$1$i;
    if ($630) {
     $tbase$255$i = $621;$tsize$254$i = $$tsize$1$i;
     label = 194;
    }
   }
  }
 }
 if ((label|0) == 194) {
  $631 = HEAP32[(653168)>>2]|0;
  $632 = (($631) + ($tsize$254$i))|0;
  HEAP32[(653168)>>2] = $632;
  $633 = HEAP32[(653172)>>2]|0;
  $634 = ($632>>>0)>($633>>>0);
  if ($634) {
   HEAP32[(653172)>>2] = $632;
  }
  $635 = HEAP32[(652760)>>2]|0;
  $636 = ($635|0)==(0|0);
  L299: do {
   if ($636) {
    $637 = HEAP32[(652752)>>2]|0;
    $638 = ($637|0)==(0|0);
    $639 = ($tbase$255$i>>>0)<($637>>>0);
    $or$cond9$i = $638 | $639;
    if ($or$cond9$i) {
     HEAP32[(652752)>>2] = $tbase$255$i;
    }
    HEAP32[(653184)>>2] = $tbase$255$i;
    HEAP32[(653188)>>2] = $tsize$254$i;
    HEAP32[(653196)>>2] = 0;
    $640 = HEAP32[653208>>2]|0;
    HEAP32[(652772)>>2] = $640;
    HEAP32[(652768)>>2] = -1;
    $i$02$i$i = 0;
    while(1) {
     $641 = $i$02$i$i << 1;
     $642 = (652776 + ($641<<2)|0);
     $$sum$i$i = (($641) + 3)|0;
     $643 = (652776 + ($$sum$i$i<<2)|0);
     HEAP32[$643>>2] = $642;
     $$sum1$i$i = (($641) + 2)|0;
     $644 = (652776 + ($$sum1$i$i<<2)|0);
     HEAP32[$644>>2] = $642;
     $645 = (($i$02$i$i) + 1)|0;
     $exitcond$i$i = ($645|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$02$i$i = $645;
     }
    }
    $646 = (($tsize$254$i) + -40)|0;
    $647 = ((($tbase$255$i)) + 8|0);
    $648 = $647;
    $649 = $648 & 7;
    $650 = ($649|0)==(0);
    $651 = (0 - ($648))|0;
    $652 = $651 & 7;
    $653 = $650 ? 0 : $652;
    $654 = (($tbase$255$i) + ($653)|0);
    $655 = (($646) - ($653))|0;
    HEAP32[(652760)>>2] = $654;
    HEAP32[(652748)>>2] = $655;
    $656 = $655 | 1;
    $$sum$i13$i = (($653) + 4)|0;
    $657 = (($tbase$255$i) + ($$sum$i13$i)|0);
    HEAP32[$657>>2] = $656;
    $$sum2$i$i = (($tsize$254$i) + -36)|0;
    $658 = (($tbase$255$i) + ($$sum2$i$i)|0);
    HEAP32[$658>>2] = 40;
    $659 = HEAP32[(653224)>>2]|0;
    HEAP32[(652764)>>2] = $659;
   } else {
    $sp$084$i = (653184);
    while(1) {
     $660 = HEAP32[$sp$084$i>>2]|0;
     $661 = ((($sp$084$i)) + 4|0);
     $662 = HEAP32[$661>>2]|0;
     $663 = (($660) + ($662)|0);
     $664 = ($tbase$255$i|0)==($663|0);
     if ($664) {
      $$lcssa222 = $660;$$lcssa224 = $661;$$lcssa226 = $662;$sp$084$i$lcssa = $sp$084$i;
      label = 204;
      break;
     }
     $665 = ((($sp$084$i)) + 8|0);
     $666 = HEAP32[$665>>2]|0;
     $667 = ($666|0)==(0|0);
     if ($667) {
      break;
     } else {
      $sp$084$i = $666;
     }
    }
    if ((label|0) == 204) {
     $668 = ((($sp$084$i$lcssa)) + 12|0);
     $669 = HEAP32[$668>>2]|0;
     $670 = $669 & 8;
     $671 = ($670|0)==(0);
     if ($671) {
      $672 = ($635>>>0)>=($$lcssa222>>>0);
      $673 = ($635>>>0)<($tbase$255$i>>>0);
      $or$cond57$i = $673 & $672;
      if ($or$cond57$i) {
       $674 = (($$lcssa226) + ($tsize$254$i))|0;
       HEAP32[$$lcssa224>>2] = $674;
       $675 = HEAP32[(652748)>>2]|0;
       $676 = (($675) + ($tsize$254$i))|0;
       $677 = ((($635)) + 8|0);
       $678 = $677;
       $679 = $678 & 7;
       $680 = ($679|0)==(0);
       $681 = (0 - ($678))|0;
       $682 = $681 & 7;
       $683 = $680 ? 0 : $682;
       $684 = (($635) + ($683)|0);
       $685 = (($676) - ($683))|0;
       HEAP32[(652760)>>2] = $684;
       HEAP32[(652748)>>2] = $685;
       $686 = $685 | 1;
       $$sum$i17$i = (($683) + 4)|0;
       $687 = (($635) + ($$sum$i17$i)|0);
       HEAP32[$687>>2] = $686;
       $$sum2$i18$i = (($676) + 4)|0;
       $688 = (($635) + ($$sum2$i18$i)|0);
       HEAP32[$688>>2] = 40;
       $689 = HEAP32[(653224)>>2]|0;
       HEAP32[(652764)>>2] = $689;
       break;
      }
     }
    }
    $690 = HEAP32[(652752)>>2]|0;
    $691 = ($tbase$255$i>>>0)<($690>>>0);
    if ($691) {
     HEAP32[(652752)>>2] = $tbase$255$i;
     $755 = $tbase$255$i;
    } else {
     $755 = $690;
    }
    $692 = (($tbase$255$i) + ($tsize$254$i)|0);
    $sp$183$i = (653184);
    while(1) {
     $693 = HEAP32[$sp$183$i>>2]|0;
     $694 = ($693|0)==($692|0);
     if ($694) {
      $$lcssa219 = $sp$183$i;$sp$183$i$lcssa = $sp$183$i;
      label = 212;
      break;
     }
     $695 = ((($sp$183$i)) + 8|0);
     $696 = HEAP32[$695>>2]|0;
     $697 = ($696|0)==(0|0);
     if ($697) {
      $sp$0$i$i$i = (653184);
      break;
     } else {
      $sp$183$i = $696;
     }
    }
    if ((label|0) == 212) {
     $698 = ((($sp$183$i$lcssa)) + 12|0);
     $699 = HEAP32[$698>>2]|0;
     $700 = $699 & 8;
     $701 = ($700|0)==(0);
     if ($701) {
      HEAP32[$$lcssa219>>2] = $tbase$255$i;
      $702 = ((($sp$183$i$lcssa)) + 4|0);
      $703 = HEAP32[$702>>2]|0;
      $704 = (($703) + ($tsize$254$i))|0;
      HEAP32[$702>>2] = $704;
      $705 = ((($tbase$255$i)) + 8|0);
      $706 = $705;
      $707 = $706 & 7;
      $708 = ($707|0)==(0);
      $709 = (0 - ($706))|0;
      $710 = $709 & 7;
      $711 = $708 ? 0 : $710;
      $712 = (($tbase$255$i) + ($711)|0);
      $$sum112$i = (($tsize$254$i) + 8)|0;
      $713 = (($tbase$255$i) + ($$sum112$i)|0);
      $714 = $713;
      $715 = $714 & 7;
      $716 = ($715|0)==(0);
      $717 = (0 - ($714))|0;
      $718 = $717 & 7;
      $719 = $716 ? 0 : $718;
      $$sum113$i = (($719) + ($tsize$254$i))|0;
      $720 = (($tbase$255$i) + ($$sum113$i)|0);
      $721 = $720;
      $722 = $712;
      $723 = (($721) - ($722))|0;
      $$sum$i19$i = (($711) + ($nb$0))|0;
      $724 = (($tbase$255$i) + ($$sum$i19$i)|0);
      $725 = (($723) - ($nb$0))|0;
      $726 = $nb$0 | 3;
      $$sum1$i20$i = (($711) + 4)|0;
      $727 = (($tbase$255$i) + ($$sum1$i20$i)|0);
      HEAP32[$727>>2] = $726;
      $728 = ($720|0)==($635|0);
      L324: do {
       if ($728) {
        $729 = HEAP32[(652748)>>2]|0;
        $730 = (($729) + ($725))|0;
        HEAP32[(652748)>>2] = $730;
        HEAP32[(652760)>>2] = $724;
        $731 = $730 | 1;
        $$sum42$i$i = (($$sum$i19$i) + 4)|0;
        $732 = (($tbase$255$i) + ($$sum42$i$i)|0);
        HEAP32[$732>>2] = $731;
       } else {
        $733 = HEAP32[(652756)>>2]|0;
        $734 = ($720|0)==($733|0);
        if ($734) {
         $735 = HEAP32[(652744)>>2]|0;
         $736 = (($735) + ($725))|0;
         HEAP32[(652744)>>2] = $736;
         HEAP32[(652756)>>2] = $724;
         $737 = $736 | 1;
         $$sum40$i$i = (($$sum$i19$i) + 4)|0;
         $738 = (($tbase$255$i) + ($$sum40$i$i)|0);
         HEAP32[$738>>2] = $737;
         $$sum41$i$i = (($736) + ($$sum$i19$i))|0;
         $739 = (($tbase$255$i) + ($$sum41$i$i)|0);
         HEAP32[$739>>2] = $736;
         break;
        }
        $$sum2$i21$i = (($tsize$254$i) + 4)|0;
        $$sum114$i = (($$sum2$i21$i) + ($719))|0;
        $740 = (($tbase$255$i) + ($$sum114$i)|0);
        $741 = HEAP32[$740>>2]|0;
        $742 = $741 & 3;
        $743 = ($742|0)==(1);
        if ($743) {
         $744 = $741 & -8;
         $745 = $741 >>> 3;
         $746 = ($741>>>0)<(256);
         L332: do {
          if ($746) {
           $$sum3738$i$i = $719 | 8;
           $$sum124$i = (($$sum3738$i$i) + ($tsize$254$i))|0;
           $747 = (($tbase$255$i) + ($$sum124$i)|0);
           $748 = HEAP32[$747>>2]|0;
           $$sum39$i$i = (($tsize$254$i) + 12)|0;
           $$sum125$i = (($$sum39$i$i) + ($719))|0;
           $749 = (($tbase$255$i) + ($$sum125$i)|0);
           $750 = HEAP32[$749>>2]|0;
           $751 = $745 << 1;
           $752 = (652776 + ($751<<2)|0);
           $753 = ($748|0)==($752|0);
           do {
            if (!($753)) {
             $754 = ($748>>>0)<($755>>>0);
             if ($754) {
              _abort();
              // unreachable;
             }
             $756 = ((($748)) + 12|0);
             $757 = HEAP32[$756>>2]|0;
             $758 = ($757|0)==($720|0);
             if ($758) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $759 = ($750|0)==($748|0);
           if ($759) {
            $760 = 1 << $745;
            $761 = $760 ^ -1;
            $762 = HEAP32[652736>>2]|0;
            $763 = $762 & $761;
            HEAP32[652736>>2] = $763;
            break;
           }
           $764 = ($750|0)==($752|0);
           do {
            if ($764) {
             $$pre57$i$i = ((($750)) + 8|0);
             $$pre$phi58$i$iZ2D = $$pre57$i$i;
            } else {
             $765 = ($750>>>0)<($755>>>0);
             if ($765) {
              _abort();
              // unreachable;
             }
             $766 = ((($750)) + 8|0);
             $767 = HEAP32[$766>>2]|0;
             $768 = ($767|0)==($720|0);
             if ($768) {
              $$pre$phi58$i$iZ2D = $766;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $769 = ((($748)) + 12|0);
           HEAP32[$769>>2] = $750;
           HEAP32[$$pre$phi58$i$iZ2D>>2] = $748;
          } else {
           $$sum34$i$i = $719 | 24;
           $$sum115$i = (($$sum34$i$i) + ($tsize$254$i))|0;
           $770 = (($tbase$255$i) + ($$sum115$i)|0);
           $771 = HEAP32[$770>>2]|0;
           $$sum5$i$i = (($tsize$254$i) + 12)|0;
           $$sum116$i = (($$sum5$i$i) + ($719))|0;
           $772 = (($tbase$255$i) + ($$sum116$i)|0);
           $773 = HEAP32[$772>>2]|0;
           $774 = ($773|0)==($720|0);
           do {
            if ($774) {
             $$sum67$i$i = $719 | 16;
             $$sum122$i = (($$sum2$i21$i) + ($$sum67$i$i))|0;
             $784 = (($tbase$255$i) + ($$sum122$i)|0);
             $785 = HEAP32[$784>>2]|0;
             $786 = ($785|0)==(0|0);
             if ($786) {
              $$sum123$i = (($$sum67$i$i) + ($tsize$254$i))|0;
              $787 = (($tbase$255$i) + ($$sum123$i)|0);
              $788 = HEAP32[$787>>2]|0;
              $789 = ($788|0)==(0|0);
              if ($789) {
               $R$1$i$i = 0;
               break;
              } else {
               $R$0$i$i = $788;$RP$0$i$i = $787;
              }
             } else {
              $R$0$i$i = $785;$RP$0$i$i = $784;
             }
             while(1) {
              $790 = ((($R$0$i$i)) + 20|0);
              $791 = HEAP32[$790>>2]|0;
              $792 = ($791|0)==(0|0);
              if (!($792)) {
               $R$0$i$i = $791;$RP$0$i$i = $790;
               continue;
              }
              $793 = ((($R$0$i$i)) + 16|0);
              $794 = HEAP32[$793>>2]|0;
              $795 = ($794|0)==(0|0);
              if ($795) {
               $R$0$i$i$lcssa = $R$0$i$i;$RP$0$i$i$lcssa = $RP$0$i$i;
               break;
              } else {
               $R$0$i$i = $794;$RP$0$i$i = $793;
              }
             }
             $796 = ($RP$0$i$i$lcssa>>>0)<($755>>>0);
             if ($796) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$0$i$i$lcssa>>2] = 0;
              $R$1$i$i = $R$0$i$i$lcssa;
              break;
             }
            } else {
             $$sum3536$i$i = $719 | 8;
             $$sum117$i = (($$sum3536$i$i) + ($tsize$254$i))|0;
             $775 = (($tbase$255$i) + ($$sum117$i)|0);
             $776 = HEAP32[$775>>2]|0;
             $777 = ($776>>>0)<($755>>>0);
             if ($777) {
              _abort();
              // unreachable;
             }
             $778 = ((($776)) + 12|0);
             $779 = HEAP32[$778>>2]|0;
             $780 = ($779|0)==($720|0);
             if (!($780)) {
              _abort();
              // unreachable;
             }
             $781 = ((($773)) + 8|0);
             $782 = HEAP32[$781>>2]|0;
             $783 = ($782|0)==($720|0);
             if ($783) {
              HEAP32[$778>>2] = $773;
              HEAP32[$781>>2] = $776;
              $R$1$i$i = $773;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $797 = ($771|0)==(0|0);
           if ($797) {
            break;
           }
           $$sum30$i$i = (($tsize$254$i) + 28)|0;
           $$sum118$i = (($$sum30$i$i) + ($719))|0;
           $798 = (($tbase$255$i) + ($$sum118$i)|0);
           $799 = HEAP32[$798>>2]|0;
           $800 = (653040 + ($799<<2)|0);
           $801 = HEAP32[$800>>2]|0;
           $802 = ($720|0)==($801|0);
           do {
            if ($802) {
             HEAP32[$800>>2] = $R$1$i$i;
             $cond$i$i = ($R$1$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $803 = 1 << $799;
             $804 = $803 ^ -1;
             $805 = HEAP32[(652740)>>2]|0;
             $806 = $805 & $804;
             HEAP32[(652740)>>2] = $806;
             break L332;
            } else {
             $807 = HEAP32[(652752)>>2]|0;
             $808 = ($771>>>0)<($807>>>0);
             if ($808) {
              _abort();
              // unreachable;
             }
             $809 = ((($771)) + 16|0);
             $810 = HEAP32[$809>>2]|0;
             $811 = ($810|0)==($720|0);
             if ($811) {
              HEAP32[$809>>2] = $R$1$i$i;
             } else {
              $812 = ((($771)) + 20|0);
              HEAP32[$812>>2] = $R$1$i$i;
             }
             $813 = ($R$1$i$i|0)==(0|0);
             if ($813) {
              break L332;
             }
            }
           } while(0);
           $814 = HEAP32[(652752)>>2]|0;
           $815 = ($R$1$i$i>>>0)<($814>>>0);
           if ($815) {
            _abort();
            // unreachable;
           }
           $816 = ((($R$1$i$i)) + 24|0);
           HEAP32[$816>>2] = $771;
           $$sum3132$i$i = $719 | 16;
           $$sum119$i = (($$sum3132$i$i) + ($tsize$254$i))|0;
           $817 = (($tbase$255$i) + ($$sum119$i)|0);
           $818 = HEAP32[$817>>2]|0;
           $819 = ($818|0)==(0|0);
           do {
            if (!($819)) {
             $820 = ($818>>>0)<($814>>>0);
             if ($820) {
              _abort();
              // unreachable;
             } else {
              $821 = ((($R$1$i$i)) + 16|0);
              HEAP32[$821>>2] = $818;
              $822 = ((($818)) + 24|0);
              HEAP32[$822>>2] = $R$1$i$i;
              break;
             }
            }
           } while(0);
           $$sum120$i = (($$sum2$i21$i) + ($$sum3132$i$i))|0;
           $823 = (($tbase$255$i) + ($$sum120$i)|0);
           $824 = HEAP32[$823>>2]|0;
           $825 = ($824|0)==(0|0);
           if ($825) {
            break;
           }
           $826 = HEAP32[(652752)>>2]|0;
           $827 = ($824>>>0)<($826>>>0);
           if ($827) {
            _abort();
            // unreachable;
           } else {
            $828 = ((($R$1$i$i)) + 20|0);
            HEAP32[$828>>2] = $824;
            $829 = ((($824)) + 24|0);
            HEAP32[$829>>2] = $R$1$i$i;
            break;
           }
          }
         } while(0);
         $$sum9$i$i = $744 | $719;
         $$sum121$i = (($$sum9$i$i) + ($tsize$254$i))|0;
         $830 = (($tbase$255$i) + ($$sum121$i)|0);
         $831 = (($744) + ($725))|0;
         $oldfirst$0$i$i = $830;$qsize$0$i$i = $831;
        } else {
         $oldfirst$0$i$i = $720;$qsize$0$i$i = $725;
        }
        $832 = ((($oldfirst$0$i$i)) + 4|0);
        $833 = HEAP32[$832>>2]|0;
        $834 = $833 & -2;
        HEAP32[$832>>2] = $834;
        $835 = $qsize$0$i$i | 1;
        $$sum10$i$i = (($$sum$i19$i) + 4)|0;
        $836 = (($tbase$255$i) + ($$sum10$i$i)|0);
        HEAP32[$836>>2] = $835;
        $$sum11$i$i = (($qsize$0$i$i) + ($$sum$i19$i))|0;
        $837 = (($tbase$255$i) + ($$sum11$i$i)|0);
        HEAP32[$837>>2] = $qsize$0$i$i;
        $838 = $qsize$0$i$i >>> 3;
        $839 = ($qsize$0$i$i>>>0)<(256);
        if ($839) {
         $840 = $838 << 1;
         $841 = (652776 + ($840<<2)|0);
         $842 = HEAP32[652736>>2]|0;
         $843 = 1 << $838;
         $844 = $842 & $843;
         $845 = ($844|0)==(0);
         do {
          if ($845) {
           $846 = $842 | $843;
           HEAP32[652736>>2] = $846;
           $$pre$i22$i = (($840) + 2)|0;
           $$pre56$i$i = (652776 + ($$pre$i22$i<<2)|0);
           $$pre$phi$i23$iZ2D = $$pre56$i$i;$F4$0$i$i = $841;
          } else {
           $$sum29$i$i = (($840) + 2)|0;
           $847 = (652776 + ($$sum29$i$i<<2)|0);
           $848 = HEAP32[$847>>2]|0;
           $849 = HEAP32[(652752)>>2]|0;
           $850 = ($848>>>0)<($849>>>0);
           if (!($850)) {
            $$pre$phi$i23$iZ2D = $847;$F4$0$i$i = $848;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i23$iZ2D>>2] = $724;
         $851 = ((($F4$0$i$i)) + 12|0);
         HEAP32[$851>>2] = $724;
         $$sum27$i$i = (($$sum$i19$i) + 8)|0;
         $852 = (($tbase$255$i) + ($$sum27$i$i)|0);
         HEAP32[$852>>2] = $F4$0$i$i;
         $$sum28$i$i = (($$sum$i19$i) + 12)|0;
         $853 = (($tbase$255$i) + ($$sum28$i$i)|0);
         HEAP32[$853>>2] = $841;
         break;
        }
        $854 = $qsize$0$i$i >>> 8;
        $855 = ($854|0)==(0);
        do {
         if ($855) {
          $I7$0$i$i = 0;
         } else {
          $856 = ($qsize$0$i$i>>>0)>(16777215);
          if ($856) {
           $I7$0$i$i = 31;
           break;
          }
          $857 = (($854) + 1048320)|0;
          $858 = $857 >>> 16;
          $859 = $858 & 8;
          $860 = $854 << $859;
          $861 = (($860) + 520192)|0;
          $862 = $861 >>> 16;
          $863 = $862 & 4;
          $864 = $863 | $859;
          $865 = $860 << $863;
          $866 = (($865) + 245760)|0;
          $867 = $866 >>> 16;
          $868 = $867 & 2;
          $869 = $864 | $868;
          $870 = (14 - ($869))|0;
          $871 = $865 << $868;
          $872 = $871 >>> 15;
          $873 = (($870) + ($872))|0;
          $874 = $873 << 1;
          $875 = (($873) + 7)|0;
          $876 = $qsize$0$i$i >>> $875;
          $877 = $876 & 1;
          $878 = $877 | $874;
          $I7$0$i$i = $878;
         }
        } while(0);
        $879 = (653040 + ($I7$0$i$i<<2)|0);
        $$sum12$i$i = (($$sum$i19$i) + 28)|0;
        $880 = (($tbase$255$i) + ($$sum12$i$i)|0);
        HEAP32[$880>>2] = $I7$0$i$i;
        $$sum13$i$i = (($$sum$i19$i) + 16)|0;
        $881 = (($tbase$255$i) + ($$sum13$i$i)|0);
        $$sum14$i$i = (($$sum$i19$i) + 20)|0;
        $882 = (($tbase$255$i) + ($$sum14$i$i)|0);
        HEAP32[$882>>2] = 0;
        HEAP32[$881>>2] = 0;
        $883 = HEAP32[(652740)>>2]|0;
        $884 = 1 << $I7$0$i$i;
        $885 = $883 & $884;
        $886 = ($885|0)==(0);
        if ($886) {
         $887 = $883 | $884;
         HEAP32[(652740)>>2] = $887;
         HEAP32[$879>>2] = $724;
         $$sum15$i$i = (($$sum$i19$i) + 24)|0;
         $888 = (($tbase$255$i) + ($$sum15$i$i)|0);
         HEAP32[$888>>2] = $879;
         $$sum16$i$i = (($$sum$i19$i) + 12)|0;
         $889 = (($tbase$255$i) + ($$sum16$i$i)|0);
         HEAP32[$889>>2] = $724;
         $$sum17$i$i = (($$sum$i19$i) + 8)|0;
         $890 = (($tbase$255$i) + ($$sum17$i$i)|0);
         HEAP32[$890>>2] = $724;
         break;
        }
        $891 = HEAP32[$879>>2]|0;
        $892 = ((($891)) + 4|0);
        $893 = HEAP32[$892>>2]|0;
        $894 = $893 & -8;
        $895 = ($894|0)==($qsize$0$i$i|0);
        L418: do {
         if ($895) {
          $T$0$lcssa$i25$i = $891;
         } else {
          $896 = ($I7$0$i$i|0)==(31);
          $897 = $I7$0$i$i >>> 1;
          $898 = (25 - ($897))|0;
          $899 = $896 ? 0 : $898;
          $900 = $qsize$0$i$i << $899;
          $K8$051$i$i = $900;$T$050$i$i = $891;
          while(1) {
           $907 = $K8$051$i$i >>> 31;
           $908 = (((($T$050$i$i)) + 16|0) + ($907<<2)|0);
           $903 = HEAP32[$908>>2]|0;
           $909 = ($903|0)==(0|0);
           if ($909) {
            $$lcssa = $908;$T$050$i$i$lcssa = $T$050$i$i;
            break;
           }
           $901 = $K8$051$i$i << 1;
           $902 = ((($903)) + 4|0);
           $904 = HEAP32[$902>>2]|0;
           $905 = $904 & -8;
           $906 = ($905|0)==($qsize$0$i$i|0);
           if ($906) {
            $T$0$lcssa$i25$i = $903;
            break L418;
           } else {
            $K8$051$i$i = $901;$T$050$i$i = $903;
           }
          }
          $910 = HEAP32[(652752)>>2]|0;
          $911 = ($$lcssa>>>0)<($910>>>0);
          if ($911) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$$lcssa>>2] = $724;
           $$sum23$i$i = (($$sum$i19$i) + 24)|0;
           $912 = (($tbase$255$i) + ($$sum23$i$i)|0);
           HEAP32[$912>>2] = $T$050$i$i$lcssa;
           $$sum24$i$i = (($$sum$i19$i) + 12)|0;
           $913 = (($tbase$255$i) + ($$sum24$i$i)|0);
           HEAP32[$913>>2] = $724;
           $$sum25$i$i = (($$sum$i19$i) + 8)|0;
           $914 = (($tbase$255$i) + ($$sum25$i$i)|0);
           HEAP32[$914>>2] = $724;
           break L324;
          }
         }
        } while(0);
        $915 = ((($T$0$lcssa$i25$i)) + 8|0);
        $916 = HEAP32[$915>>2]|0;
        $917 = HEAP32[(652752)>>2]|0;
        $918 = ($916>>>0)>=($917>>>0);
        $not$$i26$i = ($T$0$lcssa$i25$i>>>0)>=($917>>>0);
        $919 = $918 & $not$$i26$i;
        if ($919) {
         $920 = ((($916)) + 12|0);
         HEAP32[$920>>2] = $724;
         HEAP32[$915>>2] = $724;
         $$sum20$i$i = (($$sum$i19$i) + 8)|0;
         $921 = (($tbase$255$i) + ($$sum20$i$i)|0);
         HEAP32[$921>>2] = $916;
         $$sum21$i$i = (($$sum$i19$i) + 12)|0;
         $922 = (($tbase$255$i) + ($$sum21$i$i)|0);
         HEAP32[$922>>2] = $T$0$lcssa$i25$i;
         $$sum22$i$i = (($$sum$i19$i) + 24)|0;
         $923 = (($tbase$255$i) + ($$sum22$i$i)|0);
         HEAP32[$923>>2] = 0;
         break;
        } else {
         _abort();
         // unreachable;
        }
       }
      } while(0);
      $$sum1819$i$i = $711 | 8;
      $924 = (($tbase$255$i) + ($$sum1819$i$i)|0);
      $mem$0 = $924;
      return ($mem$0|0);
     } else {
      $sp$0$i$i$i = (653184);
     }
    }
    while(1) {
     $925 = HEAP32[$sp$0$i$i$i>>2]|0;
     $926 = ($925>>>0)>($635>>>0);
     if (!($926)) {
      $927 = ((($sp$0$i$i$i)) + 4|0);
      $928 = HEAP32[$927>>2]|0;
      $929 = (($925) + ($928)|0);
      $930 = ($929>>>0)>($635>>>0);
      if ($930) {
       $$lcssa215 = $925;$$lcssa216 = $928;$$lcssa217 = $929;
       break;
      }
     }
     $931 = ((($sp$0$i$i$i)) + 8|0);
     $932 = HEAP32[$931>>2]|0;
     $sp$0$i$i$i = $932;
    }
    $$sum$i14$i = (($$lcssa216) + -47)|0;
    $$sum1$i15$i = (($$lcssa216) + -39)|0;
    $933 = (($$lcssa215) + ($$sum1$i15$i)|0);
    $934 = $933;
    $935 = $934 & 7;
    $936 = ($935|0)==(0);
    $937 = (0 - ($934))|0;
    $938 = $937 & 7;
    $939 = $936 ? 0 : $938;
    $$sum2$i16$i = (($$sum$i14$i) + ($939))|0;
    $940 = (($$lcssa215) + ($$sum2$i16$i)|0);
    $941 = ((($635)) + 16|0);
    $942 = ($940>>>0)<($941>>>0);
    $943 = $942 ? $635 : $940;
    $944 = ((($943)) + 8|0);
    $945 = (($tsize$254$i) + -40)|0;
    $946 = ((($tbase$255$i)) + 8|0);
    $947 = $946;
    $948 = $947 & 7;
    $949 = ($948|0)==(0);
    $950 = (0 - ($947))|0;
    $951 = $950 & 7;
    $952 = $949 ? 0 : $951;
    $953 = (($tbase$255$i) + ($952)|0);
    $954 = (($945) - ($952))|0;
    HEAP32[(652760)>>2] = $953;
    HEAP32[(652748)>>2] = $954;
    $955 = $954 | 1;
    $$sum$i$i$i = (($952) + 4)|0;
    $956 = (($tbase$255$i) + ($$sum$i$i$i)|0);
    HEAP32[$956>>2] = $955;
    $$sum2$i$i$i = (($tsize$254$i) + -36)|0;
    $957 = (($tbase$255$i) + ($$sum2$i$i$i)|0);
    HEAP32[$957>>2] = 40;
    $958 = HEAP32[(653224)>>2]|0;
    HEAP32[(652764)>>2] = $958;
    $959 = ((($943)) + 4|0);
    HEAP32[$959>>2] = 27;
    ;HEAP32[$944>>2]=HEAP32[(653184)>>2]|0;HEAP32[$944+4>>2]=HEAP32[(653184)+4>>2]|0;HEAP32[$944+8>>2]=HEAP32[(653184)+8>>2]|0;HEAP32[$944+12>>2]=HEAP32[(653184)+12>>2]|0;
    HEAP32[(653184)>>2] = $tbase$255$i;
    HEAP32[(653188)>>2] = $tsize$254$i;
    HEAP32[(653196)>>2] = 0;
    HEAP32[(653192)>>2] = $944;
    $960 = ((($943)) + 28|0);
    HEAP32[$960>>2] = 7;
    $961 = ((($943)) + 32|0);
    $962 = ($961>>>0)<($$lcssa217>>>0);
    if ($962) {
     $964 = $960;
     while(1) {
      $963 = ((($964)) + 4|0);
      HEAP32[$963>>2] = 7;
      $965 = ((($964)) + 8|0);
      $966 = ($965>>>0)<($$lcssa217>>>0);
      if ($966) {
       $964 = $963;
      } else {
       break;
      }
     }
    }
    $967 = ($943|0)==($635|0);
    if (!($967)) {
     $968 = $943;
     $969 = $635;
     $970 = (($968) - ($969))|0;
     $971 = HEAP32[$959>>2]|0;
     $972 = $971 & -2;
     HEAP32[$959>>2] = $972;
     $973 = $970 | 1;
     $974 = ((($635)) + 4|0);
     HEAP32[$974>>2] = $973;
     HEAP32[$943>>2] = $970;
     $975 = $970 >>> 3;
     $976 = ($970>>>0)<(256);
     if ($976) {
      $977 = $975 << 1;
      $978 = (652776 + ($977<<2)|0);
      $979 = HEAP32[652736>>2]|0;
      $980 = 1 << $975;
      $981 = $979 & $980;
      $982 = ($981|0)==(0);
      if ($982) {
       $983 = $979 | $980;
       HEAP32[652736>>2] = $983;
       $$pre$i$i = (($977) + 2)|0;
       $$pre14$i$i = (652776 + ($$pre$i$i<<2)|0);
       $$pre$phi$i$iZ2D = $$pre14$i$i;$F$0$i$i = $978;
      } else {
       $$sum4$i$i = (($977) + 2)|0;
       $984 = (652776 + ($$sum4$i$i<<2)|0);
       $985 = HEAP32[$984>>2]|0;
       $986 = HEAP32[(652752)>>2]|0;
       $987 = ($985>>>0)<($986>>>0);
       if ($987) {
        _abort();
        // unreachable;
       } else {
        $$pre$phi$i$iZ2D = $984;$F$0$i$i = $985;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $635;
      $988 = ((($F$0$i$i)) + 12|0);
      HEAP32[$988>>2] = $635;
      $989 = ((($635)) + 8|0);
      HEAP32[$989>>2] = $F$0$i$i;
      $990 = ((($635)) + 12|0);
      HEAP32[$990>>2] = $978;
      break;
     }
     $991 = $970 >>> 8;
     $992 = ($991|0)==(0);
     if ($992) {
      $I1$0$i$i = 0;
     } else {
      $993 = ($970>>>0)>(16777215);
      if ($993) {
       $I1$0$i$i = 31;
      } else {
       $994 = (($991) + 1048320)|0;
       $995 = $994 >>> 16;
       $996 = $995 & 8;
       $997 = $991 << $996;
       $998 = (($997) + 520192)|0;
       $999 = $998 >>> 16;
       $1000 = $999 & 4;
       $1001 = $1000 | $996;
       $1002 = $997 << $1000;
       $1003 = (($1002) + 245760)|0;
       $1004 = $1003 >>> 16;
       $1005 = $1004 & 2;
       $1006 = $1001 | $1005;
       $1007 = (14 - ($1006))|0;
       $1008 = $1002 << $1005;
       $1009 = $1008 >>> 15;
       $1010 = (($1007) + ($1009))|0;
       $1011 = $1010 << 1;
       $1012 = (($1010) + 7)|0;
       $1013 = $970 >>> $1012;
       $1014 = $1013 & 1;
       $1015 = $1014 | $1011;
       $I1$0$i$i = $1015;
      }
     }
     $1016 = (653040 + ($I1$0$i$i<<2)|0);
     $1017 = ((($635)) + 28|0);
     HEAP32[$1017>>2] = $I1$0$i$i;
     $1018 = ((($635)) + 20|0);
     HEAP32[$1018>>2] = 0;
     HEAP32[$941>>2] = 0;
     $1019 = HEAP32[(652740)>>2]|0;
     $1020 = 1 << $I1$0$i$i;
     $1021 = $1019 & $1020;
     $1022 = ($1021|0)==(0);
     if ($1022) {
      $1023 = $1019 | $1020;
      HEAP32[(652740)>>2] = $1023;
      HEAP32[$1016>>2] = $635;
      $1024 = ((($635)) + 24|0);
      HEAP32[$1024>>2] = $1016;
      $1025 = ((($635)) + 12|0);
      HEAP32[$1025>>2] = $635;
      $1026 = ((($635)) + 8|0);
      HEAP32[$1026>>2] = $635;
      break;
     }
     $1027 = HEAP32[$1016>>2]|0;
     $1028 = ((($1027)) + 4|0);
     $1029 = HEAP32[$1028>>2]|0;
     $1030 = $1029 & -8;
     $1031 = ($1030|0)==($970|0);
     L459: do {
      if ($1031) {
       $T$0$lcssa$i$i = $1027;
      } else {
       $1032 = ($I1$0$i$i|0)==(31);
       $1033 = $I1$0$i$i >>> 1;
       $1034 = (25 - ($1033))|0;
       $1035 = $1032 ? 0 : $1034;
       $1036 = $970 << $1035;
       $K2$07$i$i = $1036;$T$06$i$i = $1027;
       while(1) {
        $1043 = $K2$07$i$i >>> 31;
        $1044 = (((($T$06$i$i)) + 16|0) + ($1043<<2)|0);
        $1039 = HEAP32[$1044>>2]|0;
        $1045 = ($1039|0)==(0|0);
        if ($1045) {
         $$lcssa211 = $1044;$T$06$i$i$lcssa = $T$06$i$i;
         break;
        }
        $1037 = $K2$07$i$i << 1;
        $1038 = ((($1039)) + 4|0);
        $1040 = HEAP32[$1038>>2]|0;
        $1041 = $1040 & -8;
        $1042 = ($1041|0)==($970|0);
        if ($1042) {
         $T$0$lcssa$i$i = $1039;
         break L459;
        } else {
         $K2$07$i$i = $1037;$T$06$i$i = $1039;
        }
       }
       $1046 = HEAP32[(652752)>>2]|0;
       $1047 = ($$lcssa211>>>0)<($1046>>>0);
       if ($1047) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$$lcssa211>>2] = $635;
        $1048 = ((($635)) + 24|0);
        HEAP32[$1048>>2] = $T$06$i$i$lcssa;
        $1049 = ((($635)) + 12|0);
        HEAP32[$1049>>2] = $635;
        $1050 = ((($635)) + 8|0);
        HEAP32[$1050>>2] = $635;
        break L299;
       }
      }
     } while(0);
     $1051 = ((($T$0$lcssa$i$i)) + 8|0);
     $1052 = HEAP32[$1051>>2]|0;
     $1053 = HEAP32[(652752)>>2]|0;
     $1054 = ($1052>>>0)>=($1053>>>0);
     $not$$i$i = ($T$0$lcssa$i$i>>>0)>=($1053>>>0);
     $1055 = $1054 & $not$$i$i;
     if ($1055) {
      $1056 = ((($1052)) + 12|0);
      HEAP32[$1056>>2] = $635;
      HEAP32[$1051>>2] = $635;
      $1057 = ((($635)) + 8|0);
      HEAP32[$1057>>2] = $1052;
      $1058 = ((($635)) + 12|0);
      HEAP32[$1058>>2] = $T$0$lcssa$i$i;
      $1059 = ((($635)) + 24|0);
      HEAP32[$1059>>2] = 0;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   }
  } while(0);
  $1060 = HEAP32[(652748)>>2]|0;
  $1061 = ($1060>>>0)>($nb$0>>>0);
  if ($1061) {
   $1062 = (($1060) - ($nb$0))|0;
   HEAP32[(652748)>>2] = $1062;
   $1063 = HEAP32[(652760)>>2]|0;
   $1064 = (($1063) + ($nb$0)|0);
   HEAP32[(652760)>>2] = $1064;
   $1065 = $1062 | 1;
   $$sum$i32 = (($nb$0) + 4)|0;
   $1066 = (($1063) + ($$sum$i32)|0);
   HEAP32[$1066>>2] = $1065;
   $1067 = $nb$0 | 3;
   $1068 = ((($1063)) + 4|0);
   HEAP32[$1068>>2] = $1067;
   $1069 = ((($1063)) + 8|0);
   $mem$0 = $1069;
   return ($mem$0|0);
  }
 }
 $1070 = (___errno_location()|0);
 HEAP32[$1070>>2] = 12;
 $mem$0 = 0;
 return ($mem$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$lcssa = 0, $$pre = 0, $$pre$phi59Z2D = 0, $$pre$phi61Z2D = 0, $$pre$phiZ2D = 0, $$pre57 = 0, $$pre58 = 0, $$pre60 = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum1718 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0;
 var $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $K19$052 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0;
 var $R7$0 = 0, $R7$0$lcssa = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $RP9$0 = 0, $RP9$0$lcssa = 0, $T$0$lcssa = 0, $T$051 = 0, $T$051$lcssa = 0, $cond = 0, $cond47 = 0, $not$ = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($mem)) + -8|0);
 $2 = HEAP32[(652752)>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = ((($mem)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $$sum = (($8) + -8)|0;
 $9 = (($mem) + ($$sum)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    return;
   }
   $$sum2 = (-8 - ($12))|0;
   $14 = (($mem) + ($$sum2)|0);
   $15 = (($12) + ($8))|0;
   $16 = ($14>>>0)<($2>>>0);
   if ($16) {
    _abort();
    // unreachable;
   }
   $17 = HEAP32[(652756)>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $$sum3 = (($8) + -4)|0;
    $103 = (($mem) + ($$sum3)|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = $104 & 3;
    $106 = ($105|0)==(3);
    if (!($106)) {
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    HEAP32[(652744)>>2] = $15;
    $107 = $104 & -2;
    HEAP32[$103>>2] = $107;
    $108 = $15 | 1;
    $$sum20 = (($$sum2) + 4)|0;
    $109 = (($mem) + ($$sum20)|0);
    HEAP32[$109>>2] = $108;
    HEAP32[$9>>2] = $15;
    return;
   }
   $19 = $12 >>> 3;
   $20 = ($12>>>0)<(256);
   if ($20) {
    $$sum30 = (($$sum2) + 8)|0;
    $21 = (($mem) + ($$sum30)|0);
    $22 = HEAP32[$21>>2]|0;
    $$sum31 = (($$sum2) + 12)|0;
    $23 = (($mem) + ($$sum31)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $19 << 1;
    $26 = (652776 + ($25<<2)|0);
    $27 = ($22|0)==($26|0);
    if (!($27)) {
     $28 = ($22>>>0)<($2>>>0);
     if ($28) {
      _abort();
      // unreachable;
     }
     $29 = ((($22)) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==($14|0);
     if (!($31)) {
      _abort();
      // unreachable;
     }
    }
    $32 = ($24|0)==($22|0);
    if ($32) {
     $33 = 1 << $19;
     $34 = $33 ^ -1;
     $35 = HEAP32[652736>>2]|0;
     $36 = $35 & $34;
     HEAP32[652736>>2] = $36;
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    $37 = ($24|0)==($26|0);
    if ($37) {
     $$pre60 = ((($24)) + 8|0);
     $$pre$phi61Z2D = $$pre60;
    } else {
     $38 = ($24>>>0)<($2>>>0);
     if ($38) {
      _abort();
      // unreachable;
     }
     $39 = ((($24)) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==($14|0);
     if ($41) {
      $$pre$phi61Z2D = $39;
     } else {
      _abort();
      // unreachable;
     }
    }
    $42 = ((($22)) + 12|0);
    HEAP32[$42>>2] = $24;
    HEAP32[$$pre$phi61Z2D>>2] = $22;
    $p$0 = $14;$psize$0 = $15;
    break;
   }
   $$sum22 = (($$sum2) + 24)|0;
   $43 = (($mem) + ($$sum22)|0);
   $44 = HEAP32[$43>>2]|0;
   $$sum23 = (($$sum2) + 12)|0;
   $45 = (($mem) + ($$sum23)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==($14|0);
   do {
    if ($47) {
     $$sum25 = (($$sum2) + 20)|0;
     $57 = (($mem) + ($$sum25)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)==(0|0);
     if ($59) {
      $$sum24 = (($$sum2) + 16)|0;
      $60 = (($mem) + ($$sum24)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(0|0);
      if ($62) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $61;$RP$0 = $60;
      }
     } else {
      $R$0 = $58;$RP$0 = $57;
     }
     while(1) {
      $63 = ((($R$0)) + 20|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $R$0 = $64;$RP$0 = $63;
       continue;
      }
      $66 = ((($R$0)) + 16|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ($67|0)==(0|0);
      if ($68) {
       $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $67;$RP$0 = $66;
      }
     }
     $69 = ($RP$0$lcssa>>>0)<($2>>>0);
     if ($69) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum29 = (($$sum2) + 8)|0;
     $48 = (($mem) + ($$sum29)|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49>>>0)<($2>>>0);
     if ($50) {
      _abort();
      // unreachable;
     }
     $51 = ((($49)) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==($14|0);
     if (!($53)) {
      _abort();
      // unreachable;
     }
     $54 = ((($46)) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==($14|0);
     if ($56) {
      HEAP32[$51>>2] = $46;
      HEAP32[$54>>2] = $49;
      $R$1 = $46;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $70 = ($44|0)==(0|0);
   if ($70) {
    $p$0 = $14;$psize$0 = $15;
   } else {
    $$sum26 = (($$sum2) + 28)|0;
    $71 = (($mem) + ($$sum26)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = (653040 + ($72<<2)|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($14|0)==($74|0);
    if ($75) {
     HEAP32[$73>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $76 = 1 << $72;
      $77 = $76 ^ -1;
      $78 = HEAP32[(652740)>>2]|0;
      $79 = $78 & $77;
      HEAP32[(652740)>>2] = $79;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    } else {
     $80 = HEAP32[(652752)>>2]|0;
     $81 = ($44>>>0)<($80>>>0);
     if ($81) {
      _abort();
      // unreachable;
     }
     $82 = ((($44)) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)==($14|0);
     if ($84) {
      HEAP32[$82>>2] = $R$1;
     } else {
      $85 = ((($44)) + 20|0);
      HEAP32[$85>>2] = $R$1;
     }
     $86 = ($R$1|0)==(0|0);
     if ($86) {
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
    $87 = HEAP32[(652752)>>2]|0;
    $88 = ($R$1>>>0)<($87>>>0);
    if ($88) {
     _abort();
     // unreachable;
    }
    $89 = ((($R$1)) + 24|0);
    HEAP32[$89>>2] = $44;
    $$sum27 = (($$sum2) + 16)|0;
    $90 = (($mem) + ($$sum27)|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)==(0|0);
    do {
     if (!($92)) {
      $93 = ($91>>>0)<($87>>>0);
      if ($93) {
       _abort();
       // unreachable;
      } else {
       $94 = ((($R$1)) + 16|0);
       HEAP32[$94>>2] = $91;
       $95 = ((($91)) + 24|0);
       HEAP32[$95>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum28 = (($$sum2) + 20)|0;
    $96 = (($mem) + ($$sum28)|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)==(0|0);
    if ($98) {
     $p$0 = $14;$psize$0 = $15;
    } else {
     $99 = HEAP32[(652752)>>2]|0;
     $100 = ($97>>>0)<($99>>>0);
     if ($100) {
      _abort();
      // unreachable;
     } else {
      $101 = ((($R$1)) + 20|0);
      HEAP32[$101>>2] = $97;
      $102 = ((($97)) + 24|0);
      HEAP32[$102>>2] = $R$1;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
   }
  } else {
   $p$0 = $1;$psize$0 = $8;
  }
 } while(0);
 $110 = ($p$0>>>0)<($9>>>0);
 if (!($110)) {
  _abort();
  // unreachable;
 }
 $$sum19 = (($8) + -4)|0;
 $111 = (($mem) + ($$sum19)|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $112 & 1;
 $114 = ($113|0)==(0);
 if ($114) {
  _abort();
  // unreachable;
 }
 $115 = $112 & 2;
 $116 = ($115|0)==(0);
 if ($116) {
  $117 = HEAP32[(652760)>>2]|0;
  $118 = ($9|0)==($117|0);
  if ($118) {
   $119 = HEAP32[(652748)>>2]|0;
   $120 = (($119) + ($psize$0))|0;
   HEAP32[(652748)>>2] = $120;
   HEAP32[(652760)>>2] = $p$0;
   $121 = $120 | 1;
   $122 = ((($p$0)) + 4|0);
   HEAP32[$122>>2] = $121;
   $123 = HEAP32[(652756)>>2]|0;
   $124 = ($p$0|0)==($123|0);
   if (!($124)) {
    return;
   }
   HEAP32[(652756)>>2] = 0;
   HEAP32[(652744)>>2] = 0;
   return;
  }
  $125 = HEAP32[(652756)>>2]|0;
  $126 = ($9|0)==($125|0);
  if ($126) {
   $127 = HEAP32[(652744)>>2]|0;
   $128 = (($127) + ($psize$0))|0;
   HEAP32[(652744)>>2] = $128;
   HEAP32[(652756)>>2] = $p$0;
   $129 = $128 | 1;
   $130 = ((($p$0)) + 4|0);
   HEAP32[$130>>2] = $129;
   $131 = (($p$0) + ($128)|0);
   HEAP32[$131>>2] = $128;
   return;
  }
  $132 = $112 & -8;
  $133 = (($132) + ($psize$0))|0;
  $134 = $112 >>> 3;
  $135 = ($112>>>0)<(256);
  do {
   if ($135) {
    $136 = (($mem) + ($8)|0);
    $137 = HEAP32[$136>>2]|0;
    $$sum1718 = $8 | 4;
    $138 = (($mem) + ($$sum1718)|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = $134 << 1;
    $141 = (652776 + ($140<<2)|0);
    $142 = ($137|0)==($141|0);
    if (!($142)) {
     $143 = HEAP32[(652752)>>2]|0;
     $144 = ($137>>>0)<($143>>>0);
     if ($144) {
      _abort();
      // unreachable;
     }
     $145 = ((($137)) + 12|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = ($146|0)==($9|0);
     if (!($147)) {
      _abort();
      // unreachable;
     }
    }
    $148 = ($139|0)==($137|0);
    if ($148) {
     $149 = 1 << $134;
     $150 = $149 ^ -1;
     $151 = HEAP32[652736>>2]|0;
     $152 = $151 & $150;
     HEAP32[652736>>2] = $152;
     break;
    }
    $153 = ($139|0)==($141|0);
    if ($153) {
     $$pre58 = ((($139)) + 8|0);
     $$pre$phi59Z2D = $$pre58;
    } else {
     $154 = HEAP32[(652752)>>2]|0;
     $155 = ($139>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     }
     $156 = ((($139)) + 8|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($157|0)==($9|0);
     if ($158) {
      $$pre$phi59Z2D = $156;
     } else {
      _abort();
      // unreachable;
     }
    }
    $159 = ((($137)) + 12|0);
    HEAP32[$159>>2] = $139;
    HEAP32[$$pre$phi59Z2D>>2] = $137;
   } else {
    $$sum5 = (($8) + 16)|0;
    $160 = (($mem) + ($$sum5)|0);
    $161 = HEAP32[$160>>2]|0;
    $$sum67 = $8 | 4;
    $162 = (($mem) + ($$sum67)|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ($163|0)==($9|0);
    do {
     if ($164) {
      $$sum9 = (($8) + 12)|0;
      $175 = (($mem) + ($$sum9)|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = ($176|0)==(0|0);
      if ($177) {
       $$sum8 = (($8) + 8)|0;
       $178 = (($mem) + ($$sum8)|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ($179|0)==(0|0);
       if ($180) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $179;$RP9$0 = $178;
       }
      } else {
       $R7$0 = $176;$RP9$0 = $175;
      }
      while(1) {
       $181 = ((($R7$0)) + 20|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ($182|0)==(0|0);
       if (!($183)) {
        $R7$0 = $182;$RP9$0 = $181;
        continue;
       }
       $184 = ((($R7$0)) + 16|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = ($185|0)==(0|0);
       if ($186) {
        $R7$0$lcssa = $R7$0;$RP9$0$lcssa = $RP9$0;
        break;
       } else {
        $R7$0 = $185;$RP9$0 = $184;
       }
      }
      $187 = HEAP32[(652752)>>2]|0;
      $188 = ($RP9$0$lcssa>>>0)<($187>>>0);
      if ($188) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0$lcssa>>2] = 0;
       $R7$1 = $R7$0$lcssa;
       break;
      }
     } else {
      $165 = (($mem) + ($8)|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = HEAP32[(652752)>>2]|0;
      $168 = ($166>>>0)<($167>>>0);
      if ($168) {
       _abort();
       // unreachable;
      }
      $169 = ((($166)) + 12|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==($9|0);
      if (!($171)) {
       _abort();
       // unreachable;
      }
      $172 = ((($163)) + 8|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = ($173|0)==($9|0);
      if ($174) {
       HEAP32[$169>>2] = $163;
       HEAP32[$172>>2] = $166;
       $R7$1 = $163;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $189 = ($161|0)==(0|0);
    if (!($189)) {
     $$sum12 = (($8) + 20)|0;
     $190 = (($mem) + ($$sum12)|0);
     $191 = HEAP32[$190>>2]|0;
     $192 = (653040 + ($191<<2)|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ($9|0)==($193|0);
     if ($194) {
      HEAP32[$192>>2] = $R7$1;
      $cond47 = ($R7$1|0)==(0|0);
      if ($cond47) {
       $195 = 1 << $191;
       $196 = $195 ^ -1;
       $197 = HEAP32[(652740)>>2]|0;
       $198 = $197 & $196;
       HEAP32[(652740)>>2] = $198;
       break;
      }
     } else {
      $199 = HEAP32[(652752)>>2]|0;
      $200 = ($161>>>0)<($199>>>0);
      if ($200) {
       _abort();
       // unreachable;
      }
      $201 = ((($161)) + 16|0);
      $202 = HEAP32[$201>>2]|0;
      $203 = ($202|0)==($9|0);
      if ($203) {
       HEAP32[$201>>2] = $R7$1;
      } else {
       $204 = ((($161)) + 20|0);
       HEAP32[$204>>2] = $R7$1;
      }
      $205 = ($R7$1|0)==(0|0);
      if ($205) {
       break;
      }
     }
     $206 = HEAP32[(652752)>>2]|0;
     $207 = ($R7$1>>>0)<($206>>>0);
     if ($207) {
      _abort();
      // unreachable;
     }
     $208 = ((($R7$1)) + 24|0);
     HEAP32[$208>>2] = $161;
     $$sum13 = (($8) + 8)|0;
     $209 = (($mem) + ($$sum13)|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     do {
      if (!($211)) {
       $212 = ($210>>>0)<($206>>>0);
       if ($212) {
        _abort();
        // unreachable;
       } else {
        $213 = ((($R7$1)) + 16|0);
        HEAP32[$213>>2] = $210;
        $214 = ((($210)) + 24|0);
        HEAP32[$214>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum14 = (($8) + 12)|0;
     $215 = (($mem) + ($$sum14)|0);
     $216 = HEAP32[$215>>2]|0;
     $217 = ($216|0)==(0|0);
     if (!($217)) {
      $218 = HEAP32[(652752)>>2]|0;
      $219 = ($216>>>0)<($218>>>0);
      if ($219) {
       _abort();
       // unreachable;
      } else {
       $220 = ((($R7$1)) + 20|0);
       HEAP32[$220>>2] = $216;
       $221 = ((($216)) + 24|0);
       HEAP32[$221>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $222 = $133 | 1;
  $223 = ((($p$0)) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($p$0) + ($133)|0);
  HEAP32[$224>>2] = $133;
  $225 = HEAP32[(652756)>>2]|0;
  $226 = ($p$0|0)==($225|0);
  if ($226) {
   HEAP32[(652744)>>2] = $133;
   return;
  } else {
   $psize$1 = $133;
  }
 } else {
  $227 = $112 & -2;
  HEAP32[$111>>2] = $227;
  $228 = $psize$0 | 1;
  $229 = ((($p$0)) + 4|0);
  HEAP32[$229>>2] = $228;
  $230 = (($p$0) + ($psize$0)|0);
  HEAP32[$230>>2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $231 = $psize$1 >>> 3;
 $232 = ($psize$1>>>0)<(256);
 if ($232) {
  $233 = $231 << 1;
  $234 = (652776 + ($233<<2)|0);
  $235 = HEAP32[652736>>2]|0;
  $236 = 1 << $231;
  $237 = $235 & $236;
  $238 = ($237|0)==(0);
  if ($238) {
   $239 = $235 | $236;
   HEAP32[652736>>2] = $239;
   $$pre = (($233) + 2)|0;
   $$pre57 = (652776 + ($$pre<<2)|0);
   $$pre$phiZ2D = $$pre57;$F16$0 = $234;
  } else {
   $$sum11 = (($233) + 2)|0;
   $240 = (652776 + ($$sum11<<2)|0);
   $241 = HEAP32[$240>>2]|0;
   $242 = HEAP32[(652752)>>2]|0;
   $243 = ($241>>>0)<($242>>>0);
   if ($243) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $240;$F16$0 = $241;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$0;
  $244 = ((($F16$0)) + 12|0);
  HEAP32[$244>>2] = $p$0;
  $245 = ((($p$0)) + 8|0);
  HEAP32[$245>>2] = $F16$0;
  $246 = ((($p$0)) + 12|0);
  HEAP32[$246>>2] = $234;
  return;
 }
 $247 = $psize$1 >>> 8;
 $248 = ($247|0)==(0);
 if ($248) {
  $I18$0 = 0;
 } else {
  $249 = ($psize$1>>>0)>(16777215);
  if ($249) {
   $I18$0 = 31;
  } else {
   $250 = (($247) + 1048320)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 8;
   $253 = $247 << $252;
   $254 = (($253) + 520192)|0;
   $255 = $254 >>> 16;
   $256 = $255 & 4;
   $257 = $256 | $252;
   $258 = $253 << $256;
   $259 = (($258) + 245760)|0;
   $260 = $259 >>> 16;
   $261 = $260 & 2;
   $262 = $257 | $261;
   $263 = (14 - ($262))|0;
   $264 = $258 << $261;
   $265 = $264 >>> 15;
   $266 = (($263) + ($265))|0;
   $267 = $266 << 1;
   $268 = (($266) + 7)|0;
   $269 = $psize$1 >>> $268;
   $270 = $269 & 1;
   $271 = $270 | $267;
   $I18$0 = $271;
  }
 }
 $272 = (653040 + ($I18$0<<2)|0);
 $273 = ((($p$0)) + 28|0);
 HEAP32[$273>>2] = $I18$0;
 $274 = ((($p$0)) + 16|0);
 $275 = ((($p$0)) + 20|0);
 HEAP32[$275>>2] = 0;
 HEAP32[$274>>2] = 0;
 $276 = HEAP32[(652740)>>2]|0;
 $277 = 1 << $I18$0;
 $278 = $276 & $277;
 $279 = ($278|0)==(0);
 L199: do {
  if ($279) {
   $280 = $276 | $277;
   HEAP32[(652740)>>2] = $280;
   HEAP32[$272>>2] = $p$0;
   $281 = ((($p$0)) + 24|0);
   HEAP32[$281>>2] = $272;
   $282 = ((($p$0)) + 12|0);
   HEAP32[$282>>2] = $p$0;
   $283 = ((($p$0)) + 8|0);
   HEAP32[$283>>2] = $p$0;
  } else {
   $284 = HEAP32[$272>>2]|0;
   $285 = ((($284)) + 4|0);
   $286 = HEAP32[$285>>2]|0;
   $287 = $286 & -8;
   $288 = ($287|0)==($psize$1|0);
   L202: do {
    if ($288) {
     $T$0$lcssa = $284;
    } else {
     $289 = ($I18$0|0)==(31);
     $290 = $I18$0 >>> 1;
     $291 = (25 - ($290))|0;
     $292 = $289 ? 0 : $291;
     $293 = $psize$1 << $292;
     $K19$052 = $293;$T$051 = $284;
     while(1) {
      $300 = $K19$052 >>> 31;
      $301 = (((($T$051)) + 16|0) + ($300<<2)|0);
      $296 = HEAP32[$301>>2]|0;
      $302 = ($296|0)==(0|0);
      if ($302) {
       $$lcssa = $301;$T$051$lcssa = $T$051;
       break;
      }
      $294 = $K19$052 << 1;
      $295 = ((($296)) + 4|0);
      $297 = HEAP32[$295>>2]|0;
      $298 = $297 & -8;
      $299 = ($298|0)==($psize$1|0);
      if ($299) {
       $T$0$lcssa = $296;
       break L202;
      } else {
       $K19$052 = $294;$T$051 = $296;
      }
     }
     $303 = HEAP32[(652752)>>2]|0;
     $304 = ($$lcssa>>>0)<($303>>>0);
     if ($304) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$lcssa>>2] = $p$0;
      $305 = ((($p$0)) + 24|0);
      HEAP32[$305>>2] = $T$051$lcssa;
      $306 = ((($p$0)) + 12|0);
      HEAP32[$306>>2] = $p$0;
      $307 = ((($p$0)) + 8|0);
      HEAP32[$307>>2] = $p$0;
      break L199;
     }
    }
   } while(0);
   $308 = ((($T$0$lcssa)) + 8|0);
   $309 = HEAP32[$308>>2]|0;
   $310 = HEAP32[(652752)>>2]|0;
   $311 = ($309>>>0)>=($310>>>0);
   $not$ = ($T$0$lcssa>>>0)>=($310>>>0);
   $312 = $311 & $not$;
   if ($312) {
    $313 = ((($309)) + 12|0);
    HEAP32[$313>>2] = $p$0;
    HEAP32[$308>>2] = $p$0;
    $314 = ((($p$0)) + 8|0);
    HEAP32[$314>>2] = $309;
    $315 = ((($p$0)) + 12|0);
    HEAP32[$315>>2] = $T$0$lcssa;
    $316 = ((($p$0)) + 24|0);
    HEAP32[$316>>2] = 0;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $317 = HEAP32[(652768)>>2]|0;
 $318 = (($317) + -1)|0;
 HEAP32[(652768)>>2] = $318;
 $319 = ($318|0)==(0);
 if ($319) {
  $sp$0$in$i = (653192);
 } else {
  return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $320 = ($sp$0$i|0)==(0|0);
  $321 = ((($sp$0$i)) + 8|0);
  if ($320) {
   break;
  } else {
   $sp$0$in$i = $321;
  }
 }
 HEAP32[(652768)>>2] = -1;
 return;
}
function _copyleft__async_cb($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0, $99 = 0.0;
 var $AsyncRetVal = 0, $IsAsync11 = 0, $IsAsync7 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($0)) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($0)) + 28|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($0)) + 32|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($0)) + 36|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($0)) + 40|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($0)) + 44|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($0)) + 48|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($0)) + 52|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($0)) + 56|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($0)) + 60|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ((($0)) + 64|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ___async_retval;
 $AsyncRetVal = HEAP32[$33>>2]|0;
 HEAP32[381960>>2] = $AsyncRetVal;
 _glDisable(2884);
 $34 = (_glCreateShader(35633)|0);
 HEAP32[381968>>2] = $34;
 $35 = (_glCreateShader(35632)|0);
 HEAP32[381976>>2] = $35;
 $36 = HEAP32[381968>>2]|0;
 _glShaderSource(($36|0),1,($2|0),(0|0));
 $37 = HEAP32[381976>>2]|0;
 _glShaderSource(($37|0),1,($4|0),(0|0));
 $38 = HEAP32[381968>>2]|0;
 _glCompileShader(($38|0));
 HEAP32[$6>>2] = 0;
 HEAP32[$8>>2] = 0;
 $39 = HEAP32[381968>>2]|0;
 _glGetShaderiv(($39|0),35713,($6|0));
 $40 = HEAP32[$6>>2]|0;
 $41 = ($40|0)==(0);
 if ($41) {
  $42 = HEAP32[381968>>2]|0;
  _glGetShaderiv(($42|0),35716,($8|0));
  $43 = HEAP32[$8>>2]|0;
  $44 = (__Winternal_alloc($43)|0);
  $45 = ($44|0)==(0|0);
  if ($45) {
   $46 = HEAP32[_stderr>>2]|0;
   (_fwrite((381984|0),220,1,($46|0))|0);
   _exit(1);
   // unreachable;
  }
  $47 = HEAP32[381968>>2]|0;
  $48 = HEAP32[$8>>2]|0;
  _glGetShaderInfoLog(($47|0),($48|0),(0|0),($44|0));
  $49 = HEAP32[_stderr>>2]|0;
  HEAP32[$30>>2] = $44;
  (_fprintf(($49|0),(387856|0),($30|0))|0);
  $50 = HEAP32[(651808)>>2]|0;
  $ReallocAsyncCtx2 = (_emscripten_realloc_async_context(4)|0);
  FUNCTION_TABLE_vi[$50 & 255]($44);
  $IsAsync7 = ___async;
  if ($IsAsync7) {
   HEAP32[$ReallocAsyncCtx2>>2] = 27;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx2>>2] = 27;
  sp = STACKTOP;
  return;
 }
 $51 = HEAP32[381976>>2]|0;
 _glCompileShader(($51|0));
 HEAP32[$10>>2] = 0;
 HEAP32[$12>>2] = 0;
 $52 = HEAP32[381976>>2]|0;
 _glGetShaderiv(($52|0),35713,($10|0));
 $53 = HEAP32[$10>>2]|0;
 $54 = ($53|0)==(0);
 if (!($54)) {
  $64 = (_glCreateProgram()|0);
  HEAP32[382432>>2] = $64;
  $65 = HEAP32[381968>>2]|0;
  _glAttachShader(($64|0),($65|0));
  $66 = HEAP32[382432>>2]|0;
  $67 = HEAP32[381976>>2]|0;
  _glAttachShader(($66|0),($67|0));
  $68 = HEAP32[382432>>2]|0;
  _glLinkProgram(($68|0));
  $69 = HEAP32[382432>>2]|0;
  _glUseProgram(($69|0));
  $70 = HEAP32[382432>>2]|0;
  $71 = (_glGetUniformLocation(($70|0),(382440|0))|0);
  $72 = HEAP32[382432>>2]|0;
  $73 = (_glGetUniformLocation(($72|0),(382448|0))|0);
  HEAP32[382464>>2] = $73;
  $74 = HEAP32[382432>>2]|0;
  $75 = (_glGetUniformLocation(($74|0),(382472|0))|0);
  HEAP32[382488>>2] = $75;
  $76 = HEAP32[382432>>2]|0;
  $77 = (_glGetUniformLocation(($76|0),(382496|0))|0);
  $78 = HEAP32[382432>>2]|0;
  $79 = (_glGetUniformLocation(($78|0),(382504|0))|0);
  $80 = HEAP32[382432>>2]|0;
  $81 = (_glGetUniformLocation(($80|0),(382520|0))|0);
  $82 = HEAP32[382432>>2]|0;
  $83 = (_glGetUniformLocation(($82|0),(382536|0))|0);
  $84 = HEAP32[382432>>2]|0;
  $85 = (_glGetUniformLocation(($84|0),(382544|0))|0);
  $86 = HEAP32[382432>>2]|0;
  $87 = (_glGetUniformLocation(($86|0),(382560|0))|0);
  $88 = HEAP32[382432>>2]|0;
  $89 = (_glGetUniformLocation(($88|0),(382576|0))|0);
  $90 = HEAP32[382432>>2]|0;
  $91 = (_glGetUniformLocation(($90|0),(382592|0))|0);
  $92 = HEAP32[382432>>2]|0;
  $93 = (_glGetUniformLocation(($92|0),(382608|0))|0);
  $94 = HEAP32[382432>>2]|0;
  $95 = (_glGetUniformLocation(($94|0),(382624|0))|0);
  HEAP32[382640>>2] = $95;
  _glUniform1i(($71|0),0);
  _glUniform3f(($79|0),1.0,1.0,1.0);
  _glUniform3f(($83|0),0.5,0.5,0.5);
  _glUniform3f(($85|0),0.0,0.0,-1.0);
  _glUniform3f(($87|0),0.0,0.0,0.10000000149011612);
  _glUniform1f(($89|0),9.9999997473787516E-5);
  _glUniform3f(($91|0),1.0,1.0,1.0);
  _glUniform1f(($93|0),9.9999997473787516E-5);
  $96 = HEAP32[(389576)>>2]|0;
  $97 = (+($96|0));
  $98 = HEAP32[(389572)>>2]|0;
  $99 = (+($98|0));
  $100 = $97 / $99;
  _glUniform3f(($77|0),(+$100),1.0,1.0);
  $101 = HEAP32[382488>>2]|0;
  _glUniform3f(($101|0),0.0,0.0,0.0);
  $102 = HEAP32[382464>>2]|0;
  _glUniform1f(($102|0),1.0);
  _glUniform3f(($81|0),0.0,0.0,0.0);
  $103 = HEAP32[382640>>2]|0;
  _glUniform1i(($103|0),1);
  _glGenTextures(1,(382648|0));
  _glGenTextures(1,(382656|0));
  _glGenVertexArrays(1,(382664|0));
  _glGenBuffers(1,(382672|0));
  _glGenBuffers(1,(382680|0));
  $104 = HEAP32[382664>>2]|0;
  _glBindVertexArray(($104|0));
  $105 = HEAP32[382648>>2]|0;
  _glBindTexture(3553,($105|0));
  _glTexParameteri(3553,10241,9729);
  _glTexImage2D(3553,0,6408,256,64,0,6408,5121,($14|0));
  $106 = HEAP32[382656>>2]|0;
  _glBindTexture(3553,($106|0));
  _glTexParameteri(3553,10241,9729);
  _glTexImage2D(3553,0,6408,256,256,0,6408,5121,($16|0));
  $107 = HEAP32[382672>>2]|0;
  _glBindBuffer(34962,($107|0));
  $108 = HEAP32[382680>>2]|0;
  _glBindBuffer(34963,($108|0));
  _glBufferData(34963,3160,($18|0),35044);
  _glBufferData(34962,12672,($20|0),35044);
  $109 = HEAP32[382432>>2]|0;
  $110 = (_glGetAttribLocation(($109|0),(382688|0))|0);
  HEAP32[382704>>2] = $110;
  $111 = HEAP32[382432>>2]|0;
  $112 = (_glGetAttribLocation(($111|0),(382712|0))|0);
  HEAP32[382720>>2] = $112;
  $113 = HEAP32[382432>>2]|0;
  $114 = (_glGetAttribLocation(($113|0),(382728|0))|0);
  HEAP32[382744>>2] = $114;
  $115 = HEAP32[382704>>2]|0;
  _glVertexAttribPointer(($115|0),4,5126,0,32,(0|0));
  $116 = HEAP32[382720>>2]|0;
  _glVertexAttribPointer(($116|0),4,5126,0,32,((16)|0));
  $117 = HEAP32[382744>>2]|0;
  _glVertexAttribPointer(($117|0),2,5126,0,32,((16)|0));
  $118 = HEAP32[382704>>2]|0;
  _glEnableVertexAttribArray(($118|0));
  $119 = HEAP32[382720>>2]|0;
  _glEnableVertexAttribArray(($119|0));
  $120 = HEAP32[382744>>2]|0;
  _glEnableVertexAttribArray(($120|0));
  (_gettimeofday((382752|0),(0|0))|0);
  HEAP32[382760>>2] = 0;
  _emscripten_set_main_loop((29|0),0,1);
  return;
 }
 $55 = HEAP32[381976>>2]|0;
 _glGetShaderiv(($55|0),35716,($12|0));
 $56 = HEAP32[$12>>2]|0;
 $57 = (__Winternal_alloc($56)|0);
 $58 = ($57|0)==(0|0);
 if ($58) {
  $59 = HEAP32[_stderr>>2]|0;
  (_fwrite((382208|0),222,1,($59|0))|0);
  _exit(1);
  // unreachable;
 }
 $60 = HEAP32[381976>>2]|0;
 $61 = HEAP32[$12>>2]|0;
 _glGetShaderInfoLog(($60|0),($61|0),(0|0),($57|0));
 $62 = HEAP32[_stderr>>2]|0;
 HEAP32[$26>>2] = $57;
 (_fprintf(($62|0),(387856|0),($26|0))|0);
 $63 = HEAP32[(651808)>>2]|0;
 $ReallocAsyncCtx3 = (_emscripten_realloc_async_context(4)|0);
 FUNCTION_TABLE_vi[$63 & 255]($57);
 $IsAsync11 = ___async;
 if ($IsAsync11) {
  HEAP32[$ReallocAsyncCtx3>>2] = 28;
  sp = STACKTOP;
  return;
 }
 ___async_unwind = 0;
 HEAP32[$ReallocAsyncCtx3>>2] = 28;
 sp = STACKTOP;
 return;
}
function _copyleft__async_cb1($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _exit(1);
 // unreachable;
}
function _copyleft__async_cb2($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _exit(1);
 // unreachable;
}
function _collision_ball__async_cb($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0;
 var $28 = 0.0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0;
 var $46 = 0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0;
 var $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0.0, $IsAsync12 = 0, $IsAsync8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $storemerge1 = 0.0, $storemerge3 = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = +HEAPF32[$1>>2];
 $3 = (+Math_sin((+$2)));
 HEAPF32[32>>2] = $3;
 $4 = (+Math_cos((+$2)));
 $5 = $4 > 0.0;
 $6 = -$4;
 $storemerge1 = $5 ? $6 : $4;
 HEAPF32[24>>2] = $storemerge1;
 $7 = HEAP32[(389576)>>2]|0;
 $8 = (($7|0) / 40)&-1;
 $9 = (+($8|0));
 $10 = HEAP32[(389572)>>2]|0;
 $11 = (+($10|0));
 $12 = (+($7|0));
 $13 = $11 / $12;
 $14 = $9 * $13;
 $15 = $14;
 $16 = $15 * 0.90000000000000002;
 $17 = $16 * 0.01;
 $18 = +HEAPF32[16>>2];
 $19 = $18;
 $20 = $19 + $17;
 $storemerge3 = $20;
 HEAPF32[16>>2] = $storemerge3;
 $21 = HEAP32[(389556)>>2]|0;
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)==(1);
 $24 = $storemerge3;
 if ($23) {
  $25 = (_get_score(1)|0);
  $26 = (+($25|0));
  $27 = $26 * 0.375;
  $28 = $27 + 0.5;
  $29 = HEAP32[(389576)>>2]|0;
  $30 = (($29|0) / 40)&-1;
  $31 = (+($30|0));
  $32 = HEAP32[(389572)>>2]|0;
  $33 = (+($32|0));
  $34 = (+($29|0));
  $35 = $33 / $34;
  $36 = $31 * $35;
  $37 = $36;
  $38 = $37 * 0.90000000000000002;
  $39 = $28 * $38;
  $40 = $24 > $39;
  if ($40) {
   $41 = (_get_score(1)|0);
   $42 = (+($41|0));
   $43 = $42 * 0.375;
   $44 = $43 + 0.5;
   $45 = HEAP32[(389576)>>2]|0;
   $46 = (($45|0) / 40)&-1;
   $47 = (+($46|0));
   $48 = HEAP32[(389572)>>2]|0;
   $49 = (+($48|0));
   $50 = (+($45|0));
   $51 = $49 / $50;
   $52 = $47 * $51;
   $53 = $52;
   $54 = $53 * 0.90000000000000002;
   $55 = $44 * $54;
   $56 = $55;
   HEAPF32[16>>2] = $56;
  }
 } else {
  $57 = (($7|0) / 40)&-1;
  $58 = (+($57|0));
  $59 = (+($10|0));
  $60 = (+($7|0));
  $61 = $59 / $60;
  $62 = $58 * $61;
  $63 = $62;
  $64 = $63 * 0.90000000000000002;
  $65 = $64 * 2.0;
  $66 = $24 > $65;
  if ($66) {
   $67 = $65;
   HEAPF32[16>>2] = $67;
  }
 }
 $68 = HEAP8[35200>>0]|0;
 $69 = $68 ^ 1;
 HEAP8[35200>>0] = $69;
 $70 = ($68<<24>>24)==(1);
 $71 = HEAP32[(651952)>>2]|0;
 if ($70) {
  $73 = HEAP32[72>>2]|0;
  $ReallocAsyncCtx4 = (_emscripten_realloc_async_context(4)|0);
  FUNCTION_TABLE_vi[$71 & 255]($73);
  $IsAsync12 = ___async;
  if ($IsAsync12) {
   HEAP32[$ReallocAsyncCtx4>>2] = 6;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx4>>2] = 6;
  sp = STACKTOP;
  return;
 } else {
  $72 = HEAP32[64>>2]|0;
  $ReallocAsyncCtx3 = (_emscripten_realloc_async_context(4)|0);
  FUNCTION_TABLE_vi[$71 & 255]($72);
  $IsAsync8 = ___async;
  if ($IsAsync8) {
   HEAP32[$ReallocAsyncCtx3>>2] = 5;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx3>>2] = 5;
  sp = STACKTOP;
  return;
 }
}
function _collision_ball__async_cb3($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0;
 var $28 = 0.0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0;
 var $46 = 0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0;
 var $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0.0, $IsAsync12 = 0, $IsAsync8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $storemerge = 0.0, $storemerge3 = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = +HEAPF32[$1>>2];
 $3 = (+Math_sin((+$2)));
 HEAPF32[32>>2] = $3;
 $4 = (+Math_cos((+$2)));
 $5 = $4 < 0.0;
 $6 = -$4;
 $storemerge = $5 ? $6 : $4;
 HEAPF32[24>>2] = $storemerge;
 $7 = HEAP32[(389576)>>2]|0;
 $8 = (($7|0) / 40)&-1;
 $9 = (+($8|0));
 $10 = HEAP32[(389572)>>2]|0;
 $11 = (+($10|0));
 $12 = (+($7|0));
 $13 = $11 / $12;
 $14 = $9 * $13;
 $15 = $14;
 $16 = $15 * 0.90000000000000002;
 $17 = $16 * 0.01;
 $18 = +HEAPF32[16>>2];
 $19 = $18;
 $20 = $19 + $17;
 $storemerge3 = $20;
 HEAPF32[16>>2] = $storemerge3;
 $21 = HEAP32[(389556)>>2]|0;
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)==(1);
 $24 = $storemerge3;
 if ($23) {
  $25 = (_get_score(1)|0);
  $26 = (+($25|0));
  $27 = $26 * 0.375;
  $28 = $27 + 0.5;
  $29 = HEAP32[(389576)>>2]|0;
  $30 = (($29|0) / 40)&-1;
  $31 = (+($30|0));
  $32 = HEAP32[(389572)>>2]|0;
  $33 = (+($32|0));
  $34 = (+($29|0));
  $35 = $33 / $34;
  $36 = $31 * $35;
  $37 = $36;
  $38 = $37 * 0.90000000000000002;
  $39 = $28 * $38;
  $40 = $24 > $39;
  if ($40) {
   $41 = (_get_score(1)|0);
   $42 = (+($41|0));
   $43 = $42 * 0.375;
   $44 = $43 + 0.5;
   $45 = HEAP32[(389576)>>2]|0;
   $46 = (($45|0) / 40)&-1;
   $47 = (+($46|0));
   $48 = HEAP32[(389572)>>2]|0;
   $49 = (+($48|0));
   $50 = (+($45|0));
   $51 = $49 / $50;
   $52 = $47 * $51;
   $53 = $52;
   $54 = $53 * 0.90000000000000002;
   $55 = $44 * $54;
   $56 = $55;
   HEAPF32[16>>2] = $56;
  }
 } else {
  $57 = (($7|0) / 40)&-1;
  $58 = (+($57|0));
  $59 = (+($10|0));
  $60 = (+($7|0));
  $61 = $59 / $60;
  $62 = $58 * $61;
  $63 = $62;
  $64 = $63 * 0.90000000000000002;
  $65 = $64 * 2.0;
  $66 = $24 > $65;
  if ($66) {
   $67 = $65;
   HEAPF32[16>>2] = $67;
  }
 }
 $68 = HEAP8[35200>>0]|0;
 $69 = $68 ^ 1;
 HEAP8[35200>>0] = $69;
 $70 = ($68<<24>>24)==(1);
 $71 = HEAP32[(651952)>>2]|0;
 if ($70) {
  $73 = HEAP32[72>>2]|0;
  $ReallocAsyncCtx4 = (_emscripten_realloc_async_context(4)|0);
  FUNCTION_TABLE_vi[$71 & 255]($73);
  $IsAsync12 = ___async;
  if ($IsAsync12) {
   HEAP32[$ReallocAsyncCtx4>>2] = 6;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx4>>2] = 6;
  sp = STACKTOP;
  return;
 } else {
  $72 = HEAP32[64>>2]|0;
  $ReallocAsyncCtx3 = (_emscripten_realloc_async_context(4)|0);
  FUNCTION_TABLE_vi[$71 & 255]($72);
  $IsAsync8 = ___async;
  if ($IsAsync8) {
   HEAP32[$ReallocAsyncCtx3>>2] = 5;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx3>>2] = 5;
  sp = STACKTOP;
  return;
 }
}
function _collision_ball__async_cb4($0) {
 $0 = $0|0;
 var $$expand_i1_val = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ___async_retval;
 $$expand_i1_val = 1;
 HEAP8[$1>>0] = $$expand_i1_val;
 return;
}
function _collision_ball__async_cb5($0) {
 $0 = $0|0;
 var $$expand_i1_val = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ___async_retval;
 $$expand_i1_val = 1;
 HEAP8[$1>>0] = $$expand_i1_val;
 return;
}
function __link_and_clean_shaders__async_cb($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _exit(1);
 // unreachable;
}
function __may_the_weaver_sleep__async_cb($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $IsAsync3 = 0, $ReallocAsyncCtx2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[35080>>2]|0;
 $2 = ($1|0)>(0);
 if (!($2)) {
  __finalize_memory();
  $7 = HEAP32[(33068)>>2]|0;
  _glDeleteProgram(($7|0));
  _glDeleteFramebuffers(1,(35048|0));
  _glDeleteTextures(1,(35056|0));
  _glDeleteRenderbuffers(1,(35064|0));
  _exit(0);
  // unreachable;
 }
 $3 = HEAP32[35072>>2]|0;
 $4 = ((($3)) + 132|0);
 $5 = HEAP32[$4>>2]|0;
 $ReallocAsyncCtx2 = (_emscripten_realloc_async_context(8)|0);
 FUNCTION_TABLE_vi[$5 & 255](389544);
 $IsAsync3 = ___async;
 if ($IsAsync3) {
  HEAP32[$ReallocAsyncCtx2>>2] = 191;
  $6 = ((($ReallocAsyncCtx2)) + 4|0);
  HEAP32[$6>>2] = 0;
  sp = STACKTOP;
  return;
 }
 ___async_unwind = 0;
 HEAP32[$ReallocAsyncCtx2>>2] = 191;
 $6 = ((($ReallocAsyncCtx2)) + 4|0);
 HEAP32[$6>>2] = 0;
 sp = STACKTOP;
 return;
}
function __may_the_weaver_sleep__async_cb6($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $IsAsync3 = 0, $ReallocAsyncCtx2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $5 = (($2) + 1)|0;
 $8 = HEAP32[35080>>2]|0;
 $9 = ($5|0)<($8|0);
 if (!($9)) {
  __finalize_memory();
  $10 = HEAP32[(33068)>>2]|0;
  _glDeleteProgram(($10|0));
  _glDeleteFramebuffers(1,(35048|0));
  _glDeleteTextures(1,(35056|0));
  _glDeleteRenderbuffers(1,(35064|0));
  _exit(0);
  // unreachable;
 }
 $3 = HEAP32[35072>>2]|0;
 $4 = (((($3) + (($5*156)|0)|0)) + 132|0);
 $6 = HEAP32[$4>>2]|0;
 $ReallocAsyncCtx2 = (_emscripten_realloc_async_context(8)|0);
 FUNCTION_TABLE_vi[$6 & 255](389544);
 $IsAsync3 = ___async;
 if ($IsAsync3) {
  HEAP32[$ReallocAsyncCtx2>>2] = 191;
  $7 = ((($ReallocAsyncCtx2)) + 4|0);
  HEAP32[$7>>2] = $5;
  sp = STACKTOP;
  return;
 }
 ___async_unwind = 0;
 HEAP32[$ReallocAsyncCtx2>>2] = 191;
 $7 = ((($ReallocAsyncCtx2)) + 4|0);
 HEAP32[$7>>2] = $5;
 sp = STACKTOP;
 return;
}
function _title__async_cb($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, $IsAsync15 = 0, $ReallocAsyncCtx2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($0)) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($0)) + 28|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ___async_retval;
 $AsyncRetVal = HEAP32[$15>>2]|0;
 HEAP32[382816>>2] = $AsyncRetVal;
 $16 = HEAP32[(651908)>>2]|0;
 $17 = HEAP32[(389572)>>2]|0;
 $18 = (($17|0) / 2)&-1;
 $ReallocAsyncCtx2 = (_emscripten_realloc_async_context(24)|0);
 $19 = (FUNCTION_TABLE_iiiiiii[$16 & 255](2,$18,250,200,25,$4)|0);
 $IsAsync15 = ___async;
 if (!($IsAsync15)) {
  $25 = ___async_retval;
  HEAP32[$25>>2] = $19;
  ___async_unwind = 0;
 }
 HEAP32[$ReallocAsyncCtx2>>2] = 130;
 $20 = ((($ReallocAsyncCtx2)) + 4|0);
 HEAP32[$20>>2] = $6;
 $21 = ((($ReallocAsyncCtx2)) + 8|0);
 HEAP32[$21>>2] = $8;
 $22 = ((($ReallocAsyncCtx2)) + 12|0);
 HEAP32[$22>>2] = $10;
 $23 = ((($ReallocAsyncCtx2)) + 16|0);
 HEAP32[$23>>2] = $12;
 $24 = ((($ReallocAsyncCtx2)) + 20|0);
 HEAP32[$24>>2] = $14;
 sp = STACKTOP;
 return;
}
function _title__async_cb7($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0;
 var $IsAsync18 = 0, $ReallocAsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ___async_retval;
 $AsyncRetVal = HEAP32[$11>>2]|0;
 HEAP32[382824>>2] = $AsyncRetVal;
 $12 = HEAP32[(651908)>>2]|0;
 $13 = HEAP32[(389572)>>2]|0;
 $14 = (($13|0) / 2)&-1;
 $ReallocAsyncCtx3 = (_emscripten_realloc_async_context(16)|0);
 $15 = (FUNCTION_TABLE_iiiiiii[$12 & 255](2,$14,200,200,25,$10)|0);
 $IsAsync18 = ___async;
 if (!($IsAsync18)) {
  $19 = ___async_retval;
  HEAP32[$19>>2] = $15;
  ___async_unwind = 0;
 }
 HEAP32[$ReallocAsyncCtx3>>2] = 131;
 $16 = ((($ReallocAsyncCtx3)) + 4|0);
 HEAP32[$16>>2] = $2;
 $17 = ((($ReallocAsyncCtx3)) + 8|0);
 HEAP32[$17>>2] = $4;
 $18 = ((($ReallocAsyncCtx3)) + 12|0);
 HEAP32[$18>>2] = $6;
 sp = STACKTOP;
 return;
}
function _title__async_cb8($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, $IsAsync21 = 0, $ReallocAsyncCtx4 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ___async_retval;
 $AsyncRetVal = HEAP32[$7>>2]|0;
 HEAP32[382832>>2] = $AsyncRetVal;
 $8 = HEAP32[(651908)>>2]|0;
 $9 = HEAP32[(389572)>>2]|0;
 $10 = (($9|0) / 2)&-1;
 HEAPF64[$4>>3] = 1.0;
 $vararg_ptr9 = ((($4)) + 8|0);
 HEAPF64[$vararg_ptr9>>3] = 1.0;
 $vararg_ptr10 = ((($4)) + 16|0);
 HEAPF64[$vararg_ptr10>>3] = 1.0;
 $vararg_ptr11 = ((($4)) + 24|0);
 HEAPF64[$vararg_ptr11>>3] = 1.0;
 $ReallocAsyncCtx4 = (_emscripten_realloc_async_context(8)|0);
 $11 = (FUNCTION_TABLE_iiiiiii[$8 & 255](-2,$10,250,210,35,$4)|0);
 $IsAsync21 = ___async;
 if ($IsAsync21) {
  HEAP32[$ReallocAsyncCtx4>>2] = 132;
  $12 = ((($ReallocAsyncCtx4)) + 4|0);
  HEAP32[$12>>2] = $6;
  sp = STACKTOP;
  return;
 }
 $13 = ___async_retval;
 HEAP32[$13>>2] = $11;
 ___async_unwind = 0;
 HEAP32[$ReallocAsyncCtx4>>2] = 132;
 $12 = ((($ReallocAsyncCtx4)) + 4|0);
 HEAP32[$12>>2] = $6;
 sp = STACKTOP;
 return;
}
function _title__async_cb9($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $AsyncRetVal = 0, $IsAsync24 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ___async_retval;
 $AsyncRetVal = HEAP32[$3>>2]|0;
 HEAP32[382840>>2] = $AsyncRetVal;
 $4 = HEAP32[(651948)>>2]|0;
 $ReallocAsyncCtx5 = (_emscripten_realloc_async_context(4)|0);
 $5 = (FUNCTION_TABLE_ii[$4 & 255](382848)|0);
 $IsAsync24 = ___async;
 if ($IsAsync24) {
  HEAP32[$ReallocAsyncCtx5>>2] = 133;
  sp = STACKTOP;
  return;
 }
 $6 = ___async_retval;
 HEAP32[$6>>2] = $5;
 ___async_unwind = 0;
 HEAP32[$ReallocAsyncCtx5>>2] = 133;
 sp = STACKTOP;
 return;
}
function _title__async_cb10($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $AsyncRetVal = 0, $IsAsync27 = 0, $ReallocAsyncCtx6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ___async_retval;
 $AsyncRetVal = HEAP32[$1>>2]|0;
 HEAP32[64>>2] = $AsyncRetVal;
 $2 = HEAP32[(651948)>>2]|0;
 $ReallocAsyncCtx6 = (_emscripten_realloc_async_context(4)|0);
 $3 = (FUNCTION_TABLE_ii[$2 & 255](382864)|0);
 $IsAsync27 = ___async;
 if ($IsAsync27) {
  HEAP32[$ReallocAsyncCtx6>>2] = 134;
  sp = STACKTOP;
  return;
 }
 $4 = ___async_retval;
 HEAP32[$4>>2] = $3;
 ___async_unwind = 0;
 HEAP32[$ReallocAsyncCtx6>>2] = 134;
 sp = STACKTOP;
 return;
}
function _title__async_cb11($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $AsyncRetVal = 0, $IsAsync30 = 0, $ReallocAsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ___async_retval;
 $AsyncRetVal = HEAP32[$1>>2]|0;
 HEAP32[72>>2] = $AsyncRetVal;
 $2 = HEAP32[(651948)>>2]|0;
 $ReallocAsyncCtx7 = (_emscripten_realloc_async_context(4)|0);
 $3 = (FUNCTION_TABLE_ii[$2 & 255](382880)|0);
 $IsAsync30 = ___async;
 if ($IsAsync30) {
  HEAP32[$ReallocAsyncCtx7>>2] = 135;
  sp = STACKTOP;
  return;
 }
 $4 = ___async_retval;
 HEAP32[$4>>2] = $3;
 ___async_unwind = 0;
 HEAP32[$ReallocAsyncCtx7>>2] = 135;
 sp = STACKTOP;
 return;
}
function _title__async_cb12($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $AsyncRetVal = 0, $IsAsync33 = 0, $ReallocAsyncCtx8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ___async_retval;
 $AsyncRetVal = HEAP32[$1>>2]|0;
 HEAP32[35184>>2] = $AsyncRetVal;
 $2 = HEAP32[(651948)>>2]|0;
 $ReallocAsyncCtx8 = (_emscripten_realloc_async_context(4)|0);
 $3 = (FUNCTION_TABLE_ii[$2 & 255](382896)|0);
 $IsAsync33 = ___async;
 if ($IsAsync33) {
  HEAP32[$ReallocAsyncCtx8>>2] = 136;
  sp = STACKTOP;
  return;
 }
 $4 = ___async_retval;
 HEAP32[$4>>2] = $3;
 ___async_unwind = 0;
 HEAP32[$ReallocAsyncCtx8>>2] = 136;
 sp = STACKTOP;
 return;
}
function _title__async_cb13($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $AsyncRetVal = 0, $IsAsync36 = 0, $ReallocAsyncCtx9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ___async_retval;
 $AsyncRetVal = HEAP32[$1>>2]|0;
 HEAP32[35128>>2] = $AsyncRetVal;
 $2 = HEAP32[(651948)>>2]|0;
 $ReallocAsyncCtx9 = (_emscripten_realloc_async_context(4)|0);
 $3 = (FUNCTION_TABLE_ii[$2 & 255](382912)|0);
 $IsAsync36 = ___async;
 if ($IsAsync36) {
  HEAP32[$ReallocAsyncCtx9>>2] = 137;
  sp = STACKTOP;
  return;
 }
 $4 = ___async_retval;
 HEAP32[$4>>2] = $3;
 ___async_unwind = 0;
 HEAP32[$ReallocAsyncCtx9>>2] = 137;
 sp = STACKTOP;
 return;
}
function _title__async_cb14($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $AsyncRetVal = 0, $IsAsync39 = 0, $ReallocAsyncCtx10 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ___async_retval;
 $AsyncRetVal = HEAP32[$1>>2]|0;
 HEAP32[35136>>2] = $AsyncRetVal;
 $2 = HEAP32[(651948)>>2]|0;
 $ReallocAsyncCtx10 = (_emscripten_realloc_async_context(4)|0);
 $3 = (FUNCTION_TABLE_ii[$2 & 255](382928)|0);
 $IsAsync39 = ___async;
 if ($IsAsync39) {
  HEAP32[$ReallocAsyncCtx10>>2] = 138;
  sp = STACKTOP;
  return;
 }
 $4 = ___async_retval;
 HEAP32[$4>>2] = $3;
 ___async_unwind = 0;
 HEAP32[$ReallocAsyncCtx10>>2] = 138;
 sp = STACKTOP;
 return;
}
function _title__async_cb15($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $AsyncRetVal = 0, $IsAsync42 = 0, $ReallocAsyncCtx11 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ___async_retval;
 $AsyncRetVal = HEAP32[$1>>2]|0;
 HEAP32[35144>>2] = $AsyncRetVal;
 $2 = HEAP32[(651948)>>2]|0;
 $ReallocAsyncCtx11 = (_emscripten_realloc_async_context(4)|0);
 $3 = (FUNCTION_TABLE_ii[$2 & 255](382944)|0);
 $IsAsync42 = ___async;
 if ($IsAsync42) {
  HEAP32[$ReallocAsyncCtx11>>2] = 139;
  sp = STACKTOP;
  return;
 }
 $4 = ___async_retval;
 HEAP32[$4>>2] = $3;
 ___async_unwind = 0;
 HEAP32[$ReallocAsyncCtx11>>2] = 139;
 sp = STACKTOP;
 return;
}
function _title__async_cb16($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $AsyncRetVal = 0, $IsAsync45 = 0, $ReallocAsyncCtx12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ___async_retval;
 $AsyncRetVal = HEAP32[$1>>2]|0;
 HEAP32[35152>>2] = $AsyncRetVal;
 $2 = HEAP32[(651948)>>2]|0;
 $ReallocAsyncCtx12 = (_emscripten_realloc_async_context(4)|0);
 $3 = (FUNCTION_TABLE_ii[$2 & 255](382960)|0);
 $IsAsync45 = ___async;
 if ($IsAsync45) {
  HEAP32[$ReallocAsyncCtx12>>2] = 140;
  sp = STACKTOP;
  return;
 }
 $4 = ___async_retval;
 HEAP32[$4>>2] = $3;
 ___async_unwind = 0;
 HEAP32[$ReallocAsyncCtx12>>2] = 140;
 sp = STACKTOP;
 return;
}
function _title__async_cb17($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $AsyncRetVal = 0, $IsAsync48 = 0, $ReallocAsyncCtx13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ___async_retval;
 $AsyncRetVal = HEAP32[$1>>2]|0;
 HEAP32[35160>>2] = $AsyncRetVal;
 $2 = HEAP32[(651948)>>2]|0;
 $ReallocAsyncCtx13 = (_emscripten_realloc_async_context(4)|0);
 $3 = (FUNCTION_TABLE_ii[$2 & 255](382976)|0);
 $IsAsync48 = ___async;
 if ($IsAsync48) {
  HEAP32[$ReallocAsyncCtx13>>2] = 141;
  sp = STACKTOP;
  return;
 }
 $4 = ___async_retval;
 HEAP32[$4>>2] = $3;
 ___async_unwind = 0;
 HEAP32[$ReallocAsyncCtx13>>2] = 141;
 sp = STACKTOP;
 return;
}
function _title__async_cb18($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $AsyncRetVal = 0, $IsAsync51 = 0, $ReallocAsyncCtx14 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ___async_retval;
 $AsyncRetVal = HEAP32[$1>>2]|0;
 HEAP32[35168>>2] = $AsyncRetVal;
 $2 = HEAP32[(651948)>>2]|0;
 $ReallocAsyncCtx14 = (_emscripten_realloc_async_context(4)|0);
 $3 = (FUNCTION_TABLE_ii[$2 & 255](382992)|0);
 $IsAsync51 = ___async;
 if ($IsAsync51) {
  HEAP32[$ReallocAsyncCtx14>>2] = 142;
  sp = STACKTOP;
  return;
 }
 $4 = ___async_retval;
 HEAP32[$4>>2] = $3;
 ___async_unwind = 0;
 HEAP32[$ReallocAsyncCtx14>>2] = 142;
 sp = STACKTOP;
 return;
}
function _title__async_cb19($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $AsyncRetVal = 0, $IsAsync54 = 0, $ReallocAsyncCtx15 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ___async_retval;
 $AsyncRetVal = HEAP32[$1>>2]|0;
 HEAP32[35176>>2] = $AsyncRetVal;
 HEAP32[383008>>2] = 0;
 $2 = HEAP32[382824>>2]|0;
 $3 = ((($2)) + 4|0);
 HEAP32[$3>>2] = 1;
 $4 = HEAP32[382832>>2]|0;
 $5 = ((($4)) + 4|0);
 HEAP32[$5>>2] = 2;
 $6 = HEAP32[(651936)>>2]|0;
 $ReallocAsyncCtx15 = (_emscripten_realloc_async_context(4)|0);
 FUNCTION_TABLE_vi[$6 & 255](4);
 $IsAsync54 = ___async;
 if ($IsAsync54) {
  HEAP32[$ReallocAsyncCtx15>>2] = 143;
  sp = STACKTOP;
  return;
 }
 ___async_unwind = 0;
 HEAP32[$ReallocAsyncCtx15>>2] = 143;
 sp = STACKTOP;
 return;
}
function _title__async_cb20($0) {
 $0 = $0|0;
 var $$not = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $IsAsync58 = 0, $IsAsync65 = 0, $IsAsync72 = 0, $IsAsync76 = 0, $ReallocAsyncCtx16 = 0, $ReallocAsyncCtx18 = 0, $ReallocAsyncCtx20 = 0, $ReallocAsyncCtx21 = 0, $or$cond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[(389556)>>2]|0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(0);
 if (!($4)) {
  HEAP32[(651780)>>2] = 1;
 }
 HEAP8[120>>0] = 0;
 $5 = (__update_time()|0);
 $6 = HEAP32[216>>2]|0;
 $7 = (($6) + ($5))|0;
 HEAP32[216>>2] = $7;
 $8 = $7;
 L6: while(1) {
  $9 = ($8|0)>(39999);
  if ($9) {
   label = 7;
   break;
  }
  __render();
  $40 = HEAP8[128>>0]|0;
  $$not = ($40<<24>>24)==(0);
  $41 = 389544;
  $42 = $41;
  $43 = HEAP32[$42>>2]|0;
  $44 = (($41) + 4)|0;
  $45 = $44;
  $46 = HEAP32[$45>>2]|0;
  $47 = ($43|0)==(0);
  $48 = ($46|0)==(0);
  $49 = $47 & $48;
  $or$cond = $$not & $49;
  if (!($or$cond)) {
   label = 26;
   break;
  }
  $10 = HEAP32[(394012)>>2]|0;
  $11 = ($10|0)==(1);
  do {
   if ($11) {
    $12 = HEAP32[383008>>2]|0;
    $13 = ($12|0)==(0);
    if (!($13)) {
     label = 12;
     break L6;
    }
   } else {
    $16 = HEAP32[(394008)>>2]|0;
    $17 = ($16|0)==(1);
    if ($17) {
     $18 = HEAP32[383008>>2]|0;
     $19 = ($18|0)==(1);
     if ($19) {
      break;
     } else {
      label = 17;
      break L6;
     }
    } else {
     $22 = HEAP32[(389640)>>2]|0;
     $23 = ($22|0)==(1);
     if ($23) {
      label = 21;
      break L6;
     } else {
      break;
     }
    }
   }
  } while(0);
  $26 = HEAP32[216>>2]|0;
  $27 = (($26) + -40000)|0;
  HEAP32[216>>2] = $27;
  $28 = 389544;
  $29 = $28;
  $30 = HEAP32[$29>>2]|0;
  $31 = (($28) + 4)|0;
  $32 = $31;
  $33 = HEAP32[$32>>2]|0;
  $34 = (_i64Add(($30|0),($33|0),40000,0)|0);
  $35 = tempRet0;
  $36 = 389544;
  $37 = $36;
  HEAP32[$37>>2] = $34;
  $38 = (($36) + 4)|0;
  $39 = $38;
  HEAP32[$39>>2] = $35;
  $8 = $27;
 }
 if ((label|0) == 7) {
  $ReallocAsyncCtx21 = (_emscripten_realloc_async_context(4)|0);
  __update();
  $IsAsync76 = ___async;
  if ($IsAsync76) {
   HEAP32[$ReallocAsyncCtx21>>2] = 144;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx21>>2] = 144;
  sp = STACKTOP;
  return;
 }
 else if ((label|0) == 12) {
  $14 = HEAP32[(651952)>>2]|0;
  $15 = HEAP32[64>>2]|0;
  $ReallocAsyncCtx16 = (_emscripten_realloc_async_context(4)|0);
  FUNCTION_TABLE_vi[$14 & 255]($15);
  $IsAsync58 = ___async;
  if ($IsAsync58) {
   HEAP32[$ReallocAsyncCtx16>>2] = 145;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx16>>2] = 145;
  sp = STACKTOP;
  return;
 }
 else if ((label|0) == 17) {
  $20 = HEAP32[(651952)>>2]|0;
  $21 = HEAP32[72>>2]|0;
  $ReallocAsyncCtx18 = (_emscripten_realloc_async_context(4)|0);
  FUNCTION_TABLE_vi[$20 & 255]($21);
  $IsAsync65 = ___async;
  if ($IsAsync65) {
   HEAP32[$ReallocAsyncCtx18>>2] = 147;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx18>>2] = 147;
  sp = STACKTOP;
  return;
 }
 else if ((label|0) == 21) {
  $24 = HEAP32[(651952)>>2]|0;
  $25 = HEAP32[35184>>2]|0;
  $ReallocAsyncCtx20 = (_emscripten_realloc_async_context(4)|0);
  FUNCTION_TABLE_vi[$24 & 255]($25);
  $IsAsync72 = ___async;
  if ($IsAsync72) {
   HEAP32[$ReallocAsyncCtx20>>2] = 149;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx20>>2] = 149;
  sp = STACKTOP;
  return;
 }
 else if ((label|0) == 26) {
  return;
 }
}
function _title__async_cb21($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, $IsAsync61 = 0, $ReallocAsyncCtx17 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[383008>>2]|0;
 $2 = (($1) + -1)|0;
 HEAP32[383008>>2] = $2;
 $3 = HEAP32[(651920)>>2]|0;
 $4 = HEAP32[382840>>2]|0;
 $5 = ((($4)) + 8|0);
 $6 = +HEAPF32[$5>>2];
 $7 = ((($4)) + 12|0);
 $8 = +HEAPF32[$7>>2];
 $9 = $8 + 50.0;
 $ReallocAsyncCtx17 = (_emscripten_realloc_async_context(4)|0);
 FUNCTION_TABLE_vidd[$3 & 255]($4,$6,$9);
 $IsAsync61 = ___async;
 if ($IsAsync61) {
  HEAP32[$ReallocAsyncCtx17>>2] = 146;
  sp = STACKTOP;
  return;
 }
 ___async_unwind = 0;
 HEAP32[$ReallocAsyncCtx17>>2] = 146;
 sp = STACKTOP;
 return;
}
function _title__async_cb22($0) {
 $0 = $0|0;
 var $$not = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $IsAsync58 = 0, $IsAsync65 = 0, $IsAsync72 = 0, $IsAsync76 = 0, $ReallocAsyncCtx16 = 0, $ReallocAsyncCtx18 = 0, $ReallocAsyncCtx20 = 0, $ReallocAsyncCtx21 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 while(1) {
  $19 = HEAP32[216>>2]|0;
  $1 = (($19) + -40000)|0;
  HEAP32[216>>2] = $1;
  $20 = 389544;
  $21 = $20;
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + 4)|0;
  $24 = $23;
  $25 = HEAP32[$24>>2]|0;
  $26 = (_i64Add(($22|0),($25|0),40000,0)|0);
  $27 = tempRet0;
  $28 = 389544;
  $29 = $28;
  HEAP32[$29>>2] = $26;
  $30 = (($28) + 4)|0;
  $31 = $30;
  HEAP32[$31>>2] = $27;
  $2 = ($1|0)>(39999);
  if ($2) {
   label = 3;
   break;
  }
  __render();
  $32 = HEAP8[128>>0]|0;
  $$not = ($32<<24>>24)==(0);
  $33 = 389544;
  $34 = $33;
  $35 = HEAP32[$34>>2]|0;
  $36 = (($33) + 4)|0;
  $37 = $36;
  $38 = HEAP32[$37>>2]|0;
  $39 = ($35|0)==(0);
  $40 = ($38|0)==(0);
  $41 = $39 & $40;
  $or$cond = $$not & $41;
  if (!($or$cond)) {
   label = 23;
   break;
  }
  $3 = HEAP32[(394012)>>2]|0;
  $4 = ($3|0)==(1);
  if ($4) {
   $5 = HEAP32[383008>>2]|0;
   $6 = ($5|0)==(0);
   if ($6) {
    continue;
   } else {
    label = 8;
    break;
   }
  }
  $9 = HEAP32[(394008)>>2]|0;
  $10 = ($9|0)==(1);
  if ($10) {
   $11 = HEAP32[383008>>2]|0;
   $12 = ($11|0)==(1);
   if ($12) {
    continue;
   } else {
    label = 14;
    break;
   }
  } else {
   $15 = HEAP32[(389640)>>2]|0;
   $16 = ($15|0)==(1);
   if ($16) {
    label = 18;
    break;
   } else {
    continue;
   }
  }
 }
 if ((label|0) == 3) {
  $ReallocAsyncCtx21 = (_emscripten_realloc_async_context(4)|0);
  __update();
  $IsAsync76 = ___async;
  if ($IsAsync76) {
   HEAP32[$ReallocAsyncCtx21>>2] = 144;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx21>>2] = 144;
  sp = STACKTOP;
  return;
 }
 else if ((label|0) == 8) {
  $7 = HEAP32[(651952)>>2]|0;
  $8 = HEAP32[64>>2]|0;
  $ReallocAsyncCtx16 = (_emscripten_realloc_async_context(4)|0);
  FUNCTION_TABLE_vi[$7 & 255]($8);
  $IsAsync58 = ___async;
  if ($IsAsync58) {
   HEAP32[$ReallocAsyncCtx16>>2] = 145;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx16>>2] = 145;
  sp = STACKTOP;
  return;
 }
 else if ((label|0) == 14) {
  $13 = HEAP32[(651952)>>2]|0;
  $14 = HEAP32[72>>2]|0;
  $ReallocAsyncCtx18 = (_emscripten_realloc_async_context(4)|0);
  FUNCTION_TABLE_vi[$13 & 255]($14);
  $IsAsync65 = ___async;
  if ($IsAsync65) {
   HEAP32[$ReallocAsyncCtx18>>2] = 147;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx18>>2] = 147;
  sp = STACKTOP;
  return;
 }
 else if ((label|0) == 18) {
  $17 = HEAP32[(651952)>>2]|0;
  $18 = HEAP32[35184>>2]|0;
  $ReallocAsyncCtx20 = (_emscripten_realloc_async_context(4)|0);
  FUNCTION_TABLE_vi[$17 & 255]($18);
  $IsAsync72 = ___async;
  if ($IsAsync72) {
   HEAP32[$ReallocAsyncCtx20>>2] = 149;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx20>>2] = 149;
  sp = STACKTOP;
  return;
 }
 else if ((label|0) == 23) {
  return;
 }
}
function _title__async_cb23($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, $IsAsync68 = 0, $ReallocAsyncCtx19 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[383008>>2]|0;
 $2 = (($1) + 1)|0;
 HEAP32[383008>>2] = $2;
 $3 = HEAP32[(651920)>>2]|0;
 $4 = HEAP32[382840>>2]|0;
 $5 = ((($4)) + 8|0);
 $6 = +HEAPF32[$5>>2];
 $7 = ((($4)) + 12|0);
 $8 = +HEAPF32[$7>>2];
 $9 = $8 + -50.0;
 $ReallocAsyncCtx19 = (_emscripten_realloc_async_context(4)|0);
 FUNCTION_TABLE_vidd[$3 & 255]($4,$6,$9);
 $IsAsync68 = ___async;
 if ($IsAsync68) {
  HEAP32[$ReallocAsyncCtx19>>2] = 148;
  sp = STACKTOP;
  return;
 }
 ___async_unwind = 0;
 HEAP32[$ReallocAsyncCtx19>>2] = 148;
 sp = STACKTOP;
 return;
}
function _title__async_cb24($0) {
 $0 = $0|0;
 var $$not = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $IsAsync58 = 0, $IsAsync65 = 0, $IsAsync72 = 0, $IsAsync76 = 0, $ReallocAsyncCtx16 = 0, $ReallocAsyncCtx18 = 0, $ReallocAsyncCtx20 = 0, $ReallocAsyncCtx21 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 while(1) {
  $19 = HEAP32[216>>2]|0;
  $1 = (($19) + -40000)|0;
  HEAP32[216>>2] = $1;
  $20 = 389544;
  $21 = $20;
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + 4)|0;
  $24 = $23;
  $25 = HEAP32[$24>>2]|0;
  $26 = (_i64Add(($22|0),($25|0),40000,0)|0);
  $27 = tempRet0;
  $28 = 389544;
  $29 = $28;
  HEAP32[$29>>2] = $26;
  $30 = (($28) + 4)|0;
  $31 = $30;
  HEAP32[$31>>2] = $27;
  $2 = ($1|0)>(39999);
  if ($2) {
   label = 3;
   break;
  }
  __render();
  $32 = HEAP8[128>>0]|0;
  $$not = ($32<<24>>24)==(0);
  $33 = 389544;
  $34 = $33;
  $35 = HEAP32[$34>>2]|0;
  $36 = (($33) + 4)|0;
  $37 = $36;
  $38 = HEAP32[$37>>2]|0;
  $39 = ($35|0)==(0);
  $40 = ($38|0)==(0);
  $41 = $39 & $40;
  $or$cond = $$not & $41;
  if (!($or$cond)) {
   label = 23;
   break;
  }
  $3 = HEAP32[(394012)>>2]|0;
  $4 = ($3|0)==(1);
  if ($4) {
   $5 = HEAP32[383008>>2]|0;
   $6 = ($5|0)==(0);
   if ($6) {
    continue;
   } else {
    label = 8;
    break;
   }
  }
  $9 = HEAP32[(394008)>>2]|0;
  $10 = ($9|0)==(1);
  if ($10) {
   $11 = HEAP32[383008>>2]|0;
   $12 = ($11|0)==(1);
   if ($12) {
    continue;
   } else {
    label = 13;
    break;
   }
  } else {
   $15 = HEAP32[(389640)>>2]|0;
   $16 = ($15|0)==(1);
   if ($16) {
    label = 18;
    break;
   } else {
    continue;
   }
  }
 }
 if ((label|0) == 3) {
  $ReallocAsyncCtx21 = (_emscripten_realloc_async_context(4)|0);
  __update();
  $IsAsync76 = ___async;
  if ($IsAsync76) {
   HEAP32[$ReallocAsyncCtx21>>2] = 144;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx21>>2] = 144;
  sp = STACKTOP;
  return;
 }
 else if ((label|0) == 8) {
  $7 = HEAP32[(651952)>>2]|0;
  $8 = HEAP32[64>>2]|0;
  $ReallocAsyncCtx16 = (_emscripten_realloc_async_context(4)|0);
  FUNCTION_TABLE_vi[$7 & 255]($8);
  $IsAsync58 = ___async;
  if ($IsAsync58) {
   HEAP32[$ReallocAsyncCtx16>>2] = 145;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx16>>2] = 145;
  sp = STACKTOP;
  return;
 }
 else if ((label|0) == 13) {
  $13 = HEAP32[(651952)>>2]|0;
  $14 = HEAP32[72>>2]|0;
  $ReallocAsyncCtx18 = (_emscripten_realloc_async_context(4)|0);
  FUNCTION_TABLE_vi[$13 & 255]($14);
  $IsAsync65 = ___async;
  if ($IsAsync65) {
   HEAP32[$ReallocAsyncCtx18>>2] = 147;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx18>>2] = 147;
  sp = STACKTOP;
  return;
 }
 else if ((label|0) == 18) {
  $17 = HEAP32[(651952)>>2]|0;
  $18 = HEAP32[35184>>2]|0;
  $ReallocAsyncCtx20 = (_emscripten_realloc_async_context(4)|0);
  FUNCTION_TABLE_vi[$17 & 255]($18);
  $IsAsync72 = ___async;
  if ($IsAsync72) {
   HEAP32[$ReallocAsyncCtx20>>2] = 149;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx20>>2] = 149;
  sp = STACKTOP;
  return;
 }
 else if ((label|0) == 23) {
  return;
 }
}
function _title__async_cb25($0) {
 $0 = $0|0;
 var $$lcssa = 0, $$not = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $IsAsync58 = 0, $IsAsync65 = 0, $IsAsync72 = 0, $IsAsync76 = 0, $ReallocAsyncCtx16 = 0, $ReallocAsyncCtx18 = 0, $ReallocAsyncCtx20 = 0, $ReallocAsyncCtx21 = 0, $or$cond = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $19 = HEAP32[383008>>2]|0;
 $20 = ($19|0)==(0);
 if ($20) {
  $21 = HEAP32[(389556)>>2]|0;
  HEAP32[$21>>2] = 1;
  (_emscripten_realloc_async_context(4)|0);
  _Wsubloop(150);
  // unreachable;
 }
 $22 = ($19|0)==(1);
 $23 = HEAP32[(389556)>>2]|0;
 if ($22) {
  $$lcssa = $23;
  HEAP32[$$lcssa>>2] = 2;
  (_emscripten_realloc_async_context(4)|0);
  _Wsubloop(150);
  // unreachable;
 }
 $24 = ((($23)) + 4|0);
 $25 = HEAP8[$24>>0]|0;
 $26 = ($25<<24>>24)==(0);
 if (!($26)) {
  HEAP32[(651780)>>2] = 1;
 }
 while(1) {
  $27 = HEAP32[216>>2]|0;
  $1 = (($27) + -40000)|0;
  HEAP32[216>>2] = $1;
  $28 = 389544;
  $29 = $28;
  $30 = HEAP32[$29>>2]|0;
  $31 = (($28) + 4)|0;
  $32 = $31;
  $33 = HEAP32[$32>>2]|0;
  $34 = (_i64Add(($30|0),($33|0),40000,0)|0);
  $35 = tempRet0;
  $36 = 389544;
  $37 = $36;
  HEAP32[$37>>2] = $34;
  $38 = (($36) + 4)|0;
  $39 = $38;
  HEAP32[$39>>2] = $35;
  $2 = ($1|0)>(39999);
  if ($2) {
   label = 3;
   break;
  }
  __render();
  $40 = HEAP8[128>>0]|0;
  $$not = ($40<<24>>24)==(0);
  $41 = 389544;
  $42 = $41;
  $43 = HEAP32[$42>>2]|0;
  $44 = (($41) + 4)|0;
  $45 = $44;
  $46 = HEAP32[$45>>2]|0;
  $47 = ($43|0)==(0);
  $48 = ($46|0)==(0);
  $49 = $47 & $48;
  $or$cond = $$not & $49;
  if (!($or$cond)) {
   label = 28;
   break;
  }
  $3 = HEAP32[(394012)>>2]|0;
  $4 = ($3|0)==(1);
  if ($4) {
   $5 = HEAP32[383008>>2]|0;
   $6 = ($5|0)==(0);
   if ($6) {
    continue;
   } else {
    label = 8;
    break;
   }
  }
  $9 = HEAP32[(394008)>>2]|0;
  $10 = ($9|0)==(1);
  if ($10) {
   $11 = HEAP32[383008>>2]|0;
   $12 = ($11|0)==(1);
   if ($12) {
    continue;
   } else {
    label = 13;
    break;
   }
  } else {
   $15 = HEAP32[(389640)>>2]|0;
   $16 = ($15|0)==(1);
   if ($16) {
    label = 17;
    break;
   } else {
    continue;
   }
  }
 }
 if ((label|0) == 3) {
  $ReallocAsyncCtx21 = (_emscripten_realloc_async_context(4)|0);
  __update();
  $IsAsync76 = ___async;
  if ($IsAsync76) {
   HEAP32[$ReallocAsyncCtx21>>2] = 144;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx21>>2] = 144;
  sp = STACKTOP;
  return;
 }
 else if ((label|0) == 8) {
  $7 = HEAP32[(651952)>>2]|0;
  $8 = HEAP32[64>>2]|0;
  $ReallocAsyncCtx16 = (_emscripten_realloc_async_context(4)|0);
  FUNCTION_TABLE_vi[$7 & 255]($8);
  $IsAsync58 = ___async;
  if ($IsAsync58) {
   HEAP32[$ReallocAsyncCtx16>>2] = 145;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx16>>2] = 145;
  sp = STACKTOP;
  return;
 }
 else if ((label|0) == 13) {
  $13 = HEAP32[(651952)>>2]|0;
  $14 = HEAP32[72>>2]|0;
  $ReallocAsyncCtx18 = (_emscripten_realloc_async_context(4)|0);
  FUNCTION_TABLE_vi[$13 & 255]($14);
  $IsAsync65 = ___async;
  if ($IsAsync65) {
   HEAP32[$ReallocAsyncCtx18>>2] = 147;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx18>>2] = 147;
  sp = STACKTOP;
  return;
 }
 else if ((label|0) == 17) {
  $17 = HEAP32[(651952)>>2]|0;
  $18 = HEAP32[35184>>2]|0;
  $ReallocAsyncCtx20 = (_emscripten_realloc_async_context(4)|0);
  FUNCTION_TABLE_vi[$17 & 255]($18);
  $IsAsync72 = ___async;
  if ($IsAsync72) {
   HEAP32[$ReallocAsyncCtx20>>2] = 149;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx20>>2] = 149;
  sp = STACKTOP;
  return;
 }
 else if ((label|0) == 28) {
  return;
 }
}
function _title__async_cb26($0) {
 $0 = $0|0;
 var $$not = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $IsAsync58 = 0, $IsAsync65 = 0, $IsAsync72 = 0, $IsAsync76 = 0, $ReallocAsyncCtx16 = 0, $ReallocAsyncCtx18 = 0, $ReallocAsyncCtx20 = 0, $ReallocAsyncCtx21 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 L2: while(1) {
  $3 = HEAP32[(394012)>>2]|0;
  $4 = ($3|0)==(1);
  do {
   if ($4) {
    $5 = HEAP32[383008>>2]|0;
    $6 = ($5|0)==(0);
    if (!($6)) {
     label = 9;
     break L2;
    }
   } else {
    $9 = HEAP32[(394008)>>2]|0;
    $10 = ($9|0)==(1);
    if ($10) {
     $11 = HEAP32[383008>>2]|0;
     $12 = ($11|0)==(1);
     if ($12) {
      break;
     } else {
      label = 14;
      break L2;
     }
    } else {
     $15 = HEAP32[(389640)>>2]|0;
     $16 = ($15|0)==(1);
     if ($16) {
      label = 18;
      break L2;
     } else {
      break;
     }
    }
   }
  } while(0);
  $19 = HEAP32[216>>2]|0;
  $1 = (($19) + -40000)|0;
  HEAP32[216>>2] = $1;
  $20 = 389544;
  $21 = $20;
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + 4)|0;
  $24 = $23;
  $25 = HEAP32[$24>>2]|0;
  $26 = (_i64Add(($22|0),($25|0),40000,0)|0);
  $27 = tempRet0;
  $28 = 389544;
  $29 = $28;
  HEAP32[$29>>2] = $26;
  $30 = (($28) + 4)|0;
  $31 = $30;
  HEAP32[$31>>2] = $27;
  $2 = ($1|0)>(39999);
  if ($2) {
   label = 3;
   break;
  }
  __render();
  $32 = HEAP8[128>>0]|0;
  $$not = ($32<<24>>24)==(0);
  $33 = 389544;
  $34 = $33;
  $35 = HEAP32[$34>>2]|0;
  $36 = (($33) + 4)|0;
  $37 = $36;
  $38 = HEAP32[$37>>2]|0;
  $39 = ($35|0)==(0);
  $40 = ($38|0)==(0);
  $41 = $39 & $40;
  $or$cond = $$not & $41;
  if (!($or$cond)) {
   label = 23;
   break;
  }
 }
 if ((label|0) == 3) {
  $ReallocAsyncCtx21 = (_emscripten_realloc_async_context(4)|0);
  __update();
  $IsAsync76 = ___async;
  if ($IsAsync76) {
   HEAP32[$ReallocAsyncCtx21>>2] = 144;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx21>>2] = 144;
  sp = STACKTOP;
  return;
 }
 else if ((label|0) == 9) {
  $7 = HEAP32[(651952)>>2]|0;
  $8 = HEAP32[64>>2]|0;
  $ReallocAsyncCtx16 = (_emscripten_realloc_async_context(4)|0);
  FUNCTION_TABLE_vi[$7 & 255]($8);
  $IsAsync58 = ___async;
  if ($IsAsync58) {
   HEAP32[$ReallocAsyncCtx16>>2] = 145;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx16>>2] = 145;
  sp = STACKTOP;
  return;
 }
 else if ((label|0) == 14) {
  $13 = HEAP32[(651952)>>2]|0;
  $14 = HEAP32[72>>2]|0;
  $ReallocAsyncCtx18 = (_emscripten_realloc_async_context(4)|0);
  FUNCTION_TABLE_vi[$13 & 255]($14);
  $IsAsync65 = ___async;
  if ($IsAsync65) {
   HEAP32[$ReallocAsyncCtx18>>2] = 147;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx18>>2] = 147;
  sp = STACKTOP;
  return;
 }
 else if ((label|0) == 18) {
  $17 = HEAP32[(651952)>>2]|0;
  $18 = HEAP32[35184>>2]|0;
  $ReallocAsyncCtx20 = (_emscripten_realloc_async_context(4)|0);
  FUNCTION_TABLE_vi[$17 & 255]($18);
  $IsAsync72 = ___async;
  if ($IsAsync72) {
   HEAP32[$ReallocAsyncCtx20>>2] = 149;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx20>>2] = 149;
  sp = STACKTOP;
  return;
 }
 else if ((label|0) == 23) {
  return;
 }
}
function _title__async_cb27($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 // unreachable;
}
function _title__async_cb28($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 // unreachable;
}
function _title__async_cb29($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 // unreachable;
}
function _paddle_ai__async_cb($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0;
 var $28 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $IsAsync89 = 0, $IsAsync93 = 0, $ReallocAsyncCtx23 = 0, $ReallocAsyncCtx24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 12|0);
 $4 = +HEAPF32[$3>>2];
 $5 = $4;
 $6 = ((($2)) + 36|0);
 $7 = +HEAPF32[$6>>2];
 $8 = $7;
 $9 = $8 * 0.5;
 $10 = $5 < $9;
 if ($10) {
  $11 = HEAP32[(651920)>>2]|0;
  $12 = ((($2)) + 8|0);
  $13 = +HEAPF32[$12>>2];
  $14 = $9;
  $ReallocAsyncCtx23 = (_emscripten_realloc_async_context(16)|0);
  FUNCTION_TABLE_vidd[$11 & 255]($2,$13,$14);
  $IsAsync89 = ___async;
  if (!($IsAsync89)) {
   ___async_unwind = 0;
  }
  HEAP32[$ReallocAsyncCtx23>>2] = 85;
  $15 = ((($ReallocAsyncCtx23)) + 4|0);
  HEAP32[$15>>2] = $3;
  $16 = ((($ReallocAsyncCtx23)) + 8|0);
  HEAP32[$16>>2] = $6;
  $17 = ((($ReallocAsyncCtx23)) + 12|0);
  HEAP32[$17>>2] = $2;
  sp = STACKTOP;
  return;
 }
 $18 = $4;
 $19 = HEAP32[(389576)>>2]|0;
 $20 = (+($19|0));
 $21 = $7;
 $22 = $21 * 0.5;
 $23 = $20 - $22;
 $24 = $18 > $23;
 if (!($24)) {
  return;
 }
 $25 = HEAP32[(651920)>>2]|0;
 $26 = ((($2)) + 8|0);
 $27 = +HEAPF32[$26>>2];
 $28 = $23;
 $ReallocAsyncCtx24 = (_emscripten_realloc_async_context(4)|0);
 FUNCTION_TABLE_vidd[$25 & 255]($2,$27,$28);
 $IsAsync93 = ___async;
 if ($IsAsync93) {
  HEAP32[$ReallocAsyncCtx24>>2] = 86;
  sp = STACKTOP;
  return;
 }
 ___async_unwind = 0;
 HEAP32[$ReallocAsyncCtx24>>2] = 86;
 sp = STACKTOP;
 return;
}
function _paddle_ai__async_cb30($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0;
 var $28 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $IsAsync89 = 0, $IsAsync93 = 0, $ReallocAsyncCtx23 = 0, $ReallocAsyncCtx24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 12|0);
 $4 = +HEAPF32[$3>>2];
 $5 = $4;
 $6 = ((($2)) + 36|0);
 $7 = +HEAPF32[$6>>2];
 $8 = $7;
 $9 = $8 * 0.5;
 $10 = $5 < $9;
 if ($10) {
  $11 = HEAP32[(651920)>>2]|0;
  $12 = ((($2)) + 8|0);
  $13 = +HEAPF32[$12>>2];
  $14 = $9;
  $ReallocAsyncCtx23 = (_emscripten_realloc_async_context(16)|0);
  FUNCTION_TABLE_vidd[$11 & 255]($2,$13,$14);
  $IsAsync89 = ___async;
  if (!($IsAsync89)) {
   ___async_unwind = 0;
  }
  HEAP32[$ReallocAsyncCtx23>>2] = 85;
  $15 = ((($ReallocAsyncCtx23)) + 4|0);
  HEAP32[$15>>2] = $3;
  $16 = ((($ReallocAsyncCtx23)) + 8|0);
  HEAP32[$16>>2] = $6;
  $17 = ((($ReallocAsyncCtx23)) + 12|0);
  HEAP32[$17>>2] = $2;
  sp = STACKTOP;
  return;
 }
 $18 = $4;
 $19 = HEAP32[(389576)>>2]|0;
 $20 = (+($19|0));
 $21 = $7;
 $22 = $21 * 0.5;
 $23 = $20 - $22;
 $24 = $18 > $23;
 if (!($24)) {
  return;
 }
 $25 = HEAP32[(651920)>>2]|0;
 $26 = ((($2)) + 8|0);
 $27 = +HEAPF32[$26>>2];
 $28 = $23;
 $ReallocAsyncCtx24 = (_emscripten_realloc_async_context(4)|0);
 FUNCTION_TABLE_vidd[$25 & 255]($2,$27,$28);
 $IsAsync93 = ___async;
 if ($IsAsync93) {
  HEAP32[$ReallocAsyncCtx24>>2] = 86;
  sp = STACKTOP;
  return;
 }
 ___async_unwind = 0;
 HEAP32[$ReallocAsyncCtx24>>2] = 86;
 sp = STACKTOP;
 return;
}
function _paddle_ai__async_cb31($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0;
 var $28 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $IsAsync89 = 0, $IsAsync93 = 0, $ReallocAsyncCtx23 = 0, $ReallocAsyncCtx24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 12|0);
 $4 = +HEAPF32[$3>>2];
 $5 = $4;
 $6 = ((($2)) + 36|0);
 $7 = +HEAPF32[$6>>2];
 $8 = $7;
 $9 = $8 * 0.5;
 $10 = $5 < $9;
 if ($10) {
  $11 = HEAP32[(651920)>>2]|0;
  $12 = ((($2)) + 8|0);
  $13 = +HEAPF32[$12>>2];
  $14 = $9;
  $ReallocAsyncCtx23 = (_emscripten_realloc_async_context(16)|0);
  FUNCTION_TABLE_vidd[$11 & 255]($2,$13,$14);
  $IsAsync89 = ___async;
  if (!($IsAsync89)) {
   ___async_unwind = 0;
  }
  HEAP32[$ReallocAsyncCtx23>>2] = 85;
  $15 = ((($ReallocAsyncCtx23)) + 4|0);
  HEAP32[$15>>2] = $3;
  $16 = ((($ReallocAsyncCtx23)) + 8|0);
  HEAP32[$16>>2] = $6;
  $17 = ((($ReallocAsyncCtx23)) + 12|0);
  HEAP32[$17>>2] = $2;
  sp = STACKTOP;
  return;
 }
 $18 = $4;
 $19 = HEAP32[(389576)>>2]|0;
 $20 = (+($19|0));
 $21 = $7;
 $22 = $21 * 0.5;
 $23 = $20 - $22;
 $24 = $18 > $23;
 if (!($24)) {
  return;
 }
 $25 = HEAP32[(651920)>>2]|0;
 $26 = ((($2)) + 8|0);
 $27 = +HEAPF32[$26>>2];
 $28 = $23;
 $ReallocAsyncCtx24 = (_emscripten_realloc_async_context(4)|0);
 FUNCTION_TABLE_vidd[$25 & 255]($2,$27,$28);
 $IsAsync93 = ___async;
 if ($IsAsync93) {
  HEAP32[$ReallocAsyncCtx24>>2] = 86;
  sp = STACKTOP;
  return;
 }
 ___async_unwind = 0;
 HEAP32[$ReallocAsyncCtx24>>2] = 86;
 sp = STACKTOP;
 return;
}
function _paddle_ai__async_cb32($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0;
 var $28 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $IsAsync89 = 0, $IsAsync93 = 0, $ReallocAsyncCtx23 = 0, $ReallocAsyncCtx24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 12|0);
 $4 = +HEAPF32[$3>>2];
 $5 = $4;
 $6 = ((($2)) + 36|0);
 $7 = +HEAPF32[$6>>2];
 $8 = $7;
 $9 = $8 * 0.5;
 $10 = $5 < $9;
 if ($10) {
  $11 = HEAP32[(651920)>>2]|0;
  $12 = ((($2)) + 8|0);
  $13 = +HEAPF32[$12>>2];
  $14 = $9;
  $ReallocAsyncCtx23 = (_emscripten_realloc_async_context(16)|0);
  FUNCTION_TABLE_vidd[$11 & 255]($2,$13,$14);
  $IsAsync89 = ___async;
  if (!($IsAsync89)) {
   ___async_unwind = 0;
  }
  HEAP32[$ReallocAsyncCtx23>>2] = 85;
  $15 = ((($ReallocAsyncCtx23)) + 4|0);
  HEAP32[$15>>2] = $3;
  $16 = ((($ReallocAsyncCtx23)) + 8|0);
  HEAP32[$16>>2] = $6;
  $17 = ((($ReallocAsyncCtx23)) + 12|0);
  HEAP32[$17>>2] = $2;
  sp = STACKTOP;
  return;
 }
 $18 = $4;
 $19 = HEAP32[(389576)>>2]|0;
 $20 = (+($19|0));
 $21 = $7;
 $22 = $21 * 0.5;
 $23 = $20 - $22;
 $24 = $18 > $23;
 if (!($24)) {
  return;
 }
 $25 = HEAP32[(651920)>>2]|0;
 $26 = ((($2)) + 8|0);
 $27 = +HEAPF32[$26>>2];
 $28 = $23;
 $ReallocAsyncCtx24 = (_emscripten_realloc_async_context(4)|0);
 FUNCTION_TABLE_vidd[$25 & 255]($2,$27,$28);
 $IsAsync93 = ___async;
 if ($IsAsync93) {
  HEAP32[$ReallocAsyncCtx24>>2] = 86;
  sp = STACKTOP;
  return;
 }
 ___async_unwind = 0;
 HEAP32[$ReallocAsyncCtx24>>2] = 86;
 sp = STACKTOP;
 return;
}
function _paddle_ai__async_cb33($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0;
 var $28 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $IsAsync89 = 0, $IsAsync93 = 0, $ReallocAsyncCtx23 = 0, $ReallocAsyncCtx24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 12|0);
 $4 = +HEAPF32[$3>>2];
 $5 = $4;
 $6 = ((($2)) + 36|0);
 $7 = +HEAPF32[$6>>2];
 $8 = $7;
 $9 = $8 * 0.5;
 $10 = $5 < $9;
 if ($10) {
  $11 = HEAP32[(651920)>>2]|0;
  $12 = ((($2)) + 8|0);
  $13 = +HEAPF32[$12>>2];
  $14 = $9;
  $ReallocAsyncCtx23 = (_emscripten_realloc_async_context(16)|0);
  FUNCTION_TABLE_vidd[$11 & 255]($2,$13,$14);
  $IsAsync89 = ___async;
  if (!($IsAsync89)) {
   ___async_unwind = 0;
  }
  HEAP32[$ReallocAsyncCtx23>>2] = 85;
  $15 = ((($ReallocAsyncCtx23)) + 4|0);
  HEAP32[$15>>2] = $3;
  $16 = ((($ReallocAsyncCtx23)) + 8|0);
  HEAP32[$16>>2] = $6;
  $17 = ((($ReallocAsyncCtx23)) + 12|0);
  HEAP32[$17>>2] = $2;
  sp = STACKTOP;
  return;
 }
 $18 = $4;
 $19 = HEAP32[(389576)>>2]|0;
 $20 = (+($19|0));
 $21 = $7;
 $22 = $21 * 0.5;
 $23 = $20 - $22;
 $24 = $18 > $23;
 if (!($24)) {
  return;
 }
 $25 = HEAP32[(651920)>>2]|0;
 $26 = ((($2)) + 8|0);
 $27 = +HEAPF32[$26>>2];
 $28 = $23;
 $ReallocAsyncCtx24 = (_emscripten_realloc_async_context(4)|0);
 FUNCTION_TABLE_vidd[$25 & 255]($2,$27,$28);
 $IsAsync93 = ___async;
 if ($IsAsync93) {
  HEAP32[$ReallocAsyncCtx24>>2] = 86;
  sp = STACKTOP;
  return;
 }
 ___async_unwind = 0;
 HEAP32[$ReallocAsyncCtx24>>2] = 86;
 sp = STACKTOP;
 return;
}
function _paddle_ai__async_cb34($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0;
 var $28 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $IsAsync89 = 0, $IsAsync93 = 0, $ReallocAsyncCtx23 = 0, $ReallocAsyncCtx24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 12|0);
 $4 = +HEAPF32[$3>>2];
 $5 = $4;
 $6 = ((($2)) + 36|0);
 $7 = +HEAPF32[$6>>2];
 $8 = $7;
 $9 = $8 * 0.5;
 $10 = $5 < $9;
 if ($10) {
  $11 = HEAP32[(651920)>>2]|0;
  $12 = ((($2)) + 8|0);
  $13 = +HEAPF32[$12>>2];
  $14 = $9;
  $ReallocAsyncCtx23 = (_emscripten_realloc_async_context(16)|0);
  FUNCTION_TABLE_vidd[$11 & 255]($2,$13,$14);
  $IsAsync89 = ___async;
  if (!($IsAsync89)) {
   ___async_unwind = 0;
  }
  HEAP32[$ReallocAsyncCtx23>>2] = 85;
  $15 = ((($ReallocAsyncCtx23)) + 4|0);
  HEAP32[$15>>2] = $3;
  $16 = ((($ReallocAsyncCtx23)) + 8|0);
  HEAP32[$16>>2] = $6;
  $17 = ((($ReallocAsyncCtx23)) + 12|0);
  HEAP32[$17>>2] = $2;
  sp = STACKTOP;
  return;
 }
 $18 = $4;
 $19 = HEAP32[(389576)>>2]|0;
 $20 = (+($19|0));
 $21 = $7;
 $22 = $21 * 0.5;
 $23 = $20 - $22;
 $24 = $18 > $23;
 if (!($24)) {
  return;
 }
 $25 = HEAP32[(651920)>>2]|0;
 $26 = ((($2)) + 8|0);
 $27 = +HEAPF32[$26>>2];
 $28 = $23;
 $ReallocAsyncCtx24 = (_emscripten_realloc_async_context(4)|0);
 FUNCTION_TABLE_vidd[$25 & 255]($2,$27,$28);
 $IsAsync93 = ___async;
 if ($IsAsync93) {
  HEAP32[$ReallocAsyncCtx24>>2] = 86;
  sp = STACKTOP;
  return;
 }
 ___async_unwind = 0;
 HEAP32[$ReallocAsyncCtx24>>2] = 86;
 sp = STACKTOP;
 return;
}
function _paddle_ai__async_cb35($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0;
 var $28 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $IsAsync89 = 0, $IsAsync93 = 0, $ReallocAsyncCtx23 = 0, $ReallocAsyncCtx24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 12|0);
 $4 = +HEAPF32[$3>>2];
 $5 = $4;
 $6 = ((($2)) + 36|0);
 $7 = +HEAPF32[$6>>2];
 $8 = $7;
 $9 = $8 * 0.5;
 $10 = $5 < $9;
 if ($10) {
  $11 = HEAP32[(651920)>>2]|0;
  $12 = ((($2)) + 8|0);
  $13 = +HEAPF32[$12>>2];
  $14 = $9;
  $ReallocAsyncCtx23 = (_emscripten_realloc_async_context(16)|0);
  FUNCTION_TABLE_vidd[$11 & 255]($2,$13,$14);
  $IsAsync89 = ___async;
  if (!($IsAsync89)) {
   ___async_unwind = 0;
  }
  HEAP32[$ReallocAsyncCtx23>>2] = 85;
  $15 = ((($ReallocAsyncCtx23)) + 4|0);
  HEAP32[$15>>2] = $3;
  $16 = ((($ReallocAsyncCtx23)) + 8|0);
  HEAP32[$16>>2] = $6;
  $17 = ((($ReallocAsyncCtx23)) + 12|0);
  HEAP32[$17>>2] = $2;
  sp = STACKTOP;
  return;
 }
 $18 = $4;
 $19 = HEAP32[(389576)>>2]|0;
 $20 = (+($19|0));
 $21 = $7;
 $22 = $21 * 0.5;
 $23 = $20 - $22;
 $24 = $18 > $23;
 if (!($24)) {
  return;
 }
 $25 = HEAP32[(651920)>>2]|0;
 $26 = ((($2)) + 8|0);
 $27 = +HEAPF32[$26>>2];
 $28 = $23;
 $ReallocAsyncCtx24 = (_emscripten_realloc_async_context(4)|0);
 FUNCTION_TABLE_vidd[$25 & 255]($2,$27,$28);
 $IsAsync93 = ___async;
 if ($IsAsync93) {
  HEAP32[$ReallocAsyncCtx24>>2] = 86;
  sp = STACKTOP;
  return;
 }
 ___async_unwind = 0;
 HEAP32[$ReallocAsyncCtx24>>2] = 86;
 sp = STACKTOP;
 return;
}
function _paddle_ai__async_cb36($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0;
 var $28 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $IsAsync89 = 0, $IsAsync93 = 0, $ReallocAsyncCtx23 = 0, $ReallocAsyncCtx24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 12|0);
 $4 = +HEAPF32[$3>>2];
 $5 = $4;
 $6 = ((($2)) + 36|0);
 $7 = +HEAPF32[$6>>2];
 $8 = $7;
 $9 = $8 * 0.5;
 $10 = $5 < $9;
 if ($10) {
  $11 = HEAP32[(651920)>>2]|0;
  $12 = ((($2)) + 8|0);
  $13 = +HEAPF32[$12>>2];
  $14 = $9;
  $ReallocAsyncCtx23 = (_emscripten_realloc_async_context(16)|0);
  FUNCTION_TABLE_vidd[$11 & 255]($2,$13,$14);
  $IsAsync89 = ___async;
  if (!($IsAsync89)) {
   ___async_unwind = 0;
  }
  HEAP32[$ReallocAsyncCtx23>>2] = 85;
  $15 = ((($ReallocAsyncCtx23)) + 4|0);
  HEAP32[$15>>2] = $3;
  $16 = ((($ReallocAsyncCtx23)) + 8|0);
  HEAP32[$16>>2] = $6;
  $17 = ((($ReallocAsyncCtx23)) + 12|0);
  HEAP32[$17>>2] = $2;
  sp = STACKTOP;
  return;
 }
 $18 = $4;
 $19 = HEAP32[(389576)>>2]|0;
 $20 = (+($19|0));
 $21 = $7;
 $22 = $21 * 0.5;
 $23 = $20 - $22;
 $24 = $18 > $23;
 if (!($24)) {
  return;
 }
 $25 = HEAP32[(651920)>>2]|0;
 $26 = ((($2)) + 8|0);
 $27 = +HEAPF32[$26>>2];
 $28 = $23;
 $ReallocAsyncCtx24 = (_emscripten_realloc_async_context(4)|0);
 FUNCTION_TABLE_vidd[$25 & 255]($2,$27,$28);
 $IsAsync93 = ___async;
 if ($IsAsync93) {
  HEAP32[$ReallocAsyncCtx24>>2] = 86;
  sp = STACKTOP;
  return;
 }
 ___async_unwind = 0;
 HEAP32[$ReallocAsyncCtx24>>2] = 86;
 sp = STACKTOP;
 return;
}
function _paddle_ai__async_cb37($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0;
 var $28 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $IsAsync89 = 0, $IsAsync93 = 0, $ReallocAsyncCtx23 = 0, $ReallocAsyncCtx24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 12|0);
 $4 = +HEAPF32[$3>>2];
 $5 = $4;
 $6 = ((($2)) + 36|0);
 $7 = +HEAPF32[$6>>2];
 $8 = $7;
 $9 = $8 * 0.5;
 $10 = $5 < $9;
 if ($10) {
  $11 = HEAP32[(651920)>>2]|0;
  $12 = ((($2)) + 8|0);
  $13 = +HEAPF32[$12>>2];
  $14 = $9;
  $ReallocAsyncCtx23 = (_emscripten_realloc_async_context(16)|0);
  FUNCTION_TABLE_vidd[$11 & 255]($2,$13,$14);
  $IsAsync89 = ___async;
  if (!($IsAsync89)) {
   ___async_unwind = 0;
  }
  HEAP32[$ReallocAsyncCtx23>>2] = 85;
  $15 = ((($ReallocAsyncCtx23)) + 4|0);
  HEAP32[$15>>2] = $3;
  $16 = ((($ReallocAsyncCtx23)) + 8|0);
  HEAP32[$16>>2] = $6;
  $17 = ((($ReallocAsyncCtx23)) + 12|0);
  HEAP32[$17>>2] = $2;
  sp = STACKTOP;
  return;
 }
 $18 = $4;
 $19 = HEAP32[(389576)>>2]|0;
 $20 = (+($19|0));
 $21 = $7;
 $22 = $21 * 0.5;
 $23 = $20 - $22;
 $24 = $18 > $23;
 if (!($24)) {
  return;
 }
 $25 = HEAP32[(651920)>>2]|0;
 $26 = ((($2)) + 8|0);
 $27 = +HEAPF32[$26>>2];
 $28 = $23;
 $ReallocAsyncCtx24 = (_emscripten_realloc_async_context(4)|0);
 FUNCTION_TABLE_vidd[$25 & 255]($2,$27,$28);
 $IsAsync93 = ___async;
 if ($IsAsync93) {
  HEAP32[$ReallocAsyncCtx24>>2] = 86;
  sp = STACKTOP;
  return;
 }
 ___async_unwind = 0;
 HEAP32[$ReallocAsyncCtx24>>2] = 86;
 sp = STACKTOP;
 return;
}
function _paddle_ai__async_cb38($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0;
 var $28 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $IsAsync89 = 0, $IsAsync93 = 0, $ReallocAsyncCtx23 = 0, $ReallocAsyncCtx24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 12|0);
 $4 = +HEAPF32[$3>>2];
 $5 = $4;
 $6 = ((($2)) + 36|0);
 $7 = +HEAPF32[$6>>2];
 $8 = $7;
 $9 = $8 * 0.5;
 $10 = $5 < $9;
 if ($10) {
  $11 = HEAP32[(651920)>>2]|0;
  $12 = ((($2)) + 8|0);
  $13 = +HEAPF32[$12>>2];
  $14 = $9;
  $ReallocAsyncCtx23 = (_emscripten_realloc_async_context(16)|0);
  FUNCTION_TABLE_vidd[$11 & 255]($2,$13,$14);
  $IsAsync89 = ___async;
  if (!($IsAsync89)) {
   ___async_unwind = 0;
  }
  HEAP32[$ReallocAsyncCtx23>>2] = 85;
  $15 = ((($ReallocAsyncCtx23)) + 4|0);
  HEAP32[$15>>2] = $3;
  $16 = ((($ReallocAsyncCtx23)) + 8|0);
  HEAP32[$16>>2] = $6;
  $17 = ((($ReallocAsyncCtx23)) + 12|0);
  HEAP32[$17>>2] = $2;
  sp = STACKTOP;
  return;
 }
 $18 = $4;
 $19 = HEAP32[(389576)>>2]|0;
 $20 = (+($19|0));
 $21 = $7;
 $22 = $21 * 0.5;
 $23 = $20 - $22;
 $24 = $18 > $23;
 if (!($24)) {
  return;
 }
 $25 = HEAP32[(651920)>>2]|0;
 $26 = ((($2)) + 8|0);
 $27 = +HEAPF32[$26>>2];
 $28 = $23;
 $ReallocAsyncCtx24 = (_emscripten_realloc_async_context(4)|0);
 FUNCTION_TABLE_vidd[$25 & 255]($2,$27,$28);
 $IsAsync93 = ___async;
 if ($IsAsync93) {
  HEAP32[$ReallocAsyncCtx24>>2] = 86;
  sp = STACKTOP;
  return;
 }
 ___async_unwind = 0;
 HEAP32[$ReallocAsyncCtx24>>2] = 86;
 sp = STACKTOP;
 return;
}
function _paddle_ai__async_cb39($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0;
 var $28 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $IsAsync89 = 0, $IsAsync93 = 0, $ReallocAsyncCtx23 = 0, $ReallocAsyncCtx24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 12|0);
 $4 = +HEAPF32[$3>>2];
 $5 = $4;
 $6 = ((($2)) + 36|0);
 $7 = +HEAPF32[$6>>2];
 $8 = $7;
 $9 = $8 * 0.5;
 $10 = $5 < $9;
 if ($10) {
  $11 = HEAP32[(651920)>>2]|0;
  $12 = ((($2)) + 8|0);
  $13 = +HEAPF32[$12>>2];
  $14 = $9;
  $ReallocAsyncCtx23 = (_emscripten_realloc_async_context(16)|0);
  FUNCTION_TABLE_vidd[$11 & 255]($2,$13,$14);
  $IsAsync89 = ___async;
  if (!($IsAsync89)) {
   ___async_unwind = 0;
  }
  HEAP32[$ReallocAsyncCtx23>>2] = 85;
  $15 = ((($ReallocAsyncCtx23)) + 4|0);
  HEAP32[$15>>2] = $3;
  $16 = ((($ReallocAsyncCtx23)) + 8|0);
  HEAP32[$16>>2] = $6;
  $17 = ((($ReallocAsyncCtx23)) + 12|0);
  HEAP32[$17>>2] = $2;
  sp = STACKTOP;
  return;
 }
 $18 = $4;
 $19 = HEAP32[(389576)>>2]|0;
 $20 = (+($19|0));
 $21 = $7;
 $22 = $21 * 0.5;
 $23 = $20 - $22;
 $24 = $18 > $23;
 if (!($24)) {
  return;
 }
 $25 = HEAP32[(651920)>>2]|0;
 $26 = ((($2)) + 8|0);
 $27 = +HEAPF32[$26>>2];
 $28 = $23;
 $ReallocAsyncCtx24 = (_emscripten_realloc_async_context(4)|0);
 FUNCTION_TABLE_vidd[$25 & 255]($2,$27,$28);
 $IsAsync93 = ___async;
 if ($IsAsync93) {
  HEAP32[$ReallocAsyncCtx24>>2] = 86;
  sp = STACKTOP;
  return;
 }
 ___async_unwind = 0;
 HEAP32[$ReallocAsyncCtx24>>2] = 86;
 sp = STACKTOP;
 return;
}
function _paddle_ai__async_cb40($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0;
 var $28 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $IsAsync89 = 0, $IsAsync93 = 0, $ReallocAsyncCtx23 = 0, $ReallocAsyncCtx24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 12|0);
 $4 = +HEAPF32[$3>>2];
 $5 = $4;
 $6 = ((($2)) + 36|0);
 $7 = +HEAPF32[$6>>2];
 $8 = $7;
 $9 = $8 * 0.5;
 $10 = $5 < $9;
 if ($10) {
  $11 = HEAP32[(651920)>>2]|0;
  $12 = ((($2)) + 8|0);
  $13 = +HEAPF32[$12>>2];
  $14 = $9;
  $ReallocAsyncCtx23 = (_emscripten_realloc_async_context(16)|0);
  FUNCTION_TABLE_vidd[$11 & 255]($2,$13,$14);
  $IsAsync89 = ___async;
  if (!($IsAsync89)) {
   ___async_unwind = 0;
  }
  HEAP32[$ReallocAsyncCtx23>>2] = 85;
  $15 = ((($ReallocAsyncCtx23)) + 4|0);
  HEAP32[$15>>2] = $3;
  $16 = ((($ReallocAsyncCtx23)) + 8|0);
  HEAP32[$16>>2] = $6;
  $17 = ((($ReallocAsyncCtx23)) + 12|0);
  HEAP32[$17>>2] = $2;
  sp = STACKTOP;
  return;
 }
 $18 = $4;
 $19 = HEAP32[(389576)>>2]|0;
 $20 = (+($19|0));
 $21 = $7;
 $22 = $21 * 0.5;
 $23 = $20 - $22;
 $24 = $18 > $23;
 if (!($24)) {
  return;
 }
 $25 = HEAP32[(651920)>>2]|0;
 $26 = ((($2)) + 8|0);
 $27 = +HEAPF32[$26>>2];
 $28 = $23;
 $ReallocAsyncCtx24 = (_emscripten_realloc_async_context(4)|0);
 FUNCTION_TABLE_vidd[$25 & 255]($2,$27,$28);
 $IsAsync93 = ___async;
 if ($IsAsync93) {
  HEAP32[$ReallocAsyncCtx24>>2] = 86;
  sp = STACKTOP;
  return;
 }
 ___async_unwind = 0;
 HEAP32[$ReallocAsyncCtx24>>2] = 86;
 sp = STACKTOP;
 return;
}
function _paddle_ai__async_cb41($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0;
 var $28 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $IsAsync89 = 0, $IsAsync93 = 0, $ReallocAsyncCtx23 = 0, $ReallocAsyncCtx24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 12|0);
 $4 = +HEAPF32[$3>>2];
 $5 = $4;
 $6 = ((($2)) + 36|0);
 $7 = +HEAPF32[$6>>2];
 $8 = $7;
 $9 = $8 * 0.5;
 $10 = $5 < $9;
 if ($10) {
  $11 = HEAP32[(651920)>>2]|0;
  $12 = ((($2)) + 8|0);
  $13 = +HEAPF32[$12>>2];
  $14 = $9;
  $ReallocAsyncCtx23 = (_emscripten_realloc_async_context(16)|0);
  FUNCTION_TABLE_vidd[$11 & 255]($2,$13,$14);
  $IsAsync89 = ___async;
  if (!($IsAsync89)) {
   ___async_unwind = 0;
  }
  HEAP32[$ReallocAsyncCtx23>>2] = 85;
  $15 = ((($ReallocAsyncCtx23)) + 4|0);
  HEAP32[$15>>2] = $3;
  $16 = ((($ReallocAsyncCtx23)) + 8|0);
  HEAP32[$16>>2] = $6;
  $17 = ((($ReallocAsyncCtx23)) + 12|0);
  HEAP32[$17>>2] = $2;
  sp = STACKTOP;
  return;
 }
 $18 = $4;
 $19 = HEAP32[(389576)>>2]|0;
 $20 = (+($19|0));
 $21 = $7;
 $22 = $21 * 0.5;
 $23 = $20 - $22;
 $24 = $18 > $23;
 if (!($24)) {
  return;
 }
 $25 = HEAP32[(651920)>>2]|0;
 $26 = ((($2)) + 8|0);
 $27 = +HEAPF32[$26>>2];
 $28 = $23;
 $ReallocAsyncCtx24 = (_emscripten_realloc_async_context(4)|0);
 FUNCTION_TABLE_vidd[$25 & 255]($2,$27,$28);
 $IsAsync93 = ___async;
 if ($IsAsync93) {
  HEAP32[$ReallocAsyncCtx24>>2] = 86;
  sp = STACKTOP;
  return;
 }
 ___async_unwind = 0;
 HEAP32[$ReallocAsyncCtx24>>2] = 86;
 sp = STACKTOP;
 return;
}
function _paddle_ai__async_cb42($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0;
 var $28 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $IsAsync89 = 0, $IsAsync93 = 0, $ReallocAsyncCtx23 = 0, $ReallocAsyncCtx24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 12|0);
 $4 = +HEAPF32[$3>>2];
 $5 = $4;
 $6 = ((($2)) + 36|0);
 $7 = +HEAPF32[$6>>2];
 $8 = $7;
 $9 = $8 * 0.5;
 $10 = $5 < $9;
 if ($10) {
  $11 = HEAP32[(651920)>>2]|0;
  $12 = ((($2)) + 8|0);
  $13 = +HEAPF32[$12>>2];
  $14 = $9;
  $ReallocAsyncCtx23 = (_emscripten_realloc_async_context(16)|0);
  FUNCTION_TABLE_vidd[$11 & 255]($2,$13,$14);
  $IsAsync89 = ___async;
  if (!($IsAsync89)) {
   ___async_unwind = 0;
  }
  HEAP32[$ReallocAsyncCtx23>>2] = 85;
  $15 = ((($ReallocAsyncCtx23)) + 4|0);
  HEAP32[$15>>2] = $3;
  $16 = ((($ReallocAsyncCtx23)) + 8|0);
  HEAP32[$16>>2] = $6;
  $17 = ((($ReallocAsyncCtx23)) + 12|0);
  HEAP32[$17>>2] = $2;
  sp = STACKTOP;
  return;
 }
 $18 = $4;
 $19 = HEAP32[(389576)>>2]|0;
 $20 = (+($19|0));
 $21 = $7;
 $22 = $21 * 0.5;
 $23 = $20 - $22;
 $24 = $18 > $23;
 if (!($24)) {
  return;
 }
 $25 = HEAP32[(651920)>>2]|0;
 $26 = ((($2)) + 8|0);
 $27 = +HEAPF32[$26>>2];
 $28 = $23;
 $ReallocAsyncCtx24 = (_emscripten_realloc_async_context(4)|0);
 FUNCTION_TABLE_vidd[$25 & 255]($2,$27,$28);
 $IsAsync93 = ___async;
 if ($IsAsync93) {
  HEAP32[$ReallocAsyncCtx24>>2] = 86;
  sp = STACKTOP;
  return;
 }
 ___async_unwind = 0;
 HEAP32[$ReallocAsyncCtx24>>2] = 86;
 sp = STACKTOP;
 return;
}
function _paddle_ai__async_cb43($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0;
 var $28 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $IsAsync89 = 0, $IsAsync93 = 0, $ReallocAsyncCtx23 = 0, $ReallocAsyncCtx24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 12|0);
 $4 = +HEAPF32[$3>>2];
 $5 = $4;
 $6 = ((($2)) + 36|0);
 $7 = +HEAPF32[$6>>2];
 $8 = $7;
 $9 = $8 * 0.5;
 $10 = $5 < $9;
 if ($10) {
  $11 = HEAP32[(651920)>>2]|0;
  $12 = ((($2)) + 8|0);
  $13 = +HEAPF32[$12>>2];
  $14 = $9;
  $ReallocAsyncCtx23 = (_emscripten_realloc_async_context(16)|0);
  FUNCTION_TABLE_vidd[$11 & 255]($2,$13,$14);
  $IsAsync89 = ___async;
  if (!($IsAsync89)) {
   ___async_unwind = 0;
  }
  HEAP32[$ReallocAsyncCtx23>>2] = 85;
  $15 = ((($ReallocAsyncCtx23)) + 4|0);
  HEAP32[$15>>2] = $3;
  $16 = ((($ReallocAsyncCtx23)) + 8|0);
  HEAP32[$16>>2] = $6;
  $17 = ((($ReallocAsyncCtx23)) + 12|0);
  HEAP32[$17>>2] = $2;
  sp = STACKTOP;
  return;
 }
 $18 = $4;
 $19 = HEAP32[(389576)>>2]|0;
 $20 = (+($19|0));
 $21 = $7;
 $22 = $21 * 0.5;
 $23 = $20 - $22;
 $24 = $18 > $23;
 if (!($24)) {
  return;
 }
 $25 = HEAP32[(651920)>>2]|0;
 $26 = ((($2)) + 8|0);
 $27 = +HEAPF32[$26>>2];
 $28 = $23;
 $ReallocAsyncCtx24 = (_emscripten_realloc_async_context(4)|0);
 FUNCTION_TABLE_vidd[$25 & 255]($2,$27,$28);
 $IsAsync93 = ___async;
 if ($IsAsync93) {
  HEAP32[$ReallocAsyncCtx24>>2] = 86;
  sp = STACKTOP;
  return;
 }
 ___async_unwind = 0;
 HEAP32[$ReallocAsyncCtx24>>2] = 86;
 sp = STACKTOP;
 return;
}
function _paddle_ai__async_cb44($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0;
 var $28 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $IsAsync89 = 0, $IsAsync93 = 0, $ReallocAsyncCtx23 = 0, $ReallocAsyncCtx24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 12|0);
 $4 = +HEAPF32[$3>>2];
 $5 = $4;
 $6 = ((($2)) + 36|0);
 $7 = +HEAPF32[$6>>2];
 $8 = $7;
 $9 = $8 * 0.5;
 $10 = $5 < $9;
 if ($10) {
  $11 = HEAP32[(651920)>>2]|0;
  $12 = ((($2)) + 8|0);
  $13 = +HEAPF32[$12>>2];
  $14 = $9;
  $ReallocAsyncCtx23 = (_emscripten_realloc_async_context(16)|0);
  FUNCTION_TABLE_vidd[$11 & 255]($2,$13,$14);
  $IsAsync89 = ___async;
  if (!($IsAsync89)) {
   ___async_unwind = 0;
  }
  HEAP32[$ReallocAsyncCtx23>>2] = 85;
  $15 = ((($ReallocAsyncCtx23)) + 4|0);
  HEAP32[$15>>2] = $3;
  $16 = ((($ReallocAsyncCtx23)) + 8|0);
  HEAP32[$16>>2] = $6;
  $17 = ((($ReallocAsyncCtx23)) + 12|0);
  HEAP32[$17>>2] = $2;
  sp = STACKTOP;
  return;
 }
 $18 = $4;
 $19 = HEAP32[(389576)>>2]|0;
 $20 = (+($19|0));
 $21 = $7;
 $22 = $21 * 0.5;
 $23 = $20 - $22;
 $24 = $18 > $23;
 if (!($24)) {
  return;
 }
 $25 = HEAP32[(651920)>>2]|0;
 $26 = ((($2)) + 8|0);
 $27 = +HEAPF32[$26>>2];
 $28 = $23;
 $ReallocAsyncCtx24 = (_emscripten_realloc_async_context(4)|0);
 FUNCTION_TABLE_vidd[$25 & 255]($2,$27,$28);
 $IsAsync93 = ___async;
 if ($IsAsync93) {
  HEAP32[$ReallocAsyncCtx24>>2] = 86;
  sp = STACKTOP;
  return;
 }
 ___async_unwind = 0;
 HEAP32[$ReallocAsyncCtx24>>2] = 86;
 sp = STACKTOP;
 return;
}
function _paddle_ai__async_cb45($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0;
 var $28 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $IsAsync89 = 0, $IsAsync93 = 0, $ReallocAsyncCtx23 = 0, $ReallocAsyncCtx24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 12|0);
 $4 = +HEAPF32[$3>>2];
 $5 = $4;
 $6 = ((($2)) + 36|0);
 $7 = +HEAPF32[$6>>2];
 $8 = $7;
 $9 = $8 * 0.5;
 $10 = $5 < $9;
 if ($10) {
  $11 = HEAP32[(651920)>>2]|0;
  $12 = ((($2)) + 8|0);
  $13 = +HEAPF32[$12>>2];
  $14 = $9;
  $ReallocAsyncCtx23 = (_emscripten_realloc_async_context(16)|0);
  FUNCTION_TABLE_vidd[$11 & 255]($2,$13,$14);
  $IsAsync89 = ___async;
  if (!($IsAsync89)) {
   ___async_unwind = 0;
  }
  HEAP32[$ReallocAsyncCtx23>>2] = 85;
  $15 = ((($ReallocAsyncCtx23)) + 4|0);
  HEAP32[$15>>2] = $3;
  $16 = ((($ReallocAsyncCtx23)) + 8|0);
  HEAP32[$16>>2] = $6;
  $17 = ((($ReallocAsyncCtx23)) + 12|0);
  HEAP32[$17>>2] = $2;
  sp = STACKTOP;
  return;
 }
 $18 = $4;
 $19 = HEAP32[(389576)>>2]|0;
 $20 = (+($19|0));
 $21 = $7;
 $22 = $21 * 0.5;
 $23 = $20 - $22;
 $24 = $18 > $23;
 if (!($24)) {
  return;
 }
 $25 = HEAP32[(651920)>>2]|0;
 $26 = ((($2)) + 8|0);
 $27 = +HEAPF32[$26>>2];
 $28 = $23;
 $ReallocAsyncCtx24 = (_emscripten_realloc_async_context(4)|0);
 FUNCTION_TABLE_vidd[$25 & 255]($2,$27,$28);
 $IsAsync93 = ___async;
 if ($IsAsync93) {
  HEAP32[$ReallocAsyncCtx24>>2] = 86;
  sp = STACKTOP;
  return;
 }
 ___async_unwind = 0;
 HEAP32[$ReallocAsyncCtx24>>2] = 86;
 sp = STACKTOP;
 return;
}
function _paddle_ai__async_cb46($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0;
 var $28 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $IsAsync89 = 0, $IsAsync93 = 0, $ReallocAsyncCtx23 = 0, $ReallocAsyncCtx24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 12|0);
 $4 = +HEAPF32[$3>>2];
 $5 = $4;
 $6 = ((($2)) + 36|0);
 $7 = +HEAPF32[$6>>2];
 $8 = $7;
 $9 = $8 * 0.5;
 $10 = $5 < $9;
 if ($10) {
  $11 = HEAP32[(651920)>>2]|0;
  $12 = ((($2)) + 8|0);
  $13 = +HEAPF32[$12>>2];
  $14 = $9;
  $ReallocAsyncCtx23 = (_emscripten_realloc_async_context(16)|0);
  FUNCTION_TABLE_vidd[$11 & 255]($2,$13,$14);
  $IsAsync89 = ___async;
  if (!($IsAsync89)) {
   ___async_unwind = 0;
  }
  HEAP32[$ReallocAsyncCtx23>>2] = 85;
  $15 = ((($ReallocAsyncCtx23)) + 4|0);
  HEAP32[$15>>2] = $3;
  $16 = ((($ReallocAsyncCtx23)) + 8|0);
  HEAP32[$16>>2] = $6;
  $17 = ((($ReallocAsyncCtx23)) + 12|0);
  HEAP32[$17>>2] = $2;
  sp = STACKTOP;
  return;
 }
 $18 = $4;
 $19 = HEAP32[(389576)>>2]|0;
 $20 = (+($19|0));
 $21 = $7;
 $22 = $21 * 0.5;
 $23 = $20 - $22;
 $24 = $18 > $23;
 if (!($24)) {
  return;
 }
 $25 = HEAP32[(651920)>>2]|0;
 $26 = ((($2)) + 8|0);
 $27 = +HEAPF32[$26>>2];
 $28 = $23;
 $ReallocAsyncCtx24 = (_emscripten_realloc_async_context(4)|0);
 FUNCTION_TABLE_vidd[$25 & 255]($2,$27,$28);
 $IsAsync93 = ___async;
 if ($IsAsync93) {
  HEAP32[$ReallocAsyncCtx24>>2] = 86;
  sp = STACKTOP;
  return;
 }
 ___async_unwind = 0;
 HEAP32[$ReallocAsyncCtx24>>2] = 86;
 sp = STACKTOP;
 return;
}
function _paddle_ai__async_cb47($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0;
 var $28 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $IsAsync89 = 0, $IsAsync93 = 0, $ReallocAsyncCtx23 = 0, $ReallocAsyncCtx24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 12|0);
 $4 = +HEAPF32[$3>>2];
 $5 = $4;
 $6 = ((($2)) + 36|0);
 $7 = +HEAPF32[$6>>2];
 $8 = $7;
 $9 = $8 * 0.5;
 $10 = $5 < $9;
 if ($10) {
  $11 = HEAP32[(651920)>>2]|0;
  $12 = ((($2)) + 8|0);
  $13 = +HEAPF32[$12>>2];
  $14 = $9;
  $ReallocAsyncCtx23 = (_emscripten_realloc_async_context(16)|0);
  FUNCTION_TABLE_vidd[$11 & 255]($2,$13,$14);
  $IsAsync89 = ___async;
  if (!($IsAsync89)) {
   ___async_unwind = 0;
  }
  HEAP32[$ReallocAsyncCtx23>>2] = 85;
  $15 = ((($ReallocAsyncCtx23)) + 4|0);
  HEAP32[$15>>2] = $3;
  $16 = ((($ReallocAsyncCtx23)) + 8|0);
  HEAP32[$16>>2] = $6;
  $17 = ((($ReallocAsyncCtx23)) + 12|0);
  HEAP32[$17>>2] = $2;
  sp = STACKTOP;
  return;
 }
 $18 = $4;
 $19 = HEAP32[(389576)>>2]|0;
 $20 = (+($19|0));
 $21 = $7;
 $22 = $21 * 0.5;
 $23 = $20 - $22;
 $24 = $18 > $23;
 if (!($24)) {
  return;
 }
 $25 = HEAP32[(651920)>>2]|0;
 $26 = ((($2)) + 8|0);
 $27 = +HEAPF32[$26>>2];
 $28 = $23;
 $ReallocAsyncCtx24 = (_emscripten_realloc_async_context(4)|0);
 FUNCTION_TABLE_vidd[$25 & 255]($2,$27,$28);
 $IsAsync93 = ___async;
 if ($IsAsync93) {
  HEAP32[$ReallocAsyncCtx24>>2] = 86;
  sp = STACKTOP;
  return;
 }
 ___async_unwind = 0;
 HEAP32[$ReallocAsyncCtx24>>2] = 86;
 sp = STACKTOP;
 return;
}
function _paddle_ai__async_cb48($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0;
 var $28 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $IsAsync89 = 0, $IsAsync93 = 0, $ReallocAsyncCtx23 = 0, $ReallocAsyncCtx24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 12|0);
 $4 = +HEAPF32[$3>>2];
 $5 = $4;
 $6 = ((($2)) + 36|0);
 $7 = +HEAPF32[$6>>2];
 $8 = $7;
 $9 = $8 * 0.5;
 $10 = $5 < $9;
 if ($10) {
  $11 = HEAP32[(651920)>>2]|0;
  $12 = ((($2)) + 8|0);
  $13 = +HEAPF32[$12>>2];
  $14 = $9;
  $ReallocAsyncCtx23 = (_emscripten_realloc_async_context(16)|0);
  FUNCTION_TABLE_vidd[$11 & 255]($2,$13,$14);
  $IsAsync89 = ___async;
  if (!($IsAsync89)) {
   ___async_unwind = 0;
  }
  HEAP32[$ReallocAsyncCtx23>>2] = 85;
  $15 = ((($ReallocAsyncCtx23)) + 4|0);
  HEAP32[$15>>2] = $3;
  $16 = ((($ReallocAsyncCtx23)) + 8|0);
  HEAP32[$16>>2] = $6;
  $17 = ((($ReallocAsyncCtx23)) + 12|0);
  HEAP32[$17>>2] = $2;
  sp = STACKTOP;
  return;
 }
 $18 = $4;
 $19 = HEAP32[(389576)>>2]|0;
 $20 = (+($19|0));
 $21 = $7;
 $22 = $21 * 0.5;
 $23 = $20 - $22;
 $24 = $18 > $23;
 if (!($24)) {
  return;
 }
 $25 = HEAP32[(651920)>>2]|0;
 $26 = ((($2)) + 8|0);
 $27 = +HEAPF32[$26>>2];
 $28 = $23;
 $ReallocAsyncCtx24 = (_emscripten_realloc_async_context(4)|0);
 FUNCTION_TABLE_vidd[$25 & 255]($2,$27,$28);
 $IsAsync93 = ___async;
 if ($IsAsync93) {
  HEAP32[$ReallocAsyncCtx24>>2] = 86;
  sp = STACKTOP;
  return;
 }
 ___async_unwind = 0;
 HEAP32[$ReallocAsyncCtx24>>2] = 86;
 sp = STACKTOP;
 return;
}
function _paddle_ai__async_cb49($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0;
 var $28 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $IsAsync89 = 0, $IsAsync93 = 0, $ReallocAsyncCtx23 = 0, $ReallocAsyncCtx24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 12|0);
 $4 = +HEAPF32[$3>>2];
 $5 = $4;
 $6 = ((($2)) + 36|0);
 $7 = +HEAPF32[$6>>2];
 $8 = $7;
 $9 = $8 * 0.5;
 $10 = $5 < $9;
 if ($10) {
  $11 = HEAP32[(651920)>>2]|0;
  $12 = ((($2)) + 8|0);
  $13 = +HEAPF32[$12>>2];
  $14 = $9;
  $ReallocAsyncCtx23 = (_emscripten_realloc_async_context(16)|0);
  FUNCTION_TABLE_vidd[$11 & 255]($2,$13,$14);
  $IsAsync89 = ___async;
  if (!($IsAsync89)) {
   ___async_unwind = 0;
  }
  HEAP32[$ReallocAsyncCtx23>>2] = 85;
  $15 = ((($ReallocAsyncCtx23)) + 4|0);
  HEAP32[$15>>2] = $3;
  $16 = ((($ReallocAsyncCtx23)) + 8|0);
  HEAP32[$16>>2] = $6;
  $17 = ((($ReallocAsyncCtx23)) + 12|0);
  HEAP32[$17>>2] = $2;
  sp = STACKTOP;
  return;
 }
 $18 = $4;
 $19 = HEAP32[(389576)>>2]|0;
 $20 = (+($19|0));
 $21 = $7;
 $22 = $21 * 0.5;
 $23 = $20 - $22;
 $24 = $18 > $23;
 if (!($24)) {
  return;
 }
 $25 = HEAP32[(651920)>>2]|0;
 $26 = ((($2)) + 8|0);
 $27 = +HEAPF32[$26>>2];
 $28 = $23;
 $ReallocAsyncCtx24 = (_emscripten_realloc_async_context(4)|0);
 FUNCTION_TABLE_vidd[$25 & 255]($2,$27,$28);
 $IsAsync93 = ___async;
 if ($IsAsync93) {
  HEAP32[$ReallocAsyncCtx24>>2] = 86;
  sp = STACKTOP;
  return;
 }
 ___async_unwind = 0;
 HEAP32[$ReallocAsyncCtx24>>2] = 86;
 sp = STACKTOP;
 return;
}
function _paddle_ai__async_cb50($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0;
 var $28 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $IsAsync89 = 0, $IsAsync93 = 0, $ReallocAsyncCtx23 = 0, $ReallocAsyncCtx24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 12|0);
 $4 = +HEAPF32[$3>>2];
 $5 = $4;
 $6 = ((($2)) + 36|0);
 $7 = +HEAPF32[$6>>2];
 $8 = $7;
 $9 = $8 * 0.5;
 $10 = $5 < $9;
 if ($10) {
  $11 = HEAP32[(651920)>>2]|0;
  $12 = ((($2)) + 8|0);
  $13 = +HEAPF32[$12>>2];
  $14 = $9;
  $ReallocAsyncCtx23 = (_emscripten_realloc_async_context(16)|0);
  FUNCTION_TABLE_vidd[$11 & 255]($2,$13,$14);
  $IsAsync89 = ___async;
  if (!($IsAsync89)) {
   ___async_unwind = 0;
  }
  HEAP32[$ReallocAsyncCtx23>>2] = 85;
  $15 = ((($ReallocAsyncCtx23)) + 4|0);
  HEAP32[$15>>2] = $3;
  $16 = ((($ReallocAsyncCtx23)) + 8|0);
  HEAP32[$16>>2] = $6;
  $17 = ((($ReallocAsyncCtx23)) + 12|0);
  HEAP32[$17>>2] = $2;
  sp = STACKTOP;
  return;
 }
 $18 = $4;
 $19 = HEAP32[(389576)>>2]|0;
 $20 = (+($19|0));
 $21 = $7;
 $22 = $21 * 0.5;
 $23 = $20 - $22;
 $24 = $18 > $23;
 if (!($24)) {
  return;
 }
 $25 = HEAP32[(651920)>>2]|0;
 $26 = ((($2)) + 8|0);
 $27 = +HEAPF32[$26>>2];
 $28 = $23;
 $ReallocAsyncCtx24 = (_emscripten_realloc_async_context(4)|0);
 FUNCTION_TABLE_vidd[$25 & 255]($2,$27,$28);
 $IsAsync93 = ___async;
 if ($IsAsync93) {
  HEAP32[$ReallocAsyncCtx24>>2] = 86;
  sp = STACKTOP;
  return;
 }
 ___async_unwind = 0;
 HEAP32[$ReallocAsyncCtx24>>2] = 86;
 sp = STACKTOP;
 return;
}
function _paddle_ai__async_cb51($0) {
 $0 = $0|0;
 var $$pre48 = 0.0, $$pre49 = 0.0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, $IsAsync93 = 0;
 var $ReallocAsyncCtx24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $$pre48 = +HEAPF32[$2>>2];
 $$pre49 = +HEAPF32[$4>>2];
 $7 = $$pre48;
 $8 = HEAP32[(389576)>>2]|0;
 $9 = (+($8|0));
 $10 = $$pre49;
 $11 = $10 * 0.5;
 $12 = $9 - $11;
 $13 = $7 > $12;
 if (!($13)) {
  return;
 }
 $14 = HEAP32[(651920)>>2]|0;
 $15 = ((($6)) + 8|0);
 $16 = +HEAPF32[$15>>2];
 $17 = $12;
 $ReallocAsyncCtx24 = (_emscripten_realloc_async_context(4)|0);
 FUNCTION_TABLE_vidd[$14 & 255]($6,$16,$17);
 $IsAsync93 = ___async;
 if ($IsAsync93) {
  HEAP32[$ReallocAsyncCtx24>>2] = 86;
  sp = STACKTOP;
  return;
 }
 ___async_unwind = 0;
 HEAP32[$ReallocAsyncCtx24>>2] = 86;
 sp = STACKTOP;
 return;
}
function _paddle_ai__async_cb52($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __awake_the_weaver__async_cb($0) {
 $0 = $0|0;
 var $1 = 0, $AsyncRetVal = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ___async_retval;
 $AsyncRetVal = HEAP32[$1>>2]|0;
 HEAP32[35072>>2] = $AsyncRetVal;
 return;
}
function __awake_the_weaver__async_cb53($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $IsAsync = 0, $ReallocAsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(651940)>>2] = 240;
 HEAP32[(651944)>>2] = 241;
 HEAP32[(651792)>>2] = 0;
 HEAP32[(651948)>>2] = 242;
 HEAP32[(651952)>>2] = 243;
 HEAP32[(651956)>>2] = 244;
 HEAP32[35080>>2] = 0;
 $1 = HEAP32[(651820)>>2]|0;
 $ReallocAsyncCtx = (_emscripten_realloc_async_context(4)|0);
 $2 = (FUNCTION_TABLE_ii[$1 & 255](0)|0);
 $IsAsync = ___async;
 if ($IsAsync) {
  HEAP32[$ReallocAsyncCtx>>2] = 245;
  sp = STACKTOP;
  return;
 }
 $3 = ___async_retval;
 HEAP32[$3>>2] = $2;
 ___async_unwind = 0;
 HEAP32[$ReallocAsyncCtx>>2] = 245;
 sp = STACKTOP;
 return;
}
function __awake_the_weaver__async_cb54($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $IsAsync55 = 0, $ReallocAsyncCtx15 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _memset((32040|0),0,1024)|0;
 HEAP8[35040>>0] = 0;
 _glGenFramebuffers(1,(35048|0));
 $1 = HEAP32[35048>>2]|0;
 _glBindFramebuffer(36160,($1|0));
 _glGenTextures(1,(35056|0));
 $2 = HEAP32[35056>>2]|0;
 _glBindTexture(3553,($2|0));
 $3 = HEAP32[(389572)>>2]|0;
 $4 = HEAP32[(389576)>>2]|0;
 _glTexImage2D(3553,0,6407,($3|0),($4|0),0,6407,5121,(0|0));
 _glTexParameteri(3553,10241,9729);
 _glTexParameteri(3553,10240,9729);
 _glTexParameteri(3553,10242,33071);
 _glTexParameteri(3553,10243,33071);
 $5 = HEAP32[35056>>2]|0;
 _glFramebufferTexture2D(36160,36064,3553,($5|0),0);
 _glGenRenderbuffers(1,(35064|0));
 $6 = HEAP32[35064>>2]|0;
 _glBindRenderbuffer(36161,($6|0));
 $7 = HEAP32[(389572)>>2]|0;
 $8 = HEAP32[(389576)>>2]|0;
 _glRenderbufferStorage(36161,33189,($7|0),($8|0));
 $9 = HEAP32[35064>>2]|0;
 _glFramebufferRenderbuffer(36160,36096,36161,($9|0));
 _glBindFramebuffer(36160,0);
 HEAP32[35032>>2] = 0;
 $ReallocAsyncCtx15 = (_emscripten_realloc_async_context(4)|0);
 $10 = (__compile_shader(387056,1)|0);
 $IsAsync55 = ___async;
 if ($IsAsync55) {
  HEAP32[$ReallocAsyncCtx15>>2] = 234;
  sp = STACKTOP;
  return;
 }
 $11 = ___async_retval;
 HEAP32[$11>>2] = $10;
 ___async_unwind = 0;
 HEAP32[$ReallocAsyncCtx15>>2] = 234;
 sp = STACKTOP;
 return;
}
function __awake_the_weaver__async_cb55($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $IsAsync55 = 0, $IsAsync7 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_atoi(652696)|0);
 $2 = ($1|0)<(10);
 if ($2) {
  $3 = (($1) + -1)|0;
  $ReallocAsyncCtx3 = (_emscripten_realloc_async_context(4)|0);
  __compile_and_insert_new_shader(652704,$3);
  $IsAsync7 = ___async;
  if ($IsAsync7) {
   HEAP32[$ReallocAsyncCtx3>>2] = 233;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx3>>2] = 233;
  sp = STACKTOP;
  return;
 } else {
  _memset((32040|0),0,1024)|0;
  HEAP8[35040>>0] = 0;
  _glGenFramebuffers(1,(35048|0));
  $4 = HEAP32[35048>>2]|0;
  _glBindFramebuffer(36160,($4|0));
  _glGenTextures(1,(35056|0));
  $5 = HEAP32[35056>>2]|0;
  _glBindTexture(3553,($5|0));
  $6 = HEAP32[(389572)>>2]|0;
  $7 = HEAP32[(389576)>>2]|0;
  _glTexImage2D(3553,0,6407,($6|0),($7|0),0,6407,5121,(0|0));
  _glTexParameteri(3553,10241,9729);
  _glTexParameteri(3553,10240,9729);
  _glTexParameteri(3553,10242,33071);
  _glTexParameteri(3553,10243,33071);
  $8 = HEAP32[35056>>2]|0;
  _glFramebufferTexture2D(36160,36064,3553,($8|0),0);
  _glGenRenderbuffers(1,(35064|0));
  $9 = HEAP32[35064>>2]|0;
  _glBindRenderbuffer(36161,($9|0));
  $10 = HEAP32[(389572)>>2]|0;
  $11 = HEAP32[(389576)>>2]|0;
  _glRenderbufferStorage(36161,33189,($10|0),($11|0));
  $12 = HEAP32[35064>>2]|0;
  _glFramebufferRenderbuffer(36160,36096,36161,($12|0));
  _glBindFramebuffer(36160,0);
  HEAP32[35032>>2] = 0;
  $ReallocAsyncCtx15 = (_emscripten_realloc_async_context(4)|0);
  $13 = (__compile_shader(387056,1)|0);
  $IsAsync55 = ___async;
  if ($IsAsync55) {
   HEAP32[$ReallocAsyncCtx15>>2] = 234;
   sp = STACKTOP;
   return;
  }
  $14 = ___async_retval;
  HEAP32[$14>>2] = $13;
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx15>>2] = 234;
  sp = STACKTOP;
  return;
 }
}
function __awake_the_weaver__async_cb56($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $IsAsync11 = 0, $IsAsync55 = 0, $IsAsync7 = 0;
 var $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_atoi(652672)|0);
 $2 = ($1|0)<(10);
 if ($2) {
  $3 = (($1) + -1)|0;
  $ReallocAsyncCtx4 = (_emscripten_realloc_async_context(4)|0);
  __compile_and_insert_new_shader(652680,$3);
  $IsAsync11 = ___async;
  if ($IsAsync11) {
   HEAP32[$ReallocAsyncCtx4>>2] = 232;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx4>>2] = 232;
  sp = STACKTOP;
  return;
 }
 $4 = (_atoi(652696)|0);
 $5 = ($4|0)<(10);
 if ($5) {
  $6 = (($4) + -1)|0;
  $ReallocAsyncCtx3 = (_emscripten_realloc_async_context(4)|0);
  __compile_and_insert_new_shader(652704,$6);
  $IsAsync7 = ___async;
  if ($IsAsync7) {
   HEAP32[$ReallocAsyncCtx3>>2] = 233;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx3>>2] = 233;
  sp = STACKTOP;
  return;
 } else {
  _memset((32040|0),0,1024)|0;
  HEAP8[35040>>0] = 0;
  _glGenFramebuffers(1,(35048|0));
  $7 = HEAP32[35048>>2]|0;
  _glBindFramebuffer(36160,($7|0));
  _glGenTextures(1,(35056|0));
  $8 = HEAP32[35056>>2]|0;
  _glBindTexture(3553,($8|0));
  $9 = HEAP32[(389572)>>2]|0;
  $10 = HEAP32[(389576)>>2]|0;
  _glTexImage2D(3553,0,6407,($9|0),($10|0),0,6407,5121,(0|0));
  _glTexParameteri(3553,10241,9729);
  _glTexParameteri(3553,10240,9729);
  _glTexParameteri(3553,10242,33071);
  _glTexParameteri(3553,10243,33071);
  $11 = HEAP32[35056>>2]|0;
  _glFramebufferTexture2D(36160,36064,3553,($11|0),0);
  _glGenRenderbuffers(1,(35064|0));
  $12 = HEAP32[35064>>2]|0;
  _glBindRenderbuffer(36161,($12|0));
  $13 = HEAP32[(389572)>>2]|0;
  $14 = HEAP32[(389576)>>2]|0;
  _glRenderbufferStorage(36161,33189,($13|0),($14|0));
  $15 = HEAP32[35064>>2]|0;
  _glFramebufferRenderbuffer(36160,36096,36161,($15|0));
  _glBindFramebuffer(36160,0);
  HEAP32[35032>>2] = 0;
  $ReallocAsyncCtx15 = (_emscripten_realloc_async_context(4)|0);
  $16 = (__compile_shader(387056,1)|0);
  $IsAsync55 = ___async;
  if ($IsAsync55) {
   HEAP32[$ReallocAsyncCtx15>>2] = 234;
   sp = STACKTOP;
   return;
  }
  $17 = ___async_retval;
  HEAP32[$17>>2] = $16;
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx15>>2] = 234;
  sp = STACKTOP;
  return;
 }
}
function __awake_the_weaver__async_cb57($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $IsAsync11 = 0, $IsAsync15 = 0, $IsAsync55 = 0, $IsAsync7 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_atoi(652648)|0);
 $2 = ($1|0)<(10);
 if ($2) {
  $3 = (($1) + -1)|0;
  $ReallocAsyncCtx5 = (_emscripten_realloc_async_context(4)|0);
  __compile_and_insert_new_shader(652656,$3);
  $IsAsync15 = ___async;
  if ($IsAsync15) {
   HEAP32[$ReallocAsyncCtx5>>2] = 231;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx5>>2] = 231;
  sp = STACKTOP;
  return;
 }
 $4 = (_atoi(652672)|0);
 $5 = ($4|0)<(10);
 if ($5) {
  $6 = (($4) + -1)|0;
  $ReallocAsyncCtx4 = (_emscripten_realloc_async_context(4)|0);
  __compile_and_insert_new_shader(652680,$6);
  $IsAsync11 = ___async;
  if ($IsAsync11) {
   HEAP32[$ReallocAsyncCtx4>>2] = 232;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx4>>2] = 232;
  sp = STACKTOP;
  return;
 }
 $7 = (_atoi(652696)|0);
 $8 = ($7|0)<(10);
 if ($8) {
  $9 = (($7) + -1)|0;
  $ReallocAsyncCtx3 = (_emscripten_realloc_async_context(4)|0);
  __compile_and_insert_new_shader(652704,$9);
  $IsAsync7 = ___async;
  if ($IsAsync7) {
   HEAP32[$ReallocAsyncCtx3>>2] = 233;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx3>>2] = 233;
  sp = STACKTOP;
  return;
 } else {
  _memset((32040|0),0,1024)|0;
  HEAP8[35040>>0] = 0;
  _glGenFramebuffers(1,(35048|0));
  $10 = HEAP32[35048>>2]|0;
  _glBindFramebuffer(36160,($10|0));
  _glGenTextures(1,(35056|0));
  $11 = HEAP32[35056>>2]|0;
  _glBindTexture(3553,($11|0));
  $12 = HEAP32[(389572)>>2]|0;
  $13 = HEAP32[(389576)>>2]|0;
  _glTexImage2D(3553,0,6407,($12|0),($13|0),0,6407,5121,(0|0));
  _glTexParameteri(3553,10241,9729);
  _glTexParameteri(3553,10240,9729);
  _glTexParameteri(3553,10242,33071);
  _glTexParameteri(3553,10243,33071);
  $14 = HEAP32[35056>>2]|0;
  _glFramebufferTexture2D(36160,36064,3553,($14|0),0);
  _glGenRenderbuffers(1,(35064|0));
  $15 = HEAP32[35064>>2]|0;
  _glBindRenderbuffer(36161,($15|0));
  $16 = HEAP32[(389572)>>2]|0;
  $17 = HEAP32[(389576)>>2]|0;
  _glRenderbufferStorage(36161,33189,($16|0),($17|0));
  $18 = HEAP32[35064>>2]|0;
  _glFramebufferRenderbuffer(36160,36096,36161,($18|0));
  _glBindFramebuffer(36160,0);
  HEAP32[35032>>2] = 0;
  $ReallocAsyncCtx15 = (_emscripten_realloc_async_context(4)|0);
  $19 = (__compile_shader(387056,1)|0);
  $IsAsync55 = ___async;
  if ($IsAsync55) {
   HEAP32[$ReallocAsyncCtx15>>2] = 234;
   sp = STACKTOP;
   return;
  }
  $20 = ___async_retval;
  HEAP32[$20>>2] = $19;
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx15>>2] = 234;
  sp = STACKTOP;
  return;
 }
}
function __awake_the_weaver__async_cb58($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $IsAsync11 = 0, $IsAsync15 = 0, $IsAsync19 = 0, $IsAsync55 = 0, $IsAsync7 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_atoi(652608)|0);
 $2 = ($1|0)<(10);
 if ($2) {
  $3 = (($1) + -1)|0;
  $ReallocAsyncCtx6 = (_emscripten_realloc_async_context(4)|0);
  __compile_and_insert_new_shader(652624,$3);
  $IsAsync19 = ___async;
  if ($IsAsync19) {
   HEAP32[$ReallocAsyncCtx6>>2] = 230;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx6>>2] = 230;
  sp = STACKTOP;
  return;
 }
 $4 = (_atoi(652648)|0);
 $5 = ($4|0)<(10);
 if ($5) {
  $6 = (($4) + -1)|0;
  $ReallocAsyncCtx5 = (_emscripten_realloc_async_context(4)|0);
  __compile_and_insert_new_shader(652656,$6);
  $IsAsync15 = ___async;
  if ($IsAsync15) {
   HEAP32[$ReallocAsyncCtx5>>2] = 231;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx5>>2] = 231;
  sp = STACKTOP;
  return;
 }
 $7 = (_atoi(652672)|0);
 $8 = ($7|0)<(10);
 if ($8) {
  $9 = (($7) + -1)|0;
  $ReallocAsyncCtx4 = (_emscripten_realloc_async_context(4)|0);
  __compile_and_insert_new_shader(652680,$9);
  $IsAsync11 = ___async;
  if ($IsAsync11) {
   HEAP32[$ReallocAsyncCtx4>>2] = 232;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx4>>2] = 232;
  sp = STACKTOP;
  return;
 }
 $10 = (_atoi(652696)|0);
 $11 = ($10|0)<(10);
 if ($11) {
  $12 = (($10) + -1)|0;
  $ReallocAsyncCtx3 = (_emscripten_realloc_async_context(4)|0);
  __compile_and_insert_new_shader(652704,$12);
  $IsAsync7 = ___async;
  if ($IsAsync7) {
   HEAP32[$ReallocAsyncCtx3>>2] = 233;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx3>>2] = 233;
  sp = STACKTOP;
  return;
 } else {
  _memset((32040|0),0,1024)|0;
  HEAP8[35040>>0] = 0;
  _glGenFramebuffers(1,(35048|0));
  $13 = HEAP32[35048>>2]|0;
  _glBindFramebuffer(36160,($13|0));
  _glGenTextures(1,(35056|0));
  $14 = HEAP32[35056>>2]|0;
  _glBindTexture(3553,($14|0));
  $15 = HEAP32[(389572)>>2]|0;
  $16 = HEAP32[(389576)>>2]|0;
  _glTexImage2D(3553,0,6407,($15|0),($16|0),0,6407,5121,(0|0));
  _glTexParameteri(3553,10241,9729);
  _glTexParameteri(3553,10240,9729);
  _glTexParameteri(3553,10242,33071);
  _glTexParameteri(3553,10243,33071);
  $17 = HEAP32[35056>>2]|0;
  _glFramebufferTexture2D(36160,36064,3553,($17|0),0);
  _glGenRenderbuffers(1,(35064|0));
  $18 = HEAP32[35064>>2]|0;
  _glBindRenderbuffer(36161,($18|0));
  $19 = HEAP32[(389572)>>2]|0;
  $20 = HEAP32[(389576)>>2]|0;
  _glRenderbufferStorage(36161,33189,($19|0),($20|0));
  $21 = HEAP32[35064>>2]|0;
  _glFramebufferRenderbuffer(36160,36096,36161,($21|0));
  _glBindFramebuffer(36160,0);
  HEAP32[35032>>2] = 0;
  $ReallocAsyncCtx15 = (_emscripten_realloc_async_context(4)|0);
  $22 = (__compile_shader(387056,1)|0);
  $IsAsync55 = ___async;
  if ($IsAsync55) {
   HEAP32[$ReallocAsyncCtx15>>2] = 234;
   sp = STACKTOP;
   return;
  }
  $23 = ___async_retval;
  HEAP32[$23>>2] = $22;
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx15>>2] = 234;
  sp = STACKTOP;
  return;
 }
}
function __awake_the_weaver__async_cb59($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $IsAsync11 = 0, $IsAsync15 = 0, $IsAsync19 = 0, $IsAsync23 = 0, $IsAsync55 = 0, $IsAsync7 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_atoi(652568)|0);
 $2 = ($1|0)<(10);
 if ($2) {
  $3 = (($1) + -1)|0;
  $ReallocAsyncCtx7 = (_emscripten_realloc_async_context(4)|0);
  __compile_and_insert_new_shader(652584,$3);
  $IsAsync23 = ___async;
  if ($IsAsync23) {
   HEAP32[$ReallocAsyncCtx7>>2] = 229;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx7>>2] = 229;
  sp = STACKTOP;
  return;
 }
 $4 = (_atoi(652608)|0);
 $5 = ($4|0)<(10);
 if ($5) {
  $6 = (($4) + -1)|0;
  $ReallocAsyncCtx6 = (_emscripten_realloc_async_context(4)|0);
  __compile_and_insert_new_shader(652624,$6);
  $IsAsync19 = ___async;
  if ($IsAsync19) {
   HEAP32[$ReallocAsyncCtx6>>2] = 230;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx6>>2] = 230;
  sp = STACKTOP;
  return;
 }
 $7 = (_atoi(652648)|0);
 $8 = ($7|0)<(10);
 if ($8) {
  $9 = (($7) + -1)|0;
  $ReallocAsyncCtx5 = (_emscripten_realloc_async_context(4)|0);
  __compile_and_insert_new_shader(652656,$9);
  $IsAsync15 = ___async;
  if ($IsAsync15) {
   HEAP32[$ReallocAsyncCtx5>>2] = 231;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx5>>2] = 231;
  sp = STACKTOP;
  return;
 }
 $10 = (_atoi(652672)|0);
 $11 = ($10|0)<(10);
 if ($11) {
  $12 = (($10) + -1)|0;
  $ReallocAsyncCtx4 = (_emscripten_realloc_async_context(4)|0);
  __compile_and_insert_new_shader(652680,$12);
  $IsAsync11 = ___async;
  if ($IsAsync11) {
   HEAP32[$ReallocAsyncCtx4>>2] = 232;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx4>>2] = 232;
  sp = STACKTOP;
  return;
 }
 $13 = (_atoi(652696)|0);
 $14 = ($13|0)<(10);
 if ($14) {
  $15 = (($13) + -1)|0;
  $ReallocAsyncCtx3 = (_emscripten_realloc_async_context(4)|0);
  __compile_and_insert_new_shader(652704,$15);
  $IsAsync7 = ___async;
  if ($IsAsync7) {
   HEAP32[$ReallocAsyncCtx3>>2] = 233;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx3>>2] = 233;
  sp = STACKTOP;
  return;
 } else {
  _memset((32040|0),0,1024)|0;
  HEAP8[35040>>0] = 0;
  _glGenFramebuffers(1,(35048|0));
  $16 = HEAP32[35048>>2]|0;
  _glBindFramebuffer(36160,($16|0));
  _glGenTextures(1,(35056|0));
  $17 = HEAP32[35056>>2]|0;
  _glBindTexture(3553,($17|0));
  $18 = HEAP32[(389572)>>2]|0;
  $19 = HEAP32[(389576)>>2]|0;
  _glTexImage2D(3553,0,6407,($18|0),($19|0),0,6407,5121,(0|0));
  _glTexParameteri(3553,10241,9729);
  _glTexParameteri(3553,10240,9729);
  _glTexParameteri(3553,10242,33071);
  _glTexParameteri(3553,10243,33071);
  $20 = HEAP32[35056>>2]|0;
  _glFramebufferTexture2D(36160,36064,3553,($20|0),0);
  _glGenRenderbuffers(1,(35064|0));
  $21 = HEAP32[35064>>2]|0;
  _glBindRenderbuffer(36161,($21|0));
  $22 = HEAP32[(389572)>>2]|0;
  $23 = HEAP32[(389576)>>2]|0;
  _glRenderbufferStorage(36161,33189,($22|0),($23|0));
  $24 = HEAP32[35064>>2]|0;
  _glFramebufferRenderbuffer(36160,36096,36161,($24|0));
  _glBindFramebuffer(36160,0);
  HEAP32[35032>>2] = 0;
  $ReallocAsyncCtx15 = (_emscripten_realloc_async_context(4)|0);
  $25 = (__compile_shader(387056,1)|0);
  $IsAsync55 = ___async;
  if ($IsAsync55) {
   HEAP32[$ReallocAsyncCtx15>>2] = 234;
   sp = STACKTOP;
   return;
  }
  $26 = ___async_retval;
  HEAP32[$26>>2] = $25;
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx15>>2] = 234;
  sp = STACKTOP;
  return;
 }
}
function __awake_the_weaver__async_cb60($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $IsAsync11 = 0, $IsAsync15 = 0, $IsAsync19 = 0, $IsAsync23 = 0, $IsAsync27 = 0, $IsAsync55 = 0, $IsAsync7 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0;
 var $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_atoi(652528)|0);
 $2 = ($1|0)<(10);
 if ($2) {
  $3 = (($1) + -1)|0;
  $ReallocAsyncCtx8 = (_emscripten_realloc_async_context(4)|0);
  __compile_and_insert_new_shader(652544,$3);
  $IsAsync27 = ___async;
  if ($IsAsync27) {
   HEAP32[$ReallocAsyncCtx8>>2] = 228;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx8>>2] = 228;
  sp = STACKTOP;
  return;
 }
 $4 = (_atoi(652568)|0);
 $5 = ($4|0)<(10);
 if ($5) {
  $6 = (($4) + -1)|0;
  $ReallocAsyncCtx7 = (_emscripten_realloc_async_context(4)|0);
  __compile_and_insert_new_shader(652584,$6);
  $IsAsync23 = ___async;
  if ($IsAsync23) {
   HEAP32[$ReallocAsyncCtx7>>2] = 229;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx7>>2] = 229;
  sp = STACKTOP;
  return;
 }
 $7 = (_atoi(652608)|0);
 $8 = ($7|0)<(10);
 if ($8) {
  $9 = (($7) + -1)|0;
  $ReallocAsyncCtx6 = (_emscripten_realloc_async_context(4)|0);
  __compile_and_insert_new_shader(652624,$9);
  $IsAsync19 = ___async;
  if ($IsAsync19) {
   HEAP32[$ReallocAsyncCtx6>>2] = 230;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx6>>2] = 230;
  sp = STACKTOP;
  return;
 }
 $10 = (_atoi(652648)|0);
 $11 = ($10|0)<(10);
 if ($11) {
  $12 = (($10) + -1)|0;
  $ReallocAsyncCtx5 = (_emscripten_realloc_async_context(4)|0);
  __compile_and_insert_new_shader(652656,$12);
  $IsAsync15 = ___async;
  if ($IsAsync15) {
   HEAP32[$ReallocAsyncCtx5>>2] = 231;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx5>>2] = 231;
  sp = STACKTOP;
  return;
 }
 $13 = (_atoi(652672)|0);
 $14 = ($13|0)<(10);
 if ($14) {
  $15 = (($13) + -1)|0;
  $ReallocAsyncCtx4 = (_emscripten_realloc_async_context(4)|0);
  __compile_and_insert_new_shader(652680,$15);
  $IsAsync11 = ___async;
  if ($IsAsync11) {
   HEAP32[$ReallocAsyncCtx4>>2] = 232;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx4>>2] = 232;
  sp = STACKTOP;
  return;
 }
 $16 = (_atoi(652696)|0);
 $17 = ($16|0)<(10);
 if ($17) {
  $18 = (($16) + -1)|0;
  $ReallocAsyncCtx3 = (_emscripten_realloc_async_context(4)|0);
  __compile_and_insert_new_shader(652704,$18);
  $IsAsync7 = ___async;
  if ($IsAsync7) {
   HEAP32[$ReallocAsyncCtx3>>2] = 233;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx3>>2] = 233;
  sp = STACKTOP;
  return;
 } else {
  _memset((32040|0),0,1024)|0;
  HEAP8[35040>>0] = 0;
  _glGenFramebuffers(1,(35048|0));
  $19 = HEAP32[35048>>2]|0;
  _glBindFramebuffer(36160,($19|0));
  _glGenTextures(1,(35056|0));
  $20 = HEAP32[35056>>2]|0;
  _glBindTexture(3553,($20|0));
  $21 = HEAP32[(389572)>>2]|0;
  $22 = HEAP32[(389576)>>2]|0;
  _glTexImage2D(3553,0,6407,($21|0),($22|0),0,6407,5121,(0|0));
  _glTexParameteri(3553,10241,9729);
  _glTexParameteri(3553,10240,9729);
  _glTexParameteri(3553,10242,33071);
  _glTexParameteri(3553,10243,33071);
  $23 = HEAP32[35056>>2]|0;
  _glFramebufferTexture2D(36160,36064,3553,($23|0),0);
  _glGenRenderbuffers(1,(35064|0));
  $24 = HEAP32[35064>>2]|0;
  _glBindRenderbuffer(36161,($24|0));
  $25 = HEAP32[(389572)>>2]|0;
  $26 = HEAP32[(389576)>>2]|0;
  _glRenderbufferStorage(36161,33189,($25|0),($26|0));
  $27 = HEAP32[35064>>2]|0;
  _glFramebufferRenderbuffer(36160,36096,36161,($27|0));
  _glBindFramebuffer(36160,0);
  HEAP32[35032>>2] = 0;
  $ReallocAsyncCtx15 = (_emscripten_realloc_async_context(4)|0);
  $28 = (__compile_shader(387056,1)|0);
  $IsAsync55 = ___async;
  if ($IsAsync55) {
   HEAP32[$ReallocAsyncCtx15>>2] = 234;
   sp = STACKTOP;
   return;
  }
  $29 = ___async_retval;
  HEAP32[$29>>2] = $28;
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx15>>2] = 234;
  sp = STACKTOP;
  return;
 }
}
function __awake_the_weaver__async_cb61($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $IsAsync11 = 0, $IsAsync15 = 0, $IsAsync19 = 0, $IsAsync23 = 0, $IsAsync27 = 0, $IsAsync31 = 0, $IsAsync55 = 0, $IsAsync7 = 0;
 var $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_atoi(652504)|0);
 $2 = ($1|0)<(10);
 if ($2) {
  $3 = (($1) + -1)|0;
  $ReallocAsyncCtx9 = (_emscripten_realloc_async_context(4)|0);
  __compile_and_insert_new_shader(652512,$3);
  $IsAsync31 = ___async;
  if ($IsAsync31) {
   HEAP32[$ReallocAsyncCtx9>>2] = 227;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx9>>2] = 227;
  sp = STACKTOP;
  return;
 }
 $4 = (_atoi(652528)|0);
 $5 = ($4|0)<(10);
 if ($5) {
  $6 = (($4) + -1)|0;
  $ReallocAsyncCtx8 = (_emscripten_realloc_async_context(4)|0);
  __compile_and_insert_new_shader(652544,$6);
  $IsAsync27 = ___async;
  if ($IsAsync27) {
   HEAP32[$ReallocAsyncCtx8>>2] = 228;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx8>>2] = 228;
  sp = STACKTOP;
  return;
 }
 $7 = (_atoi(652568)|0);
 $8 = ($7|0)<(10);
 if ($8) {
  $9 = (($7) + -1)|0;
  $ReallocAsyncCtx7 = (_emscripten_realloc_async_context(4)|0);
  __compile_and_insert_new_shader(652584,$9);
  $IsAsync23 = ___async;
  if ($IsAsync23) {
   HEAP32[$ReallocAsyncCtx7>>2] = 229;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx7>>2] = 229;
  sp = STACKTOP;
  return;
 }
 $10 = (_atoi(652608)|0);
 $11 = ($10|0)<(10);
 if ($11) {
  $12 = (($10) + -1)|0;
  $ReallocAsyncCtx6 = (_emscripten_realloc_async_context(4)|0);
  __compile_and_insert_new_shader(652624,$12);
  $IsAsync19 = ___async;
  if ($IsAsync19) {
   HEAP32[$ReallocAsyncCtx6>>2] = 230;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx6>>2] = 230;
  sp = STACKTOP;
  return;
 }
 $13 = (_atoi(652648)|0);
 $14 = ($13|0)<(10);
 if ($14) {
  $15 = (($13) + -1)|0;
  $ReallocAsyncCtx5 = (_emscripten_realloc_async_context(4)|0);
  __compile_and_insert_new_shader(652656,$15);
  $IsAsync15 = ___async;
  if ($IsAsync15) {
   HEAP32[$ReallocAsyncCtx5>>2] = 231;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx5>>2] = 231;
  sp = STACKTOP;
  return;
 }
 $16 = (_atoi(652672)|0);
 $17 = ($16|0)<(10);
 if ($17) {
  $18 = (($16) + -1)|0;
  $ReallocAsyncCtx4 = (_emscripten_realloc_async_context(4)|0);
  __compile_and_insert_new_shader(652680,$18);
  $IsAsync11 = ___async;
  if ($IsAsync11) {
   HEAP32[$ReallocAsyncCtx4>>2] = 232;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx4>>2] = 232;
  sp = STACKTOP;
  return;
 }
 $19 = (_atoi(652696)|0);
 $20 = ($19|0)<(10);
 if ($20) {
  $21 = (($19) + -1)|0;
  $ReallocAsyncCtx3 = (_emscripten_realloc_async_context(4)|0);
  __compile_and_insert_new_shader(652704,$21);
  $IsAsync7 = ___async;
  if ($IsAsync7) {
   HEAP32[$ReallocAsyncCtx3>>2] = 233;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx3>>2] = 233;
  sp = STACKTOP;
  return;
 } else {
  _memset((32040|0),0,1024)|0;
  HEAP8[35040>>0] = 0;
  _glGenFramebuffers(1,(35048|0));
  $22 = HEAP32[35048>>2]|0;
  _glBindFramebuffer(36160,($22|0));
  _glGenTextures(1,(35056|0));
  $23 = HEAP32[35056>>2]|0;
  _glBindTexture(3553,($23|0));
  $24 = HEAP32[(389572)>>2]|0;
  $25 = HEAP32[(389576)>>2]|0;
  _glTexImage2D(3553,0,6407,($24|0),($25|0),0,6407,5121,(0|0));
  _glTexParameteri(3553,10241,9729);
  _glTexParameteri(3553,10240,9729);
  _glTexParameteri(3553,10242,33071);
  _glTexParameteri(3553,10243,33071);
  $26 = HEAP32[35056>>2]|0;
  _glFramebufferTexture2D(36160,36064,3553,($26|0),0);
  _glGenRenderbuffers(1,(35064|0));
  $27 = HEAP32[35064>>2]|0;
  _glBindRenderbuffer(36161,($27|0));
  $28 = HEAP32[(389572)>>2]|0;
  $29 = HEAP32[(389576)>>2]|0;
  _glRenderbufferStorage(36161,33189,($28|0),($29|0));
  $30 = HEAP32[35064>>2]|0;
  _glFramebufferRenderbuffer(36160,36096,36161,($30|0));
  _glBindFramebuffer(36160,0);
  HEAP32[35032>>2] = 0;
  $ReallocAsyncCtx15 = (_emscripten_realloc_async_context(4)|0);
  $31 = (__compile_shader(387056,1)|0);
  $IsAsync55 = ___async;
  if ($IsAsync55) {
   HEAP32[$ReallocAsyncCtx15>>2] = 234;
   sp = STACKTOP;
   return;
  }
  $32 = ___async_retval;
  HEAP32[$32>>2] = $31;
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx15>>2] = 234;
  sp = STACKTOP;
  return;
 }
}
function __awake_the_weaver__async_cb62($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $IsAsync11 = 0, $IsAsync15 = 0, $IsAsync19 = 0, $IsAsync23 = 0, $IsAsync27 = 0;
 var $IsAsync31 = 0, $IsAsync35 = 0, $IsAsync55 = 0, $IsAsync7 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_atoi(652480)|0);
 $2 = ($1|0)<(10);
 if ($2) {
  $3 = (($1) + -1)|0;
  $ReallocAsyncCtx10 = (_emscripten_realloc_async_context(4)|0);
  __compile_and_insert_new_shader(652488,$3);
  $IsAsync35 = ___async;
  if ($IsAsync35) {
   HEAP32[$ReallocAsyncCtx10>>2] = 226;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx10>>2] = 226;
  sp = STACKTOP;
  return;
 }
 $4 = (_atoi(652504)|0);
 $5 = ($4|0)<(10);
 if ($5) {
  $6 = (($4) + -1)|0;
  $ReallocAsyncCtx9 = (_emscripten_realloc_async_context(4)|0);
  __compile_and_insert_new_shader(652512,$6);
  $IsAsync31 = ___async;
  if ($IsAsync31) {
   HEAP32[$ReallocAsyncCtx9>>2] = 227;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx9>>2] = 227;
  sp = STACKTOP;
  return;
 }
 $7 = (_atoi(652528)|0);
 $8 = ($7|0)<(10);
 if ($8) {
  $9 = (($7) + -1)|0;
  $ReallocAsyncCtx8 = (_emscripten_realloc_async_context(4)|0);
  __compile_and_insert_new_shader(652544,$9);
  $IsAsync27 = ___async;
  if ($IsAsync27) {
   HEAP32[$ReallocAsyncCtx8>>2] = 228;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx8>>2] = 228;
  sp = STACKTOP;
  return;
 }
 $10 = (_atoi(652568)|0);
 $11 = ($10|0)<(10);
 if ($11) {
  $12 = (($10) + -1)|0;
  $ReallocAsyncCtx7 = (_emscripten_realloc_async_context(4)|0);
  __compile_and_insert_new_shader(652584,$12);
  $IsAsync23 = ___async;
  if ($IsAsync23) {
   HEAP32[$ReallocAsyncCtx7>>2] = 229;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx7>>2] = 229;
  sp = STACKTOP;
  return;
 }
 $13 = (_atoi(652608)|0);
 $14 = ($13|0)<(10);
 if ($14) {
  $15 = (($13) + -1)|0;
  $ReallocAsyncCtx6 = (_emscripten_realloc_async_context(4)|0);
  __compile_and_insert_new_shader(652624,$15);
  $IsAsync19 = ___async;
  if ($IsAsync19) {
   HEAP32[$ReallocAsyncCtx6>>2] = 230;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx6>>2] = 230;
  sp = STACKTOP;
  return;
 }
 $16 = (_atoi(652648)|0);
 $17 = ($16|0)<(10);
 if ($17) {
  $18 = (($16) + -1)|0;
  $ReallocAsyncCtx5 = (_emscripten_realloc_async_context(4)|0);
  __compile_and_insert_new_shader(652656,$18);
  $IsAsync15 = ___async;
  if ($IsAsync15) {
   HEAP32[$ReallocAsyncCtx5>>2] = 231;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx5>>2] = 231;
  sp = STACKTOP;
  return;
 }
 $19 = (_atoi(652672)|0);
 $20 = ($19|0)<(10);
 if ($20) {
  $21 = (($19) + -1)|0;
  $ReallocAsyncCtx4 = (_emscripten_realloc_async_context(4)|0);
  __compile_and_insert_new_shader(652680,$21);
  $IsAsync11 = ___async;
  if ($IsAsync11) {
   HEAP32[$ReallocAsyncCtx4>>2] = 232;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx4>>2] = 232;
  sp = STACKTOP;
  return;
 }
 $22 = (_atoi(652696)|0);
 $23 = ($22|0)<(10);
 if ($23) {
  $24 = (($22) + -1)|0;
  $ReallocAsyncCtx3 = (_emscripten_realloc_async_context(4)|0);
  __compile_and_insert_new_shader(652704,$24);
  $IsAsync7 = ___async;
  if ($IsAsync7) {
   HEAP32[$ReallocAsyncCtx3>>2] = 233;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx3>>2] = 233;
  sp = STACKTOP;
  return;
 } else {
  _memset((32040|0),0,1024)|0;
  HEAP8[35040>>0] = 0;
  _glGenFramebuffers(1,(35048|0));
  $25 = HEAP32[35048>>2]|0;
  _glBindFramebuffer(36160,($25|0));
  _glGenTextures(1,(35056|0));
  $26 = HEAP32[35056>>2]|0;
  _glBindTexture(3553,($26|0));
  $27 = HEAP32[(389572)>>2]|0;
  $28 = HEAP32[(389576)>>2]|0;
  _glTexImage2D(3553,0,6407,($27|0),($28|0),0,6407,5121,(0|0));
  _glTexParameteri(3553,10241,9729);
  _glTexParameteri(3553,10240,9729);
  _glTexParameteri(3553,10242,33071);
  _glTexParameteri(3553,10243,33071);
  $29 = HEAP32[35056>>2]|0;
  _glFramebufferTexture2D(36160,36064,3553,($29|0),0);
  _glGenRenderbuffers(1,(35064|0));
  $30 = HEAP32[35064>>2]|0;
  _glBindRenderbuffer(36161,($30|0));
  $31 = HEAP32[(389572)>>2]|0;
  $32 = HEAP32[(389576)>>2]|0;
  _glRenderbufferStorage(36161,33189,($31|0),($32|0));
  $33 = HEAP32[35064>>2]|0;
  _glFramebufferRenderbuffer(36160,36096,36161,($33|0));
  _glBindFramebuffer(36160,0);
  HEAP32[35032>>2] = 0;
  $ReallocAsyncCtx15 = (_emscripten_realloc_async_context(4)|0);
  $34 = (__compile_shader(387056,1)|0);
  $IsAsync55 = ___async;
  if ($IsAsync55) {
   HEAP32[$ReallocAsyncCtx15>>2] = 234;
   sp = STACKTOP;
   return;
  }
  $35 = ___async_retval;
  HEAP32[$35>>2] = $34;
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx15>>2] = 234;
  sp = STACKTOP;
  return;
 }
}
function __awake_the_weaver__async_cb63($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, $IsAsync4 = 0, $ReallocAsyncCtx2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ___async_retval;
 $AsyncRetVal = HEAP32[$1>>2]|0;
 HEAP32[(34796)>>2] = $AsyncRetVal;
 $2 = (_glGetUniformLocation(($AsyncRetVal|0),(652720|0))|0);
 HEAP32[(34944)>>2] = $2;
 $3 = HEAP32[(34796)>>2]|0;
 $4 = (_glGetUniformLocation(($3|0),(652368|0))|0);
 HEAP32[(34928)>>2] = $4;
 $5 = HEAP32[(34796)>>2]|0;
 $6 = (_glGetUniformLocation(($5|0),(652384|0))|0);
 HEAP32[(34932)>>2] = $6;
 $7 = HEAP32[(34796)>>2]|0;
 $8 = (_glGetUniformLocation(($7|0),(652408|0))|0);
 HEAP32[(34936)>>2] = $8;
 $9 = HEAP32[(34796)>>2]|0;
 $10 = (_glGetUniformLocation(($9|0),(652432|0))|0);
 HEAP32[(34940)>>2] = $10;
 $11 = HEAP32[(34796)>>2]|0;
 $12 = (_glGetUniformLocation(($11|0),(652424|0))|0);
 HEAP32[(34948)>>2] = $12;
 $13 = HEAP32[(34796)>>2]|0;
 $14 = (_glGetAttribLocation(($13|0),(652440|0))|0);
 HEAP32[(34952)>>2] = $14;
 HEAPF32[(35008)>>2] = 2.0;
 HEAPF32[(34988)>>2] = 2.0;
 HEAPF32[34968>>2] = 2.0;
 HEAPF32[(35028)>>2] = 1.0;
 ;HEAP32[(34972)>>2]=0|0;HEAP32[(34972)+4>>2]=0|0;HEAP32[(34972)+8>>2]=0|0;HEAP32[(34972)+12>>2]=0|0;
 ;HEAP32[(34992)>>2]=0|0;HEAP32[(34992)+4>>2]=0|0;HEAP32[(34992)+8>>2]=0|0;HEAP32[(34992)+12>>2]=0|0;
 ;HEAP32[(35012)>>2]=0|0;HEAP32[(35012)+4>>2]=0|0;HEAP32[(35012)+8>>2]=0|0;HEAP32[(35012)+12>>2]=0|0;
 HEAP32[(651932)>>2] = 237;
 HEAP32[(651936)>>2] = 238;
 HEAP32[(651780)>>2] = 0;
 $ReallocAsyncCtx2 = (_emscripten_realloc_async_context(4)|0);
 __initialize_sound();
 $IsAsync4 = ___async;
 if ($IsAsync4) {
  HEAP32[$ReallocAsyncCtx2>>2] = 239;
  sp = STACKTOP;
  return;
 }
 ___async_unwind = 0;
 HEAP32[$ReallocAsyncCtx2>>2] = 239;
 sp = STACKTOP;
 return;
}
function __awake_the_weaver__async_cb64($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, $IsAsync11 = 0, $IsAsync15 = 0, $IsAsync19 = 0, $IsAsync23 = 0, $IsAsync27 = 0, $IsAsync31 = 0, $IsAsync35 = 0, $IsAsync39 = 0, $IsAsync55 = 0;
 var $IsAsync7 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ___async_retval;
 $AsyncRetVal = HEAP32[$1>>2]|0;
 HEAP32[(33068)>>2] = $AsyncRetVal;
 $2 = (_glGetUniformLocation(($AsyncRetVal|0),(652368|0))|0);
 HEAP32[(33200)>>2] = $2;
 $3 = HEAP32[(33068)>>2]|0;
 $4 = (_glGetUniformLocation(($3|0),(652384|0))|0);
 HEAP32[(33204)>>2] = $4;
 $5 = HEAP32[(33068)>>2]|0;
 $6 = (_glGetUniformLocation(($5|0),(652408|0))|0);
 HEAP32[(33208)>>2] = $6;
 $7 = HEAP32[(33068)>>2]|0;
 $8 = (_glGetUniformLocation(($7|0),(652424|0))|0);
 HEAP32[(33220)>>2] = $8;
 $9 = HEAP32[(33068)>>2]|0;
 $10 = (_glGetUniformLocation(($9|0),(652432|0))|0);
 HEAP32[(33212)>>2] = $10;
 $11 = HEAP32[(33068)>>2]|0;
 $12 = (_glGetAttribLocation(($11|0),(652440|0))|0);
 HEAP32[(33224)>>2] = $12;
 $13 = (_atoi(652456)|0);
 $14 = ($13|0)<(10);
 if ($14) {
  $15 = (($13) + -1)|0;
  $ReallocAsyncCtx11 = (_emscripten_realloc_async_context(4)|0);
  __compile_and_insert_new_shader(652464,$15);
  $IsAsync39 = ___async;
  if ($IsAsync39) {
   HEAP32[$ReallocAsyncCtx11>>2] = 225;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx11>>2] = 225;
  sp = STACKTOP;
  return;
 }
 $16 = (_atoi(652480)|0);
 $17 = ($16|0)<(10);
 if ($17) {
  $18 = (($16) + -1)|0;
  $ReallocAsyncCtx10 = (_emscripten_realloc_async_context(4)|0);
  __compile_and_insert_new_shader(652488,$18);
  $IsAsync35 = ___async;
  if ($IsAsync35) {
   HEAP32[$ReallocAsyncCtx10>>2] = 226;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx10>>2] = 226;
  sp = STACKTOP;
  return;
 }
 $19 = (_atoi(652504)|0);
 $20 = ($19|0)<(10);
 if ($20) {
  $21 = (($19) + -1)|0;
  $ReallocAsyncCtx9 = (_emscripten_realloc_async_context(4)|0);
  __compile_and_insert_new_shader(652512,$21);
  $IsAsync31 = ___async;
  if ($IsAsync31) {
   HEAP32[$ReallocAsyncCtx9>>2] = 227;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx9>>2] = 227;
  sp = STACKTOP;
  return;
 }
 $22 = (_atoi(652528)|0);
 $23 = ($22|0)<(10);
 if ($23) {
  $24 = (($22) + -1)|0;
  $ReallocAsyncCtx8 = (_emscripten_realloc_async_context(4)|0);
  __compile_and_insert_new_shader(652544,$24);
  $IsAsync27 = ___async;
  if ($IsAsync27) {
   HEAP32[$ReallocAsyncCtx8>>2] = 228;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx8>>2] = 228;
  sp = STACKTOP;
  return;
 }
 $25 = (_atoi(652568)|0);
 $26 = ($25|0)<(10);
 if ($26) {
  $27 = (($25) + -1)|0;
  $ReallocAsyncCtx7 = (_emscripten_realloc_async_context(4)|0);
  __compile_and_insert_new_shader(652584,$27);
  $IsAsync23 = ___async;
  if ($IsAsync23) {
   HEAP32[$ReallocAsyncCtx7>>2] = 229;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx7>>2] = 229;
  sp = STACKTOP;
  return;
 }
 $28 = (_atoi(652608)|0);
 $29 = ($28|0)<(10);
 if ($29) {
  $30 = (($28) + -1)|0;
  $ReallocAsyncCtx6 = (_emscripten_realloc_async_context(4)|0);
  __compile_and_insert_new_shader(652624,$30);
  $IsAsync19 = ___async;
  if ($IsAsync19) {
   HEAP32[$ReallocAsyncCtx6>>2] = 230;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx6>>2] = 230;
  sp = STACKTOP;
  return;
 }
 $31 = (_atoi(652648)|0);
 $32 = ($31|0)<(10);
 if ($32) {
  $33 = (($31) + -1)|0;
  $ReallocAsyncCtx5 = (_emscripten_realloc_async_context(4)|0);
  __compile_and_insert_new_shader(652656,$33);
  $IsAsync15 = ___async;
  if ($IsAsync15) {
   HEAP32[$ReallocAsyncCtx5>>2] = 231;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx5>>2] = 231;
  sp = STACKTOP;
  return;
 }
 $34 = (_atoi(652672)|0);
 $35 = ($34|0)<(10);
 if ($35) {
  $36 = (($34) + -1)|0;
  $ReallocAsyncCtx4 = (_emscripten_realloc_async_context(4)|0);
  __compile_and_insert_new_shader(652680,$36);
  $IsAsync11 = ___async;
  if ($IsAsync11) {
   HEAP32[$ReallocAsyncCtx4>>2] = 232;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx4>>2] = 232;
  sp = STACKTOP;
  return;
 }
 $37 = (_atoi(652696)|0);
 $38 = ($37|0)<(10);
 if ($38) {
  $39 = (($37) + -1)|0;
  $ReallocAsyncCtx3 = (_emscripten_realloc_async_context(4)|0);
  __compile_and_insert_new_shader(652704,$39);
  $IsAsync7 = ___async;
  if ($IsAsync7) {
   HEAP32[$ReallocAsyncCtx3>>2] = 233;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx3>>2] = 233;
  sp = STACKTOP;
  return;
 } else {
  _memset((32040|0),0,1024)|0;
  HEAP8[35040>>0] = 0;
  _glGenFramebuffers(1,(35048|0));
  $40 = HEAP32[35048>>2]|0;
  _glBindFramebuffer(36160,($40|0));
  _glGenTextures(1,(35056|0));
  $41 = HEAP32[35056>>2]|0;
  _glBindTexture(3553,($41|0));
  $42 = HEAP32[(389572)>>2]|0;
  $43 = HEAP32[(389576)>>2]|0;
  _glTexImage2D(3553,0,6407,($42|0),($43|0),0,6407,5121,(0|0));
  _glTexParameteri(3553,10241,9729);
  _glTexParameteri(3553,10240,9729);
  _glTexParameteri(3553,10242,33071);
  _glTexParameteri(3553,10243,33071);
  $44 = HEAP32[35056>>2]|0;
  _glFramebufferTexture2D(36160,36064,3553,($44|0),0);
  _glGenRenderbuffers(1,(35064|0));
  $45 = HEAP32[35064>>2]|0;
  _glBindRenderbuffer(36161,($45|0));
  $46 = HEAP32[(389572)>>2]|0;
  $47 = HEAP32[(389576)>>2]|0;
  _glRenderbufferStorage(36161,33189,($46|0),($47|0));
  $48 = HEAP32[35064>>2]|0;
  _glFramebufferRenderbuffer(36160,36096,36161,($48|0));
  _glBindFramebuffer(36160,0);
  HEAP32[35032>>2] = 0;
  $ReallocAsyncCtx15 = (_emscripten_realloc_async_context(4)|0);
  $49 = (__compile_shader(387056,1)|0);
  $IsAsync55 = ___async;
  if ($IsAsync55) {
   HEAP32[$ReallocAsyncCtx15>>2] = 234;
   sp = STACKTOP;
   return;
  }
  $50 = ___async_retval;
  HEAP32[$50>>2] = $49;
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx15>>2] = 234;
  sp = STACKTOP;
  return;
 }
}
function __awake_the_weaver__async_cb65($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $AsyncRetVal = 0, $IsAsync43 = 0, $ReallocAsyncCtx12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ___async_retval;
 $AsyncRetVal = HEAP32[$3>>2]|0;
 $ReallocAsyncCtx12 = (_emscripten_realloc_async_context(4)|0);
 $4 = (__link_and_clean_shaders($2,$AsyncRetVal)|0);
 $IsAsync43 = ___async;
 if ($IsAsync43) {
  HEAP32[$ReallocAsyncCtx12>>2] = 236;
  sp = STACKTOP;
  return;
 }
 $5 = ___async_retval;
 HEAP32[$5>>2] = $4;
 ___async_unwind = 0;
 HEAP32[$ReallocAsyncCtx12>>2] = 236;
 sp = STACKTOP;
 return;
}
function __awake_the_weaver__async_cb66($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $AsyncRetVal = 0, $IsAsync51 = 0, $ReallocAsyncCtx14 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ___async_retval;
 $AsyncRetVal = HEAP32[$1>>2]|0;
 $ReallocAsyncCtx14 = (_emscripten_realloc_async_context(8)|0);
 $2 = (__compile_shader(387472,0)|0);
 $IsAsync51 = ___async;
 if (!($IsAsync51)) {
  $4 = ___async_retval;
  HEAP32[$4>>2] = $2;
  ___async_unwind = 0;
 }
 HEAP32[$ReallocAsyncCtx14>>2] = 235;
 $3 = ((($ReallocAsyncCtx14)) + 4|0);
 HEAP32[$3>>2] = $AsyncRetVal;
 sp = STACKTOP;
 return;
}
function __awake_the_weaver__async_cb67($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $AsyncRetVal = 0, $IsAsync47 = 0, $ReallocAsyncCtx13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ___async_retval;
 $AsyncRetVal = HEAP32[$3>>2]|0;
 $ReallocAsyncCtx13 = (_emscripten_realloc_async_context(4)|0);
 $4 = (__link_and_clean_shaders($2,$AsyncRetVal)|0);
 $IsAsync47 = ___async;
 if ($IsAsync47) {
  HEAP32[$ReallocAsyncCtx13>>2] = 224;
  sp = STACKTOP;
  return;
 }
 $5 = ___async_retval;
 HEAP32[$5>>2] = $4;
 ___async_unwind = 0;
 HEAP32[$ReallocAsyncCtx13>>2] = 224;
 sp = STACKTOP;
 return;
}
function __awake_the_weaver__async_cb68($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $AsyncRetVal = 0, $IsAsync59 = 0, $ReallocAsyncCtx16 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ___async_retval;
 $AsyncRetVal = HEAP32[$1>>2]|0;
 $ReallocAsyncCtx16 = (_emscripten_realloc_async_context(8)|0);
 $2 = (__compile_shader(386600,0)|0);
 $IsAsync59 = ___async;
 if (!($IsAsync59)) {
  $4 = ___async_retval;
  HEAP32[$4>>2] = $2;
  ___async_unwind = 0;
 }
 HEAP32[$ReallocAsyncCtx16>>2] = 223;
 $3 = ((($ReallocAsyncCtx16)) + 4|0);
 HEAP32[$3>>2] = $AsyncRetVal;
 sp = STACKTOP;
 return;
}
function __awake_the_weaver__async_cb69($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $IsAsync63 = 0, $ReallocAsyncCtx17 = 0, $exitcond = 0;
 var $exitcond18 = 0, $i2$011 = 0, $i3$09 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 HEAP32[(651820)>>2] = 201;
 HEAP32[(651824)>>2] = 202;
 HEAP32[(651828)>>2] = 203;
 HEAP8[136>>0] = 1;
 HEAP8[128>>0] = 0;
 HEAP32[144>>2] = 0;
 HEAP32[(389552)>>2] = 40000;
 HEAP32[216>>2] = 0;
 __initialize_numeric_functions();
 HEAP32[(651832)>>2] = 204;
 __initialize_canvas();
 HEAP32[(651836)>>2] = 205;
 HEAP32[(651840)>>2] = 206;
 _glClearColor(0.0,0.0,0.0,1.0);
 _glEnable(2929);
 _glEnable(2884);
 _glEnable(3042);
 _glBlendFunc(770,771);
 _memset(((389588)|0),0,262140)|0;
 dest=652008; stop=dest+80|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 dest=652088; stop=dest+80|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[(651844)>>2] = 207;
 HEAP32[(651848)>>2] = 208;
 HEAP32[(651852)>>2] = 209;
 ;HEAP32[(651728)>>2]=0|0;HEAP32[(651728)+4>>2]=0|0;HEAP32[(651728)+8>>2]=0|0;HEAP32[(651728)+12>>2]=0|0;HEAP32[(651728)+16>>2]=0|0;
 ;HEAP32[651984>>2]=0|0;HEAP32[651984+4>>2]=0|0;HEAP32[651984+8>>2]=0|0;HEAP32[651984+12>>2]=0|0;HEAP32[651984+16>>2]=0|0;
 ;HEAP32[651960>>2]=0|0;HEAP32[651960+4>>2]=0|0;HEAP32[651960+8>>2]=0|0;HEAP32[651960+12>>2]=0|0;HEAP32[651960+16>>2]=0|0;
 (_SDL_GetMouseState(((651756)|0),((651760)|0))|0);
 $1 = HEAP32[(389576)>>2]|0;
 $2 = (($1) + -1)|0;
 $3 = HEAP32[(651760)>>2]|0;
 $4 = (($2) - ($3))|0;
 HEAP32[(651760)>>2] = $4;
 ;HEAP32[(651764)>>2]=0|0;HEAP32[(651764)+4>>2]=0|0;HEAP32[(651764)+8>>2]=0|0;HEAP32[(651764)+12>>2]=0|0;
 HEAP32[652312>>2] = 0;
 HEAP32[652320>>2] = 0;
 HEAP8[224>>0] = 1;
 HEAP32[(651856)>>2] = 210;
 HEAP32[(651860)>>2] = 211;
 $i2$011 = 0;
 while(1) {
  $5 = (((232 + ($i2$011<<7)|0)) + 12|0);
  HEAP32[$5>>2] = 0;
  $6 = (((232 + ($i2$011<<7)|0)) + 28|0);
  HEAP32[$6>>2] = 0;
  $7 = (((232 + ($i2$011<<7)|0)) + 44|0);
  HEAP32[$7>>2] = 0;
  $8 = (((232 + ($i2$011<<7)|0)) + 60|0);
  HEAP32[$8>>2] = 0;
  $9 = (((232 + ($i2$011<<7)|0)) + 76|0);
  HEAP32[$9>>2] = 0;
  $10 = (((232 + ($i2$011<<7)|0)) + 92|0);
  HEAP32[$10>>2] = 0;
  $11 = (((232 + ($i2$011<<7)|0)) + 108|0);
  HEAP32[$11>>2] = 0;
  $12 = (((232 + ($i2$011<<7)|0)) + 124|0);
  HEAP32[$12>>2] = 0;
  $13 = (($i2$011) + 1)|0;
  $exitcond18 = ($13|0)==(16);
  if ($exitcond18) {
   break;
  } else {
   $i2$011 = $13;
  }
 }
 HEAP32[(651872)>>2] = 212;
 HEAP32[(651876)>>2] = 213;
 HEAP32[(651880)>>2] = 214;
 HEAP32[(651884)>>2] = 215;
 $i3$09 = 0;
 while(1) {
  $14 = (2280 + (($i3$09*1856)|0)|0);
  HEAP32[$14>>2] = 0;
  $15 = (((2280 + (($i3$09*1856)|0)|0)) + 116|0);
  HEAP32[$15>>2] = 0;
  $16 = (((2280 + (($i3$09*1856)|0)|0)) + 232|0);
  HEAP32[$16>>2] = 0;
  $17 = (((2280 + (($i3$09*1856)|0)|0)) + 348|0);
  HEAP32[$17>>2] = 0;
  $18 = (((2280 + (($i3$09*1856)|0)|0)) + 464|0);
  HEAP32[$18>>2] = 0;
  $19 = (((2280 + (($i3$09*1856)|0)|0)) + 580|0);
  HEAP32[$19>>2] = 0;
  $20 = (((2280 + (($i3$09*1856)|0)|0)) + 696|0);
  HEAP32[$20>>2] = 0;
  $21 = (((2280 + (($i3$09*1856)|0)|0)) + 812|0);
  HEAP32[$21>>2] = 0;
  $22 = (((2280 + (($i3$09*1856)|0)|0)) + 928|0);
  HEAP32[$22>>2] = 0;
  $23 = (((2280 + (($i3$09*1856)|0)|0)) + 1044|0);
  HEAP32[$23>>2] = 0;
  $24 = (((2280 + (($i3$09*1856)|0)|0)) + 1160|0);
  HEAP32[$24>>2] = 0;
  $25 = (((2280 + (($i3$09*1856)|0)|0)) + 1276|0);
  HEAP32[$25>>2] = 0;
  $26 = (((2280 + (($i3$09*1856)|0)|0)) + 1392|0);
  HEAP32[$26>>2] = 0;
  $27 = (((2280 + (($i3$09*1856)|0)|0)) + 1508|0);
  HEAP32[$27>>2] = 0;
  $28 = (((2280 + (($i3$09*1856)|0)|0)) + 1624|0);
  HEAP32[$28>>2] = 0;
  $29 = (((2280 + (($i3$09*1856)|0)|0)) + 1740|0);
  HEAP32[$29>>2] = 0;
  $30 = (($i3$09) + 1)|0;
  $exitcond = ($30|0)==(16);
  if ($exitcond) {
   break;
  } else {
   $i3$09 = $30;
  }
 }
 HEAP8[652328>>0] = 1;
 $31 = (_glewInit()|0);
 $32 = ($31|0)==(0);
 if (!($32)) {
  $33 = HEAP32[_stderr>>2]|0;
  (_fwrite((652336|0),26,1,($33|0))|0);
  _exit(1);
  // unreachable;
 }
 (_glGetError()|0);
 HEAPF32[31976>>2] = -0.5;
 HEAPF32[(31980)>>2] = -0.5;
 HEAPF32[(31984)>>2] = 0.0;
 HEAPF32[(31988)>>2] = 0.5;
 HEAPF32[(31992)>>2] = -0.5;
 HEAPF32[(31996)>>2] = 0.0;
 HEAPF32[(32000)>>2] = 0.5;
 HEAPF32[(32004)>>2] = 0.5;
 HEAPF32[(32008)>>2] = 0.0;
 HEAPF32[(32012)>>2] = -0.5;
 HEAPF32[(32016)>>2] = 0.5;
 HEAPF32[(32020)>>2] = 0.0;
 _glGenBuffers(1,(32024|0));
 _glGenVertexArrays(1,(32032|0));
 $34 = HEAP32[32032>>2]|0;
 _glBindVertexArray(($34|0));
 $35 = HEAP32[32024>>2]|0;
 _glBindBuffer(34962,($35|0));
 _glBufferData(34962,48,(31976|0),35044);
 _glVertexAttribPointer(0,3,5126,0,0,(0|0));
 _glEnableVertexAttribArray(0);
 _glBindVertexArray(0);
 HEAP32[(651908)>>2] = 216;
 HEAP32[(651912)>>2] = 217;
 HEAP32[(651916)>>2] = 218;
 HEAP32[(651920)>>2] = 219;
 HEAP32[(651924)>>2] = 220;
 HEAP32[(651928)>>2] = 221;
 $ReallocAsyncCtx17 = (_emscripten_realloc_async_context(4)|0);
 $36 = (__compile_shader(386056,1)|0);
 $IsAsync63 = ___async;
 if ($IsAsync63) {
  HEAP32[$ReallocAsyncCtx17>>2] = 222;
  sp = STACKTOP;
  return;
 }
 $37 = ___async_retval;
 HEAP32[$37>>2] = $36;
 ___async_unwind = 0;
 HEAP32[$ReallocAsyncCtx17>>2] = 222;
 sp = STACKTOP;
 return;
}
function _reset_ball__async_cb($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _get_danger__async_cb($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $AsyncRetVal = 0, $IsAsync3 = 0, $ReallocAsyncCtx2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ___async_retval;
 $AsyncRetVal = HEAP32[$1>>2]|0;
 $2 = $AsyncRetVal & 7;
 $3 = (($2) + 1)|0;
 $4 = HEAP32[(651952)>>2]|0;
 $5 = HEAP32[35144>>2]|0;
 $ReallocAsyncCtx2 = (_emscripten_realloc_async_context(8)|0);
 FUNCTION_TABLE_vi[$4 & 255]($5);
 $IsAsync3 = ___async;
 if (!($IsAsync3)) {
  ___async_unwind = 0;
 }
 HEAP32[$ReallocAsyncCtx2>>2] = 38;
 $6 = ((($ReallocAsyncCtx2)) + 4|0);
 HEAP32[$6>>2] = $3;
 sp = STACKTOP;
 return;
}
function _get_danger__async_cb70($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0;
 var $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $IsAsync11 = 0, $IsAsync7 = 0, $ReallocAsyncCtx3 = 0;
 var $ReallocAsyncCtx4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP8[35112>>0] = 1;
 $3 = 389544;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = 35120;
 $10 = $9;
 HEAP32[$10>>2] = $5;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = $8;
 $13 = ($2|0)==(8);
 if (!($13)) {
  $14 = HEAP32[(651780)>>2]|0;
  $15 = (($14) + ($2))|0;
  HEAP32[(651780)>>2] = $15;
  $36 = HEAP32[88>>2]|0;
  $37 = ((($36)) + 44|0);
  HEAP8[$37>>0] = 0;
  return;
 }
 $16 = HEAP32[88>>2]|0;
 $17 = ((($16)) + 8|0);
 $18 = +HEAPF32[$17>>2];
 $19 = HEAP32[(389572)>>2]|0;
 $20 = (($19|0) / 2)&-1;
 $21 = (+($20|0));
 $22 = $18 > $21;
 $23 = HEAP32[(651924)>>2]|0;
 if ($22) {
  $24 = HEAP32[56>>2]|0;
  $25 = ((($24)) + 40|0);
  $26 = +HEAPF32[$25>>2];
  $27 = ((($24)) + 36|0);
  $28 = +HEAPF32[$27>>2];
  $29 = $28 * 0.5;
  $ReallocAsyncCtx3 = (_emscripten_realloc_async_context(4)|0);
  FUNCTION_TABLE_vidd[$23 & 255]($24,$26,$29);
  $IsAsync7 = ___async;
  if ($IsAsync7) {
   HEAP32[$ReallocAsyncCtx3>>2] = 39;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx3>>2] = 39;
  sp = STACKTOP;
  return;
 } else {
  $30 = HEAP32[48>>2]|0;
  $31 = ((($30)) + 40|0);
  $32 = +HEAPF32[$31>>2];
  $33 = ((($30)) + 36|0);
  $34 = +HEAPF32[$33>>2];
  $35 = $34 * 0.5;
  $ReallocAsyncCtx4 = (_emscripten_realloc_async_context(4)|0);
  FUNCTION_TABLE_vidd[$23 & 255]($30,$32,$35);
  $IsAsync11 = ___async;
  if ($IsAsync11) {
   HEAP32[$ReallocAsyncCtx4>>2] = 40;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx4>>2] = 40;
  sp = STACKTOP;
  return;
 }
}
function _get_danger__async_cb71($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[88>>2]|0;
 $2 = ((($1)) + 44|0);
 HEAP8[$2>>0] = 0;
 return;
}
function _get_danger__async_cb72($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[88>>2]|0;
 $2 = ((($1)) + 44|0);
 HEAP8[$2>>0] = 0;
 return;
}
function _initialize_item__async_cb($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, $IsAsync6 = 0, $ReallocAsyncCtx2 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ___async_retval;
 $AsyncRetVal = HEAP32[$9>>2]|0;
 $10 = HEAP32[(389576)>>2]|0;
 $11 = (($AsyncRetVal>>>0) % ($10>>>0))&-1;
 $12 = HEAP32[(389572)>>2]|0;
 $13 = (($12|0) / 80)&-1;
 HEAPF64[$2>>3] = 1.0;
 $vararg_ptr1 = ((($2)) + 8|0);
 HEAPF64[$vararg_ptr1>>3] = 1.0;
 $vararg_ptr2 = ((($2)) + 16|0);
 HEAPF64[$vararg_ptr2>>3] = 1.0;
 $vararg_ptr3 = ((($2)) + 24|0);
 HEAPF64[$vararg_ptr3>>3] = 1.0;
 $ReallocAsyncCtx2 = (_emscripten_realloc_async_context(8)|0);
 $14 = (FUNCTION_TABLE_iiiiiii[$4 & 255](9,$6,$11,$13,$13,$2)|0);
 $IsAsync6 = ___async;
 if ($IsAsync6) {
  HEAP32[$ReallocAsyncCtx2>>2] = 48;
  $15 = ((($ReallocAsyncCtx2)) + 4|0);
  HEAP32[$15>>2] = $8;
  sp = STACKTOP;
  return;
 }
 $16 = ___async_retval;
 HEAP32[$16>>2] = $14;
 ___async_unwind = 0;
 HEAP32[$ReallocAsyncCtx2>>2] = 48;
 $15 = ((($ReallocAsyncCtx2)) + 4|0);
 HEAP32[$15>>2] = $8;
 sp = STACKTOP;
 return;
}
function _initialize_item__async_cb73($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0.0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, $IsAsync10 = 0, $ReallocAsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ___async_retval;
 $AsyncRetVal = HEAP32[$3>>2]|0;
 HEAP32[80>>2] = $AsyncRetVal;
 $4 = ((($AsyncRetVal)) + 12|0);
 $5 = +HEAPF32[$4>>2];
 $6 = HEAP32[(389576)>>2]|0;
 $7 = (($6|0) / 2)&-1;
 $8 = HEAP32[(389572)>>2]|0;
 $9 = (($8|0) / 40)&-1;
 $10 = (($7) - ($9))|0;
 $11 = (+($10|0));
 $12 = $5 > $11;
 if (!($12)) {
  return;
 }
 $13 = (($9) + ($7))|0;
 $14 = (+($13|0));
 $15 = $5 < $14;
 if (!($15)) {
  return;
 }
 $16 = HEAP32[(651920)>>2]|0;
 $17 = ((($AsyncRetVal)) + 8|0);
 $18 = +HEAPF32[$17>>2];
 $19 = HEAP32[(651832)>>2]|0;
 $ReallocAsyncCtx3 = (_emscripten_realloc_async_context(16)|0);
 $20 = (FUNCTION_TABLE_i[$19 & 255]()|0);
 $IsAsync10 = ___async;
 if (!($IsAsync10)) {
  $24 = ___async_retval;
  HEAP32[$24>>2] = $20;
  ___async_unwind = 0;
 }
 HEAP32[$ReallocAsyncCtx3>>2] = 49;
 $21 = ((($ReallocAsyncCtx3)) + 4|0);
 HEAP32[$21>>2] = $AsyncRetVal;
 $22 = ((($ReallocAsyncCtx3)) + 8|0);
 HEAPF32[$22>>2] = $18;
 $23 = ((($ReallocAsyncCtx3)) + 12|0);
 HEAP32[$23>>2] = $16;
 sp = STACKTOP;
 return;
}
function _initialize_item__async_cb74($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, $IsAsync13 = 0, $ReallocAsyncCtx4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = +HEAPF32[$3>>2];
 $5 = ((($0)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ___async_retval;
 $AsyncRetVal = HEAP32[$7>>2]|0;
 $8 = HEAP32[(389576)>>2]|0;
 $9 = (($AsyncRetVal>>>0) % ($8>>>0))&-1;
 $10 = (+($9>>>0));
 $ReallocAsyncCtx4 = (_emscripten_realloc_async_context(4)|0);
 FUNCTION_TABLE_vidd[$6 & 255]($2,$4,$10);
 $IsAsync13 = ___async;
 if ($IsAsync13) {
  HEAP32[$ReallocAsyncCtx4>>2] = 50;
  sp = STACKTOP;
  return;
 }
 ___async_unwind = 0;
 HEAP32[$ReallocAsyncCtx4>>2] = 50;
 sp = STACKTOP;
 return;
}
function _initialize_item__async_cb75($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0;
 var $8 = 0, $9 = 0, $IsAsync10 = 0, $ReallocAsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $9 = HEAP32[80>>2]|0;
 $17 = ((($9)) + 12|0);
 $6 = +HEAPF32[$17>>2];
 $18 = HEAP32[(389576)>>2]|0;
 $2 = (($18|0) / 2)&-1;
 $19 = HEAP32[(389572)>>2]|0;
 $3 = (($19|0) / 40)&-1;
 $20 = (($2) - ($3))|0;
 $21 = (+($20|0));
 $22 = $6 > $21;
 if (!($22)) {
  return;
 }
 $1 = (($3) + ($2))|0;
 $4 = (+($1|0));
 $5 = $6 < $4;
 if (!($5)) {
  return;
 }
 $7 = HEAP32[(651920)>>2]|0;
 $8 = ((($9)) + 8|0);
 $10 = +HEAPF32[$8>>2];
 $11 = HEAP32[(651832)>>2]|0;
 $ReallocAsyncCtx3 = (_emscripten_realloc_async_context(16)|0);
 $12 = (FUNCTION_TABLE_i[$11 & 255]()|0);
 $IsAsync10 = ___async;
 if (!($IsAsync10)) {
  $16 = ___async_retval;
  HEAP32[$16>>2] = $12;
  ___async_unwind = 0;
 }
 HEAP32[$ReallocAsyncCtx3>>2] = 49;
 $13 = ((($ReallocAsyncCtx3)) + 4|0);
 HEAP32[$13>>2] = $9;
 $14 = ((($ReallocAsyncCtx3)) + 8|0);
 HEAPF32[$14>>2] = $10;
 $15 = ((($ReallocAsyncCtx3)) + 12|0);
 HEAP32[$15>>2] = $7;
 sp = STACKTOP;
 return;
}
function __destroy_sound__async_cb($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __destroy_sound__async_cb76($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $IsAsync = 0, $IsAsync3 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $7 = HEAP8[$2>>0]|0;
 $8 = ($7<<24>>24)==(0);
 $9 = HEAP32[(651792)>>2]|0;
 $10 = ($9|0)!=(0);
 $11 = $8 & $10;
 if ($11) {
  $ReallocAsyncCtx2 = (_emscripten_realloc_async_context(12)|0);
  _emscripten_sleep(1);
  $IsAsync3 = ___async;
  if (!($IsAsync3)) {
   ___async_unwind = 0;
  }
  HEAP32[$ReallocAsyncCtx2>>2] = 177;
  $5 = ((($ReallocAsyncCtx2)) + 4|0);
  HEAP32[$5>>2] = $2;
  $6 = ((($ReallocAsyncCtx2)) + 8|0);
  HEAP32[$6>>2] = $4;
  sp = STACKTOP;
  return;
 }
 $12 = ((($4)) + 16|0);
 _alDeleteBuffers(1,($12|0));
 $13 = HEAP32[(651808)>>2]|0;
 $ReallocAsyncCtx = (_emscripten_realloc_async_context(4)|0);
 FUNCTION_TABLE_vi[$13 & 255]($4);
 $IsAsync = ___async;
 if ($IsAsync) {
  HEAP32[$ReallocAsyncCtx>>2] = 178;
  sp = STACKTOP;
  return;
 }
 ___async_unwind = 0;
 HEAP32[$ReallocAsyncCtx>>2] = 178;
 sp = STACKTOP;
 return;
}
function _initialize_bomb__async_cb($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, $IsAsync6 = 0, $ReallocAsyncCtx2 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ___async_retval;
 $AsyncRetVal = HEAP32[$9>>2]|0;
 $10 = HEAP32[(389576)>>2]|0;
 $11 = (($AsyncRetVal>>>0) % ($10>>>0))&-1;
 $12 = HEAP32[(389572)>>2]|0;
 $13 = (($12|0) / 80)&-1;
 HEAPF64[$2>>3] = 1.0;
 $vararg_ptr1 = ((($2)) + 8|0);
 HEAPF64[$vararg_ptr1>>3] = 1.0;
 $vararg_ptr2 = ((($2)) + 16|0);
 HEAPF64[$vararg_ptr2>>3] = 1.0;
 $vararg_ptr3 = ((($2)) + 24|0);
 HEAPF64[$vararg_ptr3>>3] = 1.0;
 $ReallocAsyncCtx2 = (_emscripten_realloc_async_context(8)|0);
 $14 = (FUNCTION_TABLE_iiiiiii[$4 & 255](11,$6,$11,$13,$13,$2)|0);
 $IsAsync6 = ___async;
 if ($IsAsync6) {
  HEAP32[$ReallocAsyncCtx2>>2] = 18;
  $15 = ((($ReallocAsyncCtx2)) + 4|0);
  HEAP32[$15>>2] = $8;
  sp = STACKTOP;
  return;
 }
 $16 = ___async_retval;
 HEAP32[$16>>2] = $14;
 ___async_unwind = 0;
 HEAP32[$ReallocAsyncCtx2>>2] = 18;
 $15 = ((($ReallocAsyncCtx2)) + 4|0);
 HEAP32[$15>>2] = $8;
 sp = STACKTOP;
 return;
}
function _initialize_bomb__async_cb77($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $AsyncRetVal = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ___async_retval;
 $AsyncRetVal = HEAP32[$3>>2]|0;
 HEAP32[96>>2] = $AsyncRetVal;
 $4 = ((($AsyncRetVal)) + 44|0);
 HEAP8[$4>>0] = 0;
 HEAP8[104>>0] = 0;
 return;
}
function _move_paddle__async_cb($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0;
 var $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, $IsAsync16 = 0, $IsAsync20 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = +HEAPF32[$2>>2];
 $8 = $7;
 $9 = ((($4)) + 36|0);
 $10 = +HEAPF32[$9>>2];
 $11 = $10;
 $12 = $11 * 0.5;
 $13 = $8 < $12;
 if ($13) {
  $14 = HEAP32[(651920)>>2]|0;
  $15 = +HEAPF32[$6>>2];
  $16 = $12;
  $ReallocAsyncCtx5 = (_emscripten_realloc_async_context(20)|0);
  FUNCTION_TABLE_vidd[$14 & 255]($4,$15,$16);
  $IsAsync16 = ___async;
  if (!($IsAsync16)) {
   ___async_unwind = 0;
  }
  HEAP32[$ReallocAsyncCtx5>>2] = 61;
  $17 = ((($ReallocAsyncCtx5)) + 4|0);
  HEAP32[$17>>2] = $2;
  $18 = ((($ReallocAsyncCtx5)) + 8|0);
  HEAP32[$18>>2] = $9;
  $19 = ((($ReallocAsyncCtx5)) + 12|0);
  HEAP32[$19>>2] = $6;
  $20 = ((($ReallocAsyncCtx5)) + 16|0);
  HEAP32[$20>>2] = $4;
  sp = STACKTOP;
  return;
 }
 $21 = $7;
 $22 = HEAP32[(389576)>>2]|0;
 $23 = (+($22|0));
 $24 = $10;
 $25 = $24 * 0.5;
 $26 = $23 - $25;
 $27 = $21 > $26;
 if (!($27)) {
  return;
 }
 $28 = HEAP32[(651920)>>2]|0;
 $29 = +HEAPF32[$6>>2];
 $30 = $26;
 $ReallocAsyncCtx6 = (_emscripten_realloc_async_context(4)|0);
 FUNCTION_TABLE_vidd[$28 & 255]($4,$29,$30);
 $IsAsync20 = ___async;
 if ($IsAsync20) {
  HEAP32[$ReallocAsyncCtx6>>2] = 62;
  sp = STACKTOP;
  return;
 }
 ___async_unwind = 0;
 HEAP32[$ReallocAsyncCtx6>>2] = 62;
 sp = STACKTOP;
 return;
}
function _move_paddle__async_cb78($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0;
 var $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, $IsAsync16 = 0, $IsAsync20 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = +HEAPF32[$2>>2];
 $8 = $7;
 $9 = ((($4)) + 36|0);
 $10 = +HEAPF32[$9>>2];
 $11 = $10;
 $12 = $11 * 0.5;
 $13 = $8 < $12;
 if ($13) {
  $14 = HEAP32[(651920)>>2]|0;
  $15 = +HEAPF32[$6>>2];
  $16 = $12;
  $ReallocAsyncCtx5 = (_emscripten_realloc_async_context(20)|0);
  FUNCTION_TABLE_vidd[$14 & 255]($4,$15,$16);
  $IsAsync16 = ___async;
  if (!($IsAsync16)) {
   ___async_unwind = 0;
  }
  HEAP32[$ReallocAsyncCtx5>>2] = 61;
  $17 = ((($ReallocAsyncCtx5)) + 4|0);
  HEAP32[$17>>2] = $2;
  $18 = ((($ReallocAsyncCtx5)) + 8|0);
  HEAP32[$18>>2] = $9;
  $19 = ((($ReallocAsyncCtx5)) + 12|0);
  HEAP32[$19>>2] = $6;
  $20 = ((($ReallocAsyncCtx5)) + 16|0);
  HEAP32[$20>>2] = $4;
  sp = STACKTOP;
  return;
 }
 $21 = $7;
 $22 = HEAP32[(389576)>>2]|0;
 $23 = (+($22|0));
 $24 = $10;
 $25 = $24 * 0.5;
 $26 = $23 - $25;
 $27 = $21 > $26;
 if (!($27)) {
  return;
 }
 $28 = HEAP32[(651920)>>2]|0;
 $29 = +HEAPF32[$6>>2];
 $30 = $26;
 $ReallocAsyncCtx6 = (_emscripten_realloc_async_context(4)|0);
 FUNCTION_TABLE_vidd[$28 & 255]($4,$29,$30);
 $IsAsync20 = ___async;
 if ($IsAsync20) {
  HEAP32[$ReallocAsyncCtx6>>2] = 62;
  sp = STACKTOP;
  return;
 }
 ___async_unwind = 0;
 HEAP32[$ReallocAsyncCtx6>>2] = 62;
 sp = STACKTOP;
 return;
}
function _move_paddle__async_cb79($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0;
 var $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, $IsAsync16 = 0, $IsAsync20 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = +HEAPF32[$2>>2];
 $8 = $7;
 $9 = ((($4)) + 36|0);
 $10 = +HEAPF32[$9>>2];
 $11 = $10;
 $12 = $11 * 0.5;
 $13 = $8 < $12;
 if ($13) {
  $14 = HEAP32[(651920)>>2]|0;
  $15 = +HEAPF32[$6>>2];
  $16 = $12;
  $ReallocAsyncCtx5 = (_emscripten_realloc_async_context(20)|0);
  FUNCTION_TABLE_vidd[$14 & 255]($4,$15,$16);
  $IsAsync16 = ___async;
  if (!($IsAsync16)) {
   ___async_unwind = 0;
  }
  HEAP32[$ReallocAsyncCtx5>>2] = 61;
  $17 = ((($ReallocAsyncCtx5)) + 4|0);
  HEAP32[$17>>2] = $2;
  $18 = ((($ReallocAsyncCtx5)) + 8|0);
  HEAP32[$18>>2] = $9;
  $19 = ((($ReallocAsyncCtx5)) + 12|0);
  HEAP32[$19>>2] = $6;
  $20 = ((($ReallocAsyncCtx5)) + 16|0);
  HEAP32[$20>>2] = $4;
  sp = STACKTOP;
  return;
 }
 $21 = $7;
 $22 = HEAP32[(389576)>>2]|0;
 $23 = (+($22|0));
 $24 = $10;
 $25 = $24 * 0.5;
 $26 = $23 - $25;
 $27 = $21 > $26;
 if (!($27)) {
  return;
 }
 $28 = HEAP32[(651920)>>2]|0;
 $29 = +HEAPF32[$6>>2];
 $30 = $26;
 $ReallocAsyncCtx6 = (_emscripten_realloc_async_context(4)|0);
 FUNCTION_TABLE_vidd[$28 & 255]($4,$29,$30);
 $IsAsync20 = ___async;
 if ($IsAsync20) {
  HEAP32[$ReallocAsyncCtx6>>2] = 62;
  sp = STACKTOP;
  return;
 }
 ___async_unwind = 0;
 HEAP32[$ReallocAsyncCtx6>>2] = 62;
 sp = STACKTOP;
 return;
}
function _move_paddle__async_cb80($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0;
 var $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, $IsAsync16 = 0, $IsAsync20 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = +HEAPF32[$2>>2];
 $8 = $7;
 $9 = ((($4)) + 36|0);
 $10 = +HEAPF32[$9>>2];
 $11 = $10;
 $12 = $11 * 0.5;
 $13 = $8 < $12;
 if ($13) {
  $14 = HEAP32[(651920)>>2]|0;
  $15 = +HEAPF32[$6>>2];
  $16 = $12;
  $ReallocAsyncCtx5 = (_emscripten_realloc_async_context(20)|0);
  FUNCTION_TABLE_vidd[$14 & 255]($4,$15,$16);
  $IsAsync16 = ___async;
  if (!($IsAsync16)) {
   ___async_unwind = 0;
  }
  HEAP32[$ReallocAsyncCtx5>>2] = 61;
  $17 = ((($ReallocAsyncCtx5)) + 4|0);
  HEAP32[$17>>2] = $2;
  $18 = ((($ReallocAsyncCtx5)) + 8|0);
  HEAP32[$18>>2] = $9;
  $19 = ((($ReallocAsyncCtx5)) + 12|0);
  HEAP32[$19>>2] = $6;
  $20 = ((($ReallocAsyncCtx5)) + 16|0);
  HEAP32[$20>>2] = $4;
  sp = STACKTOP;
  return;
 }
 $21 = $7;
 $22 = HEAP32[(389576)>>2]|0;
 $23 = (+($22|0));
 $24 = $10;
 $25 = $24 * 0.5;
 $26 = $23 - $25;
 $27 = $21 > $26;
 if (!($27)) {
  return;
 }
 $28 = HEAP32[(651920)>>2]|0;
 $29 = +HEAPF32[$6>>2];
 $30 = $26;
 $ReallocAsyncCtx6 = (_emscripten_realloc_async_context(4)|0);
 FUNCTION_TABLE_vidd[$28 & 255]($4,$29,$30);
 $IsAsync20 = ___async;
 if ($IsAsync20) {
  HEAP32[$ReallocAsyncCtx6>>2] = 62;
  sp = STACKTOP;
  return;
 }
 ___async_unwind = 0;
 HEAP32[$ReallocAsyncCtx6>>2] = 62;
 sp = STACKTOP;
 return;
}
function _move_paddle__async_cb81($0) {
 $0 = $0|0;
 var $$pre = 0.0, $$pre1 = 0.0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0;
 var $IsAsync20 = 0, $ReallocAsyncCtx6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $$pre = +HEAPF32[$2>>2];
 $$pre1 = +HEAPF32[$4>>2];
 $9 = $$pre;
 $10 = HEAP32[(389576)>>2]|0;
 $11 = (+($10|0));
 $12 = $$pre1;
 $13 = $12 * 0.5;
 $14 = $11 - $13;
 $15 = $9 > $14;
 if (!($15)) {
  return;
 }
 $16 = HEAP32[(651920)>>2]|0;
 $17 = +HEAPF32[$6>>2];
 $18 = $14;
 $ReallocAsyncCtx6 = (_emscripten_realloc_async_context(4)|0);
 FUNCTION_TABLE_vidd[$16 & 255]($8,$17,$18);
 $IsAsync20 = ___async;
 if ($IsAsync20) {
  HEAP32[$ReallocAsyncCtx6>>2] = 62;
  sp = STACKTOP;
  return;
 }
 ___async_unwind = 0;
 HEAP32[$ReallocAsyncCtx6>>2] = 62;
 sp = STACKTOP;
 return;
}
function _move_paddle__async_cb82($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _update_item__async_cb($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _onload_sound__async_cb($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($0)) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($0)) + 28|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($0)) + 32|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($0)) + 36|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($0)) + 40|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($0)) + 44|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($0)) + 48|0);
 $24 = HEAP32[$23>>2]|0;
 (_fclose(($2|0))|0);
 $25 = ((($20)) + 16|0);
 HEAP32[$25>>2] = 0;
 $26 = HEAP32[_stderr>>2]|0;
 HEAP32[$22>>2] = 1;
 (_fprintf(($26|0),(389008|0),($22|0))|0);
 $27 = HEAP32[(651792)>>2]|0;
 $28 = (($27) + -1)|0;
 HEAP32[(651792)>>2] = $28;
 return;
}
function _onload_sound__async_cb83($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($0)) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($0)) + 28|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($0)) + 32|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($0)) + 36|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($0)) + 40|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($0)) + 44|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($0)) + 48|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($0)) + 52|0);
 $26 = HEAP32[$25>>2]|0;
 _alDeleteBuffers(1,($2|0));
 (_fclose(($4|0))|0);
 $27 = ((($22)) + 16|0);
 HEAP32[$27>>2] = 0;
 $28 = HEAP32[_stderr>>2]|0;
 HEAP32[$24>>2] = 1;
 (_fprintf(($28|0),(389008|0),($24|0))|0);
 $29 = HEAP32[(651792)>>2]|0;
 $30 = (($29) + -1)|0;
 HEAP32[(651792)>>2] = $30;
 return;
}
function _onload_sound__async_cb84($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($0)) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($0)) + 28|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($0)) + 32|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($0)) + 36|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($0)) + 40|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($0)) + 44|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($0)) + 48|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($0)) + 52|0);
 $26 = HEAP32[$25>>2]|0;
 (_fclose(($2|0))|0);
 $27 = HEAP32[$4>>2]|0;
 $28 = ((($22)) + 16|0);
 HEAP32[$28>>2] = $27;
 $29 = ((($22)) + 20|0);
 HEAP8[$29>>0] = 1;
 $30 = HEAP32[(651792)>>2]|0;
 $31 = (($30) + -1)|0;
 HEAP32[(651792)>>2] = $31;
 return;
}
function _onload_sound__async_cb85($0) {
 $0 = $0|0;
 var $$$i = 0, $$1$i = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $AsyncRetVal = 0, $IsAsync = 0, $IsAsync46 = 0, $IsAsync50 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $format15$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($0)) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($0)) + 28|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($0)) + 32|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($0)) + 36|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($0)) + 40|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($0)) + 44|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($0)) + 48|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($0)) + 52|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($0)) + 56|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($0)) + 60|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ((($0)) + 64|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ((($0)) + 68|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ((($0)) + 72|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ((($0)) + 76|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ((($0)) + 80|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ((($0)) + 84|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ((($0)) + 88|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ___async_retval;
 $AsyncRetVal = HEAP32[$45>>2]|0;
 $104 = ($AsyncRetVal|0)==(0|0);
 if ($104) {
  HEAP32[$2>>2] = $4;
  (_printf((388936|0),($2|0))|0);
  (_fclose(($8|0))|0);
  $105 = ((($28)) + 16|0);
  HEAP32[$105>>2] = 0;
  $106 = HEAP32[_stderr>>2]|0;
  HEAP32[$30>>2] = 1;
  (_fprintf(($106|0),(389008|0),($30|0))|0);
  $107 = HEAP32[(651792)>>2]|0;
  $108 = (($107) + -1)|0;
  HEAP32[(651792)>>2] = $108;
  return;
 }
 $46 = HEAP32[$34>>2]|0;
 (_fread(($AsyncRetVal|0),($46|0),1,($8|0))|0);
 _alGenBuffers(1,($10|0));
 $47 = (_alGetError()|0);
 $48 = ($47|0)==(0);
 if (!($48)) {
  $49 = HEAP32[_stderr>>2]|0;
  (_fwrite((389264|0),68,1,($49|0))|0);
  if ((($47|0) == 40963)) {
   (_fwrite((389336|0),49,1,($49|0))|0);
  } else if ((($47|0) == 40965)) {
   (_fwrite((389392|0),31,1,($49|0))|0);
  } else {
   HEAP32[$36>>2] = $47;
   (_fprintf(($49|0),(389424|0),($36|0))|0);
  }
  $50 = HEAP32[(651808)>>2]|0;
  $ReallocAsyncCtx = (_emscripten_realloc_async_context(52)|0);
  FUNCTION_TABLE_vi[$50 & 255]($AsyncRetVal);
  $IsAsync = ___async;
  if ($IsAsync) {
   HEAP32[$ReallocAsyncCtx>>2] = 179;
   $51 = ((($ReallocAsyncCtx)) + 4|0);
   HEAP32[$51>>2] = $8;
   $52 = ((($ReallocAsyncCtx)) + 8|0);
   HEAP32[$52>>2] = $12;
   $53 = ((($ReallocAsyncCtx)) + 12|0);
   HEAP32[$53>>2] = $14;
   $54 = ((($ReallocAsyncCtx)) + 16|0);
   HEAP32[$54>>2] = $16;
   $55 = ((($ReallocAsyncCtx)) + 20|0);
   HEAP32[$55>>2] = $18;
   $56 = ((($ReallocAsyncCtx)) + 24|0);
   HEAP32[$56>>2] = $20;
   $57 = ((($ReallocAsyncCtx)) + 28|0);
   HEAP32[$57>>2] = $22;
   $58 = ((($ReallocAsyncCtx)) + 32|0);
   HEAP32[$58>>2] = $24;
   $59 = ((($ReallocAsyncCtx)) + 36|0);
   HEAP32[$59>>2] = $26;
   $60 = ((($ReallocAsyncCtx)) + 40|0);
   HEAP32[$60>>2] = $28;
   $61 = ((($ReallocAsyncCtx)) + 44|0);
   HEAP32[$61>>2] = $30;
   $62 = ((($ReallocAsyncCtx)) + 48|0);
   HEAP32[$62>>2] = $32;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx>>2] = 179;
  $51 = ((($ReallocAsyncCtx)) + 4|0);
  HEAP32[$51>>2] = $8;
  $52 = ((($ReallocAsyncCtx)) + 8|0);
  HEAP32[$52>>2] = $12;
  $53 = ((($ReallocAsyncCtx)) + 12|0);
  HEAP32[$53>>2] = $14;
  $54 = ((($ReallocAsyncCtx)) + 16|0);
  HEAP32[$54>>2] = $16;
  $55 = ((($ReallocAsyncCtx)) + 20|0);
  HEAP32[$55>>2] = $18;
  $56 = ((($ReallocAsyncCtx)) + 24|0);
  HEAP32[$56>>2] = $20;
  $57 = ((($ReallocAsyncCtx)) + 28|0);
  HEAP32[$57>>2] = $22;
  $58 = ((($ReallocAsyncCtx)) + 32|0);
  HEAP32[$58>>2] = $24;
  $59 = ((($ReallocAsyncCtx)) + 36|0);
  HEAP32[$59>>2] = $26;
  $60 = ((($ReallocAsyncCtx)) + 40|0);
  HEAP32[$60>>2] = $28;
  $61 = ((($ReallocAsyncCtx)) + 44|0);
  HEAP32[$61>>2] = $30;
  $62 = ((($ReallocAsyncCtx)) + 48|0);
  HEAP32[$62>>2] = $32;
  sp = STACKTOP;
  return;
 }
 $63 = HEAP32[$42>>2]|0;
 if ((($63|0) == 8)) {
  $64 = HEAP32[$40>>2]|0;
  $65 = ($64|0)==(1);
  if ($65) {
   $format15$0$i = 4352;
  } else {
   $66 = ($64|0)==(2);
   $$$i = $66 ? 4354 : 0;
   $format15$0$i = $$$i;
  }
 } else if ((($63|0) == 16)) {
  $67 = HEAP32[$40>>2]|0;
  $68 = ($67|0)==(1);
  if ($68) {
   $format15$0$i = 4353;
  } else {
   $69 = ($67|0)==(2);
   $$1$i = $69 ? 4355 : 0;
   $format15$0$i = $$1$i;
  }
 } else {
  $format15$0$i = 0;
 }
 $70 = HEAP32[$10>>2]|0;
 $71 = HEAP32[$34>>2]|0;
 $72 = HEAP32[$44>>2]|0;
 _alBufferData(($70|0),($format15$0$i|0),($AsyncRetVal|0),($71|0),($72|0));
 $73 = (_alGetError()|0);
 $74 = ($73|0)==(0);
 if ($74) {
  $90 = HEAP32[(651808)>>2]|0;
  $ReallocAsyncCtx3 = (_emscripten_realloc_async_context(56)|0);
  FUNCTION_TABLE_vi[$90 & 255]($AsyncRetVal);
  $IsAsync50 = ___async;
  if ($IsAsync50) {
   HEAP32[$ReallocAsyncCtx3>>2] = 181;
   $91 = ((($ReallocAsyncCtx3)) + 4|0);
   HEAP32[$91>>2] = $8;
   $92 = ((($ReallocAsyncCtx3)) + 8|0);
   HEAP32[$92>>2] = $10;
   $93 = ((($ReallocAsyncCtx3)) + 12|0);
   HEAP32[$93>>2] = $12;
   $94 = ((($ReallocAsyncCtx3)) + 16|0);
   HEAP32[$94>>2] = $14;
   $95 = ((($ReallocAsyncCtx3)) + 20|0);
   HEAP32[$95>>2] = $16;
   $96 = ((($ReallocAsyncCtx3)) + 24|0);
   HEAP32[$96>>2] = $18;
   $97 = ((($ReallocAsyncCtx3)) + 28|0);
   HEAP32[$97>>2] = $20;
   $98 = ((($ReallocAsyncCtx3)) + 32|0);
   HEAP32[$98>>2] = $22;
   $99 = ((($ReallocAsyncCtx3)) + 36|0);
   HEAP32[$99>>2] = $24;
   $100 = ((($ReallocAsyncCtx3)) + 40|0);
   HEAP32[$100>>2] = $26;
   $101 = ((($ReallocAsyncCtx3)) + 44|0);
   HEAP32[$101>>2] = $28;
   $102 = ((($ReallocAsyncCtx3)) + 48|0);
   HEAP32[$102>>2] = $30;
   $103 = ((($ReallocAsyncCtx3)) + 52|0);
   HEAP32[$103>>2] = $32;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx3>>2] = 181;
  $91 = ((($ReallocAsyncCtx3)) + 4|0);
  HEAP32[$91>>2] = $8;
  $92 = ((($ReallocAsyncCtx3)) + 8|0);
  HEAP32[$92>>2] = $10;
  $93 = ((($ReallocAsyncCtx3)) + 12|0);
  HEAP32[$93>>2] = $12;
  $94 = ((($ReallocAsyncCtx3)) + 16|0);
  HEAP32[$94>>2] = $14;
  $95 = ((($ReallocAsyncCtx3)) + 20|0);
  HEAP32[$95>>2] = $16;
  $96 = ((($ReallocAsyncCtx3)) + 24|0);
  HEAP32[$96>>2] = $18;
  $97 = ((($ReallocAsyncCtx3)) + 28|0);
  HEAP32[$97>>2] = $20;
  $98 = ((($ReallocAsyncCtx3)) + 32|0);
  HEAP32[$98>>2] = $22;
  $99 = ((($ReallocAsyncCtx3)) + 36|0);
  HEAP32[$99>>2] = $24;
  $100 = ((($ReallocAsyncCtx3)) + 40|0);
  HEAP32[$100>>2] = $26;
  $101 = ((($ReallocAsyncCtx3)) + 44|0);
  HEAP32[$101>>2] = $28;
  $102 = ((($ReallocAsyncCtx3)) + 48|0);
  HEAP32[$102>>2] = $30;
  $103 = ((($ReallocAsyncCtx3)) + 52|0);
  HEAP32[$103>>2] = $32;
  sp = STACKTOP;
  return;
 } else {
  $75 = HEAP32[_stderr>>2]|0;
  (_fwrite((389448|0),82,1,($75|0))|0);
  $76 = HEAP32[(651808)>>2]|0;
  $ReallocAsyncCtx2 = (_emscripten_realloc_async_context(56)|0);
  FUNCTION_TABLE_vi[$76 & 255]($AsyncRetVal);
  $IsAsync46 = ___async;
  if ($IsAsync46) {
   HEAP32[$ReallocAsyncCtx2>>2] = 180;
   $77 = ((($ReallocAsyncCtx2)) + 4|0);
   HEAP32[$77>>2] = $10;
   $78 = ((($ReallocAsyncCtx2)) + 8|0);
   HEAP32[$78>>2] = $8;
   $79 = ((($ReallocAsyncCtx2)) + 12|0);
   HEAP32[$79>>2] = $12;
   $80 = ((($ReallocAsyncCtx2)) + 16|0);
   HEAP32[$80>>2] = $14;
   $81 = ((($ReallocAsyncCtx2)) + 20|0);
   HEAP32[$81>>2] = $16;
   $82 = ((($ReallocAsyncCtx2)) + 24|0);
   HEAP32[$82>>2] = $18;
   $83 = ((($ReallocAsyncCtx2)) + 28|0);
   HEAP32[$83>>2] = $20;
   $84 = ((($ReallocAsyncCtx2)) + 32|0);
   HEAP32[$84>>2] = $22;
   $85 = ((($ReallocAsyncCtx2)) + 36|0);
   HEAP32[$85>>2] = $24;
   $86 = ((($ReallocAsyncCtx2)) + 40|0);
   HEAP32[$86>>2] = $26;
   $87 = ((($ReallocAsyncCtx2)) + 44|0);
   HEAP32[$87>>2] = $28;
   $88 = ((($ReallocAsyncCtx2)) + 48|0);
   HEAP32[$88>>2] = $30;
   $89 = ((($ReallocAsyncCtx2)) + 52|0);
   HEAP32[$89>>2] = $32;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx2>>2] = 180;
  $77 = ((($ReallocAsyncCtx2)) + 4|0);
  HEAP32[$77>>2] = $10;
  $78 = ((($ReallocAsyncCtx2)) + 8|0);
  HEAP32[$78>>2] = $8;
  $79 = ((($ReallocAsyncCtx2)) + 12|0);
  HEAP32[$79>>2] = $12;
  $80 = ((($ReallocAsyncCtx2)) + 16|0);
  HEAP32[$80>>2] = $14;
  $81 = ((($ReallocAsyncCtx2)) + 20|0);
  HEAP32[$81>>2] = $16;
  $82 = ((($ReallocAsyncCtx2)) + 24|0);
  HEAP32[$82>>2] = $18;
  $83 = ((($ReallocAsyncCtx2)) + 28|0);
  HEAP32[$83>>2] = $20;
  $84 = ((($ReallocAsyncCtx2)) + 32|0);
  HEAP32[$84>>2] = $22;
  $85 = ((($ReallocAsyncCtx2)) + 36|0);
  HEAP32[$85>>2] = $24;
  $86 = ((($ReallocAsyncCtx2)) + 40|0);
  HEAP32[$86>>2] = $26;
  $87 = ((($ReallocAsyncCtx2)) + 44|0);
  HEAP32[$87>>2] = $28;
  $88 = ((($ReallocAsyncCtx2)) + 48|0);
  HEAP32[$88>>2] = $30;
  $89 = ((($ReallocAsyncCtx2)) + 52|0);
  HEAP32[$89>>2] = $32;
  sp = STACKTOP;
  return;
 }
}
function __exit_loop__async_cb($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $IsAsync10 = 0;
 var $IsAsync3 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[144>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  (_emscripten_realloc_async_context(4)|0);
  __may_the_weaver_sleep();
  // unreachable;
 }
 $5 = (((232 + ($3<<7)|0)) + 12|0);
 HEAP32[$5>>2] = 0;
 $6 = (((232 + ($3<<7)|0)) + 28|0);
 HEAP32[$6>>2] = 0;
 $7 = (((232 + ($3<<7)|0)) + 44|0);
 HEAP32[$7>>2] = 0;
 $8 = (((232 + ($3<<7)|0)) + 60|0);
 HEAP32[$8>>2] = 0;
 $9 = (((232 + ($3<<7)|0)) + 76|0);
 HEAP32[$9>>2] = 0;
 $10 = (((232 + ($3<<7)|0)) + 92|0);
 HEAP32[$10>>2] = 0;
 $11 = (((232 + ($3<<7)|0)) + 108|0);
 HEAP32[$11>>2] = 0;
 $12 = (((232 + ($3<<7)|0)) + 124|0);
 HEAP32[$12>>2] = 0;
 __flush_interfaces();
 __clean_interface_queue();
 $13 = HEAP32[(651792)>>2]|0;
 $14 = ($13|0)==(0);
 if ($14) {
  $16 = HEAP32[144>>2]|0;
  $17 = (($16) + -1)|0;
  HEAP32[144>>2] = $17;
  HEAP32[216>>2] = 0;
  $18 = HEAP32[(651852)>>2]|0;
  $ReallocAsyncCtx2 = (_emscripten_realloc_async_context(8)|0);
  FUNCTION_TABLE_v[$18 & 255]();
  $IsAsync3 = ___async;
  if ($IsAsync3) {
   HEAP32[$ReallocAsyncCtx2>>2] = 189;
   $19 = ((($ReallocAsyncCtx2)) + 4|0);
   HEAP32[$19>>2] = $2;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx2>>2] = 189;
  $19 = ((($ReallocAsyncCtx2)) + 4|0);
  HEAP32[$19>>2] = $2;
  sp = STACKTOP;
  return;
 } else {
  $ReallocAsyncCtx4 = (_emscripten_realloc_async_context(8)|0);
  _emscripten_sleep(1);
  $IsAsync10 = ___async;
  if ($IsAsync10) {
   HEAP32[$ReallocAsyncCtx4>>2] = 188;
   $15 = ((($ReallocAsyncCtx4)) + 4|0);
   HEAP32[$15>>2] = $2;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx4>>2] = 188;
  $15 = ((($ReallocAsyncCtx4)) + 4|0);
  HEAP32[$15>>2] = $2;
  sp = STACKTOP;
  return;
 }
}
function __exit_loop__async_cb86($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP8[128>>0] = 1;
 (_gettimeofday(($2|0),(0|0))|0);
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[(116)>>2]|0;
 $6 = ($5|0)>($4|0);
 if ($6) {
  $7 = (($5) - ($4))|0;
  $8 = (($7|0) / 1000000)&-1;
  $9 = (($8) + 1)|0;
  $10 = Math_imul($9, -1000000)|0;
  $11 = (($5) + ($10))|0;
  HEAP32[(116)>>2] = $11;
  $12 = HEAP32[112>>2]|0;
  $13 = (($12) + ($9))|0;
  HEAP32[112>>2] = $13;
  $15 = $11;
 } else {
  $15 = $5;
 }
 $14 = (($4) - ($15))|0;
 $16 = ($14|0)>(1000000);
 if ($16) {
  $17 = (($14|0) / 1000000)&-1;
  $18 = ($17*1000000)|0;
  $19 = (($18) + ($15))|0;
  HEAP32[(116)>>2] = $19;
  $20 = HEAP32[112>>2]|0;
  $21 = (($20) - ($17))|0;
  HEAP32[112>>2] = $21;
 }
 $22 = HEAP32[$2>>2]|0;
 HEAP32[112>>2] = $22;
 HEAP32[(116)>>2] = $4;
 _emscripten_cancel_main_loop();
 while(1) {
  $23 = HEAP32[144>>2]|0;
  $24 = (152 + ($23<<2)|0);
  $25 = HEAP32[$24>>2]|0;
  _emscripten_set_main_loop(($25|0),0,1);
 }
}
function __exit_loop__async_cb87($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 // unreachable;
}
function __exit_loop__async_cb88($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $IsAsync10 = 0, $IsAsync3 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $4 = HEAP32[(651792)>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = HEAP32[144>>2]|0;
  $7 = (($6) + -1)|0;
  HEAP32[144>>2] = $7;
  HEAP32[216>>2] = 0;
  $8 = HEAP32[(651852)>>2]|0;
  $ReallocAsyncCtx2 = (_emscripten_realloc_async_context(8)|0);
  FUNCTION_TABLE_v[$8 & 255]();
  $IsAsync3 = ___async;
  if ($IsAsync3) {
   HEAP32[$ReallocAsyncCtx2>>2] = 189;
   $9 = ((($ReallocAsyncCtx2)) + 4|0);
   HEAP32[$9>>2] = $2;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx2>>2] = 189;
  $9 = ((($ReallocAsyncCtx2)) + 4|0);
  HEAP32[$9>>2] = $2;
  sp = STACKTOP;
  return;
 } else {
  $ReallocAsyncCtx4 = (_emscripten_realloc_async_context(8)|0);
  _emscripten_sleep(1);
  $IsAsync10 = ___async;
  if ($IsAsync10) {
   HEAP32[$ReallocAsyncCtx4>>2] = 188;
   $3 = ((($ReallocAsyncCtx4)) + 4|0);
   HEAP32[$3>>2] = $2;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx4>>2] = 188;
  $3 = ((($ReallocAsyncCtx4)) + 4|0);
  HEAP32[$3>>2] = $2;
  sp = STACKTOP;
  return;
 }
}
function __compile_shader__async_cb($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _exit(1);
 // unreachable;
}
function _end_danger__async_cb($0) {
 $0 = $0|0;
 var $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $IsAsync4 = 0, $IsAsync8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$pre = HEAP32[(389576)>>2]|0;
 $1 = HEAP32[48>>2]|0;
 $2 = ((($1)) + 36|0);
 $3 = +HEAPF32[$2>>2];
 $4 = (($$pre|0) / 7)&-1;
 $5 = (+($4|0));
 $6 = $3 != $5;
 if ($6) {
  $7 = HEAP32[(651924)>>2]|0;
  $8 = ((($1)) + 40|0);
  $9 = +HEAPF32[$8>>2];
  $ReallocAsyncCtx2 = (_emscripten_realloc_async_context(4)|0);
  FUNCTION_TABLE_vidd[$7 & 255]($1,$9,$5);
  $IsAsync4 = ___async;
  if ($IsAsync4) {
   HEAP32[$ReallocAsyncCtx2>>2] = 42;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx2>>2] = 42;
  sp = STACKTOP;
  return;
 } else {
  $10 = HEAP32[(651952)>>2]|0;
  $11 = HEAP32[35152>>2]|0;
  $ReallocAsyncCtx3 = (_emscripten_realloc_async_context(4)|0);
  FUNCTION_TABLE_vi[$10 & 255]($11);
  $IsAsync8 = ___async;
  if ($IsAsync8) {
   HEAP32[$ReallocAsyncCtx3>>2] = 43;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx3>>2] = 43;
  sp = STACKTOP;
  return;
 }
}
function _end_danger__async_cb89($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $IsAsync8 = 0, $ReallocAsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[(651952)>>2]|0;
 $2 = HEAP32[35152>>2]|0;
 $ReallocAsyncCtx3 = (_emscripten_realloc_async_context(4)|0);
 FUNCTION_TABLE_vi[$1 & 255]($2);
 $IsAsync8 = ___async;
 if (!($IsAsync8)) {
  ___async_unwind = 0;
 }
 HEAP32[$ReallocAsyncCtx3>>2] = 43;
 sp = STACKTOP;
 return;
}
function _end_danger__async_cb90($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _get_item__async_cb($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[35096>>2]|0;
 $2 = (($1) + 1)|0;
 HEAP32[35096>>2] = $2;
 $3 = HEAP32[80>>2]|0;
 $4 = ((($3)) + 44|0);
 HEAP8[$4>>0] = 0;
 return;
}
function __compile_and_insert_new_shader__async_cb($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $IsAsync29 = 0, $IsAsync53 = 0, $IsAsync57 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, $endptr2 = 0, $fragment_size$0 = 0, $fragment_size$1 = 0, $fragment_size$2 = 0, $fragment_source$0 = 0, $strlen1 = 0, $vertex_size$0 = 0, $vertex_size$1 = 0, $vertex_source$0 = 0;
 var dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($0)) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($0)) + 28|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($0)) + 32|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($0)) + 36|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($0)) + 40|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($0)) + 44|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($0)) + 48|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($0)) + 52|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($0)) + 56|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($0)) + 60|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ((($0)) + 64|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ((($0)) + 68|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ((($0)) + 72|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ((($0)) + 76|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ((($0)) + 80|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ((($0)) + 84|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ((($0)) + 88|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ((($0)) + 92|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ((($0)) + 96|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = ((($0)) + 100|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = (_strlen(($8|0))|0);
 $52 = (($51) + 15)|0;
 $53 = (__Winternal_alloc($52)|0);
 HEAP8[$53>>0] = 0;
 (_strcat(($53|0),($8|0))|0);
 $strlen1 = (_strlen(($53|0))|0);
 $endptr2 = (($53) + ($strlen1)|0);
 dest=$endptr2; src=388176; stop=dest+15|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $54 = (_fopen(($53|0),(389080|0))|0);
 $55 = ($54|0)==(0|0);
 $56 = (((33240 + (($10*172)|0)|0)) + 168|0);
 if ($55) {
  HEAP32[$56>>2] = 0;
  $57 = HEAP32[(651808)>>2]|0;
  $ReallocAsyncCtx2 = (_emscripten_realloc_async_context(108)|0);
  FUNCTION_TABLE_vi[$57 & 255]($53);
  $IsAsync29 = ___async;
  if (!($IsAsync29)) {
   ___async_unwind = 0;
  }
  HEAP32[$ReallocAsyncCtx2>>2] = 158;
  $58 = ((($ReallocAsyncCtx2)) + 4|0);
  HEAP32[$58>>2] = $2;
  $59 = ((($ReallocAsyncCtx2)) + 8|0);
  HEAP32[$59>>2] = 0;
  $60 = ((($ReallocAsyncCtx2)) + 12|0);
  HEAP32[$60>>2] = $4;
  $61 = ((($ReallocAsyncCtx2)) + 16|0);
  HEAP32[$61>>2] = $6;
  $62 = ((($ReallocAsyncCtx2)) + 20|0);
  HEAP32[$62>>2] = $56;
  $63 = ((($ReallocAsyncCtx2)) + 24|0);
  HEAP32[$63>>2] = $12;
  $64 = ((($ReallocAsyncCtx2)) + 28|0);
  HEAP32[$64>>2] = $14;
  $65 = ((($ReallocAsyncCtx2)) + 32|0);
  HEAP32[$65>>2] = $16;
  $66 = ((($ReallocAsyncCtx2)) + 36|0);
  HEAP32[$66>>2] = $18;
  $67 = ((($ReallocAsyncCtx2)) + 40|0);
  HEAP32[$67>>2] = $20;
  $68 = ((($ReallocAsyncCtx2)) + 44|0);
  HEAP32[$68>>2] = $22;
  $69 = ((($ReallocAsyncCtx2)) + 48|0);
  HEAP32[$69>>2] = $24;
  $70 = ((($ReallocAsyncCtx2)) + 52|0);
  HEAP32[$70>>2] = $26;
  $71 = ((($ReallocAsyncCtx2)) + 56|0);
  HEAP32[$71>>2] = $28;
  $72 = ((($ReallocAsyncCtx2)) + 60|0);
  HEAP32[$72>>2] = $30;
  $73 = ((($ReallocAsyncCtx2)) + 64|0);
  HEAP32[$73>>2] = $32;
  $74 = ((($ReallocAsyncCtx2)) + 68|0);
  HEAP32[$74>>2] = $34;
  $75 = ((($ReallocAsyncCtx2)) + 72|0);
  HEAP32[$75>>2] = $36;
  $76 = ((($ReallocAsyncCtx2)) + 76|0);
  HEAP32[$76>>2] = $38;
  $77 = ((($ReallocAsyncCtx2)) + 80|0);
  HEAP32[$77>>2] = $40;
  $78 = ((($ReallocAsyncCtx2)) + 84|0);
  HEAP32[$78>>2] = $42;
  $79 = ((($ReallocAsyncCtx2)) + 88|0);
  HEAP32[$79>>2] = $44;
  $80 = ((($ReallocAsyncCtx2)) + 92|0);
  HEAP32[$80>>2] = $46;
  $81 = ((($ReallocAsyncCtx2)) + 96|0);
  HEAP32[$81>>2] = $10;
  $82 = ((($ReallocAsyncCtx2)) + 100|0);
  HEAP32[$82>>2] = $48;
  $83 = ((($ReallocAsyncCtx2)) + 104|0);
  HEAP32[$83>>2] = $50;
  sp = STACKTOP;
  return;
 }
 HEAP32[$56>>2] = $53;
 (_fclose(($54|0))|0);
 $84 = HEAP32[$6>>2]|0;
 $85 = ($84|0)==(0|0);
 do {
  if ($85) {
   $vertex_size$1 = 0;
  } else {
   $86 = (_open(($84|0),0,($40|0))|0);
   $87 = ($86|0)<(0);
   if ($87) {
    $88 = HEAP32[_stderr>>2]|0;
    $89 = HEAP32[$6>>2]|0;
    HEAP32[$36>>2] = $89;
    (_fprintf(($88|0),(388192|0),($36|0))|0);
    HEAP32[$6>>2] = 0;
    $vertex_size$1 = 0;
    break;
   }
   $90 = (_fstat(($86|0),($34|0))|0);
   $91 = ($90|0)<(0);
   if ($91) {
    $92 = HEAP32[_stderr>>2]|0;
    $93 = HEAP32[$6>>2]|0;
    HEAP32[$26>>2] = $93;
    (_fprintf(($92|0),(388288|0),($26|0))|0);
    HEAP32[$6>>2] = 0;
    $vertex_size$0 = 0;
   } else {
    $94 = ((($34)) + 36|0);
    $95 = HEAP32[$94>>2]|0;
    $vertex_size$0 = $95;
   }
   (_close(($86|0))|0);
   $vertex_size$1 = $vertex_size$0;
  }
 } while(0);
 $96 = HEAP32[$56>>2]|0;
 $97 = ($96|0)==(0|0);
 if ($97) {
  $fragment_size$2 = 0;
 } else {
  $98 = (_open(($96|0),0,($22|0))|0);
  $99 = ($98|0)<(0);
  if ($99) {
   $100 = HEAP32[_stderr>>2]|0;
   $101 = HEAP32[$56>>2]|0;
   HEAP32[$18>>2] = $101;
   (_fprintf(($100|0),(388400|0),($18|0))|0);
   HEAP32[$56>>2] = 0;
   $fragment_size$1 = 0;
  } else {
   $102 = (_fstat(($98|0),($12|0))|0);
   $103 = ($102|0)<(0);
   if ($103) {
    $104 = HEAP32[_stderr>>2]|0;
    $105 = HEAP32[$56>>2]|0;
    HEAP32[$14>>2] = $105;
    (_fprintf(($104|0),(388288|0),($14|0))|0);
    HEAP32[$56>>2] = 0;
    $fragment_size$0 = 0;
   } else {
    $106 = ((($12)) + 36|0);
    $107 = HEAP32[$106>>2]|0;
    $fragment_size$0 = $107;
   }
   (_close(($98|0))|0);
   $fragment_size$1 = $fragment_size$0;
  }
  $fragment_size$2 = $fragment_size$1;
 }
 $108 = HEAP32[$6>>2]|0;
 $109 = ($108|0)==(0|0);
 if ($109) {
  $vertex_source$0 = 0;
 } else {
  $110 = (__Winternal_alloc($vertex_size$1)|0);
  $111 = ($110|0)==(0|0);
  if ($111) {
   $112 = HEAP32[_stderr>>2]|0;
   HEAP32[$2>>2] = 0;
   (_fprintf(($112|0),(388496|0),($2|0))|0);
   HEAP32[$6>>2] = 0;
   $vertex_source$0 = 0;
  } else {
   $vertex_source$0 = $110;
  }
 }
 $113 = HEAP32[$56>>2]|0;
 $114 = ($113|0)==(0|0);
 if ($114) {
  $fragment_source$0 = 0;
 } else {
  $115 = (__Winternal_alloc($fragment_size$2)|0);
  $116 = ($115|0)==(0|0);
  if ($116) {
   $117 = HEAP32[_stderr>>2]|0;
   HEAP32[$48>>2] = $53;
   (_fprintf(($117|0),(388496|0),($48|0))|0);
   HEAP32[$56>>2] = 0;
   $fragment_source$0 = 0;
  } else {
   $fragment_source$0 = $115;
  }
 }
 $118 = HEAP32[$6>>2]|0;
 $119 = ($118|0)==(0|0);
 do {
  if (!($119)) {
   $120 = (_fopen(($118|0),(389080|0))|0);
   $121 = ($120|0)==(0|0);
   if ($121) {
    $122 = HEAP32[_stderr>>2]|0;
    HEAP32[$44>>2] = 0;
    (_fprintf(($122|0),(388568|0),($44|0))|0);
    _perror((0|0));
    HEAP32[$6>>2] = 0;
    break;
   } else {
    (_fread(($vertex_source$0|0),1,($vertex_size$1|0),($120|0))|0);
    $123 = (($vertex_size$1) + -1)|0;
    $124 = (($vertex_source$0) + ($123)|0);
    HEAP8[$124>>0] = 0;
    (_fclose(($120|0))|0);
    break;
   }
  }
 } while(0);
 $125 = HEAP32[$56>>2]|0;
 $126 = ($125|0)==(0|0);
 do {
  if (!($126)) {
   $127 = (_fopen(($125|0),(389080|0))|0);
   $128 = ($127|0)==(0|0);
   if ($128) {
    $129 = HEAP32[_stderr>>2]|0;
    HEAP32[$30>>2] = $53;
    (_fprintf(($129|0),(388568|0),($30|0))|0);
    _perror((0|0));
    HEAP32[$56>>2] = 0;
    break;
   } else {
    (_fread(($fragment_source$0|0),1,($fragment_size$2|0),($127|0))|0);
    $130 = (($fragment_size$2) + -1)|0;
    $131 = (($fragment_source$0) + ($130)|0);
    HEAP8[$131>>0] = 0;
    (_fclose(($127|0))|0);
    break;
   }
  }
 } while(0);
 $132 = HEAP32[$6>>2]|0;
 $133 = ($132|0)==(0|0);
 if ($133) {
  $ReallocAsyncCtx8 = (_emscripten_realloc_async_context(20)|0);
  $140 = (__compile_shader(386056,1)|0);
  $IsAsync53 = ___async;
  if ($IsAsync53) {
   HEAP32[$ReallocAsyncCtx8>>2] = 160;
   $141 = ((($ReallocAsyncCtx8)) + 4|0);
   HEAP32[$141>>2] = $vertex_source$0;
   $142 = ((($ReallocAsyncCtx8)) + 8|0);
   HEAP32[$142>>2] = $fragment_source$0;
   $143 = ((($ReallocAsyncCtx8)) + 12|0);
   HEAP32[$143>>2] = $56;
   $144 = ((($ReallocAsyncCtx8)) + 16|0);
   HEAP32[$144>>2] = $10;
   sp = STACKTOP;
   return;
  }
  $145 = ___async_retval;
  HEAP32[$145>>2] = $140;
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx8>>2] = 160;
  $141 = ((($ReallocAsyncCtx8)) + 4|0);
  HEAP32[$141>>2] = $vertex_source$0;
  $142 = ((($ReallocAsyncCtx8)) + 8|0);
  HEAP32[$142>>2] = $fragment_source$0;
  $143 = ((($ReallocAsyncCtx8)) + 12|0);
  HEAP32[$143>>2] = $56;
  $144 = ((($ReallocAsyncCtx8)) + 16|0);
  HEAP32[$144>>2] = $10;
  sp = STACKTOP;
  return;
 } else {
  $ReallocAsyncCtx9 = (_emscripten_realloc_async_context(20)|0);
  $134 = (__compile_shader($vertex_source$0,1)|0);
  $IsAsync57 = ___async;
  if ($IsAsync57) {
   HEAP32[$ReallocAsyncCtx9>>2] = 159;
   $135 = ((($ReallocAsyncCtx9)) + 4|0);
   HEAP32[$135>>2] = $vertex_source$0;
   $136 = ((($ReallocAsyncCtx9)) + 8|0);
   HEAP32[$136>>2] = $fragment_source$0;
   $137 = ((($ReallocAsyncCtx9)) + 12|0);
   HEAP32[$137>>2] = $56;
   $138 = ((($ReallocAsyncCtx9)) + 16|0);
   HEAP32[$138>>2] = $10;
   sp = STACKTOP;
   return;
  }
  $139 = ___async_retval;
  HEAP32[$139>>2] = $134;
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx9>>2] = 159;
  $135 = ((($ReallocAsyncCtx9)) + 4|0);
  HEAP32[$135>>2] = $vertex_source$0;
  $136 = ((($ReallocAsyncCtx9)) + 8|0);
  HEAP32[$136>>2] = $fragment_source$0;
  $137 = ((($ReallocAsyncCtx9)) + 12|0);
  HEAP32[$137>>2] = $56;
  $138 = ((($ReallocAsyncCtx9)) + 16|0);
  HEAP32[$138>>2] = $10;
  sp = STACKTOP;
  return;
 }
}
function __compile_and_insert_new_shader__async_cb91($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $IsAsync53 = 0, $IsAsync57 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, $fragment_size$0 = 0, $fragment_size$1 = 0;
 var $fragment_size$2 = 0, $fragment_source$0 = 0, $vertex_size$0 = 0, $vertex_size$1 = 0, $vertex_source$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($0)) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($0)) + 28|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($0)) + 32|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($0)) + 36|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($0)) + 40|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($0)) + 44|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($0)) + 48|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($0)) + 52|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($0)) + 56|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($0)) + 60|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ((($0)) + 64|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ((($0)) + 68|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ((($0)) + 72|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ((($0)) + 76|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ((($0)) + 80|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ((($0)) + 84|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ((($0)) + 88|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ((($0)) + 92|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ((($0)) + 96|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = ((($0)) + 100|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ((($0)) + 104|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = HEAP32[$8>>2]|0;
 $54 = ($53|0)==(0|0);
 do {
  if ($54) {
   $vertex_size$1 = 0;
  } else {
   $55 = (_open(($53|0),0,($40|0))|0);
   $56 = ($55|0)<(0);
   if ($56) {
    $57 = HEAP32[_stderr>>2]|0;
    $58 = HEAP32[$8>>2]|0;
    HEAP32[$36>>2] = $58;
    (_fprintf(($57|0),(388192|0),($36|0))|0);
    HEAP32[$8>>2] = 0;
    $vertex_size$1 = 0;
    break;
   }
   $59 = (_fstat(($55|0),($34|0))|0);
   $60 = ($59|0)<(0);
   if ($60) {
    $61 = HEAP32[_stderr>>2]|0;
    $62 = HEAP32[$8>>2]|0;
    HEAP32[$26>>2] = $62;
    (_fprintf(($61|0),(388288|0),($26|0))|0);
    HEAP32[$8>>2] = 0;
    $vertex_size$0 = 0;
   } else {
    $63 = ((($34)) + 36|0);
    $64 = HEAP32[$63>>2]|0;
    $vertex_size$0 = $64;
   }
   (_close(($55|0))|0);
   $vertex_size$1 = $vertex_size$0;
  }
 } while(0);
 $65 = HEAP32[$10>>2]|0;
 $66 = ($65|0)==(0|0);
 if ($66) {
  $fragment_size$2 = 0;
 } else {
  $67 = (_open(($65|0),0,($22|0))|0);
  $68 = ($67|0)<(0);
  if ($68) {
   $69 = HEAP32[_stderr>>2]|0;
   $70 = HEAP32[$10>>2]|0;
   HEAP32[$18>>2] = $70;
   (_fprintf(($69|0),(388400|0),($18|0))|0);
   HEAP32[$10>>2] = 0;
   $fragment_size$1 = 0;
  } else {
   $71 = (_fstat(($67|0),($12|0))|0);
   $72 = ($71|0)<(0);
   if ($72) {
    $73 = HEAP32[_stderr>>2]|0;
    $74 = HEAP32[$10>>2]|0;
    HEAP32[$14>>2] = $74;
    (_fprintf(($73|0),(388288|0),($14|0))|0);
    HEAP32[$10>>2] = 0;
    $fragment_size$0 = 0;
   } else {
    $75 = ((($12)) + 36|0);
    $76 = HEAP32[$75>>2]|0;
    $fragment_size$0 = $76;
   }
   (_close(($67|0))|0);
   $fragment_size$1 = $fragment_size$0;
  }
  $fragment_size$2 = $fragment_size$1;
 }
 $77 = HEAP32[$8>>2]|0;
 $78 = ($77|0)==(0|0);
 if ($78) {
  $vertex_source$0 = 0;
 } else {
  $79 = (__Winternal_alloc($vertex_size$1)|0);
  $80 = ($79|0)==(0|0);
  if ($80) {
   $81 = HEAP32[_stderr>>2]|0;
   HEAP32[$2>>2] = $4;
   (_fprintf(($81|0),(388496|0),($2|0))|0);
   HEAP32[$8>>2] = 0;
   $vertex_source$0 = 0;
  } else {
   $vertex_source$0 = $79;
  }
 }
 $82 = HEAP32[$10>>2]|0;
 $83 = ($82|0)==(0|0);
 if ($83) {
  $fragment_source$0 = 0;
 } else {
  $84 = (__Winternal_alloc($fragment_size$2)|0);
  $85 = ($84|0)==(0|0);
  if ($85) {
   $86 = HEAP32[_stderr>>2]|0;
   HEAP32[$50>>2] = 0;
   (_fprintf(($86|0),(388496|0),($50|0))|0);
   HEAP32[$10>>2] = 0;
   $fragment_source$0 = 0;
  } else {
   $fragment_source$0 = $84;
  }
 }
 $87 = HEAP32[$8>>2]|0;
 $88 = ($87|0)==(0|0);
 do {
  if (!($88)) {
   $89 = (_fopen(($87|0),(389080|0))|0);
   $90 = ($89|0)==(0|0);
   if ($90) {
    $91 = HEAP32[_stderr>>2]|0;
    HEAP32[$44>>2] = $4;
    (_fprintf(($91|0),(388568|0),($44|0))|0);
    _perror((0|0));
    HEAP32[$8>>2] = 0;
    break;
   } else {
    (_fread(($vertex_source$0|0),1,($vertex_size$1|0),($89|0))|0);
    $92 = (($vertex_size$1) + -1)|0;
    $93 = (($vertex_source$0) + ($92)|0);
    HEAP8[$93>>0] = 0;
    (_fclose(($89|0))|0);
    break;
   }
  }
 } while(0);
 $94 = HEAP32[$10>>2]|0;
 $95 = ($94|0)==(0|0);
 do {
  if (!($95)) {
   $96 = (_fopen(($94|0),(389080|0))|0);
   $97 = ($96|0)==(0|0);
   if ($97) {
    $98 = HEAP32[_stderr>>2]|0;
    HEAP32[$30>>2] = 0;
    (_fprintf(($98|0),(388568|0),($30|0))|0);
    _perror((0|0));
    HEAP32[$10>>2] = 0;
    break;
   } else {
    (_fread(($fragment_source$0|0),1,($fragment_size$2|0),($96|0))|0);
    $99 = (($fragment_size$2) + -1)|0;
    $100 = (($fragment_source$0) + ($99)|0);
    HEAP8[$100>>0] = 0;
    (_fclose(($96|0))|0);
    break;
   }
  }
 } while(0);
 $101 = HEAP32[$8>>2]|0;
 $102 = ($101|0)==(0|0);
 if ($102) {
  $ReallocAsyncCtx8 = (_emscripten_realloc_async_context(20)|0);
  $109 = (__compile_shader(386056,1)|0);
  $IsAsync53 = ___async;
  if ($IsAsync53) {
   HEAP32[$ReallocAsyncCtx8>>2] = 160;
   $110 = ((($ReallocAsyncCtx8)) + 4|0);
   HEAP32[$110>>2] = $vertex_source$0;
   $111 = ((($ReallocAsyncCtx8)) + 8|0);
   HEAP32[$111>>2] = $fragment_source$0;
   $112 = ((($ReallocAsyncCtx8)) + 12|0);
   HEAP32[$112>>2] = $10;
   $113 = ((($ReallocAsyncCtx8)) + 16|0);
   HEAP32[$113>>2] = $48;
   sp = STACKTOP;
   return;
  }
  $114 = ___async_retval;
  HEAP32[$114>>2] = $109;
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx8>>2] = 160;
  $110 = ((($ReallocAsyncCtx8)) + 4|0);
  HEAP32[$110>>2] = $vertex_source$0;
  $111 = ((($ReallocAsyncCtx8)) + 8|0);
  HEAP32[$111>>2] = $fragment_source$0;
  $112 = ((($ReallocAsyncCtx8)) + 12|0);
  HEAP32[$112>>2] = $10;
  $113 = ((($ReallocAsyncCtx8)) + 16|0);
  HEAP32[$113>>2] = $48;
  sp = STACKTOP;
  return;
 } else {
  $ReallocAsyncCtx9 = (_emscripten_realloc_async_context(20)|0);
  $103 = (__compile_shader($vertex_source$0,1)|0);
  $IsAsync57 = ___async;
  if ($IsAsync57) {
   HEAP32[$ReallocAsyncCtx9>>2] = 159;
   $104 = ((($ReallocAsyncCtx9)) + 4|0);
   HEAP32[$104>>2] = $vertex_source$0;
   $105 = ((($ReallocAsyncCtx9)) + 8|0);
   HEAP32[$105>>2] = $fragment_source$0;
   $106 = ((($ReallocAsyncCtx9)) + 12|0);
   HEAP32[$106>>2] = $10;
   $107 = ((($ReallocAsyncCtx9)) + 16|0);
   HEAP32[$107>>2] = $48;
   sp = STACKTOP;
   return;
  }
  $108 = ___async_retval;
  HEAP32[$108>>2] = $103;
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx9>>2] = 159;
  $104 = ((($ReallocAsyncCtx9)) + 4|0);
  HEAP32[$104>>2] = $vertex_source$0;
  $105 = ((($ReallocAsyncCtx9)) + 8|0);
  HEAP32[$105>>2] = $fragment_source$0;
  $106 = ((($ReallocAsyncCtx9)) + 12|0);
  HEAP32[$106>>2] = $10;
  $107 = ((($ReallocAsyncCtx9)) + 16|0);
  HEAP32[$107>>2] = $48;
  sp = STACKTOP;
  return;
 }
}
function __compile_and_insert_new_shader__async_cb92($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $IsAsync37 = 0, $ReallocAsyncCtx4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  return;
 }
 $4 = HEAP32[(651808)>>2]|0;
 $ReallocAsyncCtx4 = (_emscripten_realloc_async_context(4)|0);
 FUNCTION_TABLE_vi[$4 & 255]($2);
 $IsAsync37 = ___async;
 if ($IsAsync37) {
  HEAP32[$ReallocAsyncCtx4>>2] = 165;
  sp = STACKTOP;
  return;
 }
 ___async_unwind = 0;
 HEAP32[$ReallocAsyncCtx4>>2] = 165;
 sp = STACKTOP;
 return;
}
function __compile_and_insert_new_shader__async_cb93($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __compile_and_insert_new_shader__async_cb94($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, $IsAsync33 = 0, $IsAsync37 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ___async_retval;
 $AsyncRetVal = HEAP32[$7>>2]|0;
 $8 = (((33240 + (($2*172)|0)|0)) + 4|0);
 HEAP32[$8>>2] = $AsyncRetVal;
 $9 = (_glGetUniformLocation(($AsyncRetVal|0),(652368|0))|0);
 $10 = (((33240 + (($2*172)|0)|0)) + 136|0);
 HEAP32[$10>>2] = $9;
 $11 = HEAP32[$8>>2]|0;
 $12 = (_glGetUniformLocation(($11|0),(652408|0))|0);
 $13 = (((33240 + (($2*172)|0)|0)) + 144|0);
 HEAP32[$13>>2] = $12;
 $14 = HEAP32[$8>>2]|0;
 $15 = (_glGetUniformLocation(($14|0),(652432|0))|0);
 $16 = (((33240 + (($2*172)|0)|0)) + 148|0);
 HEAP32[$16>>2] = $15;
 $17 = HEAP32[$8>>2]|0;
 $18 = (_glGetUniformLocation(($17|0),(652424|0))|0);
 $19 = (((33240 + (($2*172)|0)|0)) + 156|0);
 HEAP32[$19>>2] = $18;
 $20 = HEAP32[$8>>2]|0;
 $21 = (_glGetUniformLocation(($20|0),(652720|0))|0);
 $22 = (((33240 + (($2*172)|0)|0)) + 152|0);
 HEAP32[$22>>2] = $21;
 $23 = HEAP32[$8>>2]|0;
 $24 = (_glGetUniformLocation(($23|0),(652384|0))|0);
 $25 = (((33240 + (($2*172)|0)|0)) + 140|0);
 HEAP32[$25>>2] = $24;
 $26 = HEAP32[$8>>2]|0;
 $27 = (_glGetAttribLocation(($26|0),(652440|0))|0);
 $28 = (((33240 + (($2*172)|0)|0)) + 160|0);
 HEAP32[$28>>2] = $27;
 $29 = ($4|0)==(0|0);
 if (!($29)) {
  $30 = HEAP32[(651808)>>2]|0;
  $ReallocAsyncCtx3 = (_emscripten_realloc_async_context(8)|0);
  FUNCTION_TABLE_vi[$30 & 255]($4);
  $IsAsync33 = ___async;
  if ($IsAsync33) {
   HEAP32[$ReallocAsyncCtx3>>2] = 164;
   $31 = ((($ReallocAsyncCtx3)) + 4|0);
   HEAP32[$31>>2] = $6;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx3>>2] = 164;
  $31 = ((($ReallocAsyncCtx3)) + 4|0);
  HEAP32[$31>>2] = $6;
  sp = STACKTOP;
  return;
 }
 $32 = ($6|0)==(0|0);
 if ($32) {
  return;
 }
 $33 = HEAP32[(651808)>>2]|0;
 $ReallocAsyncCtx4 = (_emscripten_realloc_async_context(4)|0);
 FUNCTION_TABLE_vi[$33 & 255]($6);
 $IsAsync37 = ___async;
 if ($IsAsync37) {
  HEAP32[$ReallocAsyncCtx4>>2] = 165;
  sp = STACKTOP;
  return;
 }
 ___async_unwind = 0;
 HEAP32[$ReallocAsyncCtx4>>2] = 165;
 sp = STACKTOP;
 return;
}
function __compile_and_insert_new_shader__async_cb95($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, $IsAsync41 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ___async_retval;
 $AsyncRetVal = HEAP32[$9>>2]|0;
 $ReallocAsyncCtx5 = (_emscripten_realloc_async_context(16)|0);
 $10 = (__link_and_clean_shaders($2,$AsyncRetVal)|0);
 $IsAsync41 = ___async;
 if (!($IsAsync41)) {
  $14 = ___async_retval;
  HEAP32[$14>>2] = $10;
  ___async_unwind = 0;
 }
 HEAP32[$ReallocAsyncCtx5>>2] = 163;
 $11 = ((($ReallocAsyncCtx5)) + 4|0);
 HEAP32[$11>>2] = $4;
 $12 = ((($ReallocAsyncCtx5)) + 8|0);
 HEAP32[$12>>2] = $6;
 $13 = ((($ReallocAsyncCtx5)) + 12|0);
 HEAP32[$13>>2] = $8;
 sp = STACKTOP;
 return;
}
function __compile_and_insert_new_shader__async_cb96($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, $IsAsync41 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ___async_retval;
 $AsyncRetVal = HEAP32[$9>>2]|0;
 $ReallocAsyncCtx5 = (_emscripten_realloc_async_context(16)|0);
 $10 = (__link_and_clean_shaders($2,$AsyncRetVal)|0);
 $IsAsync41 = ___async;
 if (!($IsAsync41)) {
  $14 = ___async_retval;
  HEAP32[$14>>2] = $10;
  ___async_unwind = 0;
 }
 HEAP32[$ReallocAsyncCtx5>>2] = 163;
 $11 = ((($ReallocAsyncCtx5)) + 4|0);
 HEAP32[$11>>2] = $4;
 $12 = ((($ReallocAsyncCtx5)) + 8|0);
 HEAP32[$12>>2] = $6;
 $13 = ((($ReallocAsyncCtx5)) + 12|0);
 HEAP32[$13>>2] = $8;
 sp = STACKTOP;
 return;
}
function __compile_and_insert_new_shader__async_cb97($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, $IsAsync45 = 0, $IsAsync49 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ___async_retval;
 $AsyncRetVal = HEAP32[$9>>2]|0;
 $10 = HEAP32[$6>>2]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $ReallocAsyncCtx6 = (_emscripten_realloc_async_context(20)|0);
  $18 = (__compile_shader(386600,0)|0);
  $IsAsync45 = ___async;
  if (!($IsAsync45)) {
   $23 = ___async_retval;
   HEAP32[$23>>2] = $18;
   ___async_unwind = 0;
  }
  HEAP32[$ReallocAsyncCtx6>>2] = 162;
  $19 = ((($ReallocAsyncCtx6)) + 4|0);
  HEAP32[$19>>2] = $AsyncRetVal;
  $20 = ((($ReallocAsyncCtx6)) + 8|0);
  HEAP32[$20>>2] = $8;
  $21 = ((($ReallocAsyncCtx6)) + 12|0);
  HEAP32[$21>>2] = $4;
  $22 = ((($ReallocAsyncCtx6)) + 16|0);
  HEAP32[$22>>2] = $2;
  sp = STACKTOP;
  return;
 } else {
  $ReallocAsyncCtx7 = (_emscripten_realloc_async_context(20)|0);
  $12 = (__compile_shader($4,0)|0);
  $IsAsync49 = ___async;
  if (!($IsAsync49)) {
   $17 = ___async_retval;
   HEAP32[$17>>2] = $12;
   ___async_unwind = 0;
  }
  HEAP32[$ReallocAsyncCtx7>>2] = 161;
  $13 = ((($ReallocAsyncCtx7)) + 4|0);
  HEAP32[$13>>2] = $AsyncRetVal;
  $14 = ((($ReallocAsyncCtx7)) + 8|0);
  HEAP32[$14>>2] = $8;
  $15 = ((($ReallocAsyncCtx7)) + 12|0);
  HEAP32[$15>>2] = $4;
  $16 = ((($ReallocAsyncCtx7)) + 16|0);
  HEAP32[$16>>2] = $2;
  sp = STACKTOP;
  return;
 }
}
function __compile_and_insert_new_shader__async_cb98($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, $IsAsync45 = 0, $IsAsync49 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ___async_retval;
 $AsyncRetVal = HEAP32[$9>>2]|0;
 $10 = HEAP32[$6>>2]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $ReallocAsyncCtx6 = (_emscripten_realloc_async_context(20)|0);
  $18 = (__compile_shader(386600,0)|0);
  $IsAsync45 = ___async;
  if (!($IsAsync45)) {
   $23 = ___async_retval;
   HEAP32[$23>>2] = $18;
   ___async_unwind = 0;
  }
  HEAP32[$ReallocAsyncCtx6>>2] = 162;
  $19 = ((($ReallocAsyncCtx6)) + 4|0);
  HEAP32[$19>>2] = $AsyncRetVal;
  $20 = ((($ReallocAsyncCtx6)) + 8|0);
  HEAP32[$20>>2] = $8;
  $21 = ((($ReallocAsyncCtx6)) + 12|0);
  HEAP32[$21>>2] = $4;
  $22 = ((($ReallocAsyncCtx6)) + 16|0);
  HEAP32[$22>>2] = $2;
  sp = STACKTOP;
  return;
 } else {
  $ReallocAsyncCtx7 = (_emscripten_realloc_async_context(20)|0);
  $12 = (__compile_shader($4,0)|0);
  $IsAsync49 = ___async;
  if (!($IsAsync49)) {
   $17 = ___async_retval;
   HEAP32[$17>>2] = $12;
   ___async_unwind = 0;
  }
  HEAP32[$ReallocAsyncCtx7>>2] = 161;
  $13 = ((($ReallocAsyncCtx7)) + 4|0);
  HEAP32[$13>>2] = $AsyncRetVal;
  $14 = ((($ReallocAsyncCtx7)) + 8|0);
  HEAP32[$14>>2] = $8;
  $15 = ((($ReallocAsyncCtx7)) + 12|0);
  HEAP32[$15>>2] = $4;
  $16 = ((($ReallocAsyncCtx7)) + 16|0);
  HEAP32[$16>>2] = $2;
  sp = STACKTOP;
  return;
 }
}
function _Wloop__async_cb($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $IsAsync4 = 0, $ReallocAsyncCtx2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[(651824)>>2]|0;
 $ReallocAsyncCtx2 = (_emscripten_realloc_async_context(12)|0);
 (FUNCTION_TABLE_i[$5 & 255]()|0);
 $IsAsync4 = ___async;
 if (!($IsAsync4)) {
  ___async_unwind = 0;
 }
 HEAP32[$ReallocAsyncCtx2>>2] = 184;
 $6 = ((($ReallocAsyncCtx2)) + 4|0);
 HEAP32[$6>>2] = $2;
 $7 = ((($ReallocAsyncCtx2)) + 8|0);
 HEAP32[$7>>2] = $4;
 sp = STACKTOP;
 return;
}
function _Wloop__async_cb99($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $IsAsync7 = 0, $ReallocAsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP8[120>>0] = 1;
 HEAP32[216>>2] = 0;
 $5 = HEAP32[(651852)>>2]|0;
 $ReallocAsyncCtx3 = (_emscripten_realloc_async_context(12)|0);
 FUNCTION_TABLE_v[$5 & 255]();
 $IsAsync7 = ___async;
 if (!($IsAsync7)) {
  ___async_unwind = 0;
 }
 HEAP32[$ReallocAsyncCtx3>>2] = 185;
 $6 = ((($ReallocAsyncCtx3)) + 4|0);
 HEAP32[$6>>2] = $2;
 $7 = ((($ReallocAsyncCtx3)) + 8|0);
 HEAP32[$7>>2] = $4;
 sp = STACKTOP;
 return;
}
function _Wloop__async_cb100($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $IsAsync10 = 0;
 var $ReallocAsyncCtx4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[144>>2]|0;
 $6 = (((232 + ($5<<7)|0)) + 12|0);
 HEAP32[$6>>2] = 0;
 $7 = (((232 + ($5<<7)|0)) + 28|0);
 HEAP32[$7>>2] = 0;
 $8 = (((232 + ($5<<7)|0)) + 44|0);
 HEAP32[$8>>2] = 0;
 $9 = (((232 + ($5<<7)|0)) + 60|0);
 HEAP32[$9>>2] = 0;
 $10 = (((232 + ($5<<7)|0)) + 76|0);
 HEAP32[$10>>2] = 0;
 $11 = (((232 + ($5<<7)|0)) + 92|0);
 HEAP32[$11>>2] = 0;
 $12 = (((232 + ($5<<7)|0)) + 108|0);
 HEAP32[$12>>2] = 0;
 $13 = (((232 + ($5<<7)|0)) + 124|0);
 HEAP32[$13>>2] = 0;
 __flush_interfaces();
 __clean_interface_queue();
 $14 = HEAP32[(651792)>>2]|0;
 $15 = ($14|0)==(0);
 if (!($15)) {
  $ReallocAsyncCtx4 = (_emscripten_realloc_async_context(12)|0);
  _emscripten_sleep(1);
  $IsAsync10 = ___async;
  if ($IsAsync10) {
   HEAP32[$ReallocAsyncCtx4>>2] = 186;
   $16 = ((($ReallocAsyncCtx4)) + 4|0);
   HEAP32[$16>>2] = $2;
   $17 = ((($ReallocAsyncCtx4)) + 8|0);
   HEAP32[$17>>2] = $4;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx4>>2] = 186;
  $16 = ((($ReallocAsyncCtx4)) + 4|0);
  HEAP32[$16>>2] = $2;
  $17 = ((($ReallocAsyncCtx4)) + 8|0);
  HEAP32[$17>>2] = $4;
  sp = STACKTOP;
  return;
 }
 $18 = HEAP32[144>>2]|0;
 $19 = (152 + ($18<<2)|0);
 HEAP32[$19>>2] = $2;
 HEAP8[128>>0] = 1;
 (_gettimeofday(($4|0),(0|0))|0);
 $20 = ((($4)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = HEAP32[(116)>>2]|0;
 $23 = ($22|0)>($21|0);
 if ($23) {
  $24 = (($22) - ($21))|0;
  $25 = (($24|0) / 1000000)&-1;
  $26 = (($25) + 1)|0;
  $27 = Math_imul($26, -1000000)|0;
  $28 = (($22) + ($27))|0;
  HEAP32[(116)>>2] = $28;
  $29 = HEAP32[112>>2]|0;
  $30 = (($29) + ($26))|0;
  HEAP32[112>>2] = $30;
  $32 = $28;
 } else {
  $32 = $22;
 }
 $31 = (($21) - ($32))|0;
 $33 = ($31|0)>(1000000);
 if ($33) {
  $34 = (($31|0) / 1000000)&-1;
  $35 = ($34*1000000)|0;
  $36 = (($35) + ($32))|0;
  HEAP32[(116)>>2] = $36;
  $37 = HEAP32[112>>2]|0;
  $38 = (($37) - ($34))|0;
  HEAP32[112>>2] = $38;
 }
 $39 = HEAP32[$4>>2]|0;
 HEAP32[112>>2] = $39;
 HEAP32[(116)>>2] = $21;
 while(1) {
  _emscripten_set_main_loop(($2|0),0,1);
 }
}
function _Wloop__async_cb101($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $IsAsync10 = 0, $ReallocAsyncCtx4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $7 = HEAP32[(651792)>>2]|0;
 $8 = ($7|0)==(0);
 if (!($8)) {
  $ReallocAsyncCtx4 = (_emscripten_realloc_async_context(12)|0);
  _emscripten_sleep(1);
  $IsAsync10 = ___async;
  if ($IsAsync10) {
   HEAP32[$ReallocAsyncCtx4>>2] = 186;
   $5 = ((($ReallocAsyncCtx4)) + 4|0);
   HEAP32[$5>>2] = $2;
   $6 = ((($ReallocAsyncCtx4)) + 8|0);
   HEAP32[$6>>2] = $4;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx4>>2] = 186;
  $5 = ((($ReallocAsyncCtx4)) + 4|0);
  HEAP32[$5>>2] = $2;
  $6 = ((($ReallocAsyncCtx4)) + 8|0);
  HEAP32[$6>>2] = $4;
  sp = STACKTOP;
  return;
 }
 $9 = HEAP32[144>>2]|0;
 $10 = (152 + ($9<<2)|0);
 HEAP32[$10>>2] = $2;
 HEAP8[128>>0] = 1;
 (_gettimeofday(($4|0),(0|0))|0);
 $11 = ((($4)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[(116)>>2]|0;
 $14 = ($13|0)>($12|0);
 if ($14) {
  $15 = (($13) - ($12))|0;
  $16 = (($15|0) / 1000000)&-1;
  $17 = (($16) + 1)|0;
  $18 = Math_imul($17, -1000000)|0;
  $19 = (($13) + ($18))|0;
  HEAP32[(116)>>2] = $19;
  $20 = HEAP32[112>>2]|0;
  $21 = (($20) + ($17))|0;
  HEAP32[112>>2] = $21;
  $23 = $19;
 } else {
  $23 = $13;
 }
 $22 = (($12) - ($23))|0;
 $24 = ($22|0)>(1000000);
 if ($24) {
  $25 = (($22|0) / 1000000)&-1;
  $26 = ($25*1000000)|0;
  $27 = (($26) + ($23))|0;
  HEAP32[(116)>>2] = $27;
  $28 = HEAP32[112>>2]|0;
  $29 = (($28) - ($25))|0;
  HEAP32[112>>2] = $29;
 }
 $30 = HEAP32[$4>>2]|0;
 HEAP32[112>>2] = $30;
 HEAP32[(116)>>2] = $12;
 while(1) {
  _emscripten_set_main_loop(($2|0),0,1);
 }
}
function _initialize_ball__async_cb($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, $AsyncRetVal = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ___async_retval;
 $AsyncRetVal = HEAP32[$3>>2]|0;
 HEAP32[8>>2] = $AsyncRetVal;
 $4 = HEAP32[(389576)>>2]|0;
 $5 = (($4|0) / 40)&-1;
 $6 = (+($5|0));
 $7 = HEAP32[(389572)>>2]|0;
 $8 = (+($7|0));
 $9 = (+($4|0));
 $10 = $8 / $9;
 $11 = $6 * $10;
 $12 = $11;
 $13 = $12 * 0.90000000000000002;
 $14 = $13;
 $15 = $14 * 0.5;
 HEAPF32[16>>2] = $15;
 HEAPF32[24>>2] = 1.0;
 HEAPF32[32>>2] = 0.0;
 HEAP8[35200>>0] = 0;
 return;
}
function _blow_up_bomb__async_cb($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $IsAsync3 = 0, $ReallocAsyncCtx2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[(651780)>>2]|0;
 HEAP32[35088>>2] = $1;
 HEAP32[(651780)>>2] = 20;
 $2 = HEAP32[(651876)>>2]|0;
 $ReallocAsyncCtx2 = (_emscripten_realloc_async_context(4)|0);
 FUNCTION_TABLE_vid[$2 & 255](24,0.10000000149011612);
 $IsAsync3 = ___async;
 if ($IsAsync3) {
  HEAP32[$ReallocAsyncCtx2>>2] = 25;
  sp = STACKTOP;
  return;
 }
 ___async_unwind = 0;
 HEAP32[$ReallocAsyncCtx2>>2] = 25;
 sp = STACKTOP;
 return;
}
function _blow_up_bomb__async_cb102($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _initialize_danger__async_cb($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, $IsAsync6 = 0, $ReallocAsyncCtx2 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ___async_retval;
 $AsyncRetVal = HEAP32[$9>>2]|0;
 $10 = HEAP32[(389576)>>2]|0;
 $11 = (($AsyncRetVal>>>0) % ($10>>>0))&-1;
 $12 = HEAP32[(389572)>>2]|0;
 $13 = (($12|0) / 80)&-1;
 HEAPF64[$2>>3] = 1.0;
 $vararg_ptr1 = ((($2)) + 8|0);
 HEAPF64[$vararg_ptr1>>3] = 1.0;
 $vararg_ptr2 = ((($2)) + 16|0);
 HEAPF64[$vararg_ptr2>>3] = 1.0;
 $vararg_ptr3 = ((($2)) + 24|0);
 HEAPF64[$vararg_ptr3>>3] = 1.0;
 $ReallocAsyncCtx2 = (_emscripten_realloc_async_context(8)|0);
 $14 = (FUNCTION_TABLE_iiiiiii[$4 & 255](10,$6,$11,$13,$13,$2)|0);
 $IsAsync6 = ___async;
 if ($IsAsync6) {
  HEAP32[$ReallocAsyncCtx2>>2] = 34;
  $15 = ((($ReallocAsyncCtx2)) + 4|0);
  HEAP32[$15>>2] = $8;
  sp = STACKTOP;
  return;
 }
 $16 = ___async_retval;
 HEAP32[$16>>2] = $14;
 ___async_unwind = 0;
 HEAP32[$ReallocAsyncCtx2>>2] = 34;
 $15 = ((($ReallocAsyncCtx2)) + 4|0);
 HEAP32[$15>>2] = $8;
 sp = STACKTOP;
 return;
}
function _initialize_danger__async_cb103($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $AsyncRetVal = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ___async_retval;
 $AsyncRetVal = HEAP32[$3>>2]|0;
 HEAP32[88>>2] = $AsyncRetVal;
 $4 = ((($AsyncRetVal)) + 44|0);
 HEAP8[$4>>0] = 0;
 return;
}
function _main__async_cb($0) {
 $0 = $0|0;
 var $IsAsync7 = 0, $ReallocAsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ReallocAsyncCtx3 = (_emscripten_realloc_async_context(4)|0);
 _copyleft();
 $IsAsync7 = ___async;
 if (!($IsAsync7)) {
  ___async_unwind = 0;
 }
 HEAP32[$ReallocAsyncCtx3>>2] = 46;
 sp = STACKTOP;
 return;
}
function _main__async_cb104($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $IsAsync = 0, $ReallocAsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[(389556)>>2]|0;
 $2 = ((($1)) + 4|0);
 HEAP8[$2>>0] = 0;
 $3 = HEAP32[(651856)>>2]|0;
 $ReallocAsyncCtx = (_emscripten_realloc_async_context(4)|0);
 FUNCTION_TABLE_v[$3 & 255]();
 $IsAsync = ___async;
 if ($IsAsync) {
  HEAP32[$ReallocAsyncCtx>>2] = 45;
  sp = STACKTOP;
  return;
 }
 ___async_unwind = 0;
 HEAP32[$ReallocAsyncCtx>>2] = 45;
 sp = STACKTOP;
 return;
}
function _main__async_cb105($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ___async_retval;
 HEAP32[$1>>2] = 0;
 return;
}
function __initialize_memory__async_cb($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $AsyncRetVal = 0, $IsAsync3 = 0, $ReallocAsyncCtx2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ___async_retval;
 $AsyncRetVal = HEAP32[$1>>2]|0;
 HEAP32[383536>>2] = $AsyncRetVal;
 $2 = HEAP32[(651796)>>2]|0;
 $ReallocAsyncCtx2 = (_emscripten_realloc_async_context(4)|0);
 $3 = (FUNCTION_TABLE_ii[$2 & 255](32768)|0);
 $IsAsync3 = ___async;
 if ($IsAsync3) {
  HEAP32[$ReallocAsyncCtx2>>2] = 154;
  sp = STACKTOP;
  return;
 }
 $4 = ___async_retval;
 HEAP32[$4>>2] = $3;
 ___async_unwind = 0;
 HEAP32[$ReallocAsyncCtx2>>2] = 154;
 sp = STACKTOP;
 return;
}
function __initialize_memory__async_cb106($0) {
 $0 = $0|0;
 var $1 = 0, $AsyncRetVal = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ___async_retval;
 $AsyncRetVal = HEAP32[$1>>2]|0;
 HEAP32[383544>>2] = $AsyncRetVal;
 return;
}
function _initialize_paddle__async_cb($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $AsyncRetVal = 0, $IsAsync13 = 0, $ReallocAsyncCtx2 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ___async_retval;
 $AsyncRetVal = HEAP32[$7>>2]|0;
 HEAP32[56>>2] = $AsyncRetVal;
 $8 = HEAP32[(651908)>>2]|0;
 $9 = HEAP32[(389572)>>2]|0;
 $10 = (+($9|0));
 $11 = (($9|0) / 40)&-1;
 $12 = (+($11|0));
 $13 = $12 * 0.5;
 $14 = $10 - $13;
 $15 = (~~(($14)));
 $16 = HEAP32[(389576)>>2]|0;
 $17 = (($16|0) / 2)&-1;
 $18 = (($16|0) / 7)&-1;
 HEAPF64[$4>>3] = 1.0;
 $vararg_ptr7 = ((($4)) + 8|0);
 HEAPF64[$vararg_ptr7>>3] = 1.0;
 $vararg_ptr8 = ((($4)) + 16|0);
 HEAPF64[$vararg_ptr8>>3] = 1.0;
 $vararg_ptr9 = ((($4)) + 24|0);
 HEAPF64[$vararg_ptr9>>3] = 1.0;
 $ReallocAsyncCtx2 = (_emscripten_realloc_async_context(8)|0);
 $19 = (FUNCTION_TABLE_iiiiiii[$8 & 255](6,$15,$17,$11,$18,$4)|0);
 $IsAsync13 = ___async;
 if ($IsAsync13) {
  HEAP32[$ReallocAsyncCtx2>>2] = 56;
  $20 = ((($ReallocAsyncCtx2)) + 4|0);
  HEAP32[$20>>2] = $6;
  sp = STACKTOP;
  return;
 }
 $21 = ___async_retval;
 HEAP32[$21>>2] = $19;
 ___async_unwind = 0;
 HEAP32[$ReallocAsyncCtx2>>2] = 56;
 $20 = ((($ReallocAsyncCtx2)) + 4|0);
 HEAP32[$20>>2] = $6;
 sp = STACKTOP;
 return;
}
function _initialize_paddle__async_cb107($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ___async_retval;
 $AsyncRetVal = HEAP32[$3>>2]|0;
 HEAP32[48>>2] = $AsyncRetVal;
 $4 = HEAP32[56>>2]|0;
 $5 = ((($4)) + 20|0);
 HEAPF32[$5>>2] = 1.0;
 $6 = ((($4)) + 28|0);
 HEAPF32[$6>>2] = 0.0;
 $7 = ((($4)) + 24|0);
 HEAPF32[$7>>2] = 0.0;
 $8 = ((($AsyncRetVal)) + 28|0);
 HEAPF32[$8>>2] = 1.0;
 $9 = ((($AsyncRetVal)) + 24|0);
 HEAPF32[$9>>2] = 0.0;
 $10 = ((($AsyncRetVal)) + 20|0);
 HEAPF32[$10>>2] = 0.0;
 $11 = ((($4)) + 4|0);
 HEAP32[$11>>2] = 0;
 $12 = ((($AsyncRetVal)) + 4|0);
 HEAP32[$12>>2] = 0;
 HEAP32[382768>>2] = 0;
 HEAP32[382776>>2] = 0;
 return;
}
function _update_ball__async_cb($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0, $115 = 0.0, $116 = 0.0;
 var $117 = 0.0, $118 = 0, $119 = 0.0, $12 = 0.0, $120 = 0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0, $125 = 0.0, $126 = 0.0, $127 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0;
 var $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0.0;
 var $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0.0;
 var $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0, $82 = 0.0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0, $IsAsync16 = 0, $IsAsync27 = 0, $IsAsync30 = 0, $IsAsync33 = 0, $IsAsync4 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[8>>2]|0;
 $2 = ((($1)) + 12|0);
 $3 = +HEAPF32[$2>>2];
 $4 = $3;
 $5 = HEAP32[(389576)>>2]|0;
 $6 = (($5|0) / 27)&-1;
 $7 = (+($6|0));
 $8 = $7 * 0.5;
 $9 = $4 < $8;
 if ($9) {
  $10 = HEAP32[(651920)>>2]|0;
  $11 = ((($1)) + 8|0);
  $12 = +HEAPF32[$11>>2];
  $13 = $8;
  $ReallocAsyncCtx2 = (_emscripten_realloc_async_context(4)|0);
  FUNCTION_TABLE_vidd[$10 & 255]($1,$12,$13);
  $IsAsync4 = ___async;
  if ($IsAsync4) {
   HEAP32[$ReallocAsyncCtx2>>2] = 8;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx2>>2] = 8;
  sp = STACKTOP;
  return;
 }
 $14 = (+($5|0));
 $15 = $14 - $8;
 $16 = $4 > $15;
 if ($16) {
  $17 = HEAP32[(651920)>>2]|0;
  $18 = ((($1)) + 8|0);
  $19 = +HEAPF32[$18>>2];
  $20 = $15;
  $ReallocAsyncCtx5 = (_emscripten_realloc_async_context(4)|0);
  FUNCTION_TABLE_vidd[$17 & 255]($1,$19,$20);
  $IsAsync16 = ___async;
  if ($IsAsync16) {
   HEAP32[$ReallocAsyncCtx5>>2] = 11;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx5>>2] = 11;
  sp = STACKTOP;
  return;
 }
 $21 = HEAP32[80>>2]|0;
 $22 = ((($21)) + 44|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = ($23<<24>>24)==(0);
 if (!($24)) {
  $25 = ((($21)) + 8|0);
  $26 = +HEAPF32[$25>>2];
  $27 = HEAP32[8>>2]|0;
  $28 = ((($27)) + 8|0);
  $29 = +HEAPF32[$28>>2];
  $30 = $26 - $29;
  $31 = +HEAPF32[24>>2];
  $32 = $30 / $31;
  $33 = $32 < 0.0;
  if (!($33)) {
   $34 = +HEAPF32[16>>2];
   $35 = $31 * $34;
   $36 = $32 > $35;
   if (!($36)) {
    $37 = ((($27)) + 12|0);
    $38 = +HEAPF32[$37>>2];
    $39 = +HEAPF32[32>>2];
    $40 = $32 * $39;
    $41 = $38 + $40;
    $42 = ((($21)) + 12|0);
    $43 = +HEAPF32[$42>>2];
    $44 = $41 - $43;
    $45 = $44 + -2.0;
    $46 = ((($21)) + 36|0);
    $47 = +HEAPF32[$46>>2];
    $48 = ((($27)) + 36|0);
    $49 = +HEAPF32[$48>>2];
    $50 = $47 + $49;
    $51 = $50 * 0.5;
    $52 = $45 < $51;
    if ($52) {
     $53 = $44 + 2.0;
     $54 = $50 * -0.5;
     $55 = $53 > $54;
     if ($55) {
      $ReallocAsyncCtx8 = (_emscripten_realloc_async_context(4)|0);
      _get_item();
      $IsAsync27 = ___async;
      if ($IsAsync27) {
       HEAP32[$ReallocAsyncCtx8>>2] = 14;
       sp = STACKTOP;
       return;
      }
      ___async_unwind = 0;
      HEAP32[$ReallocAsyncCtx8>>2] = 14;
      sp = STACKTOP;
      return;
     }
    }
   }
  }
 }
 $56 = HEAP32[88>>2]|0;
 $57 = ((($56)) + 44|0);
 $58 = HEAP8[$57>>0]|0;
 $59 = ($58<<24>>24)==(0);
 if (!($59)) {
  $60 = ((($56)) + 8|0);
  $61 = +HEAPF32[$60>>2];
  $62 = HEAP32[8>>2]|0;
  $63 = ((($62)) + 8|0);
  $64 = +HEAPF32[$63>>2];
  $65 = $61 - $64;
  $66 = +HEAPF32[24>>2];
  $67 = $65 / $66;
  $68 = $67 < 0.0;
  if (!($68)) {
   $69 = +HEAPF32[16>>2];
   $70 = $66 * $69;
   $71 = $67 > $70;
   if (!($71)) {
    $72 = ((($62)) + 12|0);
    $73 = +HEAPF32[$72>>2];
    $74 = +HEAPF32[32>>2];
    $75 = $67 * $74;
    $76 = $73 + $75;
    $77 = ((($56)) + 12|0);
    $78 = +HEAPF32[$77>>2];
    $79 = $76 - $78;
    $80 = $79 + -2.0;
    $81 = ((($56)) + 36|0);
    $82 = +HEAPF32[$81>>2];
    $83 = ((($62)) + 36|0);
    $84 = +HEAPF32[$83>>2];
    $85 = $82 + $84;
    $86 = $85 * 0.5;
    $87 = $80 < $86;
    if ($87) {
     $88 = $79 + 2.0;
     $89 = $85 * -0.5;
     $90 = $88 > $89;
     if ($90) {
      $ReallocAsyncCtx9 = (_emscripten_realloc_async_context(4)|0);
      _get_danger();
      $IsAsync30 = ___async;
      if ($IsAsync30) {
       HEAP32[$ReallocAsyncCtx9>>2] = 15;
       sp = STACKTOP;
       return;
      }
      ___async_unwind = 0;
      HEAP32[$ReallocAsyncCtx9>>2] = 15;
      sp = STACKTOP;
      return;
     }
    }
   }
  }
 }
 $91 = HEAP32[96>>2]|0;
 $92 = ((($91)) + 44|0);
 $93 = HEAP8[$92>>0]|0;
 $94 = ($93<<24>>24)!=(0);
 $95 = HEAP8[104>>0]|0;
 $96 = ($95<<24>>24)==(0);
 $or$cond = $94 & $96;
 if (!($or$cond)) {
  return;
 }
 $97 = ((($91)) + 8|0);
 $98 = +HEAPF32[$97>>2];
 $99 = HEAP32[8>>2]|0;
 $100 = ((($99)) + 8|0);
 $101 = +HEAPF32[$100>>2];
 $102 = $98 - $101;
 $103 = +HEAPF32[24>>2];
 $104 = $102 / $103;
 $105 = $104 < 0.0;
 if ($105) {
  return;
 }
 $106 = +HEAPF32[16>>2];
 $107 = $103 * $106;
 $108 = $104 > $107;
 if ($108) {
  return;
 }
 $109 = ((($99)) + 12|0);
 $110 = +HEAPF32[$109>>2];
 $111 = +HEAPF32[32>>2];
 $112 = $104 * $111;
 $113 = $110 + $112;
 $114 = ((($91)) + 12|0);
 $115 = +HEAPF32[$114>>2];
 $116 = $113 - $115;
 $117 = $116 + -2.0;
 $118 = ((($91)) + 36|0);
 $119 = +HEAPF32[$118>>2];
 $120 = ((($99)) + 36|0);
 $121 = +HEAPF32[$120>>2];
 $122 = $119 + $121;
 $123 = $122 * 0.5;
 $124 = $117 < $123;
 if (!($124)) {
  return;
 }
 $125 = $116 + 2.0;
 $126 = $122 * -0.5;
 $127 = $125 > $126;
 if (!($127)) {
  return;
 }
 $ReallocAsyncCtx10 = (_emscripten_realloc_async_context(4)|0);
 _blow_up_bomb();
 $IsAsync33 = ___async;
 if ($IsAsync33) {
  HEAP32[$ReallocAsyncCtx10>>2] = 16;
  sp = STACKTOP;
  return;
 }
 ___async_unwind = 0;
 HEAP32[$ReallocAsyncCtx10>>2] = 16;
 sp = STACKTOP;
 return;
}
function _update_ball__async_cb108($0) {
 $0 = $0|0;
 var $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $IsAsync12 = 0, $IsAsync8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = +HEAPF32[32>>2];
 $2 = $1 < 0.0;
 if ($2) {
  $3 = -$1;
  HEAPF32[32>>2] = $3;
 }
 $4 = HEAP8[35200>>0]|0;
 $5 = $4 ^ 1;
 HEAP8[35200>>0] = $5;
 $6 = ($4<<24>>24)==(1);
 $7 = HEAP32[(651952)>>2]|0;
 if ($6) {
  $9 = HEAP32[72>>2]|0;
  $ReallocAsyncCtx4 = (_emscripten_realloc_async_context(4)|0);
  FUNCTION_TABLE_vi[$7 & 255]($9);
  $IsAsync12 = ___async;
  if ($IsAsync12) {
   HEAP32[$ReallocAsyncCtx4>>2] = 10;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx4>>2] = 10;
  sp = STACKTOP;
  return;
 } else {
  $8 = HEAP32[64>>2]|0;
  $ReallocAsyncCtx3 = (_emscripten_realloc_async_context(4)|0);
  FUNCTION_TABLE_vi[$7 & 255]($8);
  $IsAsync8 = ___async;
  if ($IsAsync8) {
   HEAP32[$ReallocAsyncCtx3>>2] = 9;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx3>>2] = 9;
  sp = STACKTOP;
  return;
 }
}
function _update_ball__async_cb109($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0.0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0;
 var $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0;
 var $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0, $62 = 0.0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0;
 var $93 = 0.0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0.0, $IsAsync27 = 0, $IsAsync30 = 0, $IsAsync33 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[80>>2]|0;
 $2 = ((($1)) + 44|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(0);
 if (!($4)) {
  $5 = ((($1)) + 8|0);
  $6 = +HEAPF32[$5>>2];
  $7 = HEAP32[8>>2]|0;
  $8 = ((($7)) + 8|0);
  $9 = +HEAPF32[$8>>2];
  $10 = $6 - $9;
  $11 = +HEAPF32[24>>2];
  $12 = $10 / $11;
  $13 = $12 < 0.0;
  if (!($13)) {
   $14 = +HEAPF32[16>>2];
   $15 = $11 * $14;
   $16 = $12 > $15;
   if (!($16)) {
    $17 = ((($7)) + 12|0);
    $18 = +HEAPF32[$17>>2];
    $19 = +HEAPF32[32>>2];
    $20 = $12 * $19;
    $21 = $18 + $20;
    $22 = ((($1)) + 12|0);
    $23 = +HEAPF32[$22>>2];
    $24 = $21 - $23;
    $25 = $24 + -2.0;
    $26 = ((($1)) + 36|0);
    $27 = +HEAPF32[$26>>2];
    $28 = ((($7)) + 36|0);
    $29 = +HEAPF32[$28>>2];
    $30 = $27 + $29;
    $31 = $30 * 0.5;
    $32 = $25 < $31;
    if ($32) {
     $33 = $24 + 2.0;
     $34 = $30 * -0.5;
     $35 = $33 > $34;
     if ($35) {
      $ReallocAsyncCtx8 = (_emscripten_realloc_async_context(4)|0);
      _get_item();
      $IsAsync27 = ___async;
      if ($IsAsync27) {
       HEAP32[$ReallocAsyncCtx8>>2] = 14;
       sp = STACKTOP;
       return;
      }
      ___async_unwind = 0;
      HEAP32[$ReallocAsyncCtx8>>2] = 14;
      sp = STACKTOP;
      return;
     }
    }
   }
  }
 }
 $36 = HEAP32[88>>2]|0;
 $37 = ((($36)) + 44|0);
 $38 = HEAP8[$37>>0]|0;
 $39 = ($38<<24>>24)==(0);
 if (!($39)) {
  $40 = ((($36)) + 8|0);
  $41 = +HEAPF32[$40>>2];
  $42 = HEAP32[8>>2]|0;
  $43 = ((($42)) + 8|0);
  $44 = +HEAPF32[$43>>2];
  $45 = $41 - $44;
  $46 = +HEAPF32[24>>2];
  $47 = $45 / $46;
  $48 = $47 < 0.0;
  if (!($48)) {
   $49 = +HEAPF32[16>>2];
   $50 = $46 * $49;
   $51 = $47 > $50;
   if (!($51)) {
    $52 = ((($42)) + 12|0);
    $53 = +HEAPF32[$52>>2];
    $54 = +HEAPF32[32>>2];
    $55 = $47 * $54;
    $56 = $53 + $55;
    $57 = ((($36)) + 12|0);
    $58 = +HEAPF32[$57>>2];
    $59 = $56 - $58;
    $60 = $59 + -2.0;
    $61 = ((($36)) + 36|0);
    $62 = +HEAPF32[$61>>2];
    $63 = ((($42)) + 36|0);
    $64 = +HEAPF32[$63>>2];
    $65 = $62 + $64;
    $66 = $65 * 0.5;
    $67 = $60 < $66;
    if ($67) {
     $68 = $59 + 2.0;
     $69 = $65 * -0.5;
     $70 = $68 > $69;
     if ($70) {
      $ReallocAsyncCtx9 = (_emscripten_realloc_async_context(4)|0);
      _get_danger();
      $IsAsync30 = ___async;
      if ($IsAsync30) {
       HEAP32[$ReallocAsyncCtx9>>2] = 15;
       sp = STACKTOP;
       return;
      }
      ___async_unwind = 0;
      HEAP32[$ReallocAsyncCtx9>>2] = 15;
      sp = STACKTOP;
      return;
     }
    }
   }
  }
 }
 $71 = HEAP32[96>>2]|0;
 $72 = ((($71)) + 44|0);
 $73 = HEAP8[$72>>0]|0;
 $74 = ($73<<24>>24)!=(0);
 $75 = HEAP8[104>>0]|0;
 $76 = ($75<<24>>24)==(0);
 $or$cond = $74 & $76;
 if (!($or$cond)) {
  return;
 }
 $77 = ((($71)) + 8|0);
 $78 = +HEAPF32[$77>>2];
 $79 = HEAP32[8>>2]|0;
 $80 = ((($79)) + 8|0);
 $81 = +HEAPF32[$80>>2];
 $82 = $78 - $81;
 $83 = +HEAPF32[24>>2];
 $84 = $82 / $83;
 $85 = $84 < 0.0;
 if ($85) {
  return;
 }
 $86 = +HEAPF32[16>>2];
 $87 = $83 * $86;
 $88 = $84 > $87;
 if ($88) {
  return;
 }
 $89 = ((($79)) + 12|0);
 $90 = +HEAPF32[$89>>2];
 $91 = +HEAPF32[32>>2];
 $92 = $84 * $91;
 $93 = $90 + $92;
 $94 = ((($71)) + 12|0);
 $95 = +HEAPF32[$94>>2];
 $96 = $93 - $95;
 $97 = $96 + -2.0;
 $98 = ((($71)) + 36|0);
 $99 = +HEAPF32[$98>>2];
 $100 = ((($79)) + 36|0);
 $101 = +HEAPF32[$100>>2];
 $102 = $99 + $101;
 $103 = $102 * 0.5;
 $104 = $97 < $103;
 if (!($104)) {
  return;
 }
 $105 = $96 + 2.0;
 $106 = $102 * -0.5;
 $107 = $105 > $106;
 if (!($107)) {
  return;
 }
 $ReallocAsyncCtx10 = (_emscripten_realloc_async_context(4)|0);
 _blow_up_bomb();
 $IsAsync33 = ___async;
 if ($IsAsync33) {
  HEAP32[$ReallocAsyncCtx10>>2] = 16;
  sp = STACKTOP;
  return;
 }
 ___async_unwind = 0;
 HEAP32[$ReallocAsyncCtx10>>2] = 16;
 sp = STACKTOP;
 return;
}
function _update_ball__async_cb110($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0.0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0;
 var $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0;
 var $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0, $62 = 0.0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0;
 var $93 = 0.0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0.0, $IsAsync27 = 0, $IsAsync30 = 0, $IsAsync33 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[80>>2]|0;
 $2 = ((($1)) + 44|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(0);
 if (!($4)) {
  $5 = ((($1)) + 8|0);
  $6 = +HEAPF32[$5>>2];
  $7 = HEAP32[8>>2]|0;
  $8 = ((($7)) + 8|0);
  $9 = +HEAPF32[$8>>2];
  $10 = $6 - $9;
  $11 = +HEAPF32[24>>2];
  $12 = $10 / $11;
  $13 = $12 < 0.0;
  if (!($13)) {
   $14 = +HEAPF32[16>>2];
   $15 = $11 * $14;
   $16 = $12 > $15;
   if (!($16)) {
    $17 = ((($7)) + 12|0);
    $18 = +HEAPF32[$17>>2];
    $19 = +HEAPF32[32>>2];
    $20 = $12 * $19;
    $21 = $18 + $20;
    $22 = ((($1)) + 12|0);
    $23 = +HEAPF32[$22>>2];
    $24 = $21 - $23;
    $25 = $24 + -2.0;
    $26 = ((($1)) + 36|0);
    $27 = +HEAPF32[$26>>2];
    $28 = ((($7)) + 36|0);
    $29 = +HEAPF32[$28>>2];
    $30 = $27 + $29;
    $31 = $30 * 0.5;
    $32 = $25 < $31;
    if ($32) {
     $33 = $24 + 2.0;
     $34 = $30 * -0.5;
     $35 = $33 > $34;
     if ($35) {
      $ReallocAsyncCtx8 = (_emscripten_realloc_async_context(4)|0);
      _get_item();
      $IsAsync27 = ___async;
      if ($IsAsync27) {
       HEAP32[$ReallocAsyncCtx8>>2] = 14;
       sp = STACKTOP;
       return;
      }
      ___async_unwind = 0;
      HEAP32[$ReallocAsyncCtx8>>2] = 14;
      sp = STACKTOP;
      return;
     }
    }
   }
  }
 }
 $36 = HEAP32[88>>2]|0;
 $37 = ((($36)) + 44|0);
 $38 = HEAP8[$37>>0]|0;
 $39 = ($38<<24>>24)==(0);
 if (!($39)) {
  $40 = ((($36)) + 8|0);
  $41 = +HEAPF32[$40>>2];
  $42 = HEAP32[8>>2]|0;
  $43 = ((($42)) + 8|0);
  $44 = +HEAPF32[$43>>2];
  $45 = $41 - $44;
  $46 = +HEAPF32[24>>2];
  $47 = $45 / $46;
  $48 = $47 < 0.0;
  if (!($48)) {
   $49 = +HEAPF32[16>>2];
   $50 = $46 * $49;
   $51 = $47 > $50;
   if (!($51)) {
    $52 = ((($42)) + 12|0);
    $53 = +HEAPF32[$52>>2];
    $54 = +HEAPF32[32>>2];
    $55 = $47 * $54;
    $56 = $53 + $55;
    $57 = ((($36)) + 12|0);
    $58 = +HEAPF32[$57>>2];
    $59 = $56 - $58;
    $60 = $59 + -2.0;
    $61 = ((($36)) + 36|0);
    $62 = +HEAPF32[$61>>2];
    $63 = ((($42)) + 36|0);
    $64 = +HEAPF32[$63>>2];
    $65 = $62 + $64;
    $66 = $65 * 0.5;
    $67 = $60 < $66;
    if ($67) {
     $68 = $59 + 2.0;
     $69 = $65 * -0.5;
     $70 = $68 > $69;
     if ($70) {
      $ReallocAsyncCtx9 = (_emscripten_realloc_async_context(4)|0);
      _get_danger();
      $IsAsync30 = ___async;
      if ($IsAsync30) {
       HEAP32[$ReallocAsyncCtx9>>2] = 15;
       sp = STACKTOP;
       return;
      }
      ___async_unwind = 0;
      HEAP32[$ReallocAsyncCtx9>>2] = 15;
      sp = STACKTOP;
      return;
     }
    }
   }
  }
 }
 $71 = HEAP32[96>>2]|0;
 $72 = ((($71)) + 44|0);
 $73 = HEAP8[$72>>0]|0;
 $74 = ($73<<24>>24)!=(0);
 $75 = HEAP8[104>>0]|0;
 $76 = ($75<<24>>24)==(0);
 $or$cond = $74 & $76;
 if (!($or$cond)) {
  return;
 }
 $77 = ((($71)) + 8|0);
 $78 = +HEAPF32[$77>>2];
 $79 = HEAP32[8>>2]|0;
 $80 = ((($79)) + 8|0);
 $81 = +HEAPF32[$80>>2];
 $82 = $78 - $81;
 $83 = +HEAPF32[24>>2];
 $84 = $82 / $83;
 $85 = $84 < 0.0;
 if ($85) {
  return;
 }
 $86 = +HEAPF32[16>>2];
 $87 = $83 * $86;
 $88 = $84 > $87;
 if ($88) {
  return;
 }
 $89 = ((($79)) + 12|0);
 $90 = +HEAPF32[$89>>2];
 $91 = +HEAPF32[32>>2];
 $92 = $84 * $91;
 $93 = $90 + $92;
 $94 = ((($71)) + 12|0);
 $95 = +HEAPF32[$94>>2];
 $96 = $93 - $95;
 $97 = $96 + -2.0;
 $98 = ((($71)) + 36|0);
 $99 = +HEAPF32[$98>>2];
 $100 = ((($79)) + 36|0);
 $101 = +HEAPF32[$100>>2];
 $102 = $99 + $101;
 $103 = $102 * 0.5;
 $104 = $97 < $103;
 if (!($104)) {
  return;
 }
 $105 = $96 + 2.0;
 $106 = $102 * -0.5;
 $107 = $105 > $106;
 if (!($107)) {
  return;
 }
 $ReallocAsyncCtx10 = (_emscripten_realloc_async_context(4)|0);
 _blow_up_bomb();
 $IsAsync33 = ___async;
 if ($IsAsync33) {
  HEAP32[$ReallocAsyncCtx10>>2] = 16;
  sp = STACKTOP;
  return;
 }
 ___async_unwind = 0;
 HEAP32[$ReallocAsyncCtx10>>2] = 16;
 sp = STACKTOP;
 return;
}
function _update_ball__async_cb111($0) {
 $0 = $0|0;
 var $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $IsAsync20 = 0, $IsAsync24 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = +HEAPF32[32>>2];
 $2 = $1 > 0.0;
 if ($2) {
  $3 = -$1;
  HEAPF32[32>>2] = $3;
 }
 $4 = HEAP8[35200>>0]|0;
 $5 = $4 ^ 1;
 HEAP8[35200>>0] = $5;
 $6 = ($4<<24>>24)==(1);
 $7 = HEAP32[(651952)>>2]|0;
 if ($6) {
  $9 = HEAP32[72>>2]|0;
  $ReallocAsyncCtx7 = (_emscripten_realloc_async_context(4)|0);
  FUNCTION_TABLE_vi[$7 & 255]($9);
  $IsAsync24 = ___async;
  if ($IsAsync24) {
   HEAP32[$ReallocAsyncCtx7>>2] = 13;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx7>>2] = 13;
  sp = STACKTOP;
  return;
 } else {
  $8 = HEAP32[64>>2]|0;
  $ReallocAsyncCtx6 = (_emscripten_realloc_async_context(4)|0);
  FUNCTION_TABLE_vi[$7 & 255]($8);
  $IsAsync20 = ___async;
  if ($IsAsync20) {
   HEAP32[$ReallocAsyncCtx6>>2] = 12;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx6>>2] = 12;
  sp = STACKTOP;
  return;
 }
}
function _update_ball__async_cb112($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0.0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0;
 var $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0;
 var $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0, $62 = 0.0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0;
 var $93 = 0.0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0.0, $IsAsync27 = 0, $IsAsync30 = 0, $IsAsync33 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[80>>2]|0;
 $2 = ((($1)) + 44|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(0);
 if (!($4)) {
  $5 = ((($1)) + 8|0);
  $6 = +HEAPF32[$5>>2];
  $7 = HEAP32[8>>2]|0;
  $8 = ((($7)) + 8|0);
  $9 = +HEAPF32[$8>>2];
  $10 = $6 - $9;
  $11 = +HEAPF32[24>>2];
  $12 = $10 / $11;
  $13 = $12 < 0.0;
  if (!($13)) {
   $14 = +HEAPF32[16>>2];
   $15 = $11 * $14;
   $16 = $12 > $15;
   if (!($16)) {
    $17 = ((($7)) + 12|0);
    $18 = +HEAPF32[$17>>2];
    $19 = +HEAPF32[32>>2];
    $20 = $12 * $19;
    $21 = $18 + $20;
    $22 = ((($1)) + 12|0);
    $23 = +HEAPF32[$22>>2];
    $24 = $21 - $23;
    $25 = $24 + -2.0;
    $26 = ((($1)) + 36|0);
    $27 = +HEAPF32[$26>>2];
    $28 = ((($7)) + 36|0);
    $29 = +HEAPF32[$28>>2];
    $30 = $27 + $29;
    $31 = $30 * 0.5;
    $32 = $25 < $31;
    if ($32) {
     $33 = $24 + 2.0;
     $34 = $30 * -0.5;
     $35 = $33 > $34;
     if ($35) {
      $ReallocAsyncCtx8 = (_emscripten_realloc_async_context(4)|0);
      _get_item();
      $IsAsync27 = ___async;
      if ($IsAsync27) {
       HEAP32[$ReallocAsyncCtx8>>2] = 14;
       sp = STACKTOP;
       return;
      }
      ___async_unwind = 0;
      HEAP32[$ReallocAsyncCtx8>>2] = 14;
      sp = STACKTOP;
      return;
     }
    }
   }
  }
 }
 $36 = HEAP32[88>>2]|0;
 $37 = ((($36)) + 44|0);
 $38 = HEAP8[$37>>0]|0;
 $39 = ($38<<24>>24)==(0);
 if (!($39)) {
  $40 = ((($36)) + 8|0);
  $41 = +HEAPF32[$40>>2];
  $42 = HEAP32[8>>2]|0;
  $43 = ((($42)) + 8|0);
  $44 = +HEAPF32[$43>>2];
  $45 = $41 - $44;
  $46 = +HEAPF32[24>>2];
  $47 = $45 / $46;
  $48 = $47 < 0.0;
  if (!($48)) {
   $49 = +HEAPF32[16>>2];
   $50 = $46 * $49;
   $51 = $47 > $50;
   if (!($51)) {
    $52 = ((($42)) + 12|0);
    $53 = +HEAPF32[$52>>2];
    $54 = +HEAPF32[32>>2];
    $55 = $47 * $54;
    $56 = $53 + $55;
    $57 = ((($36)) + 12|0);
    $58 = +HEAPF32[$57>>2];
    $59 = $56 - $58;
    $60 = $59 + -2.0;
    $61 = ((($36)) + 36|0);
    $62 = +HEAPF32[$61>>2];
    $63 = ((($42)) + 36|0);
    $64 = +HEAPF32[$63>>2];
    $65 = $62 + $64;
    $66 = $65 * 0.5;
    $67 = $60 < $66;
    if ($67) {
     $68 = $59 + 2.0;
     $69 = $65 * -0.5;
     $70 = $68 > $69;
     if ($70) {
      $ReallocAsyncCtx9 = (_emscripten_realloc_async_context(4)|0);
      _get_danger();
      $IsAsync30 = ___async;
      if ($IsAsync30) {
       HEAP32[$ReallocAsyncCtx9>>2] = 15;
       sp = STACKTOP;
       return;
      }
      ___async_unwind = 0;
      HEAP32[$ReallocAsyncCtx9>>2] = 15;
      sp = STACKTOP;
      return;
     }
    }
   }
  }
 }
 $71 = HEAP32[96>>2]|0;
 $72 = ((($71)) + 44|0);
 $73 = HEAP8[$72>>0]|0;
 $74 = ($73<<24>>24)!=(0);
 $75 = HEAP8[104>>0]|0;
 $76 = ($75<<24>>24)==(0);
 $or$cond = $74 & $76;
 if (!($or$cond)) {
  return;
 }
 $77 = ((($71)) + 8|0);
 $78 = +HEAPF32[$77>>2];
 $79 = HEAP32[8>>2]|0;
 $80 = ((($79)) + 8|0);
 $81 = +HEAPF32[$80>>2];
 $82 = $78 - $81;
 $83 = +HEAPF32[24>>2];
 $84 = $82 / $83;
 $85 = $84 < 0.0;
 if ($85) {
  return;
 }
 $86 = +HEAPF32[16>>2];
 $87 = $83 * $86;
 $88 = $84 > $87;
 if ($88) {
  return;
 }
 $89 = ((($79)) + 12|0);
 $90 = +HEAPF32[$89>>2];
 $91 = +HEAPF32[32>>2];
 $92 = $84 * $91;
 $93 = $90 + $92;
 $94 = ((($71)) + 12|0);
 $95 = +HEAPF32[$94>>2];
 $96 = $93 - $95;
 $97 = $96 + -2.0;
 $98 = ((($71)) + 36|0);
 $99 = +HEAPF32[$98>>2];
 $100 = ((($79)) + 36|0);
 $101 = +HEAPF32[$100>>2];
 $102 = $99 + $101;
 $103 = $102 * 0.5;
 $104 = $97 < $103;
 if (!($104)) {
  return;
 }
 $105 = $96 + 2.0;
 $106 = $102 * -0.5;
 $107 = $105 > $106;
 if (!($107)) {
  return;
 }
 $ReallocAsyncCtx10 = (_emscripten_realloc_async_context(4)|0);
 _blow_up_bomb();
 $IsAsync33 = ___async;
 if ($IsAsync33) {
  HEAP32[$ReallocAsyncCtx10>>2] = 16;
  sp = STACKTOP;
  return;
 }
 ___async_unwind = 0;
 HEAP32[$ReallocAsyncCtx10>>2] = 16;
 sp = STACKTOP;
 return;
}
function _update_ball__async_cb113($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0.0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0;
 var $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0;
 var $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0, $62 = 0.0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0;
 var $93 = 0.0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0.0, $IsAsync27 = 0, $IsAsync30 = 0, $IsAsync33 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[80>>2]|0;
 $2 = ((($1)) + 44|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(0);
 if (!($4)) {
  $5 = ((($1)) + 8|0);
  $6 = +HEAPF32[$5>>2];
  $7 = HEAP32[8>>2]|0;
  $8 = ((($7)) + 8|0);
  $9 = +HEAPF32[$8>>2];
  $10 = $6 - $9;
  $11 = +HEAPF32[24>>2];
  $12 = $10 / $11;
  $13 = $12 < 0.0;
  if (!($13)) {
   $14 = +HEAPF32[16>>2];
   $15 = $11 * $14;
   $16 = $12 > $15;
   if (!($16)) {
    $17 = ((($7)) + 12|0);
    $18 = +HEAPF32[$17>>2];
    $19 = +HEAPF32[32>>2];
    $20 = $12 * $19;
    $21 = $18 + $20;
    $22 = ((($1)) + 12|0);
    $23 = +HEAPF32[$22>>2];
    $24 = $21 - $23;
    $25 = $24 + -2.0;
    $26 = ((($1)) + 36|0);
    $27 = +HEAPF32[$26>>2];
    $28 = ((($7)) + 36|0);
    $29 = +HEAPF32[$28>>2];
    $30 = $27 + $29;
    $31 = $30 * 0.5;
    $32 = $25 < $31;
    if ($32) {
     $33 = $24 + 2.0;
     $34 = $30 * -0.5;
     $35 = $33 > $34;
     if ($35) {
      $ReallocAsyncCtx8 = (_emscripten_realloc_async_context(4)|0);
      _get_item();
      $IsAsync27 = ___async;
      if ($IsAsync27) {
       HEAP32[$ReallocAsyncCtx8>>2] = 14;
       sp = STACKTOP;
       return;
      }
      ___async_unwind = 0;
      HEAP32[$ReallocAsyncCtx8>>2] = 14;
      sp = STACKTOP;
      return;
     }
    }
   }
  }
 }
 $36 = HEAP32[88>>2]|0;
 $37 = ((($36)) + 44|0);
 $38 = HEAP8[$37>>0]|0;
 $39 = ($38<<24>>24)==(0);
 if (!($39)) {
  $40 = ((($36)) + 8|0);
  $41 = +HEAPF32[$40>>2];
  $42 = HEAP32[8>>2]|0;
  $43 = ((($42)) + 8|0);
  $44 = +HEAPF32[$43>>2];
  $45 = $41 - $44;
  $46 = +HEAPF32[24>>2];
  $47 = $45 / $46;
  $48 = $47 < 0.0;
  if (!($48)) {
   $49 = +HEAPF32[16>>2];
   $50 = $46 * $49;
   $51 = $47 > $50;
   if (!($51)) {
    $52 = ((($42)) + 12|0);
    $53 = +HEAPF32[$52>>2];
    $54 = +HEAPF32[32>>2];
    $55 = $47 * $54;
    $56 = $53 + $55;
    $57 = ((($36)) + 12|0);
    $58 = +HEAPF32[$57>>2];
    $59 = $56 - $58;
    $60 = $59 + -2.0;
    $61 = ((($36)) + 36|0);
    $62 = +HEAPF32[$61>>2];
    $63 = ((($42)) + 36|0);
    $64 = +HEAPF32[$63>>2];
    $65 = $62 + $64;
    $66 = $65 * 0.5;
    $67 = $60 < $66;
    if ($67) {
     $68 = $59 + 2.0;
     $69 = $65 * -0.5;
     $70 = $68 > $69;
     if ($70) {
      $ReallocAsyncCtx9 = (_emscripten_realloc_async_context(4)|0);
      _get_danger();
      $IsAsync30 = ___async;
      if ($IsAsync30) {
       HEAP32[$ReallocAsyncCtx9>>2] = 15;
       sp = STACKTOP;
       return;
      }
      ___async_unwind = 0;
      HEAP32[$ReallocAsyncCtx9>>2] = 15;
      sp = STACKTOP;
      return;
     }
    }
   }
  }
 }
 $71 = HEAP32[96>>2]|0;
 $72 = ((($71)) + 44|0);
 $73 = HEAP8[$72>>0]|0;
 $74 = ($73<<24>>24)!=(0);
 $75 = HEAP8[104>>0]|0;
 $76 = ($75<<24>>24)==(0);
 $or$cond = $74 & $76;
 if (!($or$cond)) {
  return;
 }
 $77 = ((($71)) + 8|0);
 $78 = +HEAPF32[$77>>2];
 $79 = HEAP32[8>>2]|0;
 $80 = ((($79)) + 8|0);
 $81 = +HEAPF32[$80>>2];
 $82 = $78 - $81;
 $83 = +HEAPF32[24>>2];
 $84 = $82 / $83;
 $85 = $84 < 0.0;
 if ($85) {
  return;
 }
 $86 = +HEAPF32[16>>2];
 $87 = $83 * $86;
 $88 = $84 > $87;
 if ($88) {
  return;
 }
 $89 = ((($79)) + 12|0);
 $90 = +HEAPF32[$89>>2];
 $91 = +HEAPF32[32>>2];
 $92 = $84 * $91;
 $93 = $90 + $92;
 $94 = ((($71)) + 12|0);
 $95 = +HEAPF32[$94>>2];
 $96 = $93 - $95;
 $97 = $96 + -2.0;
 $98 = ((($71)) + 36|0);
 $99 = +HEAPF32[$98>>2];
 $100 = ((($79)) + 36|0);
 $101 = +HEAPF32[$100>>2];
 $102 = $99 + $101;
 $103 = $102 * 0.5;
 $104 = $97 < $103;
 if (!($104)) {
  return;
 }
 $105 = $96 + 2.0;
 $106 = $102 * -0.5;
 $107 = $105 > $106;
 if (!($107)) {
  return;
 }
 $ReallocAsyncCtx10 = (_emscripten_realloc_async_context(4)|0);
 _blow_up_bomb();
 $IsAsync33 = ___async;
 if ($IsAsync33) {
  HEAP32[$ReallocAsyncCtx10>>2] = 16;
  sp = STACKTOP;
  return;
 }
 ___async_unwind = 0;
 HEAP32[$ReallocAsyncCtx10>>2] = 16;
 sp = STACKTOP;
 return;
}
function _update_ball__async_cb114($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0.0;
 var $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0;
 var $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0;
 var $64 = 0.0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $8 = 0, $9 = 0.0, $IsAsync30 = 0, $IsAsync33 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[88>>2]|0;
 $2 = ((($1)) + 44|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(0);
 if (!($4)) {
  $5 = ((($1)) + 8|0);
  $6 = +HEAPF32[$5>>2];
  $7 = HEAP32[8>>2]|0;
  $8 = ((($7)) + 8|0);
  $9 = +HEAPF32[$8>>2];
  $10 = $6 - $9;
  $11 = +HEAPF32[24>>2];
  $12 = $10 / $11;
  $13 = $12 < 0.0;
  if (!($13)) {
   $14 = +HEAPF32[16>>2];
   $15 = $11 * $14;
   $16 = $12 > $15;
   if (!($16)) {
    $17 = ((($7)) + 12|0);
    $18 = +HEAPF32[$17>>2];
    $19 = +HEAPF32[32>>2];
    $20 = $12 * $19;
    $21 = $18 + $20;
    $22 = ((($1)) + 12|0);
    $23 = +HEAPF32[$22>>2];
    $24 = $21 - $23;
    $25 = $24 + -2.0;
    $26 = ((($1)) + 36|0);
    $27 = +HEAPF32[$26>>2];
    $28 = ((($7)) + 36|0);
    $29 = +HEAPF32[$28>>2];
    $30 = $27 + $29;
    $31 = $30 * 0.5;
    $32 = $25 < $31;
    if ($32) {
     $33 = $24 + 2.0;
     $34 = $30 * -0.5;
     $35 = $33 > $34;
     if ($35) {
      $ReallocAsyncCtx9 = (_emscripten_realloc_async_context(4)|0);
      _get_danger();
      $IsAsync30 = ___async;
      if ($IsAsync30) {
       HEAP32[$ReallocAsyncCtx9>>2] = 15;
       sp = STACKTOP;
       return;
      }
      ___async_unwind = 0;
      HEAP32[$ReallocAsyncCtx9>>2] = 15;
      sp = STACKTOP;
      return;
     }
    }
   }
  }
 }
 $36 = HEAP32[96>>2]|0;
 $37 = ((($36)) + 44|0);
 $38 = HEAP8[$37>>0]|0;
 $39 = ($38<<24>>24)!=(0);
 $40 = HEAP8[104>>0]|0;
 $41 = ($40<<24>>24)==(0);
 $or$cond = $39 & $41;
 if (!($or$cond)) {
  return;
 }
 $42 = ((($36)) + 8|0);
 $43 = +HEAPF32[$42>>2];
 $44 = HEAP32[8>>2]|0;
 $45 = ((($44)) + 8|0);
 $46 = +HEAPF32[$45>>2];
 $47 = $43 - $46;
 $48 = +HEAPF32[24>>2];
 $49 = $47 / $48;
 $50 = $49 < 0.0;
 if ($50) {
  return;
 }
 $51 = +HEAPF32[16>>2];
 $52 = $48 * $51;
 $53 = $49 > $52;
 if ($53) {
  return;
 }
 $54 = ((($44)) + 12|0);
 $55 = +HEAPF32[$54>>2];
 $56 = +HEAPF32[32>>2];
 $57 = $49 * $56;
 $58 = $55 + $57;
 $59 = ((($36)) + 12|0);
 $60 = +HEAPF32[$59>>2];
 $61 = $58 - $60;
 $62 = $61 + -2.0;
 $63 = ((($36)) + 36|0);
 $64 = +HEAPF32[$63>>2];
 $65 = ((($44)) + 36|0);
 $66 = +HEAPF32[$65>>2];
 $67 = $64 + $66;
 $68 = $67 * 0.5;
 $69 = $62 < $68;
 if (!($69)) {
  return;
 }
 $70 = $61 + 2.0;
 $71 = $67 * -0.5;
 $72 = $70 > $71;
 if (!($72)) {
  return;
 }
 $ReallocAsyncCtx10 = (_emscripten_realloc_async_context(4)|0);
 _blow_up_bomb();
 $IsAsync33 = ___async;
 if ($IsAsync33) {
  HEAP32[$ReallocAsyncCtx10>>2] = 16;
  sp = STACKTOP;
  return;
 }
 ___async_unwind = 0;
 HEAP32[$ReallocAsyncCtx10>>2] = 16;
 sp = STACKTOP;
 return;
}
function _update_ball__async_cb115($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0;
 var $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, $IsAsync33 = 0, $ReallocAsyncCtx10 = 0, $or$cond = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[96>>2]|0;
 $2 = ((($1)) + 44|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)!=(0);
 $5 = HEAP8[104>>0]|0;
 $6 = ($5<<24>>24)==(0);
 $or$cond = $4 & $6;
 if (!($or$cond)) {
  return;
 }
 $7 = ((($1)) + 8|0);
 $8 = +HEAPF32[$7>>2];
 $9 = HEAP32[8>>2]|0;
 $10 = ((($9)) + 8|0);
 $11 = +HEAPF32[$10>>2];
 $12 = $8 - $11;
 $13 = +HEAPF32[24>>2];
 $14 = $12 / $13;
 $15 = $14 < 0.0;
 if ($15) {
  return;
 }
 $16 = +HEAPF32[16>>2];
 $17 = $13 * $16;
 $18 = $14 > $17;
 if ($18) {
  return;
 }
 $19 = ((($9)) + 12|0);
 $20 = +HEAPF32[$19>>2];
 $21 = +HEAPF32[32>>2];
 $22 = $14 * $21;
 $23 = $20 + $22;
 $24 = ((($1)) + 12|0);
 $25 = +HEAPF32[$24>>2];
 $26 = $23 - $25;
 $27 = $26 + -2.0;
 $28 = ((($1)) + 36|0);
 $29 = +HEAPF32[$28>>2];
 $30 = ((($9)) + 36|0);
 $31 = +HEAPF32[$30>>2];
 $32 = $29 + $31;
 $33 = $32 * 0.5;
 $34 = $27 < $33;
 if (!($34)) {
  return;
 }
 $35 = $26 + 2.0;
 $36 = $32 * -0.5;
 $37 = $35 > $36;
 if (!($37)) {
  return;
 }
 $ReallocAsyncCtx10 = (_emscripten_realloc_async_context(4)|0);
 _blow_up_bomb();
 $IsAsync33 = ___async;
 if ($IsAsync33) {
  HEAP32[$ReallocAsyncCtx10>>2] = 16;
  sp = STACKTOP;
  return;
 }
 ___async_unwind = 0;
 HEAP32[$ReallocAsyncCtx10>>2] = 16;
 sp = STACKTOP;
 return;
}
function _update_ball__async_cb116($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _show_bomb__async_cb($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, $IsAsync3 = 0, $ReallocAsyncCtx2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = +HEAPF32[$3>>2];
 $5 = ((($0)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ___async_retval;
 $AsyncRetVal = HEAP32[$7>>2]|0;
 $8 = HEAP32[(389576)>>2]|0;
 $9 = (($AsyncRetVal>>>0) % ($8>>>0))&-1;
 $10 = (+($9>>>0));
 $ReallocAsyncCtx2 = (_emscripten_realloc_async_context(4)|0);
 FUNCTION_TABLE_vidd[$6 & 255]($2,$4,$10);
 $IsAsync3 = ___async;
 if ($IsAsync3) {
  HEAP32[$ReallocAsyncCtx2>>2] = 20;
  sp = STACKTOP;
  return;
 }
 ___async_unwind = 0;
 HEAP32[$ReallocAsyncCtx2>>2] = 20;
 sp = STACKTOP;
 return;
}
function _show_bomb__async_cb117($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[96>>2]|0;
 $2 = ((($1)) + 44|0);
 HEAP8[$2>>0] = 1;
 return;
}
function _show_bomb__async_cb118($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, $IsAsync10 = 0, $ReallocAsyncCtx4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = +HEAPF32[$3>>2];
 $5 = ((($0)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ___async_retval;
 $AsyncRetVal = HEAP32[$7>>2]|0;
 $8 = HEAP32[(389576)>>2]|0;
 $9 = (($AsyncRetVal>>>0) % ($8>>>0))&-1;
 $10 = (+($9>>>0));
 $ReallocAsyncCtx4 = (_emscripten_realloc_async_context(4)|0);
 FUNCTION_TABLE_vidd[$6 & 255]($2,$4,$10);
 $IsAsync10 = ___async;
 if ($IsAsync10) {
  HEAP32[$ReallocAsyncCtx4>>2] = 22;
  sp = STACKTOP;
  return;
 }
 ___async_unwind = 0;
 HEAP32[$ReallocAsyncCtx4>>2] = 22;
 sp = STACKTOP;
 return;
}
function _show_bomb__async_cb119($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[96>>2]|0;
 $2 = ((($1)) + 44|0);
 HEAP8[$2>>0] = 1;
 return;
}
function __initialize_sound__async_cb($0) {
 $0 = $0|0;
 var $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $AsyncRetVal = 0, $c2$0 = 0, $c2$0$lcssa = 0, $c2$0$ph = 0, $i$0$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ___async_retval;
 $AsyncRetVal = HEAP32[$1>>2]|0;
 HEAP32[(651788)>>2] = $AsyncRetVal;
 $2 = ($AsyncRetVal|0)==(0|0);
 if ($2) {
  $3 = HEAP32[_stderr>>2]|0;
  (_fwrite((388672|0),123,1,($3|0))|0);
  _exit(1);
  // unreachable;
 }
 $4 = (_alcGetString((0|0),4100)|0);
 $5 = HEAP32[(651788)>>2]|0;
 HEAP32[$5>>2] = $4;
 $c2$0$ph = $4;$i$0$ph = 0;
 while(1) {
  $c2$0 = $c2$0$ph;
  while(1) {
   $6 = HEAP8[$c2$0>>0]|0;
   $7 = ($6<<24>>24)==(0);
   $$pre = ((($c2$0)) + 1|0);
   if ($7) {
    $c2$0$lcssa = $c2$0;
    break;
   } else {
    $c2$0 = $$pre;
   }
  }
  $8 = (($i$0$ph) + 1)|0;
  $9 = HEAP32[(651784)>>2]|0;
  $10 = ($8|0)<($9|0);
  if (!($10)) {
   break;
  }
  $11 = ((($c2$0$lcssa)) + 1|0);
  $12 = HEAP32[(651788)>>2]|0;
  $13 = (($12) + ($8<<2)|0);
  HEAP32[$13>>2] = $11;
  $c2$0$ph = $11;$i$0$ph = $8;
 }
 $14 = HEAP32[388624>>2]|0;
 $15 = ($14|0)==(0|0);
 if (!($15)) {
  $16 = (_alcCreateContext(($14|0),(0|0))|0);
  HEAP32[388800>>2] = $16;
  (_alcMakeContextCurrent(($16|0))|0);
 }
 (_alGetError()|0);
 $17 = HEAP32[388624>>2]|0;
 $18 = ($17|0)==(0|0);
 if ($18) {
  return;
 }
 _alGenSources(5,(388808|0));
 $19 = (_alGetError()|0);
 $20 = ($19|0)==(0);
 if ($20) {
  return;
 }
 $21 = HEAP32[_stderr>>2]|0;
 (_fwrite((388832|0),95,1,($21|0))|0);
 return;
}
function __change_resolution__async_cb($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, $IsAsync3 = 0, $ReallocAsyncCtx2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 16|0);
 $8 = +HEAPF32[$7>>2];
 $9 = ((($0)) + 20|0);
 $10 = +HEAPF32[$9>>2];
 $11 = ((($0)) + 24|0);
 $12 = +HEAPF32[$11>>2];
 $13 = ((($0)) + 28|0);
 $14 = +HEAPF32[$13>>2];
 $15 = ((($0)) + 32|0);
 $16 = +HEAPF32[$15>>2];
 $17 = ((($0)) + 36|0);
 $18 = +HEAPF32[$17>>2];
 $19 = HEAP32[(651928)>>2]|0;
 $20 = ((((2280 + (($2*1856)|0)|0) + (($4*116)|0)|0)) + 16|0);
 $21 = +HEAPF32[$20>>2];
 $ReallocAsyncCtx2 = (_emscripten_realloc_async_context(40)|0);
 FUNCTION_TABLE_vid[$19 & 255]($6,$21);
 $IsAsync3 = ___async;
 if (!($IsAsync3)) {
  ___async_unwind = 0;
 }
 HEAP32[$ReallocAsyncCtx2>>2] = 167;
 $22 = ((($ReallocAsyncCtx2)) + 4|0);
 HEAP32[$22>>2] = $2;
 $23 = ((($ReallocAsyncCtx2)) + 8|0);
 HEAP32[$23>>2] = $4;
 $24 = ((($ReallocAsyncCtx2)) + 12|0);
 HEAPF32[$24>>2] = $8;
 $25 = ((($ReallocAsyncCtx2)) + 16|0);
 HEAPF32[$25>>2] = $10;
 $26 = ((($ReallocAsyncCtx2)) + 20|0);
 HEAP32[$26>>2] = $6;
 $27 = ((($ReallocAsyncCtx2)) + 24|0);
 HEAPF32[$27>>2] = $12;
 $28 = ((($ReallocAsyncCtx2)) + 28|0);
 HEAPF32[$28>>2] = $14;
 $29 = ((($ReallocAsyncCtx2)) + 32|0);
 HEAPF32[$29>>2] = $16;
 $30 = ((($ReallocAsyncCtx2)) + 36|0);
 HEAPF32[$30>>2] = $18;
 sp = STACKTOP;
 return;
}
function __change_resolution__async_cb120($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0;
 var $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $7 = 0, $8 = 0.0, $9 = 0, $IsAsync = 0, $IsAsync6 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx3 = 0, $exitcond = 0, $exitcond4 = 0, $i$03$reg2mem$0 = 0, $i$03$reg2mem$1 = 0, $j$01 = 0, $j$01$reg2mem$0 = 0, $new_height$0 = 0.0, $new_width$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 12|0);
 $6 = +HEAPF32[$5>>2];
 $7 = ((($0)) + 16|0);
 $8 = +HEAPF32[$7>>2];
 $9 = ((($0)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($0)) + 24|0);
 $12 = +HEAPF32[$11>>2];
 $13 = ((($0)) + 28|0);
 $14 = +HEAPF32[$13>>2];
 $15 = ((($0)) + 32|0);
 $16 = +HEAPF32[$15>>2];
 $17 = ((($0)) + 36|0);
 $18 = +HEAPF32[$17>>2];
 $40 = ((((2280 + (($2*1856)|0)|0) + (($4*116)|0)|0)) + 45|0);
 $41 = HEAP8[$40>>0]|0;
 $42 = ((((2280 + (($2*1856)|0)|0) + (($4*116)|0)|0)) + 46|0);
 $43 = HEAP8[$42>>0]|0;
 $44 = $41 | $43;
 $45 = ($44<<24>>24)==(0);
 if ($45) {
  $i$03$reg2mem$1 = $2;$j$01$reg2mem$0 = $4;
 } else {
  $46 = ($41<<24>>24)==(0);
  $47 = ((((2280 + (($2*1856)|0)|0) + (($4*116)|0)|0)) + 36|0);
  $48 = +HEAPF32[$47>>2];
  $49 = ((((2280 + (($2*1856)|0)|0) + (($4*116)|0)|0)) + 40|0);
  $50 = +HEAPF32[$49>>2];
  $51 = $50 * $6;
  $new_width$0 = $46 ? $50 : $51;
  $52 = ($43<<24>>24)==(0);
  $53 = $48 * $8;
  $new_height$0 = $52 ? $48 : $53;
  $54 = HEAP32[(651924)>>2]|0;
  $ReallocAsyncCtx3 = (_emscripten_realloc_async_context(36)|0);
  FUNCTION_TABLE_vidd[$54 & 255]($10,$new_width$0,$new_height$0);
  $IsAsync6 = ___async;
  if ($IsAsync6) {
   HEAP32[$ReallocAsyncCtx3>>2] = 168;
   $55 = ((($ReallocAsyncCtx3)) + 4|0);
   HEAP32[$55>>2] = $4;
   $56 = ((($ReallocAsyncCtx3)) + 8|0);
   HEAP32[$56>>2] = $2;
   $57 = ((($ReallocAsyncCtx3)) + 12|0);
   HEAPF32[$57>>2] = $12;
   $58 = ((($ReallocAsyncCtx3)) + 16|0);
   HEAPF32[$58>>2] = $14;
   $59 = ((($ReallocAsyncCtx3)) + 20|0);
   HEAPF32[$59>>2] = $16;
   $60 = ((($ReallocAsyncCtx3)) + 24|0);
   HEAPF32[$60>>2] = $18;
   $61 = ((($ReallocAsyncCtx3)) + 28|0);
   HEAPF32[$61>>2] = $6;
   $62 = ((($ReallocAsyncCtx3)) + 32|0);
   HEAPF32[$62>>2] = $8;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx3>>2] = 168;
  $55 = ((($ReallocAsyncCtx3)) + 4|0);
  HEAP32[$55>>2] = $4;
  $56 = ((($ReallocAsyncCtx3)) + 8|0);
  HEAP32[$56>>2] = $2;
  $57 = ((($ReallocAsyncCtx3)) + 12|0);
  HEAPF32[$57>>2] = $12;
  $58 = ((($ReallocAsyncCtx3)) + 16|0);
  HEAPF32[$58>>2] = $14;
  $59 = ((($ReallocAsyncCtx3)) + 20|0);
  HEAPF32[$59>>2] = $16;
  $60 = ((($ReallocAsyncCtx3)) + 24|0);
  HEAPF32[$60>>2] = $18;
  $61 = ((($ReallocAsyncCtx3)) + 28|0);
  HEAPF32[$61>>2] = $6;
  $62 = ((($ReallocAsyncCtx3)) + 32|0);
  HEAPF32[$62>>2] = $8;
  sp = STACKTOP;
  return;
 }
 while(1) {
  $63 = (($j$01$reg2mem$0) + 1)|0;
  $exitcond = ($63|0)==(16);
  if ($exitcond) {
   $64 = (($i$03$reg2mem$1) + 1)|0;
   $exitcond4 = ($64|0)==(16);
   if ($exitcond4) {
    label = 13;
    break;
   }
   $i$03$reg2mem$0 = $64;$j$01 = 0;
  } else {
   $i$03$reg2mem$0 = $i$03$reg2mem$1;$j$01 = $63;
  }
  $19 = ((2280 + (($i$03$reg2mem$0*1856)|0)|0) + (($j$01*116)|0)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(0);
  if ($21) {
   $i$03$reg2mem$1 = $i$03$reg2mem$0;$j$01$reg2mem$0 = $j$01;
  } else {
   break;
  }
 }
 if ((label|0) == 13) {
  return;
 }
 $22 = HEAP32[(651920)>>2]|0;
 $23 = ((((2280 + (($i$03$reg2mem$0*1856)|0)|0) + (($j$01*116)|0)|0)) + 8|0);
 $24 = +HEAPF32[$23>>2];
 $25 = $12 * $24;
 $26 = $25 / $14;
 $27 = ((((2280 + (($i$03$reg2mem$0*1856)|0)|0) + (($j$01*116)|0)|0)) + 12|0);
 $28 = +HEAPF32[$27>>2];
 $29 = $16 * $28;
 $30 = $29 / $18;
 $ReallocAsyncCtx = (_emscripten_realloc_async_context(40)|0);
 FUNCTION_TABLE_vidd[$22 & 255]($19,$26,$30);
 $IsAsync = ___async;
 if (!($IsAsync)) {
  ___async_unwind = 0;
 }
 HEAP32[$ReallocAsyncCtx>>2] = 166;
 $31 = ((($ReallocAsyncCtx)) + 4|0);
 HEAP32[$31>>2] = $i$03$reg2mem$0;
 $32 = ((($ReallocAsyncCtx)) + 8|0);
 HEAP32[$32>>2] = $j$01;
 $33 = ((($ReallocAsyncCtx)) + 12|0);
 HEAP32[$33>>2] = $19;
 $34 = ((($ReallocAsyncCtx)) + 16|0);
 HEAPF32[$34>>2] = $6;
 $35 = ((($ReallocAsyncCtx)) + 20|0);
 HEAPF32[$35>>2] = $8;
 $36 = ((($ReallocAsyncCtx)) + 24|0);
 HEAPF32[$36>>2] = $12;
 $37 = ((($ReallocAsyncCtx)) + 28|0);
 HEAPF32[$37>>2] = $14;
 $38 = ((($ReallocAsyncCtx)) + 32|0);
 HEAPF32[$38>>2] = $16;
 $39 = ((($ReallocAsyncCtx)) + 36|0);
 HEAPF32[$39>>2] = $18;
 sp = STACKTOP;
 return;
}
function __change_resolution__async_cb121($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0;
 var $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, $IsAsync = 0;
 var $ReallocAsyncCtx = 0, $exitcond = 0, $exitcond4 = 0, $i$03$reg2mem$0 = 0, $i$03$reg2mem$1 = 0, $j$01 = 0, $j$01$reg2mem$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 12|0);
 $6 = +HEAPF32[$5>>2];
 $7 = ((($0)) + 16|0);
 $8 = +HEAPF32[$7>>2];
 $9 = ((($0)) + 20|0);
 $10 = +HEAPF32[$9>>2];
 $11 = ((($0)) + 24|0);
 $12 = +HEAPF32[$11>>2];
 $13 = ((($0)) + 28|0);
 $14 = +HEAPF32[$13>>2];
 $15 = ((($0)) + 32|0);
 $16 = +HEAPF32[$15>>2];
 $i$03$reg2mem$1 = $4;$j$01$reg2mem$0 = $2;
 while(1) {
  $38 = (($j$01$reg2mem$0) + 1)|0;
  $exitcond = ($38|0)==(16);
  if ($exitcond) {
   $39 = (($i$03$reg2mem$1) + 1)|0;
   $exitcond4 = ($39|0)==(16);
   if ($exitcond4) {
    label = 10;
    break;
   }
   $i$03$reg2mem$0 = $39;$j$01 = 0;
  } else {
   $i$03$reg2mem$0 = $i$03$reg2mem$1;$j$01 = $38;
  }
  $17 = ((2280 + (($i$03$reg2mem$0*1856)|0)|0) + (($j$01*116)|0)|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)==(0);
  if ($19) {
   $i$03$reg2mem$1 = $i$03$reg2mem$0;$j$01$reg2mem$0 = $j$01;
  } else {
   break;
  }
 }
 if ((label|0) == 10) {
  return;
 }
 $20 = HEAP32[(651920)>>2]|0;
 $21 = ((((2280 + (($i$03$reg2mem$0*1856)|0)|0) + (($j$01*116)|0)|0)) + 8|0);
 $22 = +HEAPF32[$21>>2];
 $23 = $6 * $22;
 $24 = $23 / $8;
 $25 = ((((2280 + (($i$03$reg2mem$0*1856)|0)|0) + (($j$01*116)|0)|0)) + 12|0);
 $26 = +HEAPF32[$25>>2];
 $27 = $10 * $26;
 $28 = $27 / $12;
 $ReallocAsyncCtx = (_emscripten_realloc_async_context(40)|0);
 FUNCTION_TABLE_vidd[$20 & 255]($17,$24,$28);
 $IsAsync = ___async;
 if (!($IsAsync)) {
  ___async_unwind = 0;
 }
 HEAP32[$ReallocAsyncCtx>>2] = 166;
 $29 = ((($ReallocAsyncCtx)) + 4|0);
 HEAP32[$29>>2] = $i$03$reg2mem$0;
 $30 = ((($ReallocAsyncCtx)) + 8|0);
 HEAP32[$30>>2] = $j$01;
 $31 = ((($ReallocAsyncCtx)) + 12|0);
 HEAP32[$31>>2] = $17;
 $32 = ((($ReallocAsyncCtx)) + 16|0);
 HEAPF32[$32>>2] = $14;
 $33 = ((($ReallocAsyncCtx)) + 20|0);
 HEAPF32[$33>>2] = $16;
 $34 = ((($ReallocAsyncCtx)) + 24|0);
 HEAPF32[$34>>2] = $6;
 $35 = ((($ReallocAsyncCtx)) + 28|0);
 HEAPF32[$35>>2] = $8;
 $36 = ((($ReallocAsyncCtx)) + 32|0);
 HEAPF32[$36>>2] = $10;
 $37 = ((($ReallocAsyncCtx)) + 36|0);
 HEAPF32[$37>>2] = $12;
 sp = STACKTOP;
 return;
}
function _pong__async_cb($0) {
 $0 = $0|0;
 var $IsAsync101 = 0, $ReallocAsyncCtx27 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[382784>>0] = 0;
 HEAP8[382792>>0] = 1;
 HEAP8[35112>>0] = 0;
 HEAP32[35096>>2] = 0;
 $ReallocAsyncCtx27 = (_emscripten_realloc_async_context(4)|0);
 _initialize_paddle();
 $IsAsync101 = ___async;
 if (!($IsAsync101)) {
  ___async_unwind = 0;
 }
 HEAP32[$ReallocAsyncCtx27>>2] = 88;
 sp = STACKTOP;
 return;
}
function _pong__async_cb122($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $IsAsync7 = 0, $ReallocAsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[(651952)>>2]|0;
 $2 = HEAP32[35176>>2]|0;
 $ReallocAsyncCtx3 = (_emscripten_realloc_async_context(4)|0);
 FUNCTION_TABLE_vi[$1 & 255]($2);
 $IsAsync7 = ___async;
 if (!($IsAsync7)) {
  ___async_unwind = 0;
 }
 HEAP32[$ReallocAsyncCtx3>>2] = 96;
 sp = STACKTOP;
 return;
}
function _pong__async_cb123($0) {
 $0 = $0|0;
 var $$expand_i1_val = 0, $$not7 = 0, $$pr = 0, $$pr32 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0.0, $158 = 0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0, $163 = 0.0, $164 = 0.0, $165 = 0, $166 = 0, $167 = 0.0;
 var $168 = 0.0, $169 = 0, $17 = 0, $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0, $175 = 0, $176 = 0.0, $177 = 0.0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0, $182 = 0, $183 = 0.0, $184 = 0.0, $185 = 0;
 var $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $26 = 0.0, $27 = 0, $28 = 0.0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $IsAsync11 = 0, $IsAsync120 = 0;
 var $IsAsync142 = 0, $IsAsync146 = 0, $IsAsync18 = 0, $IsAsync22 = 0, $IsAsync30 = 0, $IsAsync4 = 0, $IsAsync54 = 0, $IsAsync58 = 0, $IsAsync62 = 0, $IsAsync73 = 0, $IsAsync77 = 0, $IsAsync81 = 0, $IsAsync85 = 0, $IsAsync89 = 0, $IsAsync93 = 0, $IsAsync97 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx16 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx2 = 0;
 var $ReallocAsyncCtx20 = 0, $ReallocAsyncCtx21 = 0, $ReallocAsyncCtx22 = 0, $ReallocAsyncCtx23 = 0, $ReallocAsyncCtx24 = 0, $ReallocAsyncCtx25 = 0, $ReallocAsyncCtx26 = 0, $ReallocAsyncCtx32 = 0, $ReallocAsyncCtx38 = 0, $ReallocAsyncCtx39 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx9 = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond30 = 0, $or$cond42 = 0;
 var $or$cond44 = 0, $or$cond9 = 0, $pad$0 = 0, $paddle2$paddle1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 L2: while(1) {
  $65 = HEAP32[(394012)>>2]|0;
  $66 = ($65|0)>(0);
  $67 = HEAP8[382784>>0]|0;
  $68 = ($67<<24>>24)==(0);
  $or$cond11 = $66 & $68;
  if ($or$cond11) {
   label = 31;
   break;
  }
  $78 = HEAP32[(394008)>>2]|0;
  $79 = ($78|0)>(0);
  $or$cond13 = $68 & $79;
  if ($or$cond13) {
   label = 39;
   break;
  }
  $89 = HEAP32[(389556)>>2]|0;
  $90 = HEAP32[$89>>2]|0;
  $91 = ($90|0)==(2);
  if ($91) {
   $92 = HEAP32[(390064)>>2]|0;
   $93 = ($92|0)>(0);
   $94 = HEAP8[382784>>0]|0;
   $95 = ($94<<24>>24)==(0);
   $or$cond15 = $93 & $95;
   if ($or$cond15) {
    label = 48;
    break;
   }
   $99 = HEAP32[(390048)>>2]|0;
   $100 = ($99|0)>(0);
   $or$cond17 = $95 & $100;
   if ($or$cond17) {
    label = 52;
    break;
   }
  }
  $104 = HEAP32[(389556)>>2]|0;
  $105 = HEAP32[$104>>2]|0;
  $106 = ($105|0)<(2);
  if ($106) {
   label = 56;
   break;
  }
  $107 = HEAP32[8>>2]|0;
  $108 = ((($107)) + 8|0);
  $109 = +HEAPF32[$108>>2];
  $110 = (~~(($109)));
  HEAP32[382808>>2] = $110;
  $111 = HEAP8[382784>>0]|0;
  $112 = ($111<<24>>24)==(0);
  if ($112) {
   label = 60;
   break;
  }
  $$pr32 = HEAP8[35112>>0]|0;
  $117 = ($$pr32<<24>>24)==(0);
  if (!($117)) {
   $118 = 389544;
   $119 = $118;
   $120 = HEAP32[$119>>2]|0;
   $121 = (($118) + 4)|0;
   $122 = $121;
   $123 = HEAP32[$122>>2]|0;
   $124 = 35120;
   $125 = $124;
   $126 = HEAP32[$125>>2]|0;
   $127 = (($124) + 4)|0;
   $128 = $127;
   $129 = HEAP32[$128>>2]|0;
   $130 = (_i64Subtract(($120|0),($123|0),($126|0),($129|0))|0);
   $131 = tempRet0;
   $132 = ($131>>>0)>(0);
   $133 = ($130>>>0)>(10000000);
   $134 = ($131|0)==(0);
   $135 = $134 & $133;
   $136 = $132 | $135;
   if ($136) {
    label = 72;
    break;
   }
   $137 = HEAP32[(651780)>>2]|0;
   if ((($137|0) == 5) | (($137|0) == 15)) {
    $138 = HEAP32[40>>2]|0;
    $139 = ((($138)) + 4|0);
    $140 = HEAP32[$139>>2]|0;
    $141 = ($140|0)==(4);
    $142 = ($131>>>0)>(0);
    $143 = ($130>>>0)>(5000000);
    $144 = ($131|0)==(0);
    $145 = $144 & $143;
    $146 = $142 | $145;
    $or$cond30 = $146 & $141;
    if ($or$cond30) {
     label = 72;
     break;
    }
   }
  }
  $147 = HEAP8[104>>0]|0;
  $148 = ($147<<24>>24)==(0);
  do {
   if (!($148)) {
    $149 = HEAP32[96>>2]|0;
    $150 = ((($149)) + 44|0);
    $151 = HEAP8[$150>>0]|0;
    $152 = ($151<<24>>24)==(0);
    if (!($152)) {
     $153 = ((($149)) + 8|0);
     $154 = +HEAPF32[$153>>2];
     $155 = HEAP32[(389572)>>2]|0;
     $156 = (($155|0) / 2)&-1;
     $157 = (+($156|0));
     $158 = $154 > $157;
     $paddle2$paddle1 = $158 ? 48 : 56;
     $pad$0 = HEAP32[$paddle2$paddle1>>2]|0;
     $159 = ((($149)) + 40|0);
     $160 = +HEAPF32[$159>>2];
     $161 = $160;
     $162 = (($155|0) / 40)&-1;
     $163 = (+($162|0));
     $164 = $163 * 10.0;
     $165 = $161 < $164;
     if ($165) {
      label = 78;
      break L2;
     }
     HEAP8[$150>>0] = 0;
     $175 = ((($pad$0)) + 40|0);
     $176 = +HEAPF32[$175>>2];
     $177 = $176;
     $178 = (($155|0) / 40)&-1;
     $179 = (+($178|0));
     $180 = $179 * 20.0;
     $181 = $177 < $180;
     if ($181) {
      label = 83;
      break L2;
     }
     $191 = ((($pad$0)) + 44|0);
     HEAP8[$191>>0] = 0;
     $192 = ((($pad$0)) + 4|0);
     $193 = HEAP32[$192>>2]|0;
     if ((($193|0) == 0)) {
      HEAP32[$192>>2] = 1;
      break;
     } else if ((($193|0) == 10)) {
      HEAP32[$192>>2] = 11;
      break;
     } else {
      break;
     }
    }
   }
  } while(0);
  $194 = HEAP8[382784>>0]|0;
  $195 = ($194<<24>>24)==(0);
  if ($195) {
   $196 = 389544;
   $197 = $196;
   $198 = HEAP32[$197>>2]|0;
   $199 = (($196) + 4)|0;
   $200 = $199;
   $201 = HEAP32[$200>>2]|0;
   $237 = $198;$238 = $201;
  } else {
   $202 = HEAP8[104>>0]|0;
   $203 = ($202<<24>>24)==(0);
   $204 = 389544;
   $205 = $204;
   $206 = HEAP32[$205>>2]|0;
   $207 = (($204) + 4)|0;
   $208 = $207;
   $209 = HEAP32[$208>>2]|0;
   $210 = 382800;
   $211 = $210;
   $212 = HEAP32[$211>>2]|0;
   $213 = (($210) + 4)|0;
   $214 = $213;
   $215 = HEAP32[$214>>2]|0;
   $216 = (_i64Subtract(($206|0),($209|0),($212|0),($215|0))|0);
   $217 = tempRet0;
   $218 = ($217>>>0)>(0);
   $219 = ($216>>>0)>(3000000);
   $220 = ($217|0)==(0);
   $221 = $220 & $219;
   $222 = $218 | $221;
   $or$cond42 = $203 & $222;
   $223 = (_i64Subtract(($206|0),($209|0),($212|0),($215|0))|0);
   $224 = tempRet0;
   $225 = ($224>>>0)>(0);
   $226 = ($223>>>0)>(6000000);
   $227 = ($224|0)==(0);
   $228 = $227 & $226;
   $229 = $225 | $228;
   $or$cond44 = $or$cond42 | $229;
   if ($or$cond44) {
    $230 = HEAP32[35096>>2]|0;
    $231 = ($230|0)==(6);
    if ($231) {
     $232 = HEAP32[(389556)>>2]|0;
     $233 = HEAP32[$232>>2]|0;
     $234 = ($233|0)==(1);
     if ($234) {
      $235 = ((($232)) + 4|0);
      HEAP8[$235>>0] = 1;
     } else {
      label = 96;
     }
    } else {
     label = 96;
    }
    if ((label|0) == 96) {
     label = 0;
     HEAP32[(651780)>>2] = 0;
    }
    HEAP8[128>>0] = 0;
    $237 = $206;$238 = $209;
   } else {
    $237 = $206;$238 = $209;
   }
  }
  $236 = HEAP32[216>>2]|0;
  $1 = (($236) + -40000)|0;
  HEAP32[216>>2] = $1;
  $239 = (_i64Add(($237|0),($238|0),40000,0)|0);
  $240 = tempRet0;
  $241 = 389544;
  $242 = $241;
  HEAP32[$242>>2] = $239;
  $243 = (($241) + 4)|0;
  $244 = $243;
  HEAP32[$244>>2] = $240;
  $2 = ($1|0)>(39999);
  if ($2) {
   label = 3;
   break;
  }
  __render();
  $245 = HEAP8[128>>0]|0;
  $$not7 = ($245<<24>>24)==(0);
  $246 = 389544;
  $247 = $246;
  $248 = HEAP32[$247>>2]|0;
  $249 = (($246) + 4)|0;
  $250 = $249;
  $251 = HEAP32[$250>>2]|0;
  $252 = ($248|0)==(0);
  $253 = ($251|0)==(0);
  $254 = $252 & $253;
  $or$cond9 = $$not7 & $254;
  if (!($or$cond9)) {
   label = 100;
   break;
  }
  $3 = HEAP32[(389696)>>2]|0;
  $4 = ($3|0)==(0);
  if (!($4)) {
   HEAP8[128>>0] = 0;
  }
  $5 = (_score_ball()|0);
  if ((($5|0) == 0)) {
   continue;
  } else if ((($5|0) == 5)) {
   $6 = HEAP8[382784>>0]|0;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    label = 10;
    break;
   } else {
    continue;
   }
  } else {
   $$pr = HEAP8[382784>>0]|0;
   $62 = ($$pr<<24>>24)==(0);
   if ($62) {
    label = 27;
    break;
   } else {
    continue;
   }
  }
 }
 switch (label|0) {
  case 3: {
   $ReallocAsyncCtx17 = (_emscripten_realloc_async_context(4)|0);
   __update();
   $IsAsync62 = ___async;
   if ($IsAsync62) {
    HEAP32[$ReallocAsyncCtx17>>2] = 94;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx17>>2] = 94;
   sp = STACKTOP;
   return;
   break;
  }
  case 10: {
   HEAP8[382784>>0] = 1;
   $8 = HEAP32[(389556)>>2]|0;
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(1);
   if ($10) {
    $11 = (_get_score(1)|0);
    $12 = ($11|0)==(5);
    if ($12) {
     $13 = 389544;
     $14 = $13;
     $15 = HEAP32[$14>>2]|0;
     $16 = (($13) + 4)|0;
     $17 = $16;
     $18 = HEAP32[$17>>2]|0;
     $19 = 382800;
     $20 = $19;
     HEAP32[$20>>2] = $15;
     $21 = (($19) + 4)|0;
     $22 = $21;
     HEAP32[$22>>2] = $18;
     $23 = HEAP32[(651920)>>2]|0;
     $24 = HEAP32[8>>2]|0;
     $25 = HEAP32[(389572)>>2]|0;
     $26 = (+($25|0));
     $27 = ((($24)) + 12|0);
     $28 = +HEAPF32[$27>>2];
     $ReallocAsyncCtx2 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vidd[$23 & 255]($24,$26,$28);
     $IsAsync4 = ___async;
     if ($IsAsync4) {
      HEAP32[$ReallocAsyncCtx2>>2] = 95;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx2>>2] = 95;
     sp = STACKTOP;
     return;
    } else {
     HEAP8[382784>>0] = 1;
     $29 = 389544;
     $30 = $29;
     $31 = HEAP32[$30>>2]|0;
     $32 = (($29) + 4)|0;
     $33 = $32;
     $34 = HEAP32[$33>>2]|0;
     $35 = 382800;
     $36 = $35;
     HEAP32[$36>>2] = $31;
     $37 = (($35) + 4)|0;
     $38 = $37;
     HEAP32[$38>>2] = $34;
     $39 = HEAP32[(651952)>>2]|0;
     $40 = HEAP32[35168>>2]|0;
     $ReallocAsyncCtx4 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vi[$39 & 255]($40);
     $IsAsync11 = ___async;
     if ($IsAsync11) {
      HEAP32[$ReallocAsyncCtx4>>2] = 97;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx4>>2] = 97;
     sp = STACKTOP;
     return;
    }
   } else {
    $41 = 389544;
    $42 = $41;
    $43 = HEAP32[$42>>2]|0;
    $44 = (($41) + 4)|0;
    $45 = $44;
    $46 = HEAP32[$45>>2]|0;
    $47 = 382800;
    $48 = $47;
    HEAP32[$48>>2] = $43;
    $49 = (($47) + 4)|0;
    $50 = $49;
    HEAP32[$50>>2] = $46;
    $51 = HEAP32[8>>2]|0;
    $52 = ((($51)) + 8|0);
    $53 = +HEAPF32[$52>>2];
    $54 = HEAP32[(389572)>>2]|0;
    $55 = (($54|0) / 2)&-1;
    $56 = (+($55|0));
    $57 = $53 > $56;
    $58 = HEAP32[(651920)>>2]|0;
    $59 = ((($51)) + 12|0);
    $60 = +HEAPF32[$59>>2];
    if ($57) {
     $61 = (+($54|0));
     $ReallocAsyncCtx6 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vidd[$58 & 255]($51,$61,$60);
     $IsAsync18 = ___async;
     if ($IsAsync18) {
      HEAP32[$ReallocAsyncCtx6>>2] = 99;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx6>>2] = 99;
     sp = STACKTOP;
     return;
    } else {
     $ReallocAsyncCtx7 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vidd[$58 & 255]($51,0.0,$60);
     $IsAsync22 = ___async;
     if ($IsAsync22) {
      HEAP32[$ReallocAsyncCtx7>>2] = 100;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx7>>2] = 100;
     sp = STACKTOP;
     return;
    }
   }
   break;
  }
  case 27: {
   $63 = HEAP32[(651952)>>2]|0;
   $64 = HEAP32[35128>>2]|0;
   $ReallocAsyncCtx9 = (_emscripten_realloc_async_context(4)|0);
   FUNCTION_TABLE_vi[$63 & 255]($64);
   $IsAsync30 = ___async;
   if ($IsAsync30) {
    HEAP32[$ReallocAsyncCtx9>>2] = 102;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx9>>2] = 102;
   sp = STACKTOP;
   return;
   break;
  }
  case 31: {
   $69 = HEAP32[(389556)>>2]|0;
   $70 = HEAP32[$69>>2]|0;
   $71 = ($70|0)==(1);
   if ($71) {
    $72 = HEAP32[56>>2]|0;
    $73 = HEAP32[(389576)>>2]|0;
    $74 = (($73|0) / 40)&-1;
    $ReallocAsyncCtx26 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($72,1106,$65,$74);
    $IsAsync97 = ___async;
    if ($IsAsync97) {
     HEAP32[$ReallocAsyncCtx26>>2] = 104;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx26>>2] = 104;
    sp = STACKTOP;
    return;
   } else {
    $75 = HEAP32[48>>2]|0;
    $76 = HEAP32[(389576)>>2]|0;
    $77 = (($76|0) / 40)&-1;
    $ReallocAsyncCtx25 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($75,1106,$65,$77);
    $IsAsync93 = ___async;
    if ($IsAsync93) {
     HEAP32[$ReallocAsyncCtx25>>2] = 105;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx25>>2] = 105;
    sp = STACKTOP;
    return;
   }
   break;
  }
  case 39: {
   $80 = HEAP32[(389556)>>2]|0;
   $81 = HEAP32[$80>>2]|0;
   $82 = ($81|0)==(1);
   if ($82) {
    $83 = HEAP32[56>>2]|0;
    $84 = HEAP32[(389576)>>2]|0;
    $85 = (($84|0) / 40)&-1;
    $ReallocAsyncCtx24 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($83,1105,$78,$85);
    $IsAsync89 = ___async;
    if ($IsAsync89) {
     HEAP32[$ReallocAsyncCtx24>>2] = 106;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx24>>2] = 106;
    sp = STACKTOP;
    return;
   } else {
    $86 = HEAP32[48>>2]|0;
    $87 = HEAP32[(389576)>>2]|0;
    $88 = (($87|0) / 40)&-1;
    $ReallocAsyncCtx23 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($86,1105,$78,$88);
    $IsAsync85 = ___async;
    if ($IsAsync85) {
     HEAP32[$ReallocAsyncCtx23>>2] = 107;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx23>>2] = 107;
    sp = STACKTOP;
    return;
   }
   break;
  }
  case 48: {
   $96 = HEAP32[56>>2]|0;
   $97 = HEAP32[(389576)>>2]|0;
   $98 = (($97|0) / 40)&-1;
   $ReallocAsyncCtx22 = (_emscripten_realloc_async_context(4)|0);
   _move_paddle($96,1106,$92,$98);
   $IsAsync81 = ___async;
   if ($IsAsync81) {
    HEAP32[$ReallocAsyncCtx22>>2] = 108;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx22>>2] = 108;
   sp = STACKTOP;
   return;
   break;
  }
  case 52: {
   $101 = HEAP32[56>>2]|0;
   $102 = HEAP32[(389576)>>2]|0;
   $103 = (($102|0) / 40)&-1;
   $ReallocAsyncCtx21 = (_emscripten_realloc_async_context(4)|0);
   _move_paddle($101,1105,$99,$103);
   $IsAsync77 = ___async;
   if ($IsAsync77) {
    HEAP32[$ReallocAsyncCtx21>>2] = 109;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx21>>2] = 109;
   sp = STACKTOP;
   return;
   break;
  }
  case 56: {
   $ReallocAsyncCtx20 = (_emscripten_realloc_async_context(4)|0);
   _paddle_ai(2);
   $IsAsync73 = ___async;
   if ($IsAsync73) {
    HEAP32[$ReallocAsyncCtx20>>2] = 110;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx20>>2] = 110;
   sp = STACKTOP;
   return;
   break;
  }
  case 60: {
   $113 = HEAP8[104>>0]|0;
   $114 = ($113<<24>>24)==(0);
   if ($114) {
    $ReallocAsyncCtx39 = (_emscripten_realloc_async_context(4)|0);
    $115 = (_collision_ball()|0);
    $IsAsync146 = ___async;
    if ($IsAsync146) {
     HEAP32[$ReallocAsyncCtx39>>2] = 111;
     sp = STACKTOP;
     return;
    }
    $116 = ___async_retval;
    $$expand_i1_val = $115&1;
    HEAP8[$116>>0] = $$expand_i1_val;
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx39>>2] = 111;
    sp = STACKTOP;
    return;
   } else {
    $ReallocAsyncCtx38 = (_emscripten_realloc_async_context(4)|0);
    _update_ball();
    $IsAsync142 = ___async;
    if ($IsAsync142) {
     HEAP32[$ReallocAsyncCtx38>>2] = 112;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx38>>2] = 112;
    sp = STACKTOP;
    return;
   }
   break;
  }
  case 72: {
   $ReallocAsyncCtx32 = (_emscripten_realloc_async_context(4)|0);
   _end_danger();
   $IsAsync120 = ___async;
   if ($IsAsync120) {
    HEAP32[$ReallocAsyncCtx32>>2] = 124;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx32>>2] = 124;
   sp = STACKTOP;
   return;
   break;
  }
  case 78: {
   $166 = HEAP32[(651924)>>2]|0;
   $167 = $161 * 1.2;
   $168 = $167;
   HEAPF32[$159>>2] = $168;
   $169 = ((($149)) + 36|0);
   $170 = +HEAPF32[$169>>2];
   $171 = $170;
   $172 = $171 * 1.2;
   $173 = $172;
   HEAPF32[$169>>2] = $173;
   $ReallocAsyncCtx15 = (_emscripten_realloc_async_context(8)|0);
   FUNCTION_TABLE_vidd[$166 & 255]($149,$168,$173);
   $IsAsync54 = ___async;
   if ($IsAsync54) {
    HEAP32[$ReallocAsyncCtx15>>2] = 125;
    $174 = ((($ReallocAsyncCtx15)) + 4|0);
    HEAP32[$174>>2] = $pad$0;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx15>>2] = 125;
   $174 = ((($ReallocAsyncCtx15)) + 4|0);
   HEAP32[$174>>2] = $pad$0;
   sp = STACKTOP;
   return;
   break;
  }
  case 83: {
   $182 = HEAP32[(651924)>>2]|0;
   $183 = $177 * 1.2;
   $184 = $183;
   HEAPF32[$175>>2] = $184;
   $185 = ((($pad$0)) + 36|0);
   $186 = +HEAPF32[$185>>2];
   $187 = $186;
   $188 = $187 * 1.1000000000000001;
   $189 = $188;
   HEAPF32[$185>>2] = $189;
   $ReallocAsyncCtx16 = (_emscripten_realloc_async_context(8)|0);
   FUNCTION_TABLE_vidd[$182 & 255]($pad$0,$184,$189);
   $IsAsync58 = ___async;
   if ($IsAsync58) {
    HEAP32[$ReallocAsyncCtx16>>2] = 126;
    $190 = ((($ReallocAsyncCtx16)) + 4|0);
    HEAP32[$190>>2] = $pad$0;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx16>>2] = 126;
   $190 = ((($ReallocAsyncCtx16)) + 4|0);
   HEAP32[$190>>2] = $pad$0;
   sp = STACKTOP;
   return;
   break;
  }
  case 100: {
   return;
   break;
  }
 }
}
function _pong__async_cb124($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $IsAsync14 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[(651920)>>2]|0;
 $2 = HEAP32[8>>2]|0;
 $3 = ((($2)) + 12|0);
 $4 = +HEAPF32[$3>>2];
 $ReallocAsyncCtx5 = (_emscripten_realloc_async_context(4)|0);
 FUNCTION_TABLE_vidd[$1 & 255]($2,0.0,$4);
 $IsAsync14 = ___async;
 if ($IsAsync14) {
  HEAP32[$ReallocAsyncCtx5>>2] = 98;
  sp = STACKTOP;
  return;
 }
 ___async_unwind = 0;
 HEAP32[$ReallocAsyncCtx5>>2] = 98;
 sp = STACKTOP;
 return;
}
function _pong__async_cb125($0) {
 $0 = $0|0;
 var $$expand_i1_val = 0, $$not7 = 0, $$pr = 0, $$pr32 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0.0, $157 = 0, $158 = 0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0, $162 = 0.0, $163 = 0.0, $164 = 0, $165 = 0.0, $166 = 0.0, $167 = 0;
 var $168 = 0, $169 = 0.0, $17 = 0, $170 = 0.0, $171 = 0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0, $181 = 0.0, $182 = 0.0, $183 = 0, $184 = 0, $185 = 0.0;
 var $186 = 0.0, $187 = 0, $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $26 = 0.0;
 var $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0;
 var $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $IsAsync11 = 0, $IsAsync120 = 0, $IsAsync142 = 0, $IsAsync146 = 0, $IsAsync18 = 0, $IsAsync22 = 0, $IsAsync30 = 0, $IsAsync4 = 0, $IsAsync54 = 0, $IsAsync58 = 0, $IsAsync62 = 0, $IsAsync73 = 0, $IsAsync77 = 0, $IsAsync81 = 0, $IsAsync85 = 0, $IsAsync89 = 0, $IsAsync93 = 0, $IsAsync97 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx16 = 0;
 var $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx20 = 0, $ReallocAsyncCtx21 = 0, $ReallocAsyncCtx22 = 0, $ReallocAsyncCtx23 = 0, $ReallocAsyncCtx24 = 0, $ReallocAsyncCtx25 = 0, $ReallocAsyncCtx26 = 0, $ReallocAsyncCtx32 = 0, $ReallocAsyncCtx38 = 0, $ReallocAsyncCtx39 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx9 = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond17 = 0;
 var $or$cond30 = 0, $or$cond42 = 0, $or$cond44 = 0, $or$cond9 = 0, $pad$0 = 0, $paddle2$paddle1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $41 = HEAP32[(651780)>>2]|0;
 $42 = ($41|0)<(10);
 if ($42) {
  HEAP32[(651780)>>2] = 9;
 } else {
  HEAP32[(651780)>>2] = 19;
 }
 L5: while(1) {
  $67 = HEAP32[(394012)>>2]|0;
  $68 = ($67|0)>(0);
  $69 = HEAP8[382784>>0]|0;
  $70 = ($69<<24>>24)==(0);
  $or$cond11 = $68 & $70;
  if ($or$cond11) {
   label = 33;
   break;
  }
  $80 = HEAP32[(394008)>>2]|0;
  $81 = ($80|0)>(0);
  $or$cond13 = $70 & $81;
  if ($or$cond13) {
   label = 41;
   break;
  }
  $91 = HEAP32[(389556)>>2]|0;
  $92 = HEAP32[$91>>2]|0;
  $93 = ($92|0)==(2);
  if ($93) {
   $94 = HEAP32[(390064)>>2]|0;
   $95 = ($94|0)>(0);
   $96 = HEAP8[382784>>0]|0;
   $97 = ($96<<24>>24)==(0);
   $or$cond15 = $95 & $97;
   if ($or$cond15) {
    label = 50;
    break;
   }
   $101 = HEAP32[(390048)>>2]|0;
   $102 = ($101|0)>(0);
   $or$cond17 = $97 & $102;
   if ($or$cond17) {
    label = 54;
    break;
   }
  }
  $106 = HEAP32[(389556)>>2]|0;
  $107 = HEAP32[$106>>2]|0;
  $108 = ($107|0)<(2);
  if ($108) {
   label = 58;
   break;
  }
  $109 = HEAP32[8>>2]|0;
  $110 = ((($109)) + 8|0);
  $111 = +HEAPF32[$110>>2];
  $112 = (~~(($111)));
  HEAP32[382808>>2] = $112;
  $113 = HEAP8[382784>>0]|0;
  $114 = ($113<<24>>24)==(0);
  if ($114) {
   label = 62;
   break;
  }
  $$pr32 = HEAP8[35112>>0]|0;
  $119 = ($$pr32<<24>>24)==(0);
  if (!($119)) {
   $120 = 389544;
   $121 = $120;
   $122 = HEAP32[$121>>2]|0;
   $123 = (($120) + 4)|0;
   $124 = $123;
   $125 = HEAP32[$124>>2]|0;
   $126 = 35120;
   $127 = $126;
   $128 = HEAP32[$127>>2]|0;
   $129 = (($126) + 4)|0;
   $130 = $129;
   $131 = HEAP32[$130>>2]|0;
   $132 = (_i64Subtract(($122|0),($125|0),($128|0),($131|0))|0);
   $133 = tempRet0;
   $134 = ($133>>>0)>(0);
   $135 = ($132>>>0)>(10000000);
   $136 = ($133|0)==(0);
   $137 = $136 & $135;
   $138 = $134 | $137;
   if ($138) {
    label = 74;
    break;
   }
   $139 = HEAP32[(651780)>>2]|0;
   if ((($139|0) == 5) | (($139|0) == 15)) {
    $140 = HEAP32[40>>2]|0;
    $141 = ((($140)) + 4|0);
    $142 = HEAP32[$141>>2]|0;
    $143 = ($142|0)==(4);
    $144 = ($133>>>0)>(0);
    $145 = ($132>>>0)>(5000000);
    $146 = ($133|0)==(0);
    $147 = $146 & $145;
    $148 = $144 | $147;
    $or$cond30 = $148 & $143;
    if ($or$cond30) {
     label = 74;
     break;
    }
   }
  }
  $149 = HEAP8[104>>0]|0;
  $150 = ($149<<24>>24)==(0);
  do {
   if (!($150)) {
    $151 = HEAP32[96>>2]|0;
    $152 = ((($151)) + 44|0);
    $153 = HEAP8[$152>>0]|0;
    $154 = ($153<<24>>24)==(0);
    if (!($154)) {
     $155 = ((($151)) + 8|0);
     $156 = +HEAPF32[$155>>2];
     $157 = HEAP32[(389572)>>2]|0;
     $158 = (($157|0) / 2)&-1;
     $159 = (+($158|0));
     $160 = $156 > $159;
     $paddle2$paddle1 = $160 ? 48 : 56;
     $pad$0 = HEAP32[$paddle2$paddle1>>2]|0;
     $161 = ((($151)) + 40|0);
     $162 = +HEAPF32[$161>>2];
     $163 = $162;
     $164 = (($157|0) / 40)&-1;
     $165 = (+($164|0));
     $166 = $165 * 10.0;
     $167 = $163 < $166;
     if ($167) {
      label = 80;
      break L5;
     }
     HEAP8[$152>>0] = 0;
     $177 = ((($pad$0)) + 40|0);
     $178 = +HEAPF32[$177>>2];
     $179 = $178;
     $180 = (($157|0) / 40)&-1;
     $181 = (+($180|0));
     $182 = $181 * 20.0;
     $183 = $179 < $182;
     if ($183) {
      label = 85;
      break L5;
     }
     $193 = ((($pad$0)) + 44|0);
     HEAP8[$193>>0] = 0;
     $194 = ((($pad$0)) + 4|0);
     $195 = HEAP32[$194>>2]|0;
     if ((($195|0) == 0)) {
      HEAP32[$194>>2] = 1;
      break;
     } else if ((($195|0) == 10)) {
      HEAP32[$194>>2] = 11;
      break;
     } else {
      break;
     }
    }
   }
  } while(0);
  $196 = HEAP8[382784>>0]|0;
  $197 = ($196<<24>>24)==(0);
  if ($197) {
   $198 = 389544;
   $199 = $198;
   $200 = HEAP32[$199>>2]|0;
   $201 = (($198) + 4)|0;
   $202 = $201;
   $203 = HEAP32[$202>>2]|0;
   $239 = $200;$240 = $203;
  } else {
   $204 = HEAP8[104>>0]|0;
   $205 = ($204<<24>>24)==(0);
   $206 = 389544;
   $207 = $206;
   $208 = HEAP32[$207>>2]|0;
   $209 = (($206) + 4)|0;
   $210 = $209;
   $211 = HEAP32[$210>>2]|0;
   $212 = 382800;
   $213 = $212;
   $214 = HEAP32[$213>>2]|0;
   $215 = (($212) + 4)|0;
   $216 = $215;
   $217 = HEAP32[$216>>2]|0;
   $218 = (_i64Subtract(($208|0),($211|0),($214|0),($217|0))|0);
   $219 = tempRet0;
   $220 = ($219>>>0)>(0);
   $221 = ($218>>>0)>(3000000);
   $222 = ($219|0)==(0);
   $223 = $222 & $221;
   $224 = $220 | $223;
   $or$cond42 = $205 & $224;
   $225 = (_i64Subtract(($208|0),($211|0),($214|0),($217|0))|0);
   $226 = tempRet0;
   $227 = ($226>>>0)>(0);
   $228 = ($225>>>0)>(6000000);
   $229 = ($226|0)==(0);
   $230 = $229 & $228;
   $231 = $227 | $230;
   $or$cond44 = $or$cond42 | $231;
   if ($or$cond44) {
    $232 = HEAP32[35096>>2]|0;
    $233 = ($232|0)==(6);
    if ($233) {
     $234 = HEAP32[(389556)>>2]|0;
     $235 = HEAP32[$234>>2]|0;
     $236 = ($235|0)==(1);
     if ($236) {
      $237 = ((($234)) + 4|0);
      HEAP8[$237>>0] = 1;
     } else {
      label = 98;
     }
    } else {
     label = 98;
    }
    if ((label|0) == 98) {
     label = 0;
     HEAP32[(651780)>>2] = 0;
    }
    HEAP8[128>>0] = 0;
    $239 = $208;$240 = $211;
   } else {
    $239 = $208;$240 = $211;
   }
  }
  $238 = HEAP32[216>>2]|0;
  $1 = (($238) + -40000)|0;
  HEAP32[216>>2] = $1;
  $241 = (_i64Add(($239|0),($240|0),40000,0)|0);
  $242 = tempRet0;
  $243 = 389544;
  $244 = $243;
  HEAP32[$244>>2] = $241;
  $245 = (($243) + 4)|0;
  $246 = $245;
  HEAP32[$246>>2] = $242;
  $2 = ($1|0)>(39999);
  if ($2) {
   label = 3;
   break;
  }
  __render();
  $247 = HEAP8[128>>0]|0;
  $$not7 = ($247<<24>>24)==(0);
  $248 = 389544;
  $249 = $248;
  $250 = HEAP32[$249>>2]|0;
  $251 = (($248) + 4)|0;
  $252 = $251;
  $253 = HEAP32[$252>>2]|0;
  $254 = ($250|0)==(0);
  $255 = ($253|0)==(0);
  $256 = $254 & $255;
  $or$cond9 = $$not7 & $256;
  if (!($or$cond9)) {
   label = 102;
   break;
  }
  $3 = HEAP32[(389696)>>2]|0;
  $4 = ($3|0)==(0);
  if (!($4)) {
   HEAP8[128>>0] = 0;
  }
  $5 = (_score_ball()|0);
  if ((($5|0) == 0)) {
   continue;
  } else if ((($5|0) == 5)) {
   $6 = HEAP8[382784>>0]|0;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    label = 10;
    break;
   } else {
    continue;
   }
  } else {
   $$pr = HEAP8[382784>>0]|0;
   $64 = ($$pr<<24>>24)==(0);
   if ($64) {
    label = 29;
    break;
   } else {
    continue;
   }
  }
 }
 switch (label|0) {
  case 3: {
   $ReallocAsyncCtx17 = (_emscripten_realloc_async_context(4)|0);
   __update();
   $IsAsync62 = ___async;
   if ($IsAsync62) {
    HEAP32[$ReallocAsyncCtx17>>2] = 94;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx17>>2] = 94;
   sp = STACKTOP;
   return;
   break;
  }
  case 10: {
   HEAP8[382784>>0] = 1;
   $8 = HEAP32[(389556)>>2]|0;
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(1);
   if ($10) {
    $11 = (_get_score(1)|0);
    $12 = ($11|0)==(5);
    if ($12) {
     $13 = 389544;
     $14 = $13;
     $15 = HEAP32[$14>>2]|0;
     $16 = (($13) + 4)|0;
     $17 = $16;
     $18 = HEAP32[$17>>2]|0;
     $19 = 382800;
     $20 = $19;
     HEAP32[$20>>2] = $15;
     $21 = (($19) + 4)|0;
     $22 = $21;
     HEAP32[$22>>2] = $18;
     $23 = HEAP32[(651920)>>2]|0;
     $24 = HEAP32[8>>2]|0;
     $25 = HEAP32[(389572)>>2]|0;
     $26 = (+($25|0));
     $27 = ((($24)) + 12|0);
     $28 = +HEAPF32[$27>>2];
     $ReallocAsyncCtx2 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vidd[$23 & 255]($24,$26,$28);
     $IsAsync4 = ___async;
     if ($IsAsync4) {
      HEAP32[$ReallocAsyncCtx2>>2] = 95;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx2>>2] = 95;
     sp = STACKTOP;
     return;
    } else {
     HEAP8[382784>>0] = 1;
     $29 = 389544;
     $30 = $29;
     $31 = HEAP32[$30>>2]|0;
     $32 = (($29) + 4)|0;
     $33 = $32;
     $34 = HEAP32[$33>>2]|0;
     $35 = 382800;
     $36 = $35;
     HEAP32[$36>>2] = $31;
     $37 = (($35) + 4)|0;
     $38 = $37;
     HEAP32[$38>>2] = $34;
     $39 = HEAP32[(651952)>>2]|0;
     $40 = HEAP32[35168>>2]|0;
     $ReallocAsyncCtx4 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vi[$39 & 255]($40);
     $IsAsync11 = ___async;
     if ($IsAsync11) {
      HEAP32[$ReallocAsyncCtx4>>2] = 97;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx4>>2] = 97;
     sp = STACKTOP;
     return;
    }
   } else {
    $43 = 389544;
    $44 = $43;
    $45 = HEAP32[$44>>2]|0;
    $46 = (($43) + 4)|0;
    $47 = $46;
    $48 = HEAP32[$47>>2]|0;
    $49 = 382800;
    $50 = $49;
    HEAP32[$50>>2] = $45;
    $51 = (($49) + 4)|0;
    $52 = $51;
    HEAP32[$52>>2] = $48;
    $53 = HEAP32[8>>2]|0;
    $54 = ((($53)) + 8|0);
    $55 = +HEAPF32[$54>>2];
    $56 = HEAP32[(389572)>>2]|0;
    $57 = (($56|0) / 2)&-1;
    $58 = (+($57|0));
    $59 = $55 > $58;
    $60 = HEAP32[(651920)>>2]|0;
    $61 = ((($53)) + 12|0);
    $62 = +HEAPF32[$61>>2];
    if ($59) {
     $63 = (+($56|0));
     $ReallocAsyncCtx6 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vidd[$60 & 255]($53,$63,$62);
     $IsAsync18 = ___async;
     if ($IsAsync18) {
      HEAP32[$ReallocAsyncCtx6>>2] = 99;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx6>>2] = 99;
     sp = STACKTOP;
     return;
    } else {
     $ReallocAsyncCtx7 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vidd[$60 & 255]($53,0.0,$62);
     $IsAsync22 = ___async;
     if ($IsAsync22) {
      HEAP32[$ReallocAsyncCtx7>>2] = 100;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx7>>2] = 100;
     sp = STACKTOP;
     return;
    }
   }
   break;
  }
  case 29: {
   $65 = HEAP32[(651952)>>2]|0;
   $66 = HEAP32[35128>>2]|0;
   $ReallocAsyncCtx9 = (_emscripten_realloc_async_context(4)|0);
   FUNCTION_TABLE_vi[$65 & 255]($66);
   $IsAsync30 = ___async;
   if ($IsAsync30) {
    HEAP32[$ReallocAsyncCtx9>>2] = 102;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx9>>2] = 102;
   sp = STACKTOP;
   return;
   break;
  }
  case 33: {
   $71 = HEAP32[(389556)>>2]|0;
   $72 = HEAP32[$71>>2]|0;
   $73 = ($72|0)==(1);
   if ($73) {
    $74 = HEAP32[56>>2]|0;
    $75 = HEAP32[(389576)>>2]|0;
    $76 = (($75|0) / 40)&-1;
    $ReallocAsyncCtx26 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($74,1106,$67,$76);
    $IsAsync97 = ___async;
    if ($IsAsync97) {
     HEAP32[$ReallocAsyncCtx26>>2] = 104;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx26>>2] = 104;
    sp = STACKTOP;
    return;
   } else {
    $77 = HEAP32[48>>2]|0;
    $78 = HEAP32[(389576)>>2]|0;
    $79 = (($78|0) / 40)&-1;
    $ReallocAsyncCtx25 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($77,1106,$67,$79);
    $IsAsync93 = ___async;
    if ($IsAsync93) {
     HEAP32[$ReallocAsyncCtx25>>2] = 105;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx25>>2] = 105;
    sp = STACKTOP;
    return;
   }
   break;
  }
  case 41: {
   $82 = HEAP32[(389556)>>2]|0;
   $83 = HEAP32[$82>>2]|0;
   $84 = ($83|0)==(1);
   if ($84) {
    $85 = HEAP32[56>>2]|0;
    $86 = HEAP32[(389576)>>2]|0;
    $87 = (($86|0) / 40)&-1;
    $ReallocAsyncCtx24 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($85,1105,$80,$87);
    $IsAsync89 = ___async;
    if ($IsAsync89) {
     HEAP32[$ReallocAsyncCtx24>>2] = 106;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx24>>2] = 106;
    sp = STACKTOP;
    return;
   } else {
    $88 = HEAP32[48>>2]|0;
    $89 = HEAP32[(389576)>>2]|0;
    $90 = (($89|0) / 40)&-1;
    $ReallocAsyncCtx23 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($88,1105,$80,$90);
    $IsAsync85 = ___async;
    if ($IsAsync85) {
     HEAP32[$ReallocAsyncCtx23>>2] = 107;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx23>>2] = 107;
    sp = STACKTOP;
    return;
   }
   break;
  }
  case 50: {
   $98 = HEAP32[56>>2]|0;
   $99 = HEAP32[(389576)>>2]|0;
   $100 = (($99|0) / 40)&-1;
   $ReallocAsyncCtx22 = (_emscripten_realloc_async_context(4)|0);
   _move_paddle($98,1106,$94,$100);
   $IsAsync81 = ___async;
   if ($IsAsync81) {
    HEAP32[$ReallocAsyncCtx22>>2] = 108;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx22>>2] = 108;
   sp = STACKTOP;
   return;
   break;
  }
  case 54: {
   $103 = HEAP32[56>>2]|0;
   $104 = HEAP32[(389576)>>2]|0;
   $105 = (($104|0) / 40)&-1;
   $ReallocAsyncCtx21 = (_emscripten_realloc_async_context(4)|0);
   _move_paddle($103,1105,$101,$105);
   $IsAsync77 = ___async;
   if ($IsAsync77) {
    HEAP32[$ReallocAsyncCtx21>>2] = 109;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx21>>2] = 109;
   sp = STACKTOP;
   return;
   break;
  }
  case 58: {
   $ReallocAsyncCtx20 = (_emscripten_realloc_async_context(4)|0);
   _paddle_ai(2);
   $IsAsync73 = ___async;
   if ($IsAsync73) {
    HEAP32[$ReallocAsyncCtx20>>2] = 110;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx20>>2] = 110;
   sp = STACKTOP;
   return;
   break;
  }
  case 62: {
   $115 = HEAP8[104>>0]|0;
   $116 = ($115<<24>>24)==(0);
   if ($116) {
    $ReallocAsyncCtx39 = (_emscripten_realloc_async_context(4)|0);
    $117 = (_collision_ball()|0);
    $IsAsync146 = ___async;
    if ($IsAsync146) {
     HEAP32[$ReallocAsyncCtx39>>2] = 111;
     sp = STACKTOP;
     return;
    }
    $118 = ___async_retval;
    $$expand_i1_val = $117&1;
    HEAP8[$118>>0] = $$expand_i1_val;
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx39>>2] = 111;
    sp = STACKTOP;
    return;
   } else {
    $ReallocAsyncCtx38 = (_emscripten_realloc_async_context(4)|0);
    _update_ball();
    $IsAsync142 = ___async;
    if ($IsAsync142) {
     HEAP32[$ReallocAsyncCtx38>>2] = 112;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx38>>2] = 112;
    sp = STACKTOP;
    return;
   }
   break;
  }
  case 74: {
   $ReallocAsyncCtx32 = (_emscripten_realloc_async_context(4)|0);
   _end_danger();
   $IsAsync120 = ___async;
   if ($IsAsync120) {
    HEAP32[$ReallocAsyncCtx32>>2] = 124;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx32>>2] = 124;
   sp = STACKTOP;
   return;
   break;
  }
  case 80: {
   $168 = HEAP32[(651924)>>2]|0;
   $169 = $163 * 1.2;
   $170 = $169;
   HEAPF32[$161>>2] = $170;
   $171 = ((($151)) + 36|0);
   $172 = +HEAPF32[$171>>2];
   $173 = $172;
   $174 = $173 * 1.2;
   $175 = $174;
   HEAPF32[$171>>2] = $175;
   $ReallocAsyncCtx15 = (_emscripten_realloc_async_context(8)|0);
   FUNCTION_TABLE_vidd[$168 & 255]($151,$170,$175);
   $IsAsync54 = ___async;
   if ($IsAsync54) {
    HEAP32[$ReallocAsyncCtx15>>2] = 125;
    $176 = ((($ReallocAsyncCtx15)) + 4|0);
    HEAP32[$176>>2] = $pad$0;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx15>>2] = 125;
   $176 = ((($ReallocAsyncCtx15)) + 4|0);
   HEAP32[$176>>2] = $pad$0;
   sp = STACKTOP;
   return;
   break;
  }
  case 85: {
   $184 = HEAP32[(651924)>>2]|0;
   $185 = $179 * 1.2;
   $186 = $185;
   HEAPF32[$177>>2] = $186;
   $187 = ((($pad$0)) + 36|0);
   $188 = +HEAPF32[$187>>2];
   $189 = $188;
   $190 = $189 * 1.1000000000000001;
   $191 = $190;
   HEAPF32[$187>>2] = $191;
   $ReallocAsyncCtx16 = (_emscripten_realloc_async_context(8)|0);
   FUNCTION_TABLE_vidd[$184 & 255]($pad$0,$186,$191);
   $IsAsync58 = ___async;
   if ($IsAsync58) {
    HEAP32[$ReallocAsyncCtx16>>2] = 126;
    $192 = ((($ReallocAsyncCtx16)) + 4|0);
    HEAP32[$192>>2] = $pad$0;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx16>>2] = 126;
   $192 = ((($ReallocAsyncCtx16)) + 4|0);
   HEAP32[$192>>2] = $pad$0;
   sp = STACKTOP;
   return;
   break;
  }
  case 102: {
   return;
   break;
  }
 }
}
function _pong__async_cb126($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $IsAsync26 = 0, $ReallocAsyncCtx8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[(651952)>>2]|0;
 $2 = HEAP32[35176>>2]|0;
 $ReallocAsyncCtx8 = (_emscripten_realloc_async_context(4)|0);
 FUNCTION_TABLE_vi[$1 & 255]($2);
 $IsAsync26 = ___async;
 if (!($IsAsync26)) {
  ___async_unwind = 0;
 }
 HEAP32[$ReallocAsyncCtx8>>2] = 101;
 sp = STACKTOP;
 return;
}
function _pong__async_cb127($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $IsAsync26 = 0, $ReallocAsyncCtx8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[(651952)>>2]|0;
 $2 = HEAP32[35176>>2]|0;
 $ReallocAsyncCtx8 = (_emscripten_realloc_async_context(4)|0);
 FUNCTION_TABLE_vi[$1 & 255]($2);
 $IsAsync26 = ___async;
 if (!($IsAsync26)) {
  ___async_unwind = 0;
 }
 HEAP32[$ReallocAsyncCtx8>>2] = 101;
 sp = STACKTOP;
 return;
}
function _pong__async_cb128($0) {
 $0 = $0|0;
 var $$expand_i1_val = 0, $$not7 = 0, $$pr = 0, $$pr32 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0.0, $158 = 0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0, $163 = 0.0, $164 = 0.0, $165 = 0, $166 = 0, $167 = 0.0;
 var $168 = 0.0, $169 = 0, $17 = 0, $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0, $175 = 0, $176 = 0.0, $177 = 0.0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0, $182 = 0, $183 = 0.0, $184 = 0.0, $185 = 0;
 var $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $26 = 0.0, $27 = 0, $28 = 0.0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $IsAsync11 = 0, $IsAsync120 = 0;
 var $IsAsync142 = 0, $IsAsync146 = 0, $IsAsync18 = 0, $IsAsync22 = 0, $IsAsync30 = 0, $IsAsync4 = 0, $IsAsync54 = 0, $IsAsync58 = 0, $IsAsync62 = 0, $IsAsync73 = 0, $IsAsync77 = 0, $IsAsync81 = 0, $IsAsync85 = 0, $IsAsync89 = 0, $IsAsync93 = 0, $IsAsync97 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx16 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx2 = 0;
 var $ReallocAsyncCtx20 = 0, $ReallocAsyncCtx21 = 0, $ReallocAsyncCtx22 = 0, $ReallocAsyncCtx23 = 0, $ReallocAsyncCtx24 = 0, $ReallocAsyncCtx25 = 0, $ReallocAsyncCtx26 = 0, $ReallocAsyncCtx32 = 0, $ReallocAsyncCtx38 = 0, $ReallocAsyncCtx39 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx9 = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond30 = 0, $or$cond42 = 0;
 var $or$cond44 = 0, $or$cond9 = 0, $pad$0 = 0, $paddle2$paddle1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 L2: while(1) {
  $65 = HEAP32[(394012)>>2]|0;
  $66 = ($65|0)>(0);
  $67 = HEAP8[382784>>0]|0;
  $68 = ($67<<24>>24)==(0);
  $or$cond11 = $66 & $68;
  if ($or$cond11) {
   label = 31;
   break;
  }
  $78 = HEAP32[(394008)>>2]|0;
  $79 = ($78|0)>(0);
  $or$cond13 = $68 & $79;
  if ($or$cond13) {
   label = 39;
   break;
  }
  $89 = HEAP32[(389556)>>2]|0;
  $90 = HEAP32[$89>>2]|0;
  $91 = ($90|0)==(2);
  if ($91) {
   $92 = HEAP32[(390064)>>2]|0;
   $93 = ($92|0)>(0);
   $94 = HEAP8[382784>>0]|0;
   $95 = ($94<<24>>24)==(0);
   $or$cond15 = $93 & $95;
   if ($or$cond15) {
    label = 48;
    break;
   }
   $99 = HEAP32[(390048)>>2]|0;
   $100 = ($99|0)>(0);
   $or$cond17 = $95 & $100;
   if ($or$cond17) {
    label = 52;
    break;
   }
  }
  $104 = HEAP32[(389556)>>2]|0;
  $105 = HEAP32[$104>>2]|0;
  $106 = ($105|0)<(2);
  if ($106) {
   label = 56;
   break;
  }
  $107 = HEAP32[8>>2]|0;
  $108 = ((($107)) + 8|0);
  $109 = +HEAPF32[$108>>2];
  $110 = (~~(($109)));
  HEAP32[382808>>2] = $110;
  $111 = HEAP8[382784>>0]|0;
  $112 = ($111<<24>>24)==(0);
  if ($112) {
   label = 60;
   break;
  }
  $$pr32 = HEAP8[35112>>0]|0;
  $117 = ($$pr32<<24>>24)==(0);
  if (!($117)) {
   $118 = 389544;
   $119 = $118;
   $120 = HEAP32[$119>>2]|0;
   $121 = (($118) + 4)|0;
   $122 = $121;
   $123 = HEAP32[$122>>2]|0;
   $124 = 35120;
   $125 = $124;
   $126 = HEAP32[$125>>2]|0;
   $127 = (($124) + 4)|0;
   $128 = $127;
   $129 = HEAP32[$128>>2]|0;
   $130 = (_i64Subtract(($120|0),($123|0),($126|0),($129|0))|0);
   $131 = tempRet0;
   $132 = ($131>>>0)>(0);
   $133 = ($130>>>0)>(10000000);
   $134 = ($131|0)==(0);
   $135 = $134 & $133;
   $136 = $132 | $135;
   if ($136) {
    label = 72;
    break;
   }
   $137 = HEAP32[(651780)>>2]|0;
   if ((($137|0) == 5) | (($137|0) == 15)) {
    $138 = HEAP32[40>>2]|0;
    $139 = ((($138)) + 4|0);
    $140 = HEAP32[$139>>2]|0;
    $141 = ($140|0)==(4);
    $142 = ($131>>>0)>(0);
    $143 = ($130>>>0)>(5000000);
    $144 = ($131|0)==(0);
    $145 = $144 & $143;
    $146 = $142 | $145;
    $or$cond30 = $146 & $141;
    if ($or$cond30) {
     label = 72;
     break;
    }
   }
  }
  $147 = HEAP8[104>>0]|0;
  $148 = ($147<<24>>24)==(0);
  do {
   if (!($148)) {
    $149 = HEAP32[96>>2]|0;
    $150 = ((($149)) + 44|0);
    $151 = HEAP8[$150>>0]|0;
    $152 = ($151<<24>>24)==(0);
    if (!($152)) {
     $153 = ((($149)) + 8|0);
     $154 = +HEAPF32[$153>>2];
     $155 = HEAP32[(389572)>>2]|0;
     $156 = (($155|0) / 2)&-1;
     $157 = (+($156|0));
     $158 = $154 > $157;
     $paddle2$paddle1 = $158 ? 48 : 56;
     $pad$0 = HEAP32[$paddle2$paddle1>>2]|0;
     $159 = ((($149)) + 40|0);
     $160 = +HEAPF32[$159>>2];
     $161 = $160;
     $162 = (($155|0) / 40)&-1;
     $163 = (+($162|0));
     $164 = $163 * 10.0;
     $165 = $161 < $164;
     if ($165) {
      label = 78;
      break L2;
     }
     HEAP8[$150>>0] = 0;
     $175 = ((($pad$0)) + 40|0);
     $176 = +HEAPF32[$175>>2];
     $177 = $176;
     $178 = (($155|0) / 40)&-1;
     $179 = (+($178|0));
     $180 = $179 * 20.0;
     $181 = $177 < $180;
     if ($181) {
      label = 83;
      break L2;
     }
     $191 = ((($pad$0)) + 44|0);
     HEAP8[$191>>0] = 0;
     $192 = ((($pad$0)) + 4|0);
     $193 = HEAP32[$192>>2]|0;
     if ((($193|0) == 10)) {
      HEAP32[$192>>2] = 11;
      break;
     } else if ((($193|0) == 0)) {
      HEAP32[$192>>2] = 1;
      break;
     } else {
      break;
     }
    }
   }
  } while(0);
  $194 = HEAP8[382784>>0]|0;
  $195 = ($194<<24>>24)==(0);
  if ($195) {
   $196 = 389544;
   $197 = $196;
   $198 = HEAP32[$197>>2]|0;
   $199 = (($196) + 4)|0;
   $200 = $199;
   $201 = HEAP32[$200>>2]|0;
   $237 = $198;$238 = $201;
  } else {
   $202 = HEAP8[104>>0]|0;
   $203 = ($202<<24>>24)==(0);
   $204 = 389544;
   $205 = $204;
   $206 = HEAP32[$205>>2]|0;
   $207 = (($204) + 4)|0;
   $208 = $207;
   $209 = HEAP32[$208>>2]|0;
   $210 = 382800;
   $211 = $210;
   $212 = HEAP32[$211>>2]|0;
   $213 = (($210) + 4)|0;
   $214 = $213;
   $215 = HEAP32[$214>>2]|0;
   $216 = (_i64Subtract(($206|0),($209|0),($212|0),($215|0))|0);
   $217 = tempRet0;
   $218 = ($217>>>0)>(0);
   $219 = ($216>>>0)>(3000000);
   $220 = ($217|0)==(0);
   $221 = $220 & $219;
   $222 = $218 | $221;
   $or$cond42 = $203 & $222;
   $223 = (_i64Subtract(($206|0),($209|0),($212|0),($215|0))|0);
   $224 = tempRet0;
   $225 = ($224>>>0)>(0);
   $226 = ($223>>>0)>(6000000);
   $227 = ($224|0)==(0);
   $228 = $227 & $226;
   $229 = $225 | $228;
   $or$cond44 = $or$cond42 | $229;
   if ($or$cond44) {
    $230 = HEAP32[35096>>2]|0;
    $231 = ($230|0)==(6);
    if ($231) {
     $232 = HEAP32[(389556)>>2]|0;
     $233 = HEAP32[$232>>2]|0;
     $234 = ($233|0)==(1);
     if ($234) {
      $235 = ((($232)) + 4|0);
      HEAP8[$235>>0] = 1;
     } else {
      label = 96;
     }
    } else {
     label = 96;
    }
    if ((label|0) == 96) {
     label = 0;
     HEAP32[(651780)>>2] = 0;
    }
    HEAP8[128>>0] = 0;
    $237 = $206;$238 = $209;
   } else {
    $237 = $206;$238 = $209;
   }
  }
  $236 = HEAP32[216>>2]|0;
  $1 = (($236) + -40000)|0;
  HEAP32[216>>2] = $1;
  $239 = (_i64Add(($237|0),($238|0),40000,0)|0);
  $240 = tempRet0;
  $241 = 389544;
  $242 = $241;
  HEAP32[$242>>2] = $239;
  $243 = (($241) + 4)|0;
  $244 = $243;
  HEAP32[$244>>2] = $240;
  $2 = ($1|0)>(39999);
  if ($2) {
   label = 3;
   break;
  }
  __render();
  $245 = HEAP8[128>>0]|0;
  $$not7 = ($245<<24>>24)==(0);
  $246 = 389544;
  $247 = $246;
  $248 = HEAP32[$247>>2]|0;
  $249 = (($246) + 4)|0;
  $250 = $249;
  $251 = HEAP32[$250>>2]|0;
  $252 = ($248|0)==(0);
  $253 = ($251|0)==(0);
  $254 = $252 & $253;
  $or$cond9 = $$not7 & $254;
  if (!($or$cond9)) {
   label = 100;
   break;
  }
  $3 = HEAP32[(389696)>>2]|0;
  $4 = ($3|0)==(0);
  if (!($4)) {
   HEAP8[128>>0] = 0;
  }
  $5 = (_score_ball()|0);
  if ((($5|0) == 0)) {
   continue;
  } else if ((($5|0) == 5)) {
   $6 = HEAP8[382784>>0]|0;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    label = 10;
    break;
   } else {
    continue;
   }
  } else {
   $$pr = HEAP8[382784>>0]|0;
   $62 = ($$pr<<24>>24)==(0);
   if ($62) {
    label = 27;
    break;
   } else {
    continue;
   }
  }
 }
 switch (label|0) {
  case 3: {
   $ReallocAsyncCtx17 = (_emscripten_realloc_async_context(4)|0);
   __update();
   $IsAsync62 = ___async;
   if ($IsAsync62) {
    HEAP32[$ReallocAsyncCtx17>>2] = 94;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx17>>2] = 94;
   sp = STACKTOP;
   return;
   break;
  }
  case 10: {
   HEAP8[382784>>0] = 1;
   $8 = HEAP32[(389556)>>2]|0;
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(1);
   if ($10) {
    $11 = (_get_score(1)|0);
    $12 = ($11|0)==(5);
    if ($12) {
     $13 = 389544;
     $14 = $13;
     $15 = HEAP32[$14>>2]|0;
     $16 = (($13) + 4)|0;
     $17 = $16;
     $18 = HEAP32[$17>>2]|0;
     $19 = 382800;
     $20 = $19;
     HEAP32[$20>>2] = $15;
     $21 = (($19) + 4)|0;
     $22 = $21;
     HEAP32[$22>>2] = $18;
     $23 = HEAP32[(651920)>>2]|0;
     $24 = HEAP32[8>>2]|0;
     $25 = HEAP32[(389572)>>2]|0;
     $26 = (+($25|0));
     $27 = ((($24)) + 12|0);
     $28 = +HEAPF32[$27>>2];
     $ReallocAsyncCtx2 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vidd[$23 & 255]($24,$26,$28);
     $IsAsync4 = ___async;
     if ($IsAsync4) {
      HEAP32[$ReallocAsyncCtx2>>2] = 95;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx2>>2] = 95;
     sp = STACKTOP;
     return;
    } else {
     HEAP8[382784>>0] = 1;
     $29 = 389544;
     $30 = $29;
     $31 = HEAP32[$30>>2]|0;
     $32 = (($29) + 4)|0;
     $33 = $32;
     $34 = HEAP32[$33>>2]|0;
     $35 = 382800;
     $36 = $35;
     HEAP32[$36>>2] = $31;
     $37 = (($35) + 4)|0;
     $38 = $37;
     HEAP32[$38>>2] = $34;
     $39 = HEAP32[(651952)>>2]|0;
     $40 = HEAP32[35168>>2]|0;
     $ReallocAsyncCtx4 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vi[$39 & 255]($40);
     $IsAsync11 = ___async;
     if ($IsAsync11) {
      HEAP32[$ReallocAsyncCtx4>>2] = 97;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx4>>2] = 97;
     sp = STACKTOP;
     return;
    }
   } else {
    $41 = 389544;
    $42 = $41;
    $43 = HEAP32[$42>>2]|0;
    $44 = (($41) + 4)|0;
    $45 = $44;
    $46 = HEAP32[$45>>2]|0;
    $47 = 382800;
    $48 = $47;
    HEAP32[$48>>2] = $43;
    $49 = (($47) + 4)|0;
    $50 = $49;
    HEAP32[$50>>2] = $46;
    $51 = HEAP32[8>>2]|0;
    $52 = ((($51)) + 8|0);
    $53 = +HEAPF32[$52>>2];
    $54 = HEAP32[(389572)>>2]|0;
    $55 = (($54|0) / 2)&-1;
    $56 = (+($55|0));
    $57 = $53 > $56;
    $58 = HEAP32[(651920)>>2]|0;
    $59 = ((($51)) + 12|0);
    $60 = +HEAPF32[$59>>2];
    if ($57) {
     $61 = (+($54|0));
     $ReallocAsyncCtx6 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vidd[$58 & 255]($51,$61,$60);
     $IsAsync18 = ___async;
     if ($IsAsync18) {
      HEAP32[$ReallocAsyncCtx6>>2] = 99;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx6>>2] = 99;
     sp = STACKTOP;
     return;
    } else {
     $ReallocAsyncCtx7 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vidd[$58 & 255]($51,0.0,$60);
     $IsAsync22 = ___async;
     if ($IsAsync22) {
      HEAP32[$ReallocAsyncCtx7>>2] = 100;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx7>>2] = 100;
     sp = STACKTOP;
     return;
    }
   }
   break;
  }
  case 27: {
   $63 = HEAP32[(651952)>>2]|0;
   $64 = HEAP32[35128>>2]|0;
   $ReallocAsyncCtx9 = (_emscripten_realloc_async_context(4)|0);
   FUNCTION_TABLE_vi[$63 & 255]($64);
   $IsAsync30 = ___async;
   if ($IsAsync30) {
    HEAP32[$ReallocAsyncCtx9>>2] = 102;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx9>>2] = 102;
   sp = STACKTOP;
   return;
   break;
  }
  case 31: {
   $69 = HEAP32[(389556)>>2]|0;
   $70 = HEAP32[$69>>2]|0;
   $71 = ($70|0)==(1);
   if ($71) {
    $72 = HEAP32[56>>2]|0;
    $73 = HEAP32[(389576)>>2]|0;
    $74 = (($73|0) / 40)&-1;
    $ReallocAsyncCtx26 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($72,1106,$65,$74);
    $IsAsync97 = ___async;
    if ($IsAsync97) {
     HEAP32[$ReallocAsyncCtx26>>2] = 104;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx26>>2] = 104;
    sp = STACKTOP;
    return;
   } else {
    $75 = HEAP32[48>>2]|0;
    $76 = HEAP32[(389576)>>2]|0;
    $77 = (($76|0) / 40)&-1;
    $ReallocAsyncCtx25 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($75,1106,$65,$77);
    $IsAsync93 = ___async;
    if ($IsAsync93) {
     HEAP32[$ReallocAsyncCtx25>>2] = 105;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx25>>2] = 105;
    sp = STACKTOP;
    return;
   }
   break;
  }
  case 39: {
   $80 = HEAP32[(389556)>>2]|0;
   $81 = HEAP32[$80>>2]|0;
   $82 = ($81|0)==(1);
   if ($82) {
    $83 = HEAP32[56>>2]|0;
    $84 = HEAP32[(389576)>>2]|0;
    $85 = (($84|0) / 40)&-1;
    $ReallocAsyncCtx24 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($83,1105,$78,$85);
    $IsAsync89 = ___async;
    if ($IsAsync89) {
     HEAP32[$ReallocAsyncCtx24>>2] = 106;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx24>>2] = 106;
    sp = STACKTOP;
    return;
   } else {
    $86 = HEAP32[48>>2]|0;
    $87 = HEAP32[(389576)>>2]|0;
    $88 = (($87|0) / 40)&-1;
    $ReallocAsyncCtx23 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($86,1105,$78,$88);
    $IsAsync85 = ___async;
    if ($IsAsync85) {
     HEAP32[$ReallocAsyncCtx23>>2] = 107;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx23>>2] = 107;
    sp = STACKTOP;
    return;
   }
   break;
  }
  case 48: {
   $96 = HEAP32[56>>2]|0;
   $97 = HEAP32[(389576)>>2]|0;
   $98 = (($97|0) / 40)&-1;
   $ReallocAsyncCtx22 = (_emscripten_realloc_async_context(4)|0);
   _move_paddle($96,1106,$92,$98);
   $IsAsync81 = ___async;
   if ($IsAsync81) {
    HEAP32[$ReallocAsyncCtx22>>2] = 108;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx22>>2] = 108;
   sp = STACKTOP;
   return;
   break;
  }
  case 52: {
   $101 = HEAP32[56>>2]|0;
   $102 = HEAP32[(389576)>>2]|0;
   $103 = (($102|0) / 40)&-1;
   $ReallocAsyncCtx21 = (_emscripten_realloc_async_context(4)|0);
   _move_paddle($101,1105,$99,$103);
   $IsAsync77 = ___async;
   if ($IsAsync77) {
    HEAP32[$ReallocAsyncCtx21>>2] = 109;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx21>>2] = 109;
   sp = STACKTOP;
   return;
   break;
  }
  case 56: {
   $ReallocAsyncCtx20 = (_emscripten_realloc_async_context(4)|0);
   _paddle_ai(2);
   $IsAsync73 = ___async;
   if ($IsAsync73) {
    HEAP32[$ReallocAsyncCtx20>>2] = 110;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx20>>2] = 110;
   sp = STACKTOP;
   return;
   break;
  }
  case 60: {
   $113 = HEAP8[104>>0]|0;
   $114 = ($113<<24>>24)==(0);
   if ($114) {
    $ReallocAsyncCtx39 = (_emscripten_realloc_async_context(4)|0);
    $115 = (_collision_ball()|0);
    $IsAsync146 = ___async;
    if ($IsAsync146) {
     HEAP32[$ReallocAsyncCtx39>>2] = 111;
     sp = STACKTOP;
     return;
    }
    $116 = ___async_retval;
    $$expand_i1_val = $115&1;
    HEAP8[$116>>0] = $$expand_i1_val;
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx39>>2] = 111;
    sp = STACKTOP;
    return;
   } else {
    $ReallocAsyncCtx38 = (_emscripten_realloc_async_context(4)|0);
    _update_ball();
    $IsAsync142 = ___async;
    if ($IsAsync142) {
     HEAP32[$ReallocAsyncCtx38>>2] = 112;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx38>>2] = 112;
    sp = STACKTOP;
    return;
   }
   break;
  }
  case 72: {
   $ReallocAsyncCtx32 = (_emscripten_realloc_async_context(4)|0);
   _end_danger();
   $IsAsync120 = ___async;
   if ($IsAsync120) {
    HEAP32[$ReallocAsyncCtx32>>2] = 124;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx32>>2] = 124;
   sp = STACKTOP;
   return;
   break;
  }
  case 78: {
   $166 = HEAP32[(651924)>>2]|0;
   $167 = $161 * 1.2;
   $168 = $167;
   HEAPF32[$159>>2] = $168;
   $169 = ((($149)) + 36|0);
   $170 = +HEAPF32[$169>>2];
   $171 = $170;
   $172 = $171 * 1.2;
   $173 = $172;
   HEAPF32[$169>>2] = $173;
   $ReallocAsyncCtx15 = (_emscripten_realloc_async_context(8)|0);
   FUNCTION_TABLE_vidd[$166 & 255]($149,$168,$173);
   $IsAsync54 = ___async;
   if ($IsAsync54) {
    HEAP32[$ReallocAsyncCtx15>>2] = 125;
    $174 = ((($ReallocAsyncCtx15)) + 4|0);
    HEAP32[$174>>2] = $pad$0;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx15>>2] = 125;
   $174 = ((($ReallocAsyncCtx15)) + 4|0);
   HEAP32[$174>>2] = $pad$0;
   sp = STACKTOP;
   return;
   break;
  }
  case 83: {
   $182 = HEAP32[(651924)>>2]|0;
   $183 = $177 * 1.2;
   $184 = $183;
   HEAPF32[$175>>2] = $184;
   $185 = ((($pad$0)) + 36|0);
   $186 = +HEAPF32[$185>>2];
   $187 = $186;
   $188 = $187 * 1.1000000000000001;
   $189 = $188;
   HEAPF32[$185>>2] = $189;
   $ReallocAsyncCtx16 = (_emscripten_realloc_async_context(8)|0);
   FUNCTION_TABLE_vidd[$182 & 255]($pad$0,$184,$189);
   $IsAsync58 = ___async;
   if ($IsAsync58) {
    HEAP32[$ReallocAsyncCtx16>>2] = 126;
    $190 = ((($ReallocAsyncCtx16)) + 4|0);
    HEAP32[$190>>2] = $pad$0;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx16>>2] = 126;
   $190 = ((($ReallocAsyncCtx16)) + 4|0);
   HEAP32[$190>>2] = $pad$0;
   sp = STACKTOP;
   return;
   break;
  }
  case 100: {
   return;
   break;
  }
 }
}
function _pong__async_cb129($0) {
 $0 = $0|0;
 var $IsAsync149 = 0, $ReallocAsyncCtx40 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ReallocAsyncCtx40 = (_emscripten_realloc_async_context(4)|0);
 _reset_ball();
 $IsAsync149 = ___async;
 if (!($IsAsync149)) {
  ___async_unwind = 0;
 }
 HEAP32[$ReallocAsyncCtx40>>2] = 103;
 sp = STACKTOP;
 return;
}
function _pong__async_cb130($0) {
 $0 = $0|0;
 var $$expand_i1_val = 0, $$not2 = 0, $$not7 = 0, $$pr = 0, $$pr32 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0.0;
 var $149 = 0.0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0.0, $214 = 0, $215 = 0, $216 = 0.0, $217 = 0, $218 = 0, $219 = 0.0, $22 = 0;
 var $220 = 0.0, $221 = 0, $222 = 0.0, $223 = 0.0, $224 = 0, $225 = 0, $226 = 0.0, $227 = 0.0, $228 = 0, $229 = 0.0, $23 = 0, $230 = 0.0, $231 = 0.0, $232 = 0.0, $233 = 0, $234 = 0, $235 = 0.0, $236 = 0.0, $237 = 0, $238 = 0.0;
 var $239 = 0.0, $24 = 0, $240 = 0, $241 = 0, $242 = 0.0, $243 = 0.0, $244 = 0, $245 = 0.0, $246 = 0.0, $247 = 0.0, $248 = 0.0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0.0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0.0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $AsyncRetVal = 0, $IsAsync109 = 0;
 var $IsAsync11 = 0, $IsAsync120 = 0, $IsAsync142 = 0, $IsAsync146 = 0, $IsAsync18 = 0, $IsAsync22 = 0, $IsAsync30 = 0, $IsAsync38 = 0, $IsAsync4 = 0, $IsAsync42 = 0, $IsAsync46 = 0, $IsAsync50 = 0, $IsAsync54 = 0, $IsAsync58 = 0, $IsAsync62 = 0, $IsAsync73 = 0, $IsAsync77 = 0, $IsAsync81 = 0, $IsAsync85 = 0, $IsAsync89 = 0;
 var $IsAsync93 = 0, $IsAsync97 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx16 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx20 = 0, $ReallocAsyncCtx21 = 0, $ReallocAsyncCtx22 = 0, $ReallocAsyncCtx23 = 0, $ReallocAsyncCtx24 = 0, $ReallocAsyncCtx25 = 0, $ReallocAsyncCtx26 = 0, $ReallocAsyncCtx29 = 0, $ReallocAsyncCtx32 = 0, $ReallocAsyncCtx38 = 0;
 var $ReallocAsyncCtx39 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx9 = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond27 = 0, $or$cond30 = 0, $or$cond4 = 0, $or$cond42 = 0, $or$cond44 = 0, $or$cond9 = 0, $pad$0 = 0, $paddle2$paddle1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ___async_retval;
 $AsyncRetVal = HEAP32[$1>>2]|0;
 $118 = (($AsyncRetVal>>>0) % 5)&-1;
 $119 = ($118>>>0)<(2);
 if ($119) {
  $ReallocAsyncCtx29 = (_emscripten_realloc_async_context(4)|0);
  _show_item();
  $IsAsync109 = ___async;
  if ($IsAsync109) {
   HEAP32[$ReallocAsyncCtx29>>2] = 115;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx29>>2] = 115;
  sp = STACKTOP;
  return;
 }
 $120 = HEAP8[382792>>0]|0;
 $121 = ($120<<24>>24)==(0);
 if ($121) {
  $122 = HEAP32[88>>2]|0;
  $123 = ((($122)) + 44|0);
  $124 = HEAP8[$123>>0]|0;
  $125 = HEAP8[35112>>0]|0;
  $126 = $125 | $124;
  $127 = ($126<<24>>24)==(0);
  if ($127) {
   $128 = HEAP32[(651832)>>2]|0;
   $ReallocAsyncCtx11 = (_emscripten_realloc_async_context(4)|0);
   $129 = (FUNCTION_TABLE_i[$128 & 255]()|0);
   $IsAsync38 = ___async;
   if ($IsAsync38) {
    HEAP32[$ReallocAsyncCtx11>>2] = 116;
    sp = STACKTOP;
    return;
   }
   $130 = ___async_retval;
   HEAP32[$130>>2] = $129;
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx11>>2] = 116;
   sp = STACKTOP;
   return;
  }
 }
 $131 = (_get_score(1)|0);
 $132 = ($131|0)==(4);
 if ($132) {
  $133 = HEAP32[96>>2]|0;
  $134 = ((($133)) + 44|0);
  $135 = HEAP8[$134>>0]|0;
  $136 = HEAP8[35112>>0]|0;
  $137 = $136 | $135;
  $138 = ($137<<24>>24)==(0);
  if ($138) {
   $139 = HEAP32[(651832)>>2]|0;
   $ReallocAsyncCtx12 = (_emscripten_realloc_async_context(4)|0);
   $140 = (FUNCTION_TABLE_i[$139 & 255]()|0);
   $IsAsync42 = ___async;
   if ($IsAsync42) {
    HEAP32[$ReallocAsyncCtx12>>2] = 118;
    sp = STACKTOP;
    return;
   }
   $141 = ___async_retval;
   HEAP32[$141>>2] = $140;
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx12>>2] = 118;
   sp = STACKTOP;
   return;
  }
 }
 $142 = HEAP32[382808>>2]|0;
 $143 = HEAP32[(389572)>>2]|0;
 $144 = (($143|0) / 2)&-1;
 $145 = ($142|0)<($144|0);
 if ($145) {
  $146 = HEAP32[8>>2]|0;
  $147 = ((($146)) + 8|0);
  $148 = +HEAPF32[$147>>2];
  $149 = (+($144|0));
  $150 = $148 >= $149;
  $151 = HEAP8[382784>>0]|0;
  $152 = ($151<<24>>24)==(0);
  $or$cond27 = $150 & $152;
  if ($or$cond27) {
   $153 = HEAP32[(389556)>>2]|0;
   $154 = HEAP32[$153>>2]|0;
   $155 = ($154|0)>(1);
   if ($155) {
    $156 = HEAP32[80>>2]|0;
    $157 = ((($156)) + 44|0);
    $158 = HEAP8[$157>>0]|0;
    $$not2 = ($158<<24>>24)==(0);
    $159 = HEAP32[35096>>2]|0;
    $160 = ($159|0)<(6);
    $or$cond4 = $$not2 & $160;
    if ($or$cond4) {
     $161 = HEAP32[(651832)>>2]|0;
     $ReallocAsyncCtx13 = (_emscripten_realloc_async_context(4)|0);
     $162 = (FUNCTION_TABLE_i[$161 & 255]()|0);
     $IsAsync46 = ___async;
     if ($IsAsync46) {
      HEAP32[$ReallocAsyncCtx13>>2] = 120;
      sp = STACKTOP;
      return;
     }
     $163 = ___async_retval;
     HEAP32[$163>>2] = $162;
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx13>>2] = 120;
     sp = STACKTOP;
     return;
    }
    $164 = HEAP8[382792>>0]|0;
    $165 = ($164<<24>>24)==(0);
    if ($165) {
     $166 = HEAP32[88>>2]|0;
     $167 = ((($166)) + 44|0);
     $168 = HEAP8[$167>>0]|0;
     $169 = HEAP8[35112>>0]|0;
     $170 = $169 | $168;
     $171 = ($170<<24>>24)==(0);
     if ($171) {
      $172 = HEAP32[(651832)>>2]|0;
      $ReallocAsyncCtx14 = (_emscripten_realloc_async_context(4)|0);
      $173 = (FUNCTION_TABLE_i[$172 & 255]()|0);
      $IsAsync50 = ___async;
      if ($IsAsync50) {
       HEAP32[$ReallocAsyncCtx14>>2] = 122;
       sp = STACKTOP;
       return;
      }
      $174 = ___async_retval;
      HEAP32[$174>>2] = $173;
      ___async_unwind = 0;
      HEAP32[$ReallocAsyncCtx14>>2] = 122;
      sp = STACKTOP;
      return;
     } else {
      $175 = $169;
     }
    } else {
     label = 92;
    }
   } else {
    label = 92;
   }
  } else {
   label = 92;
  }
 } else {
  label = 92;
 }
 L42: while(1) {
  if ((label|0) == 92) {
   label = 0;
   $$pr32 = HEAP8[35112>>0]|0;
   $175 = $$pr32;
  }
  $176 = ($175<<24>>24)==(0);
  if (!($176)) {
   $177 = 389544;
   $178 = $177;
   $179 = HEAP32[$178>>2]|0;
   $180 = (($177) + 4)|0;
   $181 = $180;
   $182 = HEAP32[$181>>2]|0;
   $183 = 35120;
   $184 = $183;
   $185 = HEAP32[$184>>2]|0;
   $186 = (($183) + 4)|0;
   $187 = $186;
   $188 = HEAP32[$187>>2]|0;
   $189 = (_i64Subtract(($179|0),($182|0),($185|0),($188|0))|0);
   $190 = tempRet0;
   $191 = ($190>>>0)>(0);
   $192 = ($189>>>0)>(10000000);
   $193 = ($190|0)==(0);
   $194 = $193 & $192;
   $195 = $191 | $194;
   if ($195) {
    label = 97;
    break;
   }
   $196 = HEAP32[(651780)>>2]|0;
   if ((($196|0) == 5) | (($196|0) == 15)) {
    $197 = HEAP32[40>>2]|0;
    $198 = ((($197)) + 4|0);
    $199 = HEAP32[$198>>2]|0;
    $200 = ($199|0)==(4);
    $201 = ($190>>>0)>(0);
    $202 = ($189>>>0)>(5000000);
    $203 = ($190|0)==(0);
    $204 = $203 & $202;
    $205 = $201 | $204;
    $or$cond30 = $205 & $200;
    if ($or$cond30) {
     label = 97;
     break;
    }
   }
  }
  $206 = HEAP8[104>>0]|0;
  $207 = ($206<<24>>24)==(0);
  do {
   if (!($207)) {
    $208 = HEAP32[96>>2]|0;
    $209 = ((($208)) + 44|0);
    $210 = HEAP8[$209>>0]|0;
    $211 = ($210<<24>>24)==(0);
    if (!($211)) {
     $212 = ((($208)) + 8|0);
     $213 = +HEAPF32[$212>>2];
     $214 = HEAP32[(389572)>>2]|0;
     $215 = (($214|0) / 2)&-1;
     $216 = (+($215|0));
     $217 = $213 > $216;
     $paddle2$paddle1 = $217 ? 48 : 56;
     $pad$0 = HEAP32[$paddle2$paddle1>>2]|0;
     $218 = ((($208)) + 40|0);
     $219 = +HEAPF32[$218>>2];
     $220 = $219;
     $221 = (($214|0) / 40)&-1;
     $222 = (+($221|0));
     $223 = $222 * 10.0;
     $224 = $220 < $223;
     if ($224) {
      label = 103;
      break L42;
     }
     HEAP8[$209>>0] = 0;
     $234 = ((($pad$0)) + 40|0);
     $235 = +HEAPF32[$234>>2];
     $236 = $235;
     $237 = (($214|0) / 40)&-1;
     $238 = (+($237|0));
     $239 = $238 * 20.0;
     $240 = $236 < $239;
     if ($240) {
      label = 108;
      break L42;
     }
     $250 = ((($pad$0)) + 44|0);
     HEAP8[$250>>0] = 0;
     $251 = ((($pad$0)) + 4|0);
     $252 = HEAP32[$251>>2]|0;
     if ((($252|0) == 0)) {
      HEAP32[$251>>2] = 1;
      break;
     } else if ((($252|0) == 10)) {
      HEAP32[$251>>2] = 11;
      break;
     } else {
      break;
     }
    }
   }
  } while(0);
  $253 = HEAP8[382784>>0]|0;
  $254 = ($253<<24>>24)==(0);
  if ($254) {
   $255 = 389544;
   $256 = $255;
   $257 = HEAP32[$256>>2]|0;
   $258 = (($255) + 4)|0;
   $259 = $258;
   $260 = HEAP32[$259>>2]|0;
   $296 = $257;$297 = $260;
  } else {
   $261 = HEAP8[104>>0]|0;
   $262 = ($261<<24>>24)==(0);
   $263 = 389544;
   $264 = $263;
   $265 = HEAP32[$264>>2]|0;
   $266 = (($263) + 4)|0;
   $267 = $266;
   $268 = HEAP32[$267>>2]|0;
   $269 = 382800;
   $270 = $269;
   $271 = HEAP32[$270>>2]|0;
   $272 = (($269) + 4)|0;
   $273 = $272;
   $274 = HEAP32[$273>>2]|0;
   $275 = (_i64Subtract(($265|0),($268|0),($271|0),($274|0))|0);
   $276 = tempRet0;
   $277 = ($276>>>0)>(0);
   $278 = ($275>>>0)>(3000000);
   $279 = ($276|0)==(0);
   $280 = $279 & $278;
   $281 = $277 | $280;
   $or$cond42 = $262 & $281;
   $282 = (_i64Subtract(($265|0),($268|0),($271|0),($274|0))|0);
   $283 = tempRet0;
   $284 = ($283>>>0)>(0);
   $285 = ($282>>>0)>(6000000);
   $286 = ($283|0)==(0);
   $287 = $286 & $285;
   $288 = $284 | $287;
   $or$cond44 = $or$cond42 | $288;
   if ($or$cond44) {
    $289 = HEAP32[35096>>2]|0;
    $290 = ($289|0)==(6);
    if ($290) {
     $291 = HEAP32[(389556)>>2]|0;
     $292 = HEAP32[$291>>2]|0;
     $293 = ($292|0)==(1);
     if ($293) {
      $294 = ((($291)) + 4|0);
      HEAP8[$294>>0] = 1;
     } else {
      label = 121;
     }
    } else {
     label = 121;
    }
    if ((label|0) == 121) {
     label = 0;
     HEAP32[(651780)>>2] = 0;
    }
    HEAP8[128>>0] = 0;
    $296 = $265;$297 = $268;
   } else {
    $296 = $265;$297 = $268;
   }
  }
  $295 = HEAP32[216>>2]|0;
  $2 = (($295) + -40000)|0;
  HEAP32[216>>2] = $2;
  $298 = (_i64Add(($296|0),($297|0),40000,0)|0);
  $299 = tempRet0;
  $300 = 389544;
  $301 = $300;
  HEAP32[$301>>2] = $298;
  $302 = (($300) + 4)|0;
  $303 = $302;
  HEAP32[$303>>2] = $299;
  $3 = ($2|0)>(39999);
  if ($3) {
   label = 3;
   break;
  }
  __render();
  $304 = HEAP8[128>>0]|0;
  $$not7 = ($304<<24>>24)==(0);
  $305 = 389544;
  $306 = $305;
  $307 = HEAP32[$306>>2]|0;
  $308 = (($305) + 4)|0;
  $309 = $308;
  $310 = HEAP32[$309>>2]|0;
  $311 = ($307|0)==(0);
  $312 = ($310|0)==(0);
  $313 = $311 & $312;
  $or$cond9 = $$not7 & $313;
  if (!($or$cond9)) {
   label = 125;
   break;
  }
  $4 = HEAP32[(389696)>>2]|0;
  $5 = ($4|0)==(0);
  if (!($5)) {
   HEAP8[128>>0] = 0;
  }
  $6 = (_score_ball()|0);
  if ((($6|0) == 5)) {
   $7 = HEAP8[382784>>0]|0;
   $8 = ($7<<24>>24)==(0);
   if ($8) {
    label = 10;
    break;
   }
  } else if (!((($6|0) == 0))) {
   $$pr = HEAP8[382784>>0]|0;
   $63 = ($$pr<<24>>24)==(0);
   if ($63) {
    label = 26;
    break;
   }
  }
  $66 = HEAP32[(394012)>>2]|0;
  $67 = ($66|0)>(0);
  $68 = HEAP8[382784>>0]|0;
  $69 = ($68<<24>>24)==(0);
  $or$cond11 = $67 & $69;
  if ($or$cond11) {
   label = 30;
   break;
  }
  $79 = HEAP32[(394008)>>2]|0;
  $80 = ($79|0)>(0);
  $or$cond13 = $69 & $80;
  if ($or$cond13) {
   label = 38;
   break;
  }
  $90 = HEAP32[(389556)>>2]|0;
  $91 = HEAP32[$90>>2]|0;
  $92 = ($91|0)==(2);
  if ($92) {
   $93 = HEAP32[(390064)>>2]|0;
   $94 = ($93|0)>(0);
   $95 = HEAP8[382784>>0]|0;
   $96 = ($95<<24>>24)==(0);
   $or$cond15 = $94 & $96;
   if ($or$cond15) {
    label = 47;
    break;
   }
   $100 = HEAP32[(390048)>>2]|0;
   $101 = ($100|0)>(0);
   $or$cond17 = $96 & $101;
   if ($or$cond17) {
    label = 51;
    break;
   }
  }
  $105 = HEAP32[(389556)>>2]|0;
  $106 = HEAP32[$105>>2]|0;
  $107 = ($106|0)<(2);
  if ($107) {
   label = 55;
   break;
  }
  $108 = HEAP32[8>>2]|0;
  $109 = ((($108)) + 8|0);
  $110 = +HEAPF32[$109>>2];
  $111 = (~~(($110)));
  HEAP32[382808>>2] = $111;
  $112 = HEAP8[382784>>0]|0;
  $113 = ($112<<24>>24)==(0);
  if ($113) {
   label = 59;
   break;
  } else {
   label = 92;
  }
 }
 switch (label|0) {
  case 3: {
   $ReallocAsyncCtx17 = (_emscripten_realloc_async_context(4)|0);
   __update();
   $IsAsync62 = ___async;
   if ($IsAsync62) {
    HEAP32[$ReallocAsyncCtx17>>2] = 94;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx17>>2] = 94;
   sp = STACKTOP;
   return;
   break;
  }
  case 10: {
   HEAP8[382784>>0] = 1;
   $9 = HEAP32[(389556)>>2]|0;
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==(1);
   if ($11) {
    $12 = (_get_score(1)|0);
    $13 = ($12|0)==(5);
    if ($13) {
     $14 = 389544;
     $15 = $14;
     $16 = HEAP32[$15>>2]|0;
     $17 = (($14) + 4)|0;
     $18 = $17;
     $19 = HEAP32[$18>>2]|0;
     $20 = 382800;
     $21 = $20;
     HEAP32[$21>>2] = $16;
     $22 = (($20) + 4)|0;
     $23 = $22;
     HEAP32[$23>>2] = $19;
     $24 = HEAP32[(651920)>>2]|0;
     $25 = HEAP32[8>>2]|0;
     $26 = HEAP32[(389572)>>2]|0;
     $27 = (+($26|0));
     $28 = ((($25)) + 12|0);
     $29 = +HEAPF32[$28>>2];
     $ReallocAsyncCtx2 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vidd[$24 & 255]($25,$27,$29);
     $IsAsync4 = ___async;
     if ($IsAsync4) {
      HEAP32[$ReallocAsyncCtx2>>2] = 95;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx2>>2] = 95;
     sp = STACKTOP;
     return;
    } else {
     HEAP8[382784>>0] = 1;
     $30 = 389544;
     $31 = $30;
     $32 = HEAP32[$31>>2]|0;
     $33 = (($30) + 4)|0;
     $34 = $33;
     $35 = HEAP32[$34>>2]|0;
     $36 = 382800;
     $37 = $36;
     HEAP32[$37>>2] = $32;
     $38 = (($36) + 4)|0;
     $39 = $38;
     HEAP32[$39>>2] = $35;
     $40 = HEAP32[(651952)>>2]|0;
     $41 = HEAP32[35168>>2]|0;
     $ReallocAsyncCtx4 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vi[$40 & 255]($41);
     $IsAsync11 = ___async;
     if ($IsAsync11) {
      HEAP32[$ReallocAsyncCtx4>>2] = 97;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx4>>2] = 97;
     sp = STACKTOP;
     return;
    }
   } else {
    $42 = 389544;
    $43 = $42;
    $44 = HEAP32[$43>>2]|0;
    $45 = (($42) + 4)|0;
    $46 = $45;
    $47 = HEAP32[$46>>2]|0;
    $48 = 382800;
    $49 = $48;
    HEAP32[$49>>2] = $44;
    $50 = (($48) + 4)|0;
    $51 = $50;
    HEAP32[$51>>2] = $47;
    $52 = HEAP32[8>>2]|0;
    $53 = ((($52)) + 8|0);
    $54 = +HEAPF32[$53>>2];
    $55 = HEAP32[(389572)>>2]|0;
    $56 = (($55|0) / 2)&-1;
    $57 = (+($56|0));
    $58 = $54 > $57;
    $59 = HEAP32[(651920)>>2]|0;
    $60 = ((($52)) + 12|0);
    $61 = +HEAPF32[$60>>2];
    if ($58) {
     $62 = (+($55|0));
     $ReallocAsyncCtx6 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vidd[$59 & 255]($52,$62,$61);
     $IsAsync18 = ___async;
     if ($IsAsync18) {
      HEAP32[$ReallocAsyncCtx6>>2] = 99;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx6>>2] = 99;
     sp = STACKTOP;
     return;
    } else {
     $ReallocAsyncCtx7 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vidd[$59 & 255]($52,0.0,$61);
     $IsAsync22 = ___async;
     if ($IsAsync22) {
      HEAP32[$ReallocAsyncCtx7>>2] = 100;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx7>>2] = 100;
     sp = STACKTOP;
     return;
    }
   }
   break;
  }
  case 26: {
   $64 = HEAP32[(651952)>>2]|0;
   $65 = HEAP32[35128>>2]|0;
   $ReallocAsyncCtx9 = (_emscripten_realloc_async_context(4)|0);
   FUNCTION_TABLE_vi[$64 & 255]($65);
   $IsAsync30 = ___async;
   if ($IsAsync30) {
    HEAP32[$ReallocAsyncCtx9>>2] = 102;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx9>>2] = 102;
   sp = STACKTOP;
   return;
   break;
  }
  case 30: {
   $70 = HEAP32[(389556)>>2]|0;
   $71 = HEAP32[$70>>2]|0;
   $72 = ($71|0)==(1);
   if ($72) {
    $73 = HEAP32[56>>2]|0;
    $74 = HEAP32[(389576)>>2]|0;
    $75 = (($74|0) / 40)&-1;
    $ReallocAsyncCtx26 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($73,1106,$66,$75);
    $IsAsync97 = ___async;
    if ($IsAsync97) {
     HEAP32[$ReallocAsyncCtx26>>2] = 104;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx26>>2] = 104;
    sp = STACKTOP;
    return;
   } else {
    $76 = HEAP32[48>>2]|0;
    $77 = HEAP32[(389576)>>2]|0;
    $78 = (($77|0) / 40)&-1;
    $ReallocAsyncCtx25 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($76,1106,$66,$78);
    $IsAsync93 = ___async;
    if ($IsAsync93) {
     HEAP32[$ReallocAsyncCtx25>>2] = 105;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx25>>2] = 105;
    sp = STACKTOP;
    return;
   }
   break;
  }
  case 38: {
   $81 = HEAP32[(389556)>>2]|0;
   $82 = HEAP32[$81>>2]|0;
   $83 = ($82|0)==(1);
   if ($83) {
    $84 = HEAP32[56>>2]|0;
    $85 = HEAP32[(389576)>>2]|0;
    $86 = (($85|0) / 40)&-1;
    $ReallocAsyncCtx24 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($84,1105,$79,$86);
    $IsAsync89 = ___async;
    if ($IsAsync89) {
     HEAP32[$ReallocAsyncCtx24>>2] = 106;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx24>>2] = 106;
    sp = STACKTOP;
    return;
   } else {
    $87 = HEAP32[48>>2]|0;
    $88 = HEAP32[(389576)>>2]|0;
    $89 = (($88|0) / 40)&-1;
    $ReallocAsyncCtx23 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($87,1105,$79,$89);
    $IsAsync85 = ___async;
    if ($IsAsync85) {
     HEAP32[$ReallocAsyncCtx23>>2] = 107;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx23>>2] = 107;
    sp = STACKTOP;
    return;
   }
   break;
  }
  case 47: {
   $97 = HEAP32[56>>2]|0;
   $98 = HEAP32[(389576)>>2]|0;
   $99 = (($98|0) / 40)&-1;
   $ReallocAsyncCtx22 = (_emscripten_realloc_async_context(4)|0);
   _move_paddle($97,1106,$93,$99);
   $IsAsync81 = ___async;
   if ($IsAsync81) {
    HEAP32[$ReallocAsyncCtx22>>2] = 108;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx22>>2] = 108;
   sp = STACKTOP;
   return;
   break;
  }
  case 51: {
   $102 = HEAP32[56>>2]|0;
   $103 = HEAP32[(389576)>>2]|0;
   $104 = (($103|0) / 40)&-1;
   $ReallocAsyncCtx21 = (_emscripten_realloc_async_context(4)|0);
   _move_paddle($102,1105,$100,$104);
   $IsAsync77 = ___async;
   if ($IsAsync77) {
    HEAP32[$ReallocAsyncCtx21>>2] = 109;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx21>>2] = 109;
   sp = STACKTOP;
   return;
   break;
  }
  case 55: {
   $ReallocAsyncCtx20 = (_emscripten_realloc_async_context(4)|0);
   _paddle_ai(2);
   $IsAsync73 = ___async;
   if ($IsAsync73) {
    HEAP32[$ReallocAsyncCtx20>>2] = 110;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx20>>2] = 110;
   sp = STACKTOP;
   return;
   break;
  }
  case 59: {
   $114 = HEAP8[104>>0]|0;
   $115 = ($114<<24>>24)==(0);
   if ($115) {
    $ReallocAsyncCtx39 = (_emscripten_realloc_async_context(4)|0);
    $116 = (_collision_ball()|0);
    $IsAsync146 = ___async;
    if ($IsAsync146) {
     HEAP32[$ReallocAsyncCtx39>>2] = 111;
     sp = STACKTOP;
     return;
    }
    $117 = ___async_retval;
    $$expand_i1_val = $116&1;
    HEAP8[$117>>0] = $$expand_i1_val;
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx39>>2] = 111;
    sp = STACKTOP;
    return;
   } else {
    $ReallocAsyncCtx38 = (_emscripten_realloc_async_context(4)|0);
    _update_ball();
    $IsAsync142 = ___async;
    if ($IsAsync142) {
     HEAP32[$ReallocAsyncCtx38>>2] = 112;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx38>>2] = 112;
    sp = STACKTOP;
    return;
   }
   break;
  }
  case 97: {
   $ReallocAsyncCtx32 = (_emscripten_realloc_async_context(4)|0);
   _end_danger();
   $IsAsync120 = ___async;
   if ($IsAsync120) {
    HEAP32[$ReallocAsyncCtx32>>2] = 124;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx32>>2] = 124;
   sp = STACKTOP;
   return;
   break;
  }
  case 103: {
   $225 = HEAP32[(651924)>>2]|0;
   $226 = $220 * 1.2;
   $227 = $226;
   HEAPF32[$218>>2] = $227;
   $228 = ((($208)) + 36|0);
   $229 = +HEAPF32[$228>>2];
   $230 = $229;
   $231 = $230 * 1.2;
   $232 = $231;
   HEAPF32[$228>>2] = $232;
   $ReallocAsyncCtx15 = (_emscripten_realloc_async_context(8)|0);
   FUNCTION_TABLE_vidd[$225 & 255]($208,$227,$232);
   $IsAsync54 = ___async;
   if ($IsAsync54) {
    HEAP32[$ReallocAsyncCtx15>>2] = 125;
    $233 = ((($ReallocAsyncCtx15)) + 4|0);
    HEAP32[$233>>2] = $pad$0;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx15>>2] = 125;
   $233 = ((($ReallocAsyncCtx15)) + 4|0);
   HEAP32[$233>>2] = $pad$0;
   sp = STACKTOP;
   return;
   break;
  }
  case 108: {
   $241 = HEAP32[(651924)>>2]|0;
   $242 = $236 * 1.2;
   $243 = $242;
   HEAPF32[$234>>2] = $243;
   $244 = ((($pad$0)) + 36|0);
   $245 = +HEAPF32[$244>>2];
   $246 = $245;
   $247 = $246 * 1.1000000000000001;
   $248 = $247;
   HEAPF32[$244>>2] = $248;
   $ReallocAsyncCtx16 = (_emscripten_realloc_async_context(8)|0);
   FUNCTION_TABLE_vidd[$241 & 255]($pad$0,$243,$248);
   $IsAsync58 = ___async;
   if ($IsAsync58) {
    HEAP32[$ReallocAsyncCtx16>>2] = 126;
    $249 = ((($ReallocAsyncCtx16)) + 4|0);
    HEAP32[$249>>2] = $pad$0;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx16>>2] = 126;
   $249 = ((($ReallocAsyncCtx16)) + 4|0);
   HEAP32[$249>>2] = $pad$0;
   sp = STACKTOP;
   return;
   break;
  }
  case 125: {
   return;
   break;
  }
 }
}
function _pong__async_cb131($0) {
 $0 = $0|0;
 var $$expand_i1_val = 0, $$not2 = 0, $$not7 = 0, $$pr = 0, $$pr32 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0.0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0.0, $203 = 0, $204 = 0, $205 = 0.0, $206 = 0, $207 = 0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0, $211 = 0.0, $212 = 0.0, $213 = 0, $214 = 0, $215 = 0.0, $216 = 0.0, $217 = 0, $218 = 0.0, $219 = 0.0, $22 = 0;
 var $220 = 0.0, $221 = 0.0, $222 = 0, $223 = 0, $224 = 0.0, $225 = 0.0, $226 = 0, $227 = 0.0, $228 = 0.0, $229 = 0, $23 = 0, $230 = 0, $231 = 0.0, $232 = 0.0, $233 = 0, $234 = 0.0, $235 = 0.0, $236 = 0.0, $237 = 0.0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0.0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0.0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0;
 var $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $AsyncRetVal = 0, $IsAsync11 = 0, $IsAsync120 = 0, $IsAsync128 = 0, $IsAsync142 = 0, $IsAsync146 = 0, $IsAsync18 = 0, $IsAsync22 = 0, $IsAsync30 = 0, $IsAsync4 = 0, $IsAsync42 = 0, $IsAsync46 = 0, $IsAsync50 = 0;
 var $IsAsync54 = 0, $IsAsync58 = 0, $IsAsync62 = 0, $IsAsync73 = 0, $IsAsync77 = 0, $IsAsync81 = 0, $IsAsync85 = 0, $IsAsync89 = 0, $IsAsync93 = 0, $IsAsync97 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx16 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx20 = 0, $ReallocAsyncCtx21 = 0, $ReallocAsyncCtx22 = 0;
 var $ReallocAsyncCtx23 = 0, $ReallocAsyncCtx24 = 0, $ReallocAsyncCtx25 = 0, $ReallocAsyncCtx26 = 0, $ReallocAsyncCtx32 = 0, $ReallocAsyncCtx34 = 0, $ReallocAsyncCtx38 = 0, $ReallocAsyncCtx39 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx9 = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond27 = 0, $or$cond30 = 0, $or$cond4 = 0, $or$cond42 = 0;
 var $or$cond44 = 0, $or$cond9 = 0, $pad$0 = 0, $paddle2$paddle1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ___async_retval;
 $AsyncRetVal = HEAP32[$1>>2]|0;
 $118 = (($AsyncRetVal>>>0) % 5)&-1;
 $119 = ($118>>>0)<(2);
 if ($119) {
  $ReallocAsyncCtx34 = (_emscripten_realloc_async_context(4)|0);
  _show_danger();
  $IsAsync128 = ___async;
  if ($IsAsync128) {
   HEAP32[$ReallocAsyncCtx34>>2] = 117;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx34>>2] = 117;
  sp = STACKTOP;
  return;
 }
 $120 = (_get_score(1)|0);
 $121 = ($120|0)==(4);
 if ($121) {
  $122 = HEAP32[96>>2]|0;
  $123 = ((($122)) + 44|0);
  $124 = HEAP8[$123>>0]|0;
  $125 = HEAP8[35112>>0]|0;
  $126 = $125 | $124;
  $127 = ($126<<24>>24)==(0);
  if ($127) {
   $128 = HEAP32[(651832)>>2]|0;
   $ReallocAsyncCtx12 = (_emscripten_realloc_async_context(4)|0);
   $129 = (FUNCTION_TABLE_i[$128 & 255]()|0);
   $IsAsync42 = ___async;
   if ($IsAsync42) {
    HEAP32[$ReallocAsyncCtx12>>2] = 118;
    sp = STACKTOP;
    return;
   }
   $130 = ___async_retval;
   HEAP32[$130>>2] = $129;
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx12>>2] = 118;
   sp = STACKTOP;
   return;
  }
 }
 $131 = HEAP32[382808>>2]|0;
 $132 = HEAP32[(389572)>>2]|0;
 $133 = (($132|0) / 2)&-1;
 $134 = ($131|0)<($133|0);
 if ($134) {
  $135 = HEAP32[8>>2]|0;
  $136 = ((($135)) + 8|0);
  $137 = +HEAPF32[$136>>2];
  $138 = (+($133|0));
  $139 = $137 >= $138;
  $140 = HEAP8[382784>>0]|0;
  $141 = ($140<<24>>24)==(0);
  $or$cond27 = $139 & $141;
  if ($or$cond27) {
   $142 = HEAP32[(389556)>>2]|0;
   $143 = HEAP32[$142>>2]|0;
   $144 = ($143|0)>(1);
   if ($144) {
    $145 = HEAP32[80>>2]|0;
    $146 = ((($145)) + 44|0);
    $147 = HEAP8[$146>>0]|0;
    $$not2 = ($147<<24>>24)==(0);
    $148 = HEAP32[35096>>2]|0;
    $149 = ($148|0)<(6);
    $or$cond4 = $$not2 & $149;
    if ($or$cond4) {
     $150 = HEAP32[(651832)>>2]|0;
     $ReallocAsyncCtx13 = (_emscripten_realloc_async_context(4)|0);
     $151 = (FUNCTION_TABLE_i[$150 & 255]()|0);
     $IsAsync46 = ___async;
     if ($IsAsync46) {
      HEAP32[$ReallocAsyncCtx13>>2] = 120;
      sp = STACKTOP;
      return;
     }
     $152 = ___async_retval;
     HEAP32[$152>>2] = $151;
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx13>>2] = 120;
     sp = STACKTOP;
     return;
    }
    $153 = HEAP8[382792>>0]|0;
    $154 = ($153<<24>>24)==(0);
    if ($154) {
     $155 = HEAP32[88>>2]|0;
     $156 = ((($155)) + 44|0);
     $157 = HEAP8[$156>>0]|0;
     $158 = HEAP8[35112>>0]|0;
     $159 = $158 | $157;
     $160 = ($159<<24>>24)==(0);
     if ($160) {
      $161 = HEAP32[(651832)>>2]|0;
      $ReallocAsyncCtx14 = (_emscripten_realloc_async_context(4)|0);
      $162 = (FUNCTION_TABLE_i[$161 & 255]()|0);
      $IsAsync50 = ___async;
      if ($IsAsync50) {
       HEAP32[$ReallocAsyncCtx14>>2] = 122;
       sp = STACKTOP;
       return;
      }
      $163 = ___async_retval;
      HEAP32[$163>>2] = $162;
      ___async_unwind = 0;
      HEAP32[$ReallocAsyncCtx14>>2] = 122;
      sp = STACKTOP;
      return;
     } else {
      $164 = $158;
     }
    } else {
     label = 87;
    }
   } else {
    label = 87;
   }
  } else {
   label = 87;
  }
 } else {
  label = 87;
 }
 L34: while(1) {
  if ((label|0) == 87) {
   label = 0;
   $$pr32 = HEAP8[35112>>0]|0;
   $164 = $$pr32;
  }
  $165 = ($164<<24>>24)==(0);
  if (!($165)) {
   $166 = 389544;
   $167 = $166;
   $168 = HEAP32[$167>>2]|0;
   $169 = (($166) + 4)|0;
   $170 = $169;
   $171 = HEAP32[$170>>2]|0;
   $172 = 35120;
   $173 = $172;
   $174 = HEAP32[$173>>2]|0;
   $175 = (($172) + 4)|0;
   $176 = $175;
   $177 = HEAP32[$176>>2]|0;
   $178 = (_i64Subtract(($168|0),($171|0),($174|0),($177|0))|0);
   $179 = tempRet0;
   $180 = ($179>>>0)>(0);
   $181 = ($178>>>0)>(10000000);
   $182 = ($179|0)==(0);
   $183 = $182 & $181;
   $184 = $180 | $183;
   if ($184) {
    label = 92;
    break;
   }
   $185 = HEAP32[(651780)>>2]|0;
   if ((($185|0) == 5) | (($185|0) == 15)) {
    $186 = HEAP32[40>>2]|0;
    $187 = ((($186)) + 4|0);
    $188 = HEAP32[$187>>2]|0;
    $189 = ($188|0)==(4);
    $190 = ($179>>>0)>(0);
    $191 = ($178>>>0)>(5000000);
    $192 = ($179|0)==(0);
    $193 = $192 & $191;
    $194 = $190 | $193;
    $or$cond30 = $194 & $189;
    if ($or$cond30) {
     label = 92;
     break;
    }
   }
  }
  $195 = HEAP8[104>>0]|0;
  $196 = ($195<<24>>24)==(0);
  do {
   if (!($196)) {
    $197 = HEAP32[96>>2]|0;
    $198 = ((($197)) + 44|0);
    $199 = HEAP8[$198>>0]|0;
    $200 = ($199<<24>>24)==(0);
    if (!($200)) {
     $201 = ((($197)) + 8|0);
     $202 = +HEAPF32[$201>>2];
     $203 = HEAP32[(389572)>>2]|0;
     $204 = (($203|0) / 2)&-1;
     $205 = (+($204|0));
     $206 = $202 > $205;
     $paddle2$paddle1 = $206 ? 48 : 56;
     $pad$0 = HEAP32[$paddle2$paddle1>>2]|0;
     $207 = ((($197)) + 40|0);
     $208 = +HEAPF32[$207>>2];
     $209 = $208;
     $210 = (($203|0) / 40)&-1;
     $211 = (+($210|0));
     $212 = $211 * 10.0;
     $213 = $209 < $212;
     if ($213) {
      label = 98;
      break L34;
     }
     HEAP8[$198>>0] = 0;
     $223 = ((($pad$0)) + 40|0);
     $224 = +HEAPF32[$223>>2];
     $225 = $224;
     $226 = (($203|0) / 40)&-1;
     $227 = (+($226|0));
     $228 = $227 * 20.0;
     $229 = $225 < $228;
     if ($229) {
      label = 103;
      break L34;
     }
     $239 = ((($pad$0)) + 44|0);
     HEAP8[$239>>0] = 0;
     $240 = ((($pad$0)) + 4|0);
     $241 = HEAP32[$240>>2]|0;
     if ((($241|0) == 0)) {
      HEAP32[$240>>2] = 1;
      break;
     } else if ((($241|0) == 10)) {
      HEAP32[$240>>2] = 11;
      break;
     } else {
      break;
     }
    }
   }
  } while(0);
  $242 = HEAP8[382784>>0]|0;
  $243 = ($242<<24>>24)==(0);
  if ($243) {
   $244 = 389544;
   $245 = $244;
   $246 = HEAP32[$245>>2]|0;
   $247 = (($244) + 4)|0;
   $248 = $247;
   $249 = HEAP32[$248>>2]|0;
   $285 = $246;$286 = $249;
  } else {
   $250 = HEAP8[104>>0]|0;
   $251 = ($250<<24>>24)==(0);
   $252 = 389544;
   $253 = $252;
   $254 = HEAP32[$253>>2]|0;
   $255 = (($252) + 4)|0;
   $256 = $255;
   $257 = HEAP32[$256>>2]|0;
   $258 = 382800;
   $259 = $258;
   $260 = HEAP32[$259>>2]|0;
   $261 = (($258) + 4)|0;
   $262 = $261;
   $263 = HEAP32[$262>>2]|0;
   $264 = (_i64Subtract(($254|0),($257|0),($260|0),($263|0))|0);
   $265 = tempRet0;
   $266 = ($265>>>0)>(0);
   $267 = ($264>>>0)>(3000000);
   $268 = ($265|0)==(0);
   $269 = $268 & $267;
   $270 = $266 | $269;
   $or$cond42 = $251 & $270;
   $271 = (_i64Subtract(($254|0),($257|0),($260|0),($263|0))|0);
   $272 = tempRet0;
   $273 = ($272>>>0)>(0);
   $274 = ($271>>>0)>(6000000);
   $275 = ($272|0)==(0);
   $276 = $275 & $274;
   $277 = $273 | $276;
   $or$cond44 = $or$cond42 | $277;
   if ($or$cond44) {
    $278 = HEAP32[35096>>2]|0;
    $279 = ($278|0)==(6);
    if ($279) {
     $280 = HEAP32[(389556)>>2]|0;
     $281 = HEAP32[$280>>2]|0;
     $282 = ($281|0)==(1);
     if ($282) {
      $283 = ((($280)) + 4|0);
      HEAP8[$283>>0] = 1;
     } else {
      label = 116;
     }
    } else {
     label = 116;
    }
    if ((label|0) == 116) {
     label = 0;
     HEAP32[(651780)>>2] = 0;
    }
    HEAP8[128>>0] = 0;
    $285 = $254;$286 = $257;
   } else {
    $285 = $254;$286 = $257;
   }
  }
  $284 = HEAP32[216>>2]|0;
  $2 = (($284) + -40000)|0;
  HEAP32[216>>2] = $2;
  $287 = (_i64Add(($285|0),($286|0),40000,0)|0);
  $288 = tempRet0;
  $289 = 389544;
  $290 = $289;
  HEAP32[$290>>2] = $287;
  $291 = (($289) + 4)|0;
  $292 = $291;
  HEAP32[$292>>2] = $288;
  $3 = ($2|0)>(39999);
  if ($3) {
   label = 3;
   break;
  }
  __render();
  $293 = HEAP8[128>>0]|0;
  $$not7 = ($293<<24>>24)==(0);
  $294 = 389544;
  $295 = $294;
  $296 = HEAP32[$295>>2]|0;
  $297 = (($294) + 4)|0;
  $298 = $297;
  $299 = HEAP32[$298>>2]|0;
  $300 = ($296|0)==(0);
  $301 = ($299|0)==(0);
  $302 = $300 & $301;
  $or$cond9 = $$not7 & $302;
  if (!($or$cond9)) {
   label = 120;
   break;
  }
  $4 = HEAP32[(389696)>>2]|0;
  $5 = ($4|0)==(0);
  if (!($5)) {
   HEAP8[128>>0] = 0;
  }
  $6 = (_score_ball()|0);
  if ((($6|0) == 5)) {
   $7 = HEAP8[382784>>0]|0;
   $8 = ($7<<24>>24)==(0);
   if ($8) {
    label = 10;
    break;
   }
  } else if (!((($6|0) == 0))) {
   $$pr = HEAP8[382784>>0]|0;
   $63 = ($$pr<<24>>24)==(0);
   if ($63) {
    label = 26;
    break;
   }
  }
  $66 = HEAP32[(394012)>>2]|0;
  $67 = ($66|0)>(0);
  $68 = HEAP8[382784>>0]|0;
  $69 = ($68<<24>>24)==(0);
  $or$cond11 = $67 & $69;
  if ($or$cond11) {
   label = 30;
   break;
  }
  $79 = HEAP32[(394008)>>2]|0;
  $80 = ($79|0)>(0);
  $or$cond13 = $69 & $80;
  if ($or$cond13) {
   label = 38;
   break;
  }
  $90 = HEAP32[(389556)>>2]|0;
  $91 = HEAP32[$90>>2]|0;
  $92 = ($91|0)==(2);
  if ($92) {
   $93 = HEAP32[(390064)>>2]|0;
   $94 = ($93|0)>(0);
   $95 = HEAP8[382784>>0]|0;
   $96 = ($95<<24>>24)==(0);
   $or$cond15 = $94 & $96;
   if ($or$cond15) {
    label = 47;
    break;
   }
   $100 = HEAP32[(390048)>>2]|0;
   $101 = ($100|0)>(0);
   $or$cond17 = $96 & $101;
   if ($or$cond17) {
    label = 51;
    break;
   }
  }
  $105 = HEAP32[(389556)>>2]|0;
  $106 = HEAP32[$105>>2]|0;
  $107 = ($106|0)<(2);
  if ($107) {
   label = 55;
   break;
  }
  $108 = HEAP32[8>>2]|0;
  $109 = ((($108)) + 8|0);
  $110 = +HEAPF32[$109>>2];
  $111 = (~~(($110)));
  HEAP32[382808>>2] = $111;
  $112 = HEAP8[382784>>0]|0;
  $113 = ($112<<24>>24)==(0);
  if ($113) {
   label = 59;
   break;
  } else {
   label = 87;
  }
 }
 switch (label|0) {
  case 3: {
   $ReallocAsyncCtx17 = (_emscripten_realloc_async_context(4)|0);
   __update();
   $IsAsync62 = ___async;
   if ($IsAsync62) {
    HEAP32[$ReallocAsyncCtx17>>2] = 94;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx17>>2] = 94;
   sp = STACKTOP;
   return;
   break;
  }
  case 10: {
   HEAP8[382784>>0] = 1;
   $9 = HEAP32[(389556)>>2]|0;
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==(1);
   if ($11) {
    $12 = (_get_score(1)|0);
    $13 = ($12|0)==(5);
    if ($13) {
     $14 = 389544;
     $15 = $14;
     $16 = HEAP32[$15>>2]|0;
     $17 = (($14) + 4)|0;
     $18 = $17;
     $19 = HEAP32[$18>>2]|0;
     $20 = 382800;
     $21 = $20;
     HEAP32[$21>>2] = $16;
     $22 = (($20) + 4)|0;
     $23 = $22;
     HEAP32[$23>>2] = $19;
     $24 = HEAP32[(651920)>>2]|0;
     $25 = HEAP32[8>>2]|0;
     $26 = HEAP32[(389572)>>2]|0;
     $27 = (+($26|0));
     $28 = ((($25)) + 12|0);
     $29 = +HEAPF32[$28>>2];
     $ReallocAsyncCtx2 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vidd[$24 & 255]($25,$27,$29);
     $IsAsync4 = ___async;
     if ($IsAsync4) {
      HEAP32[$ReallocAsyncCtx2>>2] = 95;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx2>>2] = 95;
     sp = STACKTOP;
     return;
    } else {
     HEAP8[382784>>0] = 1;
     $30 = 389544;
     $31 = $30;
     $32 = HEAP32[$31>>2]|0;
     $33 = (($30) + 4)|0;
     $34 = $33;
     $35 = HEAP32[$34>>2]|0;
     $36 = 382800;
     $37 = $36;
     HEAP32[$37>>2] = $32;
     $38 = (($36) + 4)|0;
     $39 = $38;
     HEAP32[$39>>2] = $35;
     $40 = HEAP32[(651952)>>2]|0;
     $41 = HEAP32[35168>>2]|0;
     $ReallocAsyncCtx4 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vi[$40 & 255]($41);
     $IsAsync11 = ___async;
     if ($IsAsync11) {
      HEAP32[$ReallocAsyncCtx4>>2] = 97;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx4>>2] = 97;
     sp = STACKTOP;
     return;
    }
   } else {
    $42 = 389544;
    $43 = $42;
    $44 = HEAP32[$43>>2]|0;
    $45 = (($42) + 4)|0;
    $46 = $45;
    $47 = HEAP32[$46>>2]|0;
    $48 = 382800;
    $49 = $48;
    HEAP32[$49>>2] = $44;
    $50 = (($48) + 4)|0;
    $51 = $50;
    HEAP32[$51>>2] = $47;
    $52 = HEAP32[8>>2]|0;
    $53 = ((($52)) + 8|0);
    $54 = +HEAPF32[$53>>2];
    $55 = HEAP32[(389572)>>2]|0;
    $56 = (($55|0) / 2)&-1;
    $57 = (+($56|0));
    $58 = $54 > $57;
    $59 = HEAP32[(651920)>>2]|0;
    $60 = ((($52)) + 12|0);
    $61 = +HEAPF32[$60>>2];
    if ($58) {
     $62 = (+($55|0));
     $ReallocAsyncCtx6 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vidd[$59 & 255]($52,$62,$61);
     $IsAsync18 = ___async;
     if ($IsAsync18) {
      HEAP32[$ReallocAsyncCtx6>>2] = 99;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx6>>2] = 99;
     sp = STACKTOP;
     return;
    } else {
     $ReallocAsyncCtx7 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vidd[$59 & 255]($52,0.0,$61);
     $IsAsync22 = ___async;
     if ($IsAsync22) {
      HEAP32[$ReallocAsyncCtx7>>2] = 100;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx7>>2] = 100;
     sp = STACKTOP;
     return;
    }
   }
   break;
  }
  case 26: {
   $64 = HEAP32[(651952)>>2]|0;
   $65 = HEAP32[35128>>2]|0;
   $ReallocAsyncCtx9 = (_emscripten_realloc_async_context(4)|0);
   FUNCTION_TABLE_vi[$64 & 255]($65);
   $IsAsync30 = ___async;
   if ($IsAsync30) {
    HEAP32[$ReallocAsyncCtx9>>2] = 102;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx9>>2] = 102;
   sp = STACKTOP;
   return;
   break;
  }
  case 30: {
   $70 = HEAP32[(389556)>>2]|0;
   $71 = HEAP32[$70>>2]|0;
   $72 = ($71|0)==(1);
   if ($72) {
    $73 = HEAP32[56>>2]|0;
    $74 = HEAP32[(389576)>>2]|0;
    $75 = (($74|0) / 40)&-1;
    $ReallocAsyncCtx26 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($73,1106,$66,$75);
    $IsAsync97 = ___async;
    if ($IsAsync97) {
     HEAP32[$ReallocAsyncCtx26>>2] = 104;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx26>>2] = 104;
    sp = STACKTOP;
    return;
   } else {
    $76 = HEAP32[48>>2]|0;
    $77 = HEAP32[(389576)>>2]|0;
    $78 = (($77|0) / 40)&-1;
    $ReallocAsyncCtx25 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($76,1106,$66,$78);
    $IsAsync93 = ___async;
    if ($IsAsync93) {
     HEAP32[$ReallocAsyncCtx25>>2] = 105;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx25>>2] = 105;
    sp = STACKTOP;
    return;
   }
   break;
  }
  case 38: {
   $81 = HEAP32[(389556)>>2]|0;
   $82 = HEAP32[$81>>2]|0;
   $83 = ($82|0)==(1);
   if ($83) {
    $84 = HEAP32[56>>2]|0;
    $85 = HEAP32[(389576)>>2]|0;
    $86 = (($85|0) / 40)&-1;
    $ReallocAsyncCtx24 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($84,1105,$79,$86);
    $IsAsync89 = ___async;
    if ($IsAsync89) {
     HEAP32[$ReallocAsyncCtx24>>2] = 106;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx24>>2] = 106;
    sp = STACKTOP;
    return;
   } else {
    $87 = HEAP32[48>>2]|0;
    $88 = HEAP32[(389576)>>2]|0;
    $89 = (($88|0) / 40)&-1;
    $ReallocAsyncCtx23 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($87,1105,$79,$89);
    $IsAsync85 = ___async;
    if ($IsAsync85) {
     HEAP32[$ReallocAsyncCtx23>>2] = 107;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx23>>2] = 107;
    sp = STACKTOP;
    return;
   }
   break;
  }
  case 47: {
   $97 = HEAP32[56>>2]|0;
   $98 = HEAP32[(389576)>>2]|0;
   $99 = (($98|0) / 40)&-1;
   $ReallocAsyncCtx22 = (_emscripten_realloc_async_context(4)|0);
   _move_paddle($97,1106,$93,$99);
   $IsAsync81 = ___async;
   if ($IsAsync81) {
    HEAP32[$ReallocAsyncCtx22>>2] = 108;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx22>>2] = 108;
   sp = STACKTOP;
   return;
   break;
  }
  case 51: {
   $102 = HEAP32[56>>2]|0;
   $103 = HEAP32[(389576)>>2]|0;
   $104 = (($103|0) / 40)&-1;
   $ReallocAsyncCtx21 = (_emscripten_realloc_async_context(4)|0);
   _move_paddle($102,1105,$100,$104);
   $IsAsync77 = ___async;
   if ($IsAsync77) {
    HEAP32[$ReallocAsyncCtx21>>2] = 109;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx21>>2] = 109;
   sp = STACKTOP;
   return;
   break;
  }
  case 55: {
   $ReallocAsyncCtx20 = (_emscripten_realloc_async_context(4)|0);
   _paddle_ai(2);
   $IsAsync73 = ___async;
   if ($IsAsync73) {
    HEAP32[$ReallocAsyncCtx20>>2] = 110;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx20>>2] = 110;
   sp = STACKTOP;
   return;
   break;
  }
  case 59: {
   $114 = HEAP8[104>>0]|0;
   $115 = ($114<<24>>24)==(0);
   if ($115) {
    $ReallocAsyncCtx39 = (_emscripten_realloc_async_context(4)|0);
    $116 = (_collision_ball()|0);
    $IsAsync146 = ___async;
    if ($IsAsync146) {
     HEAP32[$ReallocAsyncCtx39>>2] = 111;
     sp = STACKTOP;
     return;
    }
    $117 = ___async_retval;
    $$expand_i1_val = $116&1;
    HEAP8[$117>>0] = $$expand_i1_val;
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx39>>2] = 111;
    sp = STACKTOP;
    return;
   } else {
    $ReallocAsyncCtx38 = (_emscripten_realloc_async_context(4)|0);
    _update_ball();
    $IsAsync142 = ___async;
    if ($IsAsync142) {
     HEAP32[$ReallocAsyncCtx38>>2] = 112;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx38>>2] = 112;
    sp = STACKTOP;
    return;
   }
   break;
  }
  case 92: {
   $ReallocAsyncCtx32 = (_emscripten_realloc_async_context(4)|0);
   _end_danger();
   $IsAsync120 = ___async;
   if ($IsAsync120) {
    HEAP32[$ReallocAsyncCtx32>>2] = 124;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx32>>2] = 124;
   sp = STACKTOP;
   return;
   break;
  }
  case 98: {
   $214 = HEAP32[(651924)>>2]|0;
   $215 = $209 * 1.2;
   $216 = $215;
   HEAPF32[$207>>2] = $216;
   $217 = ((($197)) + 36|0);
   $218 = +HEAPF32[$217>>2];
   $219 = $218;
   $220 = $219 * 1.2;
   $221 = $220;
   HEAPF32[$217>>2] = $221;
   $ReallocAsyncCtx15 = (_emscripten_realloc_async_context(8)|0);
   FUNCTION_TABLE_vidd[$214 & 255]($197,$216,$221);
   $IsAsync54 = ___async;
   if ($IsAsync54) {
    HEAP32[$ReallocAsyncCtx15>>2] = 125;
    $222 = ((($ReallocAsyncCtx15)) + 4|0);
    HEAP32[$222>>2] = $pad$0;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx15>>2] = 125;
   $222 = ((($ReallocAsyncCtx15)) + 4|0);
   HEAP32[$222>>2] = $pad$0;
   sp = STACKTOP;
   return;
   break;
  }
  case 103: {
   $230 = HEAP32[(651924)>>2]|0;
   $231 = $225 * 1.2;
   $232 = $231;
   HEAPF32[$223>>2] = $232;
   $233 = ((($pad$0)) + 36|0);
   $234 = +HEAPF32[$233>>2];
   $235 = $234;
   $236 = $235 * 1.1000000000000001;
   $237 = $236;
   HEAPF32[$233>>2] = $237;
   $ReallocAsyncCtx16 = (_emscripten_realloc_async_context(8)|0);
   FUNCTION_TABLE_vidd[$230 & 255]($pad$0,$232,$237);
   $IsAsync58 = ___async;
   if ($IsAsync58) {
    HEAP32[$ReallocAsyncCtx16>>2] = 126;
    $238 = ((($ReallocAsyncCtx16)) + 4|0);
    HEAP32[$238>>2] = $pad$0;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx16>>2] = 126;
   $238 = ((($ReallocAsyncCtx16)) + 4|0);
   HEAP32[$238>>2] = $pad$0;
   sp = STACKTOP;
   return;
   break;
  }
  case 120: {
   return;
   break;
  }
 }
}
function _pong__async_cb132($0) {
 $0 = $0|0;
 var $$expand_i1_val = 0, $$not2 = 0, $$not7 = 0, $$pr = 0, $$pr32 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0.0, $192 = 0, $193 = 0, $194 = 0.0, $195 = 0, $196 = 0, $197 = 0.0, $198 = 0.0, $199 = 0, $2 = 0, $20 = 0, $200 = 0.0, $201 = 0.0;
 var $202 = 0, $203 = 0, $204 = 0.0, $205 = 0.0, $206 = 0, $207 = 0.0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0, $212 = 0, $213 = 0.0, $214 = 0.0, $215 = 0, $216 = 0.0, $217 = 0.0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0.0, $221 = 0.0, $222 = 0, $223 = 0.0, $224 = 0.0, $225 = 0.0, $226 = 0.0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0.0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0.0, $290 = 0, $291 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $AsyncRetVal = 0, $IsAsync11 = 0, $IsAsync120 = 0, $IsAsync135 = 0;
 var $IsAsync142 = 0, $IsAsync146 = 0, $IsAsync18 = 0, $IsAsync22 = 0, $IsAsync30 = 0, $IsAsync4 = 0, $IsAsync46 = 0, $IsAsync50 = 0, $IsAsync54 = 0, $IsAsync58 = 0, $IsAsync62 = 0, $IsAsync73 = 0, $IsAsync77 = 0, $IsAsync81 = 0, $IsAsync85 = 0, $IsAsync89 = 0, $IsAsync93 = 0, $IsAsync97 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0;
 var $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx16 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx20 = 0, $ReallocAsyncCtx21 = 0, $ReallocAsyncCtx22 = 0, $ReallocAsyncCtx23 = 0, $ReallocAsyncCtx24 = 0, $ReallocAsyncCtx25 = 0, $ReallocAsyncCtx26 = 0, $ReallocAsyncCtx32 = 0, $ReallocAsyncCtx36 = 0, $ReallocAsyncCtx38 = 0, $ReallocAsyncCtx39 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx9 = 0, $or$cond11 = 0;
 var $or$cond13 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond27 = 0, $or$cond30 = 0, $or$cond4 = 0, $or$cond42 = 0, $or$cond44 = 0, $or$cond9 = 0, $pad$0 = 0, $paddle2$paddle1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ___async_retval;
 $AsyncRetVal = HEAP32[$1>>2]|0;
 $118 = (($AsyncRetVal>>>0) % 5)&-1;
 $119 = ($118|0)==(0);
 if ($119) {
  $ReallocAsyncCtx36 = (_emscripten_realloc_async_context(4)|0);
  _show_bomb();
  $IsAsync135 = ___async;
  if ($IsAsync135) {
   HEAP32[$ReallocAsyncCtx36>>2] = 119;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx36>>2] = 119;
  sp = STACKTOP;
  return;
 }
 $120 = HEAP32[382808>>2]|0;
 $121 = HEAP32[(389572)>>2]|0;
 $122 = (($121|0) / 2)&-1;
 $123 = ($120|0)<($122|0);
 if ($123) {
  $124 = HEAP32[8>>2]|0;
  $125 = ((($124)) + 8|0);
  $126 = +HEAPF32[$125>>2];
  $127 = (+($122|0));
  $128 = $126 >= $127;
  $129 = HEAP8[382784>>0]|0;
  $130 = ($129<<24>>24)==(0);
  $or$cond27 = $128 & $130;
  if ($or$cond27) {
   $131 = HEAP32[(389556)>>2]|0;
   $132 = HEAP32[$131>>2]|0;
   $133 = ($132|0)>(1);
   if ($133) {
    $134 = HEAP32[80>>2]|0;
    $135 = ((($134)) + 44|0);
    $136 = HEAP8[$135>>0]|0;
    $$not2 = ($136<<24>>24)==(0);
    $137 = HEAP32[35096>>2]|0;
    $138 = ($137|0)<(6);
    $or$cond4 = $$not2 & $138;
    if ($or$cond4) {
     $139 = HEAP32[(651832)>>2]|0;
     $ReallocAsyncCtx13 = (_emscripten_realloc_async_context(4)|0);
     $140 = (FUNCTION_TABLE_i[$139 & 255]()|0);
     $IsAsync46 = ___async;
     if ($IsAsync46) {
      HEAP32[$ReallocAsyncCtx13>>2] = 120;
      sp = STACKTOP;
      return;
     }
     $141 = ___async_retval;
     HEAP32[$141>>2] = $140;
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx13>>2] = 120;
     sp = STACKTOP;
     return;
    }
    $142 = HEAP8[382792>>0]|0;
    $143 = ($142<<24>>24)==(0);
    if ($143) {
     $144 = HEAP32[88>>2]|0;
     $145 = ((($144)) + 44|0);
     $146 = HEAP8[$145>>0]|0;
     $147 = HEAP8[35112>>0]|0;
     $148 = $147 | $146;
     $149 = ($148<<24>>24)==(0);
     if ($149) {
      $150 = HEAP32[(651832)>>2]|0;
      $ReallocAsyncCtx14 = (_emscripten_realloc_async_context(4)|0);
      $151 = (FUNCTION_TABLE_i[$150 & 255]()|0);
      $IsAsync50 = ___async;
      if ($IsAsync50) {
       HEAP32[$ReallocAsyncCtx14>>2] = 122;
       sp = STACKTOP;
       return;
      }
      $152 = ___async_retval;
      HEAP32[$152>>2] = $151;
      ___async_unwind = 0;
      HEAP32[$ReallocAsyncCtx14>>2] = 122;
      sp = STACKTOP;
      return;
     } else {
      $153 = $147;
     }
    } else {
     label = 82;
    }
   } else {
    label = 82;
   }
  } else {
   label = 82;
  }
 } else {
  label = 82;
 }
 L26: while(1) {
  if ((label|0) == 82) {
   label = 0;
   $$pr32 = HEAP8[35112>>0]|0;
   $153 = $$pr32;
  }
  $154 = ($153<<24>>24)==(0);
  if (!($154)) {
   $155 = 389544;
   $156 = $155;
   $157 = HEAP32[$156>>2]|0;
   $158 = (($155) + 4)|0;
   $159 = $158;
   $160 = HEAP32[$159>>2]|0;
   $161 = 35120;
   $162 = $161;
   $163 = HEAP32[$162>>2]|0;
   $164 = (($161) + 4)|0;
   $165 = $164;
   $166 = HEAP32[$165>>2]|0;
   $167 = (_i64Subtract(($157|0),($160|0),($163|0),($166|0))|0);
   $168 = tempRet0;
   $169 = ($168>>>0)>(0);
   $170 = ($167>>>0)>(10000000);
   $171 = ($168|0)==(0);
   $172 = $171 & $170;
   $173 = $169 | $172;
   if ($173) {
    label = 87;
    break;
   }
   $174 = HEAP32[(651780)>>2]|0;
   if ((($174|0) == 5) | (($174|0) == 15)) {
    $175 = HEAP32[40>>2]|0;
    $176 = ((($175)) + 4|0);
    $177 = HEAP32[$176>>2]|0;
    $178 = ($177|0)==(4);
    $179 = ($168>>>0)>(0);
    $180 = ($167>>>0)>(5000000);
    $181 = ($168|0)==(0);
    $182 = $181 & $180;
    $183 = $179 | $182;
    $or$cond30 = $183 & $178;
    if ($or$cond30) {
     label = 87;
     break;
    }
   }
  }
  $184 = HEAP8[104>>0]|0;
  $185 = ($184<<24>>24)==(0);
  do {
   if (!($185)) {
    $186 = HEAP32[96>>2]|0;
    $187 = ((($186)) + 44|0);
    $188 = HEAP8[$187>>0]|0;
    $189 = ($188<<24>>24)==(0);
    if (!($189)) {
     $190 = ((($186)) + 8|0);
     $191 = +HEAPF32[$190>>2];
     $192 = HEAP32[(389572)>>2]|0;
     $193 = (($192|0) / 2)&-1;
     $194 = (+($193|0));
     $195 = $191 > $194;
     $paddle2$paddle1 = $195 ? 48 : 56;
     $pad$0 = HEAP32[$paddle2$paddle1>>2]|0;
     $196 = ((($186)) + 40|0);
     $197 = +HEAPF32[$196>>2];
     $198 = $197;
     $199 = (($192|0) / 40)&-1;
     $200 = (+($199|0));
     $201 = $200 * 10.0;
     $202 = $198 < $201;
     if ($202) {
      label = 93;
      break L26;
     }
     HEAP8[$187>>0] = 0;
     $212 = ((($pad$0)) + 40|0);
     $213 = +HEAPF32[$212>>2];
     $214 = $213;
     $215 = (($192|0) / 40)&-1;
     $216 = (+($215|0));
     $217 = $216 * 20.0;
     $218 = $214 < $217;
     if ($218) {
      label = 98;
      break L26;
     }
     $228 = ((($pad$0)) + 44|0);
     HEAP8[$228>>0] = 0;
     $229 = ((($pad$0)) + 4|0);
     $230 = HEAP32[$229>>2]|0;
     if ((($230|0) == 0)) {
      HEAP32[$229>>2] = 1;
      break;
     } else if ((($230|0) == 10)) {
      HEAP32[$229>>2] = 11;
      break;
     } else {
      break;
     }
    }
   }
  } while(0);
  $231 = HEAP8[382784>>0]|0;
  $232 = ($231<<24>>24)==(0);
  if ($232) {
   $233 = 389544;
   $234 = $233;
   $235 = HEAP32[$234>>2]|0;
   $236 = (($233) + 4)|0;
   $237 = $236;
   $238 = HEAP32[$237>>2]|0;
   $274 = $235;$275 = $238;
  } else {
   $239 = HEAP8[104>>0]|0;
   $240 = ($239<<24>>24)==(0);
   $241 = 389544;
   $242 = $241;
   $243 = HEAP32[$242>>2]|0;
   $244 = (($241) + 4)|0;
   $245 = $244;
   $246 = HEAP32[$245>>2]|0;
   $247 = 382800;
   $248 = $247;
   $249 = HEAP32[$248>>2]|0;
   $250 = (($247) + 4)|0;
   $251 = $250;
   $252 = HEAP32[$251>>2]|0;
   $253 = (_i64Subtract(($243|0),($246|0),($249|0),($252|0))|0);
   $254 = tempRet0;
   $255 = ($254>>>0)>(0);
   $256 = ($253>>>0)>(3000000);
   $257 = ($254|0)==(0);
   $258 = $257 & $256;
   $259 = $255 | $258;
   $or$cond42 = $240 & $259;
   $260 = (_i64Subtract(($243|0),($246|0),($249|0),($252|0))|0);
   $261 = tempRet0;
   $262 = ($261>>>0)>(0);
   $263 = ($260>>>0)>(6000000);
   $264 = ($261|0)==(0);
   $265 = $264 & $263;
   $266 = $262 | $265;
   $or$cond44 = $or$cond42 | $266;
   if ($or$cond44) {
    $267 = HEAP32[35096>>2]|0;
    $268 = ($267|0)==(6);
    if ($268) {
     $269 = HEAP32[(389556)>>2]|0;
     $270 = HEAP32[$269>>2]|0;
     $271 = ($270|0)==(1);
     if ($271) {
      $272 = ((($269)) + 4|0);
      HEAP8[$272>>0] = 1;
     } else {
      label = 111;
     }
    } else {
     label = 111;
    }
    if ((label|0) == 111) {
     label = 0;
     HEAP32[(651780)>>2] = 0;
    }
    HEAP8[128>>0] = 0;
    $274 = $243;$275 = $246;
   } else {
    $274 = $243;$275 = $246;
   }
  }
  $273 = HEAP32[216>>2]|0;
  $2 = (($273) + -40000)|0;
  HEAP32[216>>2] = $2;
  $276 = (_i64Add(($274|0),($275|0),40000,0)|0);
  $277 = tempRet0;
  $278 = 389544;
  $279 = $278;
  HEAP32[$279>>2] = $276;
  $280 = (($278) + 4)|0;
  $281 = $280;
  HEAP32[$281>>2] = $277;
  $3 = ($2|0)>(39999);
  if ($3) {
   label = 3;
   break;
  }
  __render();
  $282 = HEAP8[128>>0]|0;
  $$not7 = ($282<<24>>24)==(0);
  $283 = 389544;
  $284 = $283;
  $285 = HEAP32[$284>>2]|0;
  $286 = (($283) + 4)|0;
  $287 = $286;
  $288 = HEAP32[$287>>2]|0;
  $289 = ($285|0)==(0);
  $290 = ($288|0)==(0);
  $291 = $289 & $290;
  $or$cond9 = $$not7 & $291;
  if (!($or$cond9)) {
   label = 115;
   break;
  }
  $4 = HEAP32[(389696)>>2]|0;
  $5 = ($4|0)==(0);
  if (!($5)) {
   HEAP8[128>>0] = 0;
  }
  $6 = (_score_ball()|0);
  if ((($6|0) == 5)) {
   $7 = HEAP8[382784>>0]|0;
   $8 = ($7<<24>>24)==(0);
   if ($8) {
    label = 10;
    break;
   }
  } else if (!((($6|0) == 0))) {
   $$pr = HEAP8[382784>>0]|0;
   $63 = ($$pr<<24>>24)==(0);
   if ($63) {
    label = 26;
    break;
   }
  }
  $66 = HEAP32[(394012)>>2]|0;
  $67 = ($66|0)>(0);
  $68 = HEAP8[382784>>0]|0;
  $69 = ($68<<24>>24)==(0);
  $or$cond11 = $67 & $69;
  if ($or$cond11) {
   label = 30;
   break;
  }
  $79 = HEAP32[(394008)>>2]|0;
  $80 = ($79|0)>(0);
  $or$cond13 = $69 & $80;
  if ($or$cond13) {
   label = 38;
   break;
  }
  $90 = HEAP32[(389556)>>2]|0;
  $91 = HEAP32[$90>>2]|0;
  $92 = ($91|0)==(2);
  if ($92) {
   $93 = HEAP32[(390064)>>2]|0;
   $94 = ($93|0)>(0);
   $95 = HEAP8[382784>>0]|0;
   $96 = ($95<<24>>24)==(0);
   $or$cond15 = $94 & $96;
   if ($or$cond15) {
    label = 47;
    break;
   }
   $100 = HEAP32[(390048)>>2]|0;
   $101 = ($100|0)>(0);
   $or$cond17 = $96 & $101;
   if ($or$cond17) {
    label = 51;
    break;
   }
  }
  $105 = HEAP32[(389556)>>2]|0;
  $106 = HEAP32[$105>>2]|0;
  $107 = ($106|0)<(2);
  if ($107) {
   label = 55;
   break;
  }
  $108 = HEAP32[8>>2]|0;
  $109 = ((($108)) + 8|0);
  $110 = +HEAPF32[$109>>2];
  $111 = (~~(($110)));
  HEAP32[382808>>2] = $111;
  $112 = HEAP8[382784>>0]|0;
  $113 = ($112<<24>>24)==(0);
  if ($113) {
   label = 59;
   break;
  } else {
   label = 82;
  }
 }
 switch (label|0) {
  case 3: {
   $ReallocAsyncCtx17 = (_emscripten_realloc_async_context(4)|0);
   __update();
   $IsAsync62 = ___async;
   if ($IsAsync62) {
    HEAP32[$ReallocAsyncCtx17>>2] = 94;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx17>>2] = 94;
   sp = STACKTOP;
   return;
   break;
  }
  case 10: {
   HEAP8[382784>>0] = 1;
   $9 = HEAP32[(389556)>>2]|0;
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==(1);
   if ($11) {
    $12 = (_get_score(1)|0);
    $13 = ($12|0)==(5);
    if ($13) {
     $14 = 389544;
     $15 = $14;
     $16 = HEAP32[$15>>2]|0;
     $17 = (($14) + 4)|0;
     $18 = $17;
     $19 = HEAP32[$18>>2]|0;
     $20 = 382800;
     $21 = $20;
     HEAP32[$21>>2] = $16;
     $22 = (($20) + 4)|0;
     $23 = $22;
     HEAP32[$23>>2] = $19;
     $24 = HEAP32[(651920)>>2]|0;
     $25 = HEAP32[8>>2]|0;
     $26 = HEAP32[(389572)>>2]|0;
     $27 = (+($26|0));
     $28 = ((($25)) + 12|0);
     $29 = +HEAPF32[$28>>2];
     $ReallocAsyncCtx2 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vidd[$24 & 255]($25,$27,$29);
     $IsAsync4 = ___async;
     if ($IsAsync4) {
      HEAP32[$ReallocAsyncCtx2>>2] = 95;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx2>>2] = 95;
     sp = STACKTOP;
     return;
    } else {
     HEAP8[382784>>0] = 1;
     $30 = 389544;
     $31 = $30;
     $32 = HEAP32[$31>>2]|0;
     $33 = (($30) + 4)|0;
     $34 = $33;
     $35 = HEAP32[$34>>2]|0;
     $36 = 382800;
     $37 = $36;
     HEAP32[$37>>2] = $32;
     $38 = (($36) + 4)|0;
     $39 = $38;
     HEAP32[$39>>2] = $35;
     $40 = HEAP32[(651952)>>2]|0;
     $41 = HEAP32[35168>>2]|0;
     $ReallocAsyncCtx4 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vi[$40 & 255]($41);
     $IsAsync11 = ___async;
     if ($IsAsync11) {
      HEAP32[$ReallocAsyncCtx4>>2] = 97;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx4>>2] = 97;
     sp = STACKTOP;
     return;
    }
   } else {
    $42 = 389544;
    $43 = $42;
    $44 = HEAP32[$43>>2]|0;
    $45 = (($42) + 4)|0;
    $46 = $45;
    $47 = HEAP32[$46>>2]|0;
    $48 = 382800;
    $49 = $48;
    HEAP32[$49>>2] = $44;
    $50 = (($48) + 4)|0;
    $51 = $50;
    HEAP32[$51>>2] = $47;
    $52 = HEAP32[8>>2]|0;
    $53 = ((($52)) + 8|0);
    $54 = +HEAPF32[$53>>2];
    $55 = HEAP32[(389572)>>2]|0;
    $56 = (($55|0) / 2)&-1;
    $57 = (+($56|0));
    $58 = $54 > $57;
    $59 = HEAP32[(651920)>>2]|0;
    $60 = ((($52)) + 12|0);
    $61 = +HEAPF32[$60>>2];
    if ($58) {
     $62 = (+($55|0));
     $ReallocAsyncCtx6 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vidd[$59 & 255]($52,$62,$61);
     $IsAsync18 = ___async;
     if ($IsAsync18) {
      HEAP32[$ReallocAsyncCtx6>>2] = 99;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx6>>2] = 99;
     sp = STACKTOP;
     return;
    } else {
     $ReallocAsyncCtx7 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vidd[$59 & 255]($52,0.0,$61);
     $IsAsync22 = ___async;
     if ($IsAsync22) {
      HEAP32[$ReallocAsyncCtx7>>2] = 100;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx7>>2] = 100;
     sp = STACKTOP;
     return;
    }
   }
   break;
  }
  case 26: {
   $64 = HEAP32[(651952)>>2]|0;
   $65 = HEAP32[35128>>2]|0;
   $ReallocAsyncCtx9 = (_emscripten_realloc_async_context(4)|0);
   FUNCTION_TABLE_vi[$64 & 255]($65);
   $IsAsync30 = ___async;
   if ($IsAsync30) {
    HEAP32[$ReallocAsyncCtx9>>2] = 102;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx9>>2] = 102;
   sp = STACKTOP;
   return;
   break;
  }
  case 30: {
   $70 = HEAP32[(389556)>>2]|0;
   $71 = HEAP32[$70>>2]|0;
   $72 = ($71|0)==(1);
   if ($72) {
    $73 = HEAP32[56>>2]|0;
    $74 = HEAP32[(389576)>>2]|0;
    $75 = (($74|0) / 40)&-1;
    $ReallocAsyncCtx26 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($73,1106,$66,$75);
    $IsAsync97 = ___async;
    if ($IsAsync97) {
     HEAP32[$ReallocAsyncCtx26>>2] = 104;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx26>>2] = 104;
    sp = STACKTOP;
    return;
   } else {
    $76 = HEAP32[48>>2]|0;
    $77 = HEAP32[(389576)>>2]|0;
    $78 = (($77|0) / 40)&-1;
    $ReallocAsyncCtx25 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($76,1106,$66,$78);
    $IsAsync93 = ___async;
    if ($IsAsync93) {
     HEAP32[$ReallocAsyncCtx25>>2] = 105;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx25>>2] = 105;
    sp = STACKTOP;
    return;
   }
   break;
  }
  case 38: {
   $81 = HEAP32[(389556)>>2]|0;
   $82 = HEAP32[$81>>2]|0;
   $83 = ($82|0)==(1);
   if ($83) {
    $84 = HEAP32[56>>2]|0;
    $85 = HEAP32[(389576)>>2]|0;
    $86 = (($85|0) / 40)&-1;
    $ReallocAsyncCtx24 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($84,1105,$79,$86);
    $IsAsync89 = ___async;
    if ($IsAsync89) {
     HEAP32[$ReallocAsyncCtx24>>2] = 106;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx24>>2] = 106;
    sp = STACKTOP;
    return;
   } else {
    $87 = HEAP32[48>>2]|0;
    $88 = HEAP32[(389576)>>2]|0;
    $89 = (($88|0) / 40)&-1;
    $ReallocAsyncCtx23 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($87,1105,$79,$89);
    $IsAsync85 = ___async;
    if ($IsAsync85) {
     HEAP32[$ReallocAsyncCtx23>>2] = 107;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx23>>2] = 107;
    sp = STACKTOP;
    return;
   }
   break;
  }
  case 47: {
   $97 = HEAP32[56>>2]|0;
   $98 = HEAP32[(389576)>>2]|0;
   $99 = (($98|0) / 40)&-1;
   $ReallocAsyncCtx22 = (_emscripten_realloc_async_context(4)|0);
   _move_paddle($97,1106,$93,$99);
   $IsAsync81 = ___async;
   if ($IsAsync81) {
    HEAP32[$ReallocAsyncCtx22>>2] = 108;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx22>>2] = 108;
   sp = STACKTOP;
   return;
   break;
  }
  case 51: {
   $102 = HEAP32[56>>2]|0;
   $103 = HEAP32[(389576)>>2]|0;
   $104 = (($103|0) / 40)&-1;
   $ReallocAsyncCtx21 = (_emscripten_realloc_async_context(4)|0);
   _move_paddle($102,1105,$100,$104);
   $IsAsync77 = ___async;
   if ($IsAsync77) {
    HEAP32[$ReallocAsyncCtx21>>2] = 109;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx21>>2] = 109;
   sp = STACKTOP;
   return;
   break;
  }
  case 55: {
   $ReallocAsyncCtx20 = (_emscripten_realloc_async_context(4)|0);
   _paddle_ai(2);
   $IsAsync73 = ___async;
   if ($IsAsync73) {
    HEAP32[$ReallocAsyncCtx20>>2] = 110;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx20>>2] = 110;
   sp = STACKTOP;
   return;
   break;
  }
  case 59: {
   $114 = HEAP8[104>>0]|0;
   $115 = ($114<<24>>24)==(0);
   if ($115) {
    $ReallocAsyncCtx39 = (_emscripten_realloc_async_context(4)|0);
    $116 = (_collision_ball()|0);
    $IsAsync146 = ___async;
    if ($IsAsync146) {
     HEAP32[$ReallocAsyncCtx39>>2] = 111;
     sp = STACKTOP;
     return;
    }
    $117 = ___async_retval;
    $$expand_i1_val = $116&1;
    HEAP8[$117>>0] = $$expand_i1_val;
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx39>>2] = 111;
    sp = STACKTOP;
    return;
   } else {
    $ReallocAsyncCtx38 = (_emscripten_realloc_async_context(4)|0);
    _update_ball();
    $IsAsync142 = ___async;
    if ($IsAsync142) {
     HEAP32[$ReallocAsyncCtx38>>2] = 112;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx38>>2] = 112;
    sp = STACKTOP;
    return;
   }
   break;
  }
  case 87: {
   $ReallocAsyncCtx32 = (_emscripten_realloc_async_context(4)|0);
   _end_danger();
   $IsAsync120 = ___async;
   if ($IsAsync120) {
    HEAP32[$ReallocAsyncCtx32>>2] = 124;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx32>>2] = 124;
   sp = STACKTOP;
   return;
   break;
  }
  case 93: {
   $203 = HEAP32[(651924)>>2]|0;
   $204 = $198 * 1.2;
   $205 = $204;
   HEAPF32[$196>>2] = $205;
   $206 = ((($186)) + 36|0);
   $207 = +HEAPF32[$206>>2];
   $208 = $207;
   $209 = $208 * 1.2;
   $210 = $209;
   HEAPF32[$206>>2] = $210;
   $ReallocAsyncCtx15 = (_emscripten_realloc_async_context(8)|0);
   FUNCTION_TABLE_vidd[$203 & 255]($186,$205,$210);
   $IsAsync54 = ___async;
   if ($IsAsync54) {
    HEAP32[$ReallocAsyncCtx15>>2] = 125;
    $211 = ((($ReallocAsyncCtx15)) + 4|0);
    HEAP32[$211>>2] = $pad$0;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx15>>2] = 125;
   $211 = ((($ReallocAsyncCtx15)) + 4|0);
   HEAP32[$211>>2] = $pad$0;
   sp = STACKTOP;
   return;
   break;
  }
  case 98: {
   $219 = HEAP32[(651924)>>2]|0;
   $220 = $214 * 1.2;
   $221 = $220;
   HEAPF32[$212>>2] = $221;
   $222 = ((($pad$0)) + 36|0);
   $223 = +HEAPF32[$222>>2];
   $224 = $223;
   $225 = $224 * 1.1000000000000001;
   $226 = $225;
   HEAPF32[$222>>2] = $226;
   $ReallocAsyncCtx16 = (_emscripten_realloc_async_context(8)|0);
   FUNCTION_TABLE_vidd[$219 & 255]($pad$0,$221,$226);
   $IsAsync58 = ___async;
   if ($IsAsync58) {
    HEAP32[$ReallocAsyncCtx16>>2] = 126;
    $227 = ((($ReallocAsyncCtx16)) + 4|0);
    HEAP32[$227>>2] = $pad$0;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx16>>2] = 126;
   $227 = ((($ReallocAsyncCtx16)) + 4|0);
   HEAP32[$227>>2] = $pad$0;
   sp = STACKTOP;
   return;
   break;
  }
  case 115: {
   return;
   break;
  }
 }
}
function _pong__async_cb133($0) {
 $0 = $0|0;
 var $$expand_i1_val = 0, $$not7 = 0, $$pr = 0, $$pr32 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0.0, $17 = 0, $170 = 0, $171 = 0, $172 = 0.0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0.0, $177 = 0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0, $185 = 0.0;
 var $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0, $19 = 0, $190 = 0, $191 = 0.0, $192 = 0.0, $193 = 0, $194 = 0.0, $195 = 0.0, $196 = 0, $197 = 0, $198 = 0.0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0, $201 = 0.0, $202 = 0.0;
 var $203 = 0.0, $204 = 0.0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $AsyncRetVal = 0, $IsAsync105 = 0, $IsAsync11 = 0, $IsAsync120 = 0, $IsAsync142 = 0, $IsAsync146 = 0, $IsAsync18 = 0;
 var $IsAsync22 = 0, $IsAsync30 = 0, $IsAsync4 = 0, $IsAsync50 = 0, $IsAsync54 = 0, $IsAsync58 = 0, $IsAsync62 = 0, $IsAsync73 = 0, $IsAsync77 = 0, $IsAsync81 = 0, $IsAsync85 = 0, $IsAsync89 = 0, $IsAsync93 = 0, $IsAsync97 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx16 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx20 = 0;
 var $ReallocAsyncCtx21 = 0, $ReallocAsyncCtx22 = 0, $ReallocAsyncCtx23 = 0, $ReallocAsyncCtx24 = 0, $ReallocAsyncCtx25 = 0, $ReallocAsyncCtx26 = 0, $ReallocAsyncCtx28 = 0, $ReallocAsyncCtx32 = 0, $ReallocAsyncCtx38 = 0, $ReallocAsyncCtx39 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx9 = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond30 = 0, $or$cond42 = 0;
 var $or$cond44 = 0, $or$cond9 = 0, $pad$0 = 0, $paddle2$paddle1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ___async_retval;
 $AsyncRetVal = HEAP32[$1>>2]|0;
 $118 = (($AsyncRetVal>>>0) % 5)&-1;
 $119 = ($118>>>0)<(2);
 if ($119) {
  $ReallocAsyncCtx28 = (_emscripten_realloc_async_context(4)|0);
  _show_item();
  $IsAsync105 = ___async;
  if ($IsAsync105) {
   HEAP32[$ReallocAsyncCtx28>>2] = 121;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx28>>2] = 121;
  sp = STACKTOP;
  return;
 }
 $120 = HEAP8[382792>>0]|0;
 $121 = ($120<<24>>24)==(0);
 if ($121) {
  $122 = HEAP32[88>>2]|0;
  $123 = ((($122)) + 44|0);
  $124 = HEAP8[$123>>0]|0;
  $125 = HEAP8[35112>>0]|0;
  $126 = $125 | $124;
  $127 = ($126<<24>>24)==(0);
  if ($127) {
   $128 = HEAP32[(651832)>>2]|0;
   $ReallocAsyncCtx14 = (_emscripten_realloc_async_context(4)|0);
   $129 = (FUNCTION_TABLE_i[$128 & 255]()|0);
   $IsAsync50 = ___async;
   if ($IsAsync50) {
    HEAP32[$ReallocAsyncCtx14>>2] = 122;
    sp = STACKTOP;
    return;
   }
   $130 = ___async_retval;
   HEAP32[$130>>2] = $129;
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx14>>2] = 122;
   sp = STACKTOP;
   return;
  } else {
   $131 = $125;
  }
 } else {
  label = 75;
 }
 L16: while(1) {
  if ((label|0) == 75) {
   label = 0;
   $$pr32 = HEAP8[35112>>0]|0;
   $131 = $$pr32;
  }
  $132 = ($131<<24>>24)==(0);
  if (!($132)) {
   $133 = 389544;
   $134 = $133;
   $135 = HEAP32[$134>>2]|0;
   $136 = (($133) + 4)|0;
   $137 = $136;
   $138 = HEAP32[$137>>2]|0;
   $139 = 35120;
   $140 = $139;
   $141 = HEAP32[$140>>2]|0;
   $142 = (($139) + 4)|0;
   $143 = $142;
   $144 = HEAP32[$143>>2]|0;
   $145 = (_i64Subtract(($135|0),($138|0),($141|0),($144|0))|0);
   $146 = tempRet0;
   $147 = ($146>>>0)>(0);
   $148 = ($145>>>0)>(10000000);
   $149 = ($146|0)==(0);
   $150 = $149 & $148;
   $151 = $147 | $150;
   if ($151) {
    label = 80;
    break;
   }
   $152 = HEAP32[(651780)>>2]|0;
   if ((($152|0) == 5) | (($152|0) == 15)) {
    $153 = HEAP32[40>>2]|0;
    $154 = ((($153)) + 4|0);
    $155 = HEAP32[$154>>2]|0;
    $156 = ($155|0)==(4);
    $157 = ($146>>>0)>(0);
    $158 = ($145>>>0)>(5000000);
    $159 = ($146|0)==(0);
    $160 = $159 & $158;
    $161 = $157 | $160;
    $or$cond30 = $161 & $156;
    if ($or$cond30) {
     label = 80;
     break;
    }
   }
  }
  $162 = HEAP8[104>>0]|0;
  $163 = ($162<<24>>24)==(0);
  do {
   if (!($163)) {
    $164 = HEAP32[96>>2]|0;
    $165 = ((($164)) + 44|0);
    $166 = HEAP8[$165>>0]|0;
    $167 = ($166<<24>>24)==(0);
    if (!($167)) {
     $168 = ((($164)) + 8|0);
     $169 = +HEAPF32[$168>>2];
     $170 = HEAP32[(389572)>>2]|0;
     $171 = (($170|0) / 2)&-1;
     $172 = (+($171|0));
     $173 = $169 > $172;
     $paddle2$paddle1 = $173 ? 48 : 56;
     $pad$0 = HEAP32[$paddle2$paddle1>>2]|0;
     $174 = ((($164)) + 40|0);
     $175 = +HEAPF32[$174>>2];
     $176 = $175;
     $177 = (($170|0) / 40)&-1;
     $178 = (+($177|0));
     $179 = $178 * 10.0;
     $180 = $176 < $179;
     if ($180) {
      label = 86;
      break L16;
     }
     HEAP8[$165>>0] = 0;
     $190 = ((($pad$0)) + 40|0);
     $191 = +HEAPF32[$190>>2];
     $192 = $191;
     $193 = (($170|0) / 40)&-1;
     $194 = (+($193|0));
     $195 = $194 * 20.0;
     $196 = $192 < $195;
     if ($196) {
      label = 91;
      break L16;
     }
     $206 = ((($pad$0)) + 44|0);
     HEAP8[$206>>0] = 0;
     $207 = ((($pad$0)) + 4|0);
     $208 = HEAP32[$207>>2]|0;
     if ((($208|0) == 10)) {
      HEAP32[$207>>2] = 11;
      break;
     } else if ((($208|0) == 0)) {
      HEAP32[$207>>2] = 1;
      break;
     } else {
      break;
     }
    }
   }
  } while(0);
  $209 = HEAP8[382784>>0]|0;
  $210 = ($209<<24>>24)==(0);
  if ($210) {
   $211 = 389544;
   $212 = $211;
   $213 = HEAP32[$212>>2]|0;
   $214 = (($211) + 4)|0;
   $215 = $214;
   $216 = HEAP32[$215>>2]|0;
   $252 = $213;$253 = $216;
  } else {
   $217 = HEAP8[104>>0]|0;
   $218 = ($217<<24>>24)==(0);
   $219 = 389544;
   $220 = $219;
   $221 = HEAP32[$220>>2]|0;
   $222 = (($219) + 4)|0;
   $223 = $222;
   $224 = HEAP32[$223>>2]|0;
   $225 = 382800;
   $226 = $225;
   $227 = HEAP32[$226>>2]|0;
   $228 = (($225) + 4)|0;
   $229 = $228;
   $230 = HEAP32[$229>>2]|0;
   $231 = (_i64Subtract(($221|0),($224|0),($227|0),($230|0))|0);
   $232 = tempRet0;
   $233 = ($232>>>0)>(0);
   $234 = ($231>>>0)>(3000000);
   $235 = ($232|0)==(0);
   $236 = $235 & $234;
   $237 = $233 | $236;
   $or$cond42 = $218 & $237;
   $238 = (_i64Subtract(($221|0),($224|0),($227|0),($230|0))|0);
   $239 = tempRet0;
   $240 = ($239>>>0)>(0);
   $241 = ($238>>>0)>(6000000);
   $242 = ($239|0)==(0);
   $243 = $242 & $241;
   $244 = $240 | $243;
   $or$cond44 = $or$cond42 | $244;
   if ($or$cond44) {
    $245 = HEAP32[35096>>2]|0;
    $246 = ($245|0)==(6);
    if ($246) {
     $247 = HEAP32[(389556)>>2]|0;
     $248 = HEAP32[$247>>2]|0;
     $249 = ($248|0)==(1);
     if ($249) {
      $250 = ((($247)) + 4|0);
      HEAP8[$250>>0] = 1;
     } else {
      label = 104;
     }
    } else {
     label = 104;
    }
    if ((label|0) == 104) {
     label = 0;
     HEAP32[(651780)>>2] = 0;
    }
    HEAP8[128>>0] = 0;
    $252 = $221;$253 = $224;
   } else {
    $252 = $221;$253 = $224;
   }
  }
  $251 = HEAP32[216>>2]|0;
  $2 = (($251) + -40000)|0;
  HEAP32[216>>2] = $2;
  $254 = (_i64Add(($252|0),($253|0),40000,0)|0);
  $255 = tempRet0;
  $256 = 389544;
  $257 = $256;
  HEAP32[$257>>2] = $254;
  $258 = (($256) + 4)|0;
  $259 = $258;
  HEAP32[$259>>2] = $255;
  $3 = ($2|0)>(39999);
  if ($3) {
   label = 3;
   break;
  }
  __render();
  $260 = HEAP8[128>>0]|0;
  $$not7 = ($260<<24>>24)==(0);
  $261 = 389544;
  $262 = $261;
  $263 = HEAP32[$262>>2]|0;
  $264 = (($261) + 4)|0;
  $265 = $264;
  $266 = HEAP32[$265>>2]|0;
  $267 = ($263|0)==(0);
  $268 = ($266|0)==(0);
  $269 = $267 & $268;
  $or$cond9 = $$not7 & $269;
  if (!($or$cond9)) {
   label = 108;
   break;
  }
  $4 = HEAP32[(389696)>>2]|0;
  $5 = ($4|0)==(0);
  if (!($5)) {
   HEAP8[128>>0] = 0;
  }
  $6 = (_score_ball()|0);
  if ((($6|0) == 5)) {
   $7 = HEAP8[382784>>0]|0;
   $8 = ($7<<24>>24)==(0);
   if ($8) {
    label = 10;
    break;
   }
  } else if (!((($6|0) == 0))) {
   $$pr = HEAP8[382784>>0]|0;
   $63 = ($$pr<<24>>24)==(0);
   if ($63) {
    label = 26;
    break;
   }
  }
  $66 = HEAP32[(394012)>>2]|0;
  $67 = ($66|0)>(0);
  $68 = HEAP8[382784>>0]|0;
  $69 = ($68<<24>>24)==(0);
  $or$cond11 = $67 & $69;
  if ($or$cond11) {
   label = 30;
   break;
  }
  $79 = HEAP32[(394008)>>2]|0;
  $80 = ($79|0)>(0);
  $or$cond13 = $69 & $80;
  if ($or$cond13) {
   label = 38;
   break;
  }
  $90 = HEAP32[(389556)>>2]|0;
  $91 = HEAP32[$90>>2]|0;
  $92 = ($91|0)==(2);
  if ($92) {
   $93 = HEAP32[(390064)>>2]|0;
   $94 = ($93|0)>(0);
   $95 = HEAP8[382784>>0]|0;
   $96 = ($95<<24>>24)==(0);
   $or$cond15 = $94 & $96;
   if ($or$cond15) {
    label = 47;
    break;
   }
   $100 = HEAP32[(390048)>>2]|0;
   $101 = ($100|0)>(0);
   $or$cond17 = $96 & $101;
   if ($or$cond17) {
    label = 51;
    break;
   }
  }
  $105 = HEAP32[(389556)>>2]|0;
  $106 = HEAP32[$105>>2]|0;
  $107 = ($106|0)<(2);
  if ($107) {
   label = 55;
   break;
  }
  $108 = HEAP32[8>>2]|0;
  $109 = ((($108)) + 8|0);
  $110 = +HEAPF32[$109>>2];
  $111 = (~~(($110)));
  HEAP32[382808>>2] = $111;
  $112 = HEAP8[382784>>0]|0;
  $113 = ($112<<24>>24)==(0);
  if ($113) {
   label = 59;
   break;
  } else {
   label = 75;
  }
 }
 switch (label|0) {
  case 3: {
   $ReallocAsyncCtx17 = (_emscripten_realloc_async_context(4)|0);
   __update();
   $IsAsync62 = ___async;
   if ($IsAsync62) {
    HEAP32[$ReallocAsyncCtx17>>2] = 94;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx17>>2] = 94;
   sp = STACKTOP;
   return;
   break;
  }
  case 10: {
   HEAP8[382784>>0] = 1;
   $9 = HEAP32[(389556)>>2]|0;
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==(1);
   if ($11) {
    $12 = (_get_score(1)|0);
    $13 = ($12|0)==(5);
    if ($13) {
     $14 = 389544;
     $15 = $14;
     $16 = HEAP32[$15>>2]|0;
     $17 = (($14) + 4)|0;
     $18 = $17;
     $19 = HEAP32[$18>>2]|0;
     $20 = 382800;
     $21 = $20;
     HEAP32[$21>>2] = $16;
     $22 = (($20) + 4)|0;
     $23 = $22;
     HEAP32[$23>>2] = $19;
     $24 = HEAP32[(651920)>>2]|0;
     $25 = HEAP32[8>>2]|0;
     $26 = HEAP32[(389572)>>2]|0;
     $27 = (+($26|0));
     $28 = ((($25)) + 12|0);
     $29 = +HEAPF32[$28>>2];
     $ReallocAsyncCtx2 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vidd[$24 & 255]($25,$27,$29);
     $IsAsync4 = ___async;
     if ($IsAsync4) {
      HEAP32[$ReallocAsyncCtx2>>2] = 95;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx2>>2] = 95;
     sp = STACKTOP;
     return;
    } else {
     HEAP8[382784>>0] = 1;
     $30 = 389544;
     $31 = $30;
     $32 = HEAP32[$31>>2]|0;
     $33 = (($30) + 4)|0;
     $34 = $33;
     $35 = HEAP32[$34>>2]|0;
     $36 = 382800;
     $37 = $36;
     HEAP32[$37>>2] = $32;
     $38 = (($36) + 4)|0;
     $39 = $38;
     HEAP32[$39>>2] = $35;
     $40 = HEAP32[(651952)>>2]|0;
     $41 = HEAP32[35168>>2]|0;
     $ReallocAsyncCtx4 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vi[$40 & 255]($41);
     $IsAsync11 = ___async;
     if ($IsAsync11) {
      HEAP32[$ReallocAsyncCtx4>>2] = 97;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx4>>2] = 97;
     sp = STACKTOP;
     return;
    }
   } else {
    $42 = 389544;
    $43 = $42;
    $44 = HEAP32[$43>>2]|0;
    $45 = (($42) + 4)|0;
    $46 = $45;
    $47 = HEAP32[$46>>2]|0;
    $48 = 382800;
    $49 = $48;
    HEAP32[$49>>2] = $44;
    $50 = (($48) + 4)|0;
    $51 = $50;
    HEAP32[$51>>2] = $47;
    $52 = HEAP32[8>>2]|0;
    $53 = ((($52)) + 8|0);
    $54 = +HEAPF32[$53>>2];
    $55 = HEAP32[(389572)>>2]|0;
    $56 = (($55|0) / 2)&-1;
    $57 = (+($56|0));
    $58 = $54 > $57;
    $59 = HEAP32[(651920)>>2]|0;
    $60 = ((($52)) + 12|0);
    $61 = +HEAPF32[$60>>2];
    if ($58) {
     $62 = (+($55|0));
     $ReallocAsyncCtx6 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vidd[$59 & 255]($52,$62,$61);
     $IsAsync18 = ___async;
     if ($IsAsync18) {
      HEAP32[$ReallocAsyncCtx6>>2] = 99;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx6>>2] = 99;
     sp = STACKTOP;
     return;
    } else {
     $ReallocAsyncCtx7 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vidd[$59 & 255]($52,0.0,$61);
     $IsAsync22 = ___async;
     if ($IsAsync22) {
      HEAP32[$ReallocAsyncCtx7>>2] = 100;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx7>>2] = 100;
     sp = STACKTOP;
     return;
    }
   }
   break;
  }
  case 26: {
   $64 = HEAP32[(651952)>>2]|0;
   $65 = HEAP32[35128>>2]|0;
   $ReallocAsyncCtx9 = (_emscripten_realloc_async_context(4)|0);
   FUNCTION_TABLE_vi[$64 & 255]($65);
   $IsAsync30 = ___async;
   if ($IsAsync30) {
    HEAP32[$ReallocAsyncCtx9>>2] = 102;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx9>>2] = 102;
   sp = STACKTOP;
   return;
   break;
  }
  case 30: {
   $70 = HEAP32[(389556)>>2]|0;
   $71 = HEAP32[$70>>2]|0;
   $72 = ($71|0)==(1);
   if ($72) {
    $73 = HEAP32[56>>2]|0;
    $74 = HEAP32[(389576)>>2]|0;
    $75 = (($74|0) / 40)&-1;
    $ReallocAsyncCtx26 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($73,1106,$66,$75);
    $IsAsync97 = ___async;
    if ($IsAsync97) {
     HEAP32[$ReallocAsyncCtx26>>2] = 104;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx26>>2] = 104;
    sp = STACKTOP;
    return;
   } else {
    $76 = HEAP32[48>>2]|0;
    $77 = HEAP32[(389576)>>2]|0;
    $78 = (($77|0) / 40)&-1;
    $ReallocAsyncCtx25 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($76,1106,$66,$78);
    $IsAsync93 = ___async;
    if ($IsAsync93) {
     HEAP32[$ReallocAsyncCtx25>>2] = 105;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx25>>2] = 105;
    sp = STACKTOP;
    return;
   }
   break;
  }
  case 38: {
   $81 = HEAP32[(389556)>>2]|0;
   $82 = HEAP32[$81>>2]|0;
   $83 = ($82|0)==(1);
   if ($83) {
    $84 = HEAP32[56>>2]|0;
    $85 = HEAP32[(389576)>>2]|0;
    $86 = (($85|0) / 40)&-1;
    $ReallocAsyncCtx24 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($84,1105,$79,$86);
    $IsAsync89 = ___async;
    if ($IsAsync89) {
     HEAP32[$ReallocAsyncCtx24>>2] = 106;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx24>>2] = 106;
    sp = STACKTOP;
    return;
   } else {
    $87 = HEAP32[48>>2]|0;
    $88 = HEAP32[(389576)>>2]|0;
    $89 = (($88|0) / 40)&-1;
    $ReallocAsyncCtx23 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($87,1105,$79,$89);
    $IsAsync85 = ___async;
    if ($IsAsync85) {
     HEAP32[$ReallocAsyncCtx23>>2] = 107;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx23>>2] = 107;
    sp = STACKTOP;
    return;
   }
   break;
  }
  case 47: {
   $97 = HEAP32[56>>2]|0;
   $98 = HEAP32[(389576)>>2]|0;
   $99 = (($98|0) / 40)&-1;
   $ReallocAsyncCtx22 = (_emscripten_realloc_async_context(4)|0);
   _move_paddle($97,1106,$93,$99);
   $IsAsync81 = ___async;
   if ($IsAsync81) {
    HEAP32[$ReallocAsyncCtx22>>2] = 108;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx22>>2] = 108;
   sp = STACKTOP;
   return;
   break;
  }
  case 51: {
   $102 = HEAP32[56>>2]|0;
   $103 = HEAP32[(389576)>>2]|0;
   $104 = (($103|0) / 40)&-1;
   $ReallocAsyncCtx21 = (_emscripten_realloc_async_context(4)|0);
   _move_paddle($102,1105,$100,$104);
   $IsAsync77 = ___async;
   if ($IsAsync77) {
    HEAP32[$ReallocAsyncCtx21>>2] = 109;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx21>>2] = 109;
   sp = STACKTOP;
   return;
   break;
  }
  case 55: {
   $ReallocAsyncCtx20 = (_emscripten_realloc_async_context(4)|0);
   _paddle_ai(2);
   $IsAsync73 = ___async;
   if ($IsAsync73) {
    HEAP32[$ReallocAsyncCtx20>>2] = 110;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx20>>2] = 110;
   sp = STACKTOP;
   return;
   break;
  }
  case 59: {
   $114 = HEAP8[104>>0]|0;
   $115 = ($114<<24>>24)==(0);
   if ($115) {
    $ReallocAsyncCtx39 = (_emscripten_realloc_async_context(4)|0);
    $116 = (_collision_ball()|0);
    $IsAsync146 = ___async;
    if ($IsAsync146) {
     HEAP32[$ReallocAsyncCtx39>>2] = 111;
     sp = STACKTOP;
     return;
    }
    $117 = ___async_retval;
    $$expand_i1_val = $116&1;
    HEAP8[$117>>0] = $$expand_i1_val;
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx39>>2] = 111;
    sp = STACKTOP;
    return;
   } else {
    $ReallocAsyncCtx38 = (_emscripten_realloc_async_context(4)|0);
    _update_ball();
    $IsAsync142 = ___async;
    if ($IsAsync142) {
     HEAP32[$ReallocAsyncCtx38>>2] = 112;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx38>>2] = 112;
    sp = STACKTOP;
    return;
   }
   break;
  }
  case 80: {
   $ReallocAsyncCtx32 = (_emscripten_realloc_async_context(4)|0);
   _end_danger();
   $IsAsync120 = ___async;
   if ($IsAsync120) {
    HEAP32[$ReallocAsyncCtx32>>2] = 124;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx32>>2] = 124;
   sp = STACKTOP;
   return;
   break;
  }
  case 86: {
   $181 = HEAP32[(651924)>>2]|0;
   $182 = $176 * 1.2;
   $183 = $182;
   HEAPF32[$174>>2] = $183;
   $184 = ((($164)) + 36|0);
   $185 = +HEAPF32[$184>>2];
   $186 = $185;
   $187 = $186 * 1.2;
   $188 = $187;
   HEAPF32[$184>>2] = $188;
   $ReallocAsyncCtx15 = (_emscripten_realloc_async_context(8)|0);
   FUNCTION_TABLE_vidd[$181 & 255]($164,$183,$188);
   $IsAsync54 = ___async;
   if ($IsAsync54) {
    HEAP32[$ReallocAsyncCtx15>>2] = 125;
    $189 = ((($ReallocAsyncCtx15)) + 4|0);
    HEAP32[$189>>2] = $pad$0;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx15>>2] = 125;
   $189 = ((($ReallocAsyncCtx15)) + 4|0);
   HEAP32[$189>>2] = $pad$0;
   sp = STACKTOP;
   return;
   break;
  }
  case 91: {
   $197 = HEAP32[(651924)>>2]|0;
   $198 = $192 * 1.2;
   $199 = $198;
   HEAPF32[$190>>2] = $199;
   $200 = ((($pad$0)) + 36|0);
   $201 = +HEAPF32[$200>>2];
   $202 = $201;
   $203 = $202 * 1.1000000000000001;
   $204 = $203;
   HEAPF32[$200>>2] = $204;
   $ReallocAsyncCtx16 = (_emscripten_realloc_async_context(8)|0);
   FUNCTION_TABLE_vidd[$197 & 255]($pad$0,$199,$204);
   $IsAsync58 = ___async;
   if ($IsAsync58) {
    HEAP32[$ReallocAsyncCtx16>>2] = 126;
    $205 = ((($ReallocAsyncCtx16)) + 4|0);
    HEAP32[$205>>2] = $pad$0;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx16>>2] = 126;
   $205 = ((($ReallocAsyncCtx16)) + 4|0);
   HEAP32[$205>>2] = $pad$0;
   sp = STACKTOP;
   return;
   break;
  }
  case 108: {
   return;
   break;
  }
 }
}
function _pong__async_cb134($0) {
 $0 = $0|0;
 var $$expand_i1_val = 0, $$not7 = 0, $$pr = 0, $$pr32 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0.0, $158 = 0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0, $162 = 0, $163 = 0.0, $164 = 0.0, $165 = 0, $166 = 0.0, $167 = 0.0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0.0, $171 = 0.0, $172 = 0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0, $185 = 0;
 var $186 = 0.0, $187 = 0.0, $188 = 0, $189 = 0.0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $26 = 0, $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0;
 var $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $AsyncRetVal = 0, $IsAsync11 = 0, $IsAsync120 = 0, $IsAsync124 = 0, $IsAsync142 = 0, $IsAsync146 = 0, $IsAsync18 = 0, $IsAsync22 = 0, $IsAsync30 = 0, $IsAsync4 = 0, $IsAsync54 = 0, $IsAsync58 = 0, $IsAsync62 = 0, $IsAsync73 = 0, $IsAsync77 = 0, $IsAsync81 = 0, $IsAsync85 = 0, $IsAsync89 = 0, $IsAsync93 = 0;
 var $IsAsync97 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx16 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx20 = 0, $ReallocAsyncCtx21 = 0, $ReallocAsyncCtx22 = 0, $ReallocAsyncCtx23 = 0, $ReallocAsyncCtx24 = 0, $ReallocAsyncCtx25 = 0, $ReallocAsyncCtx26 = 0, $ReallocAsyncCtx32 = 0, $ReallocAsyncCtx33 = 0, $ReallocAsyncCtx38 = 0, $ReallocAsyncCtx39 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx9 = 0;
 var $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond30 = 0, $or$cond42 = 0, $or$cond44 = 0, $or$cond9 = 0, $pad$0 = 0, $paddle2$paddle1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ___async_retval;
 $AsyncRetVal = HEAP32[$1>>2]|0;
 $118 = (($AsyncRetVal>>>0) % 5)&-1;
 $119 = ($118>>>0)<(2);
 if ($119) {
  $ReallocAsyncCtx33 = (_emscripten_realloc_async_context(4)|0);
  _show_danger();
  $IsAsync124 = ___async;
  if ($IsAsync124) {
   HEAP32[$ReallocAsyncCtx33>>2] = 123;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx33>>2] = 123;
  sp = STACKTOP;
  return;
 }
 L8: while(1) {
  $$pr32 = HEAP8[35112>>0]|0;
  $120 = ($$pr32<<24>>24)==(0);
  if (!($120)) {
   $121 = 389544;
   $122 = $121;
   $123 = HEAP32[$122>>2]|0;
   $124 = (($121) + 4)|0;
   $125 = $124;
   $126 = HEAP32[$125>>2]|0;
   $127 = 35120;
   $128 = $127;
   $129 = HEAP32[$128>>2]|0;
   $130 = (($127) + 4)|0;
   $131 = $130;
   $132 = HEAP32[$131>>2]|0;
   $133 = (_i64Subtract(($123|0),($126|0),($129|0),($132|0))|0);
   $134 = tempRet0;
   $135 = ($134>>>0)>(0);
   $136 = ($133>>>0)>(10000000);
   $137 = ($134|0)==(0);
   $138 = $137 & $136;
   $139 = $135 | $138;
   if ($139) {
    label = 75;
    break;
   }
   $140 = HEAP32[(651780)>>2]|0;
   if ((($140|0) == 5) | (($140|0) == 15)) {
    $141 = HEAP32[40>>2]|0;
    $142 = ((($141)) + 4|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = ($143|0)==(4);
    $145 = ($134>>>0)>(0);
    $146 = ($133>>>0)>(5000000);
    $147 = ($134|0)==(0);
    $148 = $147 & $146;
    $149 = $145 | $148;
    $or$cond30 = $149 & $144;
    if ($or$cond30) {
     label = 75;
     break;
    }
   }
  }
  $150 = HEAP8[104>>0]|0;
  $151 = ($150<<24>>24)==(0);
  do {
   if (!($151)) {
    $152 = HEAP32[96>>2]|0;
    $153 = ((($152)) + 44|0);
    $154 = HEAP8[$153>>0]|0;
    $155 = ($154<<24>>24)==(0);
    if (!($155)) {
     $156 = ((($152)) + 8|0);
     $157 = +HEAPF32[$156>>2];
     $158 = HEAP32[(389572)>>2]|0;
     $159 = (($158|0) / 2)&-1;
     $160 = (+($159|0));
     $161 = $157 > $160;
     $paddle2$paddle1 = $161 ? 48 : 56;
     $pad$0 = HEAP32[$paddle2$paddle1>>2]|0;
     $162 = ((($152)) + 40|0);
     $163 = +HEAPF32[$162>>2];
     $164 = $163;
     $165 = (($158|0) / 40)&-1;
     $166 = (+($165|0));
     $167 = $166 * 10.0;
     $168 = $164 < $167;
     if ($168) {
      label = 81;
      break L8;
     }
     HEAP8[$153>>0] = 0;
     $178 = ((($pad$0)) + 40|0);
     $179 = +HEAPF32[$178>>2];
     $180 = $179;
     $181 = (($158|0) / 40)&-1;
     $182 = (+($181|0));
     $183 = $182 * 20.0;
     $184 = $180 < $183;
     if ($184) {
      label = 86;
      break L8;
     }
     $194 = ((($pad$0)) + 44|0);
     HEAP8[$194>>0] = 0;
     $195 = ((($pad$0)) + 4|0);
     $196 = HEAP32[$195>>2]|0;
     if ((($196|0) == 10)) {
      HEAP32[$195>>2] = 11;
      break;
     } else if ((($196|0) == 0)) {
      HEAP32[$195>>2] = 1;
      break;
     } else {
      break;
     }
    }
   }
  } while(0);
  $197 = HEAP8[382784>>0]|0;
  $198 = ($197<<24>>24)==(0);
  if ($198) {
   $199 = 389544;
   $200 = $199;
   $201 = HEAP32[$200>>2]|0;
   $202 = (($199) + 4)|0;
   $203 = $202;
   $204 = HEAP32[$203>>2]|0;
   $240 = $201;$241 = $204;
  } else {
   $205 = HEAP8[104>>0]|0;
   $206 = ($205<<24>>24)==(0);
   $207 = 389544;
   $208 = $207;
   $209 = HEAP32[$208>>2]|0;
   $210 = (($207) + 4)|0;
   $211 = $210;
   $212 = HEAP32[$211>>2]|0;
   $213 = 382800;
   $214 = $213;
   $215 = HEAP32[$214>>2]|0;
   $216 = (($213) + 4)|0;
   $217 = $216;
   $218 = HEAP32[$217>>2]|0;
   $219 = (_i64Subtract(($209|0),($212|0),($215|0),($218|0))|0);
   $220 = tempRet0;
   $221 = ($220>>>0)>(0);
   $222 = ($219>>>0)>(3000000);
   $223 = ($220|0)==(0);
   $224 = $223 & $222;
   $225 = $221 | $224;
   $or$cond42 = $206 & $225;
   $226 = (_i64Subtract(($209|0),($212|0),($215|0),($218|0))|0);
   $227 = tempRet0;
   $228 = ($227>>>0)>(0);
   $229 = ($226>>>0)>(6000000);
   $230 = ($227|0)==(0);
   $231 = $230 & $229;
   $232 = $228 | $231;
   $or$cond44 = $or$cond42 | $232;
   if ($or$cond44) {
    $233 = HEAP32[35096>>2]|0;
    $234 = ($233|0)==(6);
    if ($234) {
     $235 = HEAP32[(389556)>>2]|0;
     $236 = HEAP32[$235>>2]|0;
     $237 = ($236|0)==(1);
     if ($237) {
      $238 = ((($235)) + 4|0);
      HEAP8[$238>>0] = 1;
     } else {
      label = 99;
     }
    } else {
     label = 99;
    }
    if ((label|0) == 99) {
     label = 0;
     HEAP32[(651780)>>2] = 0;
    }
    HEAP8[128>>0] = 0;
    $240 = $209;$241 = $212;
   } else {
    $240 = $209;$241 = $212;
   }
  }
  $239 = HEAP32[216>>2]|0;
  $2 = (($239) + -40000)|0;
  HEAP32[216>>2] = $2;
  $242 = (_i64Add(($240|0),($241|0),40000,0)|0);
  $243 = tempRet0;
  $244 = 389544;
  $245 = $244;
  HEAP32[$245>>2] = $242;
  $246 = (($244) + 4)|0;
  $247 = $246;
  HEAP32[$247>>2] = $243;
  $3 = ($2|0)>(39999);
  if ($3) {
   label = 3;
   break;
  }
  __render();
  $248 = HEAP8[128>>0]|0;
  $$not7 = ($248<<24>>24)==(0);
  $249 = 389544;
  $250 = $249;
  $251 = HEAP32[$250>>2]|0;
  $252 = (($249) + 4)|0;
  $253 = $252;
  $254 = HEAP32[$253>>2]|0;
  $255 = ($251|0)==(0);
  $256 = ($254|0)==(0);
  $257 = $255 & $256;
  $or$cond9 = $$not7 & $257;
  if (!($or$cond9)) {
   label = 103;
   break;
  }
  $4 = HEAP32[(389696)>>2]|0;
  $5 = ($4|0)==(0);
  if (!($5)) {
   HEAP8[128>>0] = 0;
  }
  $6 = (_score_ball()|0);
  if ((($6|0) == 5)) {
   $7 = HEAP8[382784>>0]|0;
   $8 = ($7<<24>>24)==(0);
   if ($8) {
    label = 10;
    break;
   }
  } else if (!((($6|0) == 0))) {
   $$pr = HEAP8[382784>>0]|0;
   $63 = ($$pr<<24>>24)==(0);
   if ($63) {
    label = 26;
    break;
   }
  }
  $66 = HEAP32[(394012)>>2]|0;
  $67 = ($66|0)>(0);
  $68 = HEAP8[382784>>0]|0;
  $69 = ($68<<24>>24)==(0);
  $or$cond11 = $67 & $69;
  if ($or$cond11) {
   label = 30;
   break;
  }
  $79 = HEAP32[(394008)>>2]|0;
  $80 = ($79|0)>(0);
  $or$cond13 = $69 & $80;
  if ($or$cond13) {
   label = 38;
   break;
  }
  $90 = HEAP32[(389556)>>2]|0;
  $91 = HEAP32[$90>>2]|0;
  $92 = ($91|0)==(2);
  if ($92) {
   $93 = HEAP32[(390064)>>2]|0;
   $94 = ($93|0)>(0);
   $95 = HEAP8[382784>>0]|0;
   $96 = ($95<<24>>24)==(0);
   $or$cond15 = $94 & $96;
   if ($or$cond15) {
    label = 47;
    break;
   }
   $100 = HEAP32[(390048)>>2]|0;
   $101 = ($100|0)>(0);
   $or$cond17 = $96 & $101;
   if ($or$cond17) {
    label = 51;
    break;
   }
  }
  $105 = HEAP32[(389556)>>2]|0;
  $106 = HEAP32[$105>>2]|0;
  $107 = ($106|0)<(2);
  if ($107) {
   label = 55;
   break;
  }
  $108 = HEAP32[8>>2]|0;
  $109 = ((($108)) + 8|0);
  $110 = +HEAPF32[$109>>2];
  $111 = (~~(($110)));
  HEAP32[382808>>2] = $111;
  $112 = HEAP8[382784>>0]|0;
  $113 = ($112<<24>>24)==(0);
  if ($113) {
   label = 59;
   break;
  }
 }
 switch (label|0) {
  case 3: {
   $ReallocAsyncCtx17 = (_emscripten_realloc_async_context(4)|0);
   __update();
   $IsAsync62 = ___async;
   if ($IsAsync62) {
    HEAP32[$ReallocAsyncCtx17>>2] = 94;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx17>>2] = 94;
   sp = STACKTOP;
   return;
   break;
  }
  case 10: {
   HEAP8[382784>>0] = 1;
   $9 = HEAP32[(389556)>>2]|0;
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==(1);
   if ($11) {
    $12 = (_get_score(1)|0);
    $13 = ($12|0)==(5);
    if ($13) {
     $14 = 389544;
     $15 = $14;
     $16 = HEAP32[$15>>2]|0;
     $17 = (($14) + 4)|0;
     $18 = $17;
     $19 = HEAP32[$18>>2]|0;
     $20 = 382800;
     $21 = $20;
     HEAP32[$21>>2] = $16;
     $22 = (($20) + 4)|0;
     $23 = $22;
     HEAP32[$23>>2] = $19;
     $24 = HEAP32[(651920)>>2]|0;
     $25 = HEAP32[8>>2]|0;
     $26 = HEAP32[(389572)>>2]|0;
     $27 = (+($26|0));
     $28 = ((($25)) + 12|0);
     $29 = +HEAPF32[$28>>2];
     $ReallocAsyncCtx2 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vidd[$24 & 255]($25,$27,$29);
     $IsAsync4 = ___async;
     if ($IsAsync4) {
      HEAP32[$ReallocAsyncCtx2>>2] = 95;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx2>>2] = 95;
     sp = STACKTOP;
     return;
    } else {
     HEAP8[382784>>0] = 1;
     $30 = 389544;
     $31 = $30;
     $32 = HEAP32[$31>>2]|0;
     $33 = (($30) + 4)|0;
     $34 = $33;
     $35 = HEAP32[$34>>2]|0;
     $36 = 382800;
     $37 = $36;
     HEAP32[$37>>2] = $32;
     $38 = (($36) + 4)|0;
     $39 = $38;
     HEAP32[$39>>2] = $35;
     $40 = HEAP32[(651952)>>2]|0;
     $41 = HEAP32[35168>>2]|0;
     $ReallocAsyncCtx4 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vi[$40 & 255]($41);
     $IsAsync11 = ___async;
     if ($IsAsync11) {
      HEAP32[$ReallocAsyncCtx4>>2] = 97;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx4>>2] = 97;
     sp = STACKTOP;
     return;
    }
   } else {
    $42 = 389544;
    $43 = $42;
    $44 = HEAP32[$43>>2]|0;
    $45 = (($42) + 4)|0;
    $46 = $45;
    $47 = HEAP32[$46>>2]|0;
    $48 = 382800;
    $49 = $48;
    HEAP32[$49>>2] = $44;
    $50 = (($48) + 4)|0;
    $51 = $50;
    HEAP32[$51>>2] = $47;
    $52 = HEAP32[8>>2]|0;
    $53 = ((($52)) + 8|0);
    $54 = +HEAPF32[$53>>2];
    $55 = HEAP32[(389572)>>2]|0;
    $56 = (($55|0) / 2)&-1;
    $57 = (+($56|0));
    $58 = $54 > $57;
    $59 = HEAP32[(651920)>>2]|0;
    $60 = ((($52)) + 12|0);
    $61 = +HEAPF32[$60>>2];
    if ($58) {
     $62 = (+($55|0));
     $ReallocAsyncCtx6 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vidd[$59 & 255]($52,$62,$61);
     $IsAsync18 = ___async;
     if ($IsAsync18) {
      HEAP32[$ReallocAsyncCtx6>>2] = 99;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx6>>2] = 99;
     sp = STACKTOP;
     return;
    } else {
     $ReallocAsyncCtx7 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vidd[$59 & 255]($52,0.0,$61);
     $IsAsync22 = ___async;
     if ($IsAsync22) {
      HEAP32[$ReallocAsyncCtx7>>2] = 100;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx7>>2] = 100;
     sp = STACKTOP;
     return;
    }
   }
   break;
  }
  case 26: {
   $64 = HEAP32[(651952)>>2]|0;
   $65 = HEAP32[35128>>2]|0;
   $ReallocAsyncCtx9 = (_emscripten_realloc_async_context(4)|0);
   FUNCTION_TABLE_vi[$64 & 255]($65);
   $IsAsync30 = ___async;
   if ($IsAsync30) {
    HEAP32[$ReallocAsyncCtx9>>2] = 102;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx9>>2] = 102;
   sp = STACKTOP;
   return;
   break;
  }
  case 30: {
   $70 = HEAP32[(389556)>>2]|0;
   $71 = HEAP32[$70>>2]|0;
   $72 = ($71|0)==(1);
   if ($72) {
    $73 = HEAP32[56>>2]|0;
    $74 = HEAP32[(389576)>>2]|0;
    $75 = (($74|0) / 40)&-1;
    $ReallocAsyncCtx26 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($73,1106,$66,$75);
    $IsAsync97 = ___async;
    if ($IsAsync97) {
     HEAP32[$ReallocAsyncCtx26>>2] = 104;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx26>>2] = 104;
    sp = STACKTOP;
    return;
   } else {
    $76 = HEAP32[48>>2]|0;
    $77 = HEAP32[(389576)>>2]|0;
    $78 = (($77|0) / 40)&-1;
    $ReallocAsyncCtx25 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($76,1106,$66,$78);
    $IsAsync93 = ___async;
    if ($IsAsync93) {
     HEAP32[$ReallocAsyncCtx25>>2] = 105;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx25>>2] = 105;
    sp = STACKTOP;
    return;
   }
   break;
  }
  case 38: {
   $81 = HEAP32[(389556)>>2]|0;
   $82 = HEAP32[$81>>2]|0;
   $83 = ($82|0)==(1);
   if ($83) {
    $84 = HEAP32[56>>2]|0;
    $85 = HEAP32[(389576)>>2]|0;
    $86 = (($85|0) / 40)&-1;
    $ReallocAsyncCtx24 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($84,1105,$79,$86);
    $IsAsync89 = ___async;
    if ($IsAsync89) {
     HEAP32[$ReallocAsyncCtx24>>2] = 106;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx24>>2] = 106;
    sp = STACKTOP;
    return;
   } else {
    $87 = HEAP32[48>>2]|0;
    $88 = HEAP32[(389576)>>2]|0;
    $89 = (($88|0) / 40)&-1;
    $ReallocAsyncCtx23 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($87,1105,$79,$89);
    $IsAsync85 = ___async;
    if ($IsAsync85) {
     HEAP32[$ReallocAsyncCtx23>>2] = 107;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx23>>2] = 107;
    sp = STACKTOP;
    return;
   }
   break;
  }
  case 47: {
   $97 = HEAP32[56>>2]|0;
   $98 = HEAP32[(389576)>>2]|0;
   $99 = (($98|0) / 40)&-1;
   $ReallocAsyncCtx22 = (_emscripten_realloc_async_context(4)|0);
   _move_paddle($97,1106,$93,$99);
   $IsAsync81 = ___async;
   if ($IsAsync81) {
    HEAP32[$ReallocAsyncCtx22>>2] = 108;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx22>>2] = 108;
   sp = STACKTOP;
   return;
   break;
  }
  case 51: {
   $102 = HEAP32[56>>2]|0;
   $103 = HEAP32[(389576)>>2]|0;
   $104 = (($103|0) / 40)&-1;
   $ReallocAsyncCtx21 = (_emscripten_realloc_async_context(4)|0);
   _move_paddle($102,1105,$100,$104);
   $IsAsync77 = ___async;
   if ($IsAsync77) {
    HEAP32[$ReallocAsyncCtx21>>2] = 109;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx21>>2] = 109;
   sp = STACKTOP;
   return;
   break;
  }
  case 55: {
   $ReallocAsyncCtx20 = (_emscripten_realloc_async_context(4)|0);
   _paddle_ai(2);
   $IsAsync73 = ___async;
   if ($IsAsync73) {
    HEAP32[$ReallocAsyncCtx20>>2] = 110;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx20>>2] = 110;
   sp = STACKTOP;
   return;
   break;
  }
  case 59: {
   $114 = HEAP8[104>>0]|0;
   $115 = ($114<<24>>24)==(0);
   if ($115) {
    $ReallocAsyncCtx39 = (_emscripten_realloc_async_context(4)|0);
    $116 = (_collision_ball()|0);
    $IsAsync146 = ___async;
    if ($IsAsync146) {
     HEAP32[$ReallocAsyncCtx39>>2] = 111;
     sp = STACKTOP;
     return;
    }
    $117 = ___async_retval;
    $$expand_i1_val = $116&1;
    HEAP8[$117>>0] = $$expand_i1_val;
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx39>>2] = 111;
    sp = STACKTOP;
    return;
   } else {
    $ReallocAsyncCtx38 = (_emscripten_realloc_async_context(4)|0);
    _update_ball();
    $IsAsync142 = ___async;
    if ($IsAsync142) {
     HEAP32[$ReallocAsyncCtx38>>2] = 112;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx38>>2] = 112;
    sp = STACKTOP;
    return;
   }
   break;
  }
  case 75: {
   $ReallocAsyncCtx32 = (_emscripten_realloc_async_context(4)|0);
   _end_danger();
   $IsAsync120 = ___async;
   if ($IsAsync120) {
    HEAP32[$ReallocAsyncCtx32>>2] = 124;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx32>>2] = 124;
   sp = STACKTOP;
   return;
   break;
  }
  case 81: {
   $169 = HEAP32[(651924)>>2]|0;
   $170 = $164 * 1.2;
   $171 = $170;
   HEAPF32[$162>>2] = $171;
   $172 = ((($152)) + 36|0);
   $173 = +HEAPF32[$172>>2];
   $174 = $173;
   $175 = $174 * 1.2;
   $176 = $175;
   HEAPF32[$172>>2] = $176;
   $ReallocAsyncCtx15 = (_emscripten_realloc_async_context(8)|0);
   FUNCTION_TABLE_vidd[$169 & 255]($152,$171,$176);
   $IsAsync54 = ___async;
   if ($IsAsync54) {
    HEAP32[$ReallocAsyncCtx15>>2] = 125;
    $177 = ((($ReallocAsyncCtx15)) + 4|0);
    HEAP32[$177>>2] = $pad$0;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx15>>2] = 125;
   $177 = ((($ReallocAsyncCtx15)) + 4|0);
   HEAP32[$177>>2] = $pad$0;
   sp = STACKTOP;
   return;
   break;
  }
  case 86: {
   $185 = HEAP32[(651924)>>2]|0;
   $186 = $180 * 1.2;
   $187 = $186;
   HEAPF32[$178>>2] = $187;
   $188 = ((($pad$0)) + 36|0);
   $189 = +HEAPF32[$188>>2];
   $190 = $189;
   $191 = $190 * 1.1000000000000001;
   $192 = $191;
   HEAPF32[$188>>2] = $192;
   $ReallocAsyncCtx16 = (_emscripten_realloc_async_context(8)|0);
   FUNCTION_TABLE_vidd[$185 & 255]($pad$0,$187,$192);
   $IsAsync58 = ___async;
   if ($IsAsync58) {
    HEAP32[$ReallocAsyncCtx16>>2] = 126;
    $193 = ((($ReallocAsyncCtx16)) + 4|0);
    HEAP32[$193>>2] = $pad$0;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx16>>2] = 126;
   $193 = ((($ReallocAsyncCtx16)) + 4|0);
   HEAP32[$193>>2] = $pad$0;
   sp = STACKTOP;
   return;
   break;
  }
  case 103: {
   return;
   break;
  }
 }
}
function _pong__async_cb135($0) {
 $0 = $0|0;
 var $$expand_i1_val = 0, $$not7 = 0, $$pr = 0, $$pr32 = 0, $$pre = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0.0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0.0, $157 = 0, $158 = 0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0, $162 = 0.0, $163 = 0.0, $164 = 0, $165 = 0.0, $166 = 0.0;
 var $167 = 0, $168 = 0, $169 = 0.0, $17 = 0, $170 = 0.0, $171 = 0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0;
 var $185 = 0, $186 = 0.0, $187 = 0.0, $188 = 0, $189 = 0.0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $IsAsync11 = 0, $IsAsync120 = 0, $IsAsync142 = 0, $IsAsync146 = 0, $IsAsync18 = 0, $IsAsync22 = 0, $IsAsync30 = 0, $IsAsync4 = 0, $IsAsync54 = 0, $IsAsync58 = 0, $IsAsync62 = 0, $IsAsync73 = 0, $IsAsync77 = 0, $IsAsync81 = 0, $IsAsync85 = 0, $IsAsync89 = 0, $IsAsync93 = 0, $IsAsync97 = 0;
 var $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx16 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx20 = 0, $ReallocAsyncCtx21 = 0, $ReallocAsyncCtx22 = 0, $ReallocAsyncCtx23 = 0, $ReallocAsyncCtx24 = 0, $ReallocAsyncCtx25 = 0, $ReallocAsyncCtx26 = 0, $ReallocAsyncCtx32 = 0, $ReallocAsyncCtx38 = 0, $ReallocAsyncCtx39 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx9 = 0, $or$cond11 = 0, $or$cond13 = 0;
 var $or$cond15 = 0, $or$cond17 = 0, $or$cond30 = 0, $or$cond42 = 0, $or$cond44 = 0, $or$cond9 = 0, $pad$0 = 0, $pad$0$reg2mem$0 = 0, $paddle2$paddle1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $$pre = HEAP32[(389572)>>2]|0;
 $181 = $$pre;$pad$0$reg2mem$0 = $2;
 L2: while(1) {
  $177 = ((($pad$0$reg2mem$0)) + 40|0);
  $178 = +HEAPF32[$177>>2];
  $179 = $178;
  $180 = (($181|0) / 40)&-1;
  $182 = (+($180|0));
  $183 = $182 * 20.0;
  $184 = $179 < $183;
  if ($184) {
   label = 83;
   break;
  }
  $194 = ((($pad$0$reg2mem$0)) + 44|0);
  HEAP8[$194>>0] = 0;
  $195 = ((($pad$0$reg2mem$0)) + 4|0);
  $196 = HEAP32[$195>>2]|0;
  if ((($196|0) == 0)) {
   HEAP32[$195>>2] = 1;
  } else if ((($196|0) == 10)) {
   HEAP32[$195>>2] = 11;
  }
  while(1) {
   $197 = HEAP8[382784>>0]|0;
   $198 = ($197<<24>>24)==(0);
   if ($198) {
    $199 = 389544;
    $200 = $199;
    $201 = HEAP32[$200>>2]|0;
    $202 = (($199) + 4)|0;
    $203 = $202;
    $204 = HEAP32[$203>>2]|0;
    $240 = $201;$241 = $204;
   } else {
    $205 = HEAP8[104>>0]|0;
    $206 = ($205<<24>>24)==(0);
    $207 = 389544;
    $208 = $207;
    $209 = HEAP32[$208>>2]|0;
    $210 = (($207) + 4)|0;
    $211 = $210;
    $212 = HEAP32[$211>>2]|0;
    $213 = 382800;
    $214 = $213;
    $215 = HEAP32[$214>>2]|0;
    $216 = (($213) + 4)|0;
    $217 = $216;
    $218 = HEAP32[$217>>2]|0;
    $219 = (_i64Subtract(($209|0),($212|0),($215|0),($218|0))|0);
    $220 = tempRet0;
    $221 = ($220>>>0)>(0);
    $222 = ($219>>>0)>(3000000);
    $223 = ($220|0)==(0);
    $224 = $223 & $222;
    $225 = $221 | $224;
    $or$cond42 = $206 & $225;
    $226 = (_i64Subtract(($209|0),($212|0),($215|0),($218|0))|0);
    $227 = tempRet0;
    $228 = ($227>>>0)>(0);
    $229 = ($226>>>0)>(6000000);
    $230 = ($227|0)==(0);
    $231 = $230 & $229;
    $232 = $228 | $231;
    $or$cond44 = $or$cond42 | $232;
    if ($or$cond44) {
     $233 = HEAP32[35096>>2]|0;
     $234 = ($233|0)==(6);
     if ($234) {
      $235 = HEAP32[(389556)>>2]|0;
      $236 = HEAP32[$235>>2]|0;
      $237 = ($236|0)==(1);
      if ($237) {
       $238 = ((($235)) + 4|0);
       HEAP8[$238>>0] = 1;
      } else {
       label = 96;
      }
     } else {
      label = 96;
     }
     if ((label|0) == 96) {
      label = 0;
      HEAP32[(651780)>>2] = 0;
     }
     HEAP8[128>>0] = 0;
     $240 = $209;$241 = $212;
    } else {
     $240 = $209;$241 = $212;
    }
   }
   $239 = HEAP32[216>>2]|0;
   $3 = (($239) + -40000)|0;
   HEAP32[216>>2] = $3;
   $242 = (_i64Add(($240|0),($241|0),40000,0)|0);
   $243 = tempRet0;
   $244 = 389544;
   $245 = $244;
   HEAP32[$245>>2] = $242;
   $246 = (($244) + 4)|0;
   $247 = $246;
   HEAP32[$247>>2] = $243;
   $4 = ($3|0)>(39999);
   if ($4) {
    label = 3;
    break L2;
   }
   __render();
   $248 = HEAP8[128>>0]|0;
   $$not7 = ($248<<24>>24)==(0);
   $249 = 389544;
   $250 = $249;
   $251 = HEAP32[$250>>2]|0;
   $252 = (($249) + 4)|0;
   $253 = $252;
   $254 = HEAP32[$253>>2]|0;
   $255 = ($251|0)==(0);
   $256 = ($254|0)==(0);
   $257 = $255 & $256;
   $or$cond9 = $$not7 & $257;
   if (!($or$cond9)) {
    label = 100;
    break L2;
   }
   $5 = HEAP32[(389696)>>2]|0;
   $6 = ($5|0)==(0);
   if (!($6)) {
    HEAP8[128>>0] = 0;
   }
   $7 = (_score_ball()|0);
   if ((($7|0) == 5)) {
    $8 = HEAP8[382784>>0]|0;
    $9 = ($8<<24>>24)==(0);
    if ($9) {
     label = 10;
     break L2;
    }
   } else if (!((($7|0) == 0))) {
    $$pr = HEAP8[382784>>0]|0;
    $64 = ($$pr<<24>>24)==(0);
    if ($64) {
     label = 26;
     break L2;
    }
   }
   $67 = HEAP32[(394012)>>2]|0;
   $68 = ($67|0)>(0);
   $69 = HEAP8[382784>>0]|0;
   $70 = ($69<<24>>24)==(0);
   $or$cond11 = $68 & $70;
   if ($or$cond11) {
    label = 30;
    break L2;
   }
   $80 = HEAP32[(394008)>>2]|0;
   $81 = ($80|0)>(0);
   $or$cond13 = $70 & $81;
   if ($or$cond13) {
    label = 38;
    break L2;
   }
   $91 = HEAP32[(389556)>>2]|0;
   $92 = HEAP32[$91>>2]|0;
   $93 = ($92|0)==(2);
   if ($93) {
    $94 = HEAP32[(390064)>>2]|0;
    $95 = ($94|0)>(0);
    $96 = HEAP8[382784>>0]|0;
    $97 = ($96<<24>>24)==(0);
    $or$cond15 = $95 & $97;
    if ($or$cond15) {
     label = 47;
     break L2;
    }
    $101 = HEAP32[(390048)>>2]|0;
    $102 = ($101|0)>(0);
    $or$cond17 = $97 & $102;
    if ($or$cond17) {
     label = 51;
     break L2;
    }
   }
   $106 = HEAP32[(389556)>>2]|0;
   $107 = HEAP32[$106>>2]|0;
   $108 = ($107|0)<(2);
   if ($108) {
    label = 55;
    break L2;
   }
   $109 = HEAP32[8>>2]|0;
   $110 = ((($109)) + 8|0);
   $111 = +HEAPF32[$110>>2];
   $112 = (~~(($111)));
   HEAP32[382808>>2] = $112;
   $113 = HEAP8[382784>>0]|0;
   $114 = ($113<<24>>24)==(0);
   if ($114) {
    label = 59;
    break L2;
   }
   $$pr32 = HEAP8[35112>>0]|0;
   $119 = ($$pr32<<24>>24)==(0);
   if (!($119)) {
    $120 = 389544;
    $121 = $120;
    $122 = HEAP32[$121>>2]|0;
    $123 = (($120) + 4)|0;
    $124 = $123;
    $125 = HEAP32[$124>>2]|0;
    $126 = 35120;
    $127 = $126;
    $128 = HEAP32[$127>>2]|0;
    $129 = (($126) + 4)|0;
    $130 = $129;
    $131 = HEAP32[$130>>2]|0;
    $132 = (_i64Subtract(($122|0),($125|0),($128|0),($131|0))|0);
    $133 = tempRet0;
    $134 = ($133>>>0)>(0);
    $135 = ($132>>>0)>(10000000);
    $136 = ($133|0)==(0);
    $137 = $136 & $135;
    $138 = $134 | $137;
    if ($138) {
     label = 71;
     break L2;
    }
    $139 = HEAP32[(651780)>>2]|0;
    if ((($139|0) == 5) | (($139|0) == 15)) {
     $140 = HEAP32[40>>2]|0;
     $141 = ((($140)) + 4|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = ($142|0)==(4);
     $144 = ($133>>>0)>(0);
     $145 = ($132>>>0)>(5000000);
     $146 = ($133|0)==(0);
     $147 = $146 & $145;
     $148 = $144 | $147;
     $or$cond30 = $148 & $143;
     if ($or$cond30) {
      label = 71;
      break L2;
     }
    }
   }
   $149 = HEAP8[104>>0]|0;
   $150 = ($149<<24>>24)==(0);
   if ($150) {
    continue;
   }
   $151 = HEAP32[96>>2]|0;
   $152 = ((($151)) + 44|0);
   $153 = HEAP8[$152>>0]|0;
   $154 = ($153<<24>>24)==(0);
   if (!($154)) {
    break;
   }
  }
  $155 = ((($151)) + 8|0);
  $156 = +HEAPF32[$155>>2];
  $157 = HEAP32[(389572)>>2]|0;
  $158 = (($157|0) / 2)&-1;
  $159 = (+($158|0));
  $160 = $156 > $159;
  $paddle2$paddle1 = $160 ? 48 : 56;
  $pad$0 = HEAP32[$paddle2$paddle1>>2]|0;
  $161 = ((($151)) + 40|0);
  $162 = +HEAPF32[$161>>2];
  $163 = $162;
  $164 = (($157|0) / 40)&-1;
  $165 = (+($164|0));
  $166 = $165 * 10.0;
  $167 = $163 < $166;
  if ($167) {
   label = 77;
   break;
  }
  HEAP8[$152>>0] = 0;
  $181 = $157;$pad$0$reg2mem$0 = $pad$0;
 }
 switch (label|0) {
  case 3: {
   $ReallocAsyncCtx17 = (_emscripten_realloc_async_context(4)|0);
   __update();
   $IsAsync62 = ___async;
   if ($IsAsync62) {
    HEAP32[$ReallocAsyncCtx17>>2] = 94;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx17>>2] = 94;
   sp = STACKTOP;
   return;
   break;
  }
  case 10: {
   HEAP8[382784>>0] = 1;
   $10 = HEAP32[(389556)>>2]|0;
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(1);
   if ($12) {
    $13 = (_get_score(1)|0);
    $14 = ($13|0)==(5);
    if ($14) {
     $15 = 389544;
     $16 = $15;
     $17 = HEAP32[$16>>2]|0;
     $18 = (($15) + 4)|0;
     $19 = $18;
     $20 = HEAP32[$19>>2]|0;
     $21 = 382800;
     $22 = $21;
     HEAP32[$22>>2] = $17;
     $23 = (($21) + 4)|0;
     $24 = $23;
     HEAP32[$24>>2] = $20;
     $25 = HEAP32[(651920)>>2]|0;
     $26 = HEAP32[8>>2]|0;
     $27 = HEAP32[(389572)>>2]|0;
     $28 = (+($27|0));
     $29 = ((($26)) + 12|0);
     $30 = +HEAPF32[$29>>2];
     $ReallocAsyncCtx2 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vidd[$25 & 255]($26,$28,$30);
     $IsAsync4 = ___async;
     if ($IsAsync4) {
      HEAP32[$ReallocAsyncCtx2>>2] = 95;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx2>>2] = 95;
     sp = STACKTOP;
     return;
    } else {
     HEAP8[382784>>0] = 1;
     $31 = 389544;
     $32 = $31;
     $33 = HEAP32[$32>>2]|0;
     $34 = (($31) + 4)|0;
     $35 = $34;
     $36 = HEAP32[$35>>2]|0;
     $37 = 382800;
     $38 = $37;
     HEAP32[$38>>2] = $33;
     $39 = (($37) + 4)|0;
     $40 = $39;
     HEAP32[$40>>2] = $36;
     $41 = HEAP32[(651952)>>2]|0;
     $42 = HEAP32[35168>>2]|0;
     $ReallocAsyncCtx4 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vi[$41 & 255]($42);
     $IsAsync11 = ___async;
     if ($IsAsync11) {
      HEAP32[$ReallocAsyncCtx4>>2] = 97;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx4>>2] = 97;
     sp = STACKTOP;
     return;
    }
   } else {
    $43 = 389544;
    $44 = $43;
    $45 = HEAP32[$44>>2]|0;
    $46 = (($43) + 4)|0;
    $47 = $46;
    $48 = HEAP32[$47>>2]|0;
    $49 = 382800;
    $50 = $49;
    HEAP32[$50>>2] = $45;
    $51 = (($49) + 4)|0;
    $52 = $51;
    HEAP32[$52>>2] = $48;
    $53 = HEAP32[8>>2]|0;
    $54 = ((($53)) + 8|0);
    $55 = +HEAPF32[$54>>2];
    $56 = HEAP32[(389572)>>2]|0;
    $57 = (($56|0) / 2)&-1;
    $58 = (+($57|0));
    $59 = $55 > $58;
    $60 = HEAP32[(651920)>>2]|0;
    $61 = ((($53)) + 12|0);
    $62 = +HEAPF32[$61>>2];
    if ($59) {
     $63 = (+($56|0));
     $ReallocAsyncCtx6 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vidd[$60 & 255]($53,$63,$62);
     $IsAsync18 = ___async;
     if ($IsAsync18) {
      HEAP32[$ReallocAsyncCtx6>>2] = 99;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx6>>2] = 99;
     sp = STACKTOP;
     return;
    } else {
     $ReallocAsyncCtx7 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vidd[$60 & 255]($53,0.0,$62);
     $IsAsync22 = ___async;
     if ($IsAsync22) {
      HEAP32[$ReallocAsyncCtx7>>2] = 100;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx7>>2] = 100;
     sp = STACKTOP;
     return;
    }
   }
   break;
  }
  case 26: {
   $65 = HEAP32[(651952)>>2]|0;
   $66 = HEAP32[35128>>2]|0;
   $ReallocAsyncCtx9 = (_emscripten_realloc_async_context(4)|0);
   FUNCTION_TABLE_vi[$65 & 255]($66);
   $IsAsync30 = ___async;
   if ($IsAsync30) {
    HEAP32[$ReallocAsyncCtx9>>2] = 102;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx9>>2] = 102;
   sp = STACKTOP;
   return;
   break;
  }
  case 30: {
   $71 = HEAP32[(389556)>>2]|0;
   $72 = HEAP32[$71>>2]|0;
   $73 = ($72|0)==(1);
   if ($73) {
    $74 = HEAP32[56>>2]|0;
    $75 = HEAP32[(389576)>>2]|0;
    $76 = (($75|0) / 40)&-1;
    $ReallocAsyncCtx26 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($74,1106,$67,$76);
    $IsAsync97 = ___async;
    if ($IsAsync97) {
     HEAP32[$ReallocAsyncCtx26>>2] = 104;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx26>>2] = 104;
    sp = STACKTOP;
    return;
   } else {
    $77 = HEAP32[48>>2]|0;
    $78 = HEAP32[(389576)>>2]|0;
    $79 = (($78|0) / 40)&-1;
    $ReallocAsyncCtx25 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($77,1106,$67,$79);
    $IsAsync93 = ___async;
    if ($IsAsync93) {
     HEAP32[$ReallocAsyncCtx25>>2] = 105;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx25>>2] = 105;
    sp = STACKTOP;
    return;
   }
   break;
  }
  case 38: {
   $82 = HEAP32[(389556)>>2]|0;
   $83 = HEAP32[$82>>2]|0;
   $84 = ($83|0)==(1);
   if ($84) {
    $85 = HEAP32[56>>2]|0;
    $86 = HEAP32[(389576)>>2]|0;
    $87 = (($86|0) / 40)&-1;
    $ReallocAsyncCtx24 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($85,1105,$80,$87);
    $IsAsync89 = ___async;
    if ($IsAsync89) {
     HEAP32[$ReallocAsyncCtx24>>2] = 106;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx24>>2] = 106;
    sp = STACKTOP;
    return;
   } else {
    $88 = HEAP32[48>>2]|0;
    $89 = HEAP32[(389576)>>2]|0;
    $90 = (($89|0) / 40)&-1;
    $ReallocAsyncCtx23 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($88,1105,$80,$90);
    $IsAsync85 = ___async;
    if ($IsAsync85) {
     HEAP32[$ReallocAsyncCtx23>>2] = 107;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx23>>2] = 107;
    sp = STACKTOP;
    return;
   }
   break;
  }
  case 47: {
   $98 = HEAP32[56>>2]|0;
   $99 = HEAP32[(389576)>>2]|0;
   $100 = (($99|0) / 40)&-1;
   $ReallocAsyncCtx22 = (_emscripten_realloc_async_context(4)|0);
   _move_paddle($98,1106,$94,$100);
   $IsAsync81 = ___async;
   if ($IsAsync81) {
    HEAP32[$ReallocAsyncCtx22>>2] = 108;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx22>>2] = 108;
   sp = STACKTOP;
   return;
   break;
  }
  case 51: {
   $103 = HEAP32[56>>2]|0;
   $104 = HEAP32[(389576)>>2]|0;
   $105 = (($104|0) / 40)&-1;
   $ReallocAsyncCtx21 = (_emscripten_realloc_async_context(4)|0);
   _move_paddle($103,1105,$101,$105);
   $IsAsync77 = ___async;
   if ($IsAsync77) {
    HEAP32[$ReallocAsyncCtx21>>2] = 109;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx21>>2] = 109;
   sp = STACKTOP;
   return;
   break;
  }
  case 55: {
   $ReallocAsyncCtx20 = (_emscripten_realloc_async_context(4)|0);
   _paddle_ai(2);
   $IsAsync73 = ___async;
   if ($IsAsync73) {
    HEAP32[$ReallocAsyncCtx20>>2] = 110;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx20>>2] = 110;
   sp = STACKTOP;
   return;
   break;
  }
  case 59: {
   $115 = HEAP8[104>>0]|0;
   $116 = ($115<<24>>24)==(0);
   if ($116) {
    $ReallocAsyncCtx39 = (_emscripten_realloc_async_context(4)|0);
    $117 = (_collision_ball()|0);
    $IsAsync146 = ___async;
    if ($IsAsync146) {
     HEAP32[$ReallocAsyncCtx39>>2] = 111;
     sp = STACKTOP;
     return;
    }
    $118 = ___async_retval;
    $$expand_i1_val = $117&1;
    HEAP8[$118>>0] = $$expand_i1_val;
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx39>>2] = 111;
    sp = STACKTOP;
    return;
   } else {
    $ReallocAsyncCtx38 = (_emscripten_realloc_async_context(4)|0);
    _update_ball();
    $IsAsync142 = ___async;
    if ($IsAsync142) {
     HEAP32[$ReallocAsyncCtx38>>2] = 112;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx38>>2] = 112;
    sp = STACKTOP;
    return;
   }
   break;
  }
  case 71: {
   $ReallocAsyncCtx32 = (_emscripten_realloc_async_context(4)|0);
   _end_danger();
   $IsAsync120 = ___async;
   if ($IsAsync120) {
    HEAP32[$ReallocAsyncCtx32>>2] = 124;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx32>>2] = 124;
   sp = STACKTOP;
   return;
   break;
  }
  case 77: {
   $168 = HEAP32[(651924)>>2]|0;
   $169 = $163 * 1.2;
   $170 = $169;
   HEAPF32[$161>>2] = $170;
   $171 = ((($151)) + 36|0);
   $172 = +HEAPF32[$171>>2];
   $173 = $172;
   $174 = $173 * 1.2;
   $175 = $174;
   HEAPF32[$171>>2] = $175;
   $ReallocAsyncCtx15 = (_emscripten_realloc_async_context(8)|0);
   FUNCTION_TABLE_vidd[$168 & 255]($151,$170,$175);
   $IsAsync54 = ___async;
   if ($IsAsync54) {
    HEAP32[$ReallocAsyncCtx15>>2] = 125;
    $176 = ((($ReallocAsyncCtx15)) + 4|0);
    HEAP32[$176>>2] = $pad$0;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx15>>2] = 125;
   $176 = ((($ReallocAsyncCtx15)) + 4|0);
   HEAP32[$176>>2] = $pad$0;
   sp = STACKTOP;
   return;
   break;
  }
  case 83: {
   $185 = HEAP32[(651924)>>2]|0;
   $186 = $179 * 1.2;
   $187 = $186;
   HEAPF32[$177>>2] = $187;
   $188 = ((($pad$0$reg2mem$0)) + 36|0);
   $189 = +HEAPF32[$188>>2];
   $190 = $189;
   $191 = $190 * 1.1000000000000001;
   $192 = $191;
   HEAPF32[$188>>2] = $192;
   $ReallocAsyncCtx16 = (_emscripten_realloc_async_context(8)|0);
   FUNCTION_TABLE_vidd[$185 & 255]($pad$0$reg2mem$0,$187,$192);
   $IsAsync58 = ___async;
   if ($IsAsync58) {
    HEAP32[$ReallocAsyncCtx16>>2] = 126;
    $193 = ((($ReallocAsyncCtx16)) + 4|0);
    HEAP32[$193>>2] = $pad$0$reg2mem$0;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx16>>2] = 126;
   $193 = ((($ReallocAsyncCtx16)) + 4|0);
   HEAP32[$193>>2] = $pad$0$reg2mem$0;
   sp = STACKTOP;
   return;
   break;
  }
  case 100: {
   return;
   break;
  }
 }
}
function _pong__async_cb136($0) {
 $0 = $0|0;
 var $$expand_i1_val = 0, $$not7 = 0, $$pr = 0, $$pr32 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0.0, $157 = 0, $158 = 0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0, $162 = 0.0, $163 = 0.0, $164 = 0, $165 = 0.0, $166 = 0.0, $167 = 0;
 var $168 = 0, $169 = 0.0, $17 = 0, $170 = 0.0, $171 = 0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0, $181 = 0.0, $182 = 0.0, $183 = 0, $184 = 0, $185 = 0.0;
 var $186 = 0.0, $187 = 0, $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $26 = 0;
 var $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0;
 var $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $IsAsync11 = 0, $IsAsync120 = 0, $IsAsync142 = 0, $IsAsync146 = 0, $IsAsync18 = 0, $IsAsync22 = 0, $IsAsync30 = 0, $IsAsync4 = 0, $IsAsync54 = 0, $IsAsync58 = 0, $IsAsync62 = 0, $IsAsync73 = 0, $IsAsync77 = 0, $IsAsync81 = 0, $IsAsync85 = 0, $IsAsync89 = 0, $IsAsync93 = 0, $IsAsync97 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx16 = 0;
 var $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx20 = 0, $ReallocAsyncCtx21 = 0, $ReallocAsyncCtx22 = 0, $ReallocAsyncCtx23 = 0, $ReallocAsyncCtx24 = 0, $ReallocAsyncCtx25 = 0, $ReallocAsyncCtx26 = 0, $ReallocAsyncCtx32 = 0, $ReallocAsyncCtx38 = 0, $ReallocAsyncCtx39 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx9 = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond17 = 0;
 var $or$cond30 = 0, $or$cond42 = 0, $or$cond44 = 0, $or$cond9 = 0, $pad$0 = 0, $pad$0$reg2mem$0 = 0, $paddle2$paddle1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $pad$0$reg2mem$0 = $2;
 L2: while(1) {
  $194 = ((($pad$0$reg2mem$0)) + 4|0);
  $195 = HEAP32[$194>>2]|0;
  if ((($195|0) == 0)) {
   HEAP32[$194>>2] = 1;
  } else if ((($195|0) == 10)) {
   HEAP32[$194>>2] = 11;
  }
  while(1) {
   $196 = HEAP8[382784>>0]|0;
   $197 = ($196<<24>>24)==(0);
   if ($197) {
    $198 = 389544;
    $199 = $198;
    $200 = HEAP32[$199>>2]|0;
    $201 = (($198) + 4)|0;
    $202 = $201;
    $203 = HEAP32[$202>>2]|0;
    $239 = $200;$240 = $203;
   } else {
    $204 = HEAP8[104>>0]|0;
    $205 = ($204<<24>>24)==(0);
    $206 = 389544;
    $207 = $206;
    $208 = HEAP32[$207>>2]|0;
    $209 = (($206) + 4)|0;
    $210 = $209;
    $211 = HEAP32[$210>>2]|0;
    $212 = 382800;
    $213 = $212;
    $214 = HEAP32[$213>>2]|0;
    $215 = (($212) + 4)|0;
    $216 = $215;
    $217 = HEAP32[$216>>2]|0;
    $218 = (_i64Subtract(($208|0),($211|0),($214|0),($217|0))|0);
    $219 = tempRet0;
    $220 = ($219>>>0)>(0);
    $221 = ($218>>>0)>(3000000);
    $222 = ($219|0)==(0);
    $223 = $222 & $221;
    $224 = $220 | $223;
    $or$cond42 = $205 & $224;
    $225 = (_i64Subtract(($208|0),($211|0),($214|0),($217|0))|0);
    $226 = tempRet0;
    $227 = ($226>>>0)>(0);
    $228 = ($225>>>0)>(6000000);
    $229 = ($226|0)==(0);
    $230 = $229 & $228;
    $231 = $227 | $230;
    $or$cond44 = $or$cond42 | $231;
    if ($or$cond44) {
     $232 = HEAP32[35096>>2]|0;
     $233 = ($232|0)==(6);
     if ($233) {
      $234 = HEAP32[(389556)>>2]|0;
      $235 = HEAP32[$234>>2]|0;
      $236 = ($235|0)==(1);
      if ($236) {
       $237 = ((($234)) + 4|0);
       HEAP8[$237>>0] = 1;
      } else {
       label = 96;
      }
     } else {
      label = 96;
     }
     if ((label|0) == 96) {
      label = 0;
      HEAP32[(651780)>>2] = 0;
     }
     HEAP8[128>>0] = 0;
     $239 = $208;$240 = $211;
    } else {
     $239 = $208;$240 = $211;
    }
   }
   $238 = HEAP32[216>>2]|0;
   $3 = (($238) + -40000)|0;
   HEAP32[216>>2] = $3;
   $241 = (_i64Add(($239|0),($240|0),40000,0)|0);
   $242 = tempRet0;
   $243 = 389544;
   $244 = $243;
   HEAP32[$244>>2] = $241;
   $245 = (($243) + 4)|0;
   $246 = $245;
   HEAP32[$246>>2] = $242;
   $4 = ($3|0)>(39999);
   if ($4) {
    label = 3;
    break L2;
   }
   __render();
   $247 = HEAP8[128>>0]|0;
   $$not7 = ($247<<24>>24)==(0);
   $248 = 389544;
   $249 = $248;
   $250 = HEAP32[$249>>2]|0;
   $251 = (($248) + 4)|0;
   $252 = $251;
   $253 = HEAP32[$252>>2]|0;
   $254 = ($250|0)==(0);
   $255 = ($253|0)==(0);
   $256 = $254 & $255;
   $or$cond9 = $$not7 & $256;
   if (!($or$cond9)) {
    label = 100;
    break L2;
   }
   $5 = HEAP32[(389696)>>2]|0;
   $6 = ($5|0)==(0);
   if (!($6)) {
    HEAP8[128>>0] = 0;
   }
   $7 = (_score_ball()|0);
   if ((($7|0) == 5)) {
    $8 = HEAP8[382784>>0]|0;
    $9 = ($8<<24>>24)==(0);
    if ($9) {
     label = 10;
     break L2;
    }
   } else if (!((($7|0) == 0))) {
    $$pr = HEAP8[382784>>0]|0;
    $64 = ($$pr<<24>>24)==(0);
    if ($64) {
     label = 26;
     break L2;
    }
   }
   $67 = HEAP32[(394012)>>2]|0;
   $68 = ($67|0)>(0);
   $69 = HEAP8[382784>>0]|0;
   $70 = ($69<<24>>24)==(0);
   $or$cond11 = $68 & $70;
   if ($or$cond11) {
    label = 30;
    break L2;
   }
   $80 = HEAP32[(394008)>>2]|0;
   $81 = ($80|0)>(0);
   $or$cond13 = $70 & $81;
   if ($or$cond13) {
    label = 38;
    break L2;
   }
   $91 = HEAP32[(389556)>>2]|0;
   $92 = HEAP32[$91>>2]|0;
   $93 = ($92|0)==(2);
   if ($93) {
    $94 = HEAP32[(390064)>>2]|0;
    $95 = ($94|0)>(0);
    $96 = HEAP8[382784>>0]|0;
    $97 = ($96<<24>>24)==(0);
    $or$cond15 = $95 & $97;
    if ($or$cond15) {
     label = 47;
     break L2;
    }
    $101 = HEAP32[(390048)>>2]|0;
    $102 = ($101|0)>(0);
    $or$cond17 = $97 & $102;
    if ($or$cond17) {
     label = 51;
     break L2;
    }
   }
   $106 = HEAP32[(389556)>>2]|0;
   $107 = HEAP32[$106>>2]|0;
   $108 = ($107|0)<(2);
   if ($108) {
    label = 55;
    break L2;
   }
   $109 = HEAP32[8>>2]|0;
   $110 = ((($109)) + 8|0);
   $111 = +HEAPF32[$110>>2];
   $112 = (~~(($111)));
   HEAP32[382808>>2] = $112;
   $113 = HEAP8[382784>>0]|0;
   $114 = ($113<<24>>24)==(0);
   if ($114) {
    label = 59;
    break L2;
   }
   $$pr32 = HEAP8[35112>>0]|0;
   $119 = ($$pr32<<24>>24)==(0);
   if (!($119)) {
    $120 = 389544;
    $121 = $120;
    $122 = HEAP32[$121>>2]|0;
    $123 = (($120) + 4)|0;
    $124 = $123;
    $125 = HEAP32[$124>>2]|0;
    $126 = 35120;
    $127 = $126;
    $128 = HEAP32[$127>>2]|0;
    $129 = (($126) + 4)|0;
    $130 = $129;
    $131 = HEAP32[$130>>2]|0;
    $132 = (_i64Subtract(($122|0),($125|0),($128|0),($131|0))|0);
    $133 = tempRet0;
    $134 = ($133>>>0)>(0);
    $135 = ($132>>>0)>(10000000);
    $136 = ($133|0)==(0);
    $137 = $136 & $135;
    $138 = $134 | $137;
    if ($138) {
     label = 71;
     break L2;
    }
    $139 = HEAP32[(651780)>>2]|0;
    if ((($139|0) == 5) | (($139|0) == 15)) {
     $140 = HEAP32[40>>2]|0;
     $141 = ((($140)) + 4|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = ($142|0)==(4);
     $144 = ($133>>>0)>(0);
     $145 = ($132>>>0)>(5000000);
     $146 = ($133|0)==(0);
     $147 = $146 & $145;
     $148 = $144 | $147;
     $or$cond30 = $148 & $143;
     if ($or$cond30) {
      label = 71;
      break L2;
     }
    }
   }
   $149 = HEAP8[104>>0]|0;
   $150 = ($149<<24>>24)==(0);
   if ($150) {
    continue;
   }
   $151 = HEAP32[96>>2]|0;
   $152 = ((($151)) + 44|0);
   $153 = HEAP8[$152>>0]|0;
   $154 = ($153<<24>>24)==(0);
   if (!($154)) {
    break;
   }
  }
  $155 = ((($151)) + 8|0);
  $156 = +HEAPF32[$155>>2];
  $157 = HEAP32[(389572)>>2]|0;
  $158 = (($157|0) / 2)&-1;
  $159 = (+($158|0));
  $160 = $156 > $159;
  $paddle2$paddle1 = $160 ? 48 : 56;
  $pad$0 = HEAP32[$paddle2$paddle1>>2]|0;
  $161 = ((($151)) + 40|0);
  $162 = +HEAPF32[$161>>2];
  $163 = $162;
  $164 = (($157|0) / 40)&-1;
  $165 = (+($164|0));
  $166 = $165 * 10.0;
  $167 = $163 < $166;
  if ($167) {
   label = 77;
   break;
  }
  HEAP8[$152>>0] = 0;
  $177 = ((($pad$0)) + 40|0);
  $178 = +HEAPF32[$177>>2];
  $179 = $178;
  $180 = (($157|0) / 40)&-1;
  $181 = (+($180|0));
  $182 = $181 * 20.0;
  $183 = $179 < $182;
  if ($183) {
   label = 82;
   break;
  }
  $193 = ((($pad$0)) + 44|0);
  HEAP8[$193>>0] = 0;
  $pad$0$reg2mem$0 = $pad$0;
 }
 switch (label|0) {
  case 3: {
   $ReallocAsyncCtx17 = (_emscripten_realloc_async_context(4)|0);
   __update();
   $IsAsync62 = ___async;
   if ($IsAsync62) {
    HEAP32[$ReallocAsyncCtx17>>2] = 94;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx17>>2] = 94;
   sp = STACKTOP;
   return;
   break;
  }
  case 10: {
   HEAP8[382784>>0] = 1;
   $10 = HEAP32[(389556)>>2]|0;
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(1);
   if ($12) {
    $13 = (_get_score(1)|0);
    $14 = ($13|0)==(5);
    if ($14) {
     $15 = 389544;
     $16 = $15;
     $17 = HEAP32[$16>>2]|0;
     $18 = (($15) + 4)|0;
     $19 = $18;
     $20 = HEAP32[$19>>2]|0;
     $21 = 382800;
     $22 = $21;
     HEAP32[$22>>2] = $17;
     $23 = (($21) + 4)|0;
     $24 = $23;
     HEAP32[$24>>2] = $20;
     $25 = HEAP32[(651920)>>2]|0;
     $26 = HEAP32[8>>2]|0;
     $27 = HEAP32[(389572)>>2]|0;
     $28 = (+($27|0));
     $29 = ((($26)) + 12|0);
     $30 = +HEAPF32[$29>>2];
     $ReallocAsyncCtx2 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vidd[$25 & 255]($26,$28,$30);
     $IsAsync4 = ___async;
     if ($IsAsync4) {
      HEAP32[$ReallocAsyncCtx2>>2] = 95;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx2>>2] = 95;
     sp = STACKTOP;
     return;
    } else {
     HEAP8[382784>>0] = 1;
     $31 = 389544;
     $32 = $31;
     $33 = HEAP32[$32>>2]|0;
     $34 = (($31) + 4)|0;
     $35 = $34;
     $36 = HEAP32[$35>>2]|0;
     $37 = 382800;
     $38 = $37;
     HEAP32[$38>>2] = $33;
     $39 = (($37) + 4)|0;
     $40 = $39;
     HEAP32[$40>>2] = $36;
     $41 = HEAP32[(651952)>>2]|0;
     $42 = HEAP32[35168>>2]|0;
     $ReallocAsyncCtx4 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vi[$41 & 255]($42);
     $IsAsync11 = ___async;
     if ($IsAsync11) {
      HEAP32[$ReallocAsyncCtx4>>2] = 97;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx4>>2] = 97;
     sp = STACKTOP;
     return;
    }
   } else {
    $43 = 389544;
    $44 = $43;
    $45 = HEAP32[$44>>2]|0;
    $46 = (($43) + 4)|0;
    $47 = $46;
    $48 = HEAP32[$47>>2]|0;
    $49 = 382800;
    $50 = $49;
    HEAP32[$50>>2] = $45;
    $51 = (($49) + 4)|0;
    $52 = $51;
    HEAP32[$52>>2] = $48;
    $53 = HEAP32[8>>2]|0;
    $54 = ((($53)) + 8|0);
    $55 = +HEAPF32[$54>>2];
    $56 = HEAP32[(389572)>>2]|0;
    $57 = (($56|0) / 2)&-1;
    $58 = (+($57|0));
    $59 = $55 > $58;
    $60 = HEAP32[(651920)>>2]|0;
    $61 = ((($53)) + 12|0);
    $62 = +HEAPF32[$61>>2];
    if ($59) {
     $63 = (+($56|0));
     $ReallocAsyncCtx6 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vidd[$60 & 255]($53,$63,$62);
     $IsAsync18 = ___async;
     if ($IsAsync18) {
      HEAP32[$ReallocAsyncCtx6>>2] = 99;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx6>>2] = 99;
     sp = STACKTOP;
     return;
    } else {
     $ReallocAsyncCtx7 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vidd[$60 & 255]($53,0.0,$62);
     $IsAsync22 = ___async;
     if ($IsAsync22) {
      HEAP32[$ReallocAsyncCtx7>>2] = 100;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx7>>2] = 100;
     sp = STACKTOP;
     return;
    }
   }
   break;
  }
  case 26: {
   $65 = HEAP32[(651952)>>2]|0;
   $66 = HEAP32[35128>>2]|0;
   $ReallocAsyncCtx9 = (_emscripten_realloc_async_context(4)|0);
   FUNCTION_TABLE_vi[$65 & 255]($66);
   $IsAsync30 = ___async;
   if ($IsAsync30) {
    HEAP32[$ReallocAsyncCtx9>>2] = 102;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx9>>2] = 102;
   sp = STACKTOP;
   return;
   break;
  }
  case 30: {
   $71 = HEAP32[(389556)>>2]|0;
   $72 = HEAP32[$71>>2]|0;
   $73 = ($72|0)==(1);
   if ($73) {
    $74 = HEAP32[56>>2]|0;
    $75 = HEAP32[(389576)>>2]|0;
    $76 = (($75|0) / 40)&-1;
    $ReallocAsyncCtx26 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($74,1106,$67,$76);
    $IsAsync97 = ___async;
    if ($IsAsync97) {
     HEAP32[$ReallocAsyncCtx26>>2] = 104;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx26>>2] = 104;
    sp = STACKTOP;
    return;
   } else {
    $77 = HEAP32[48>>2]|0;
    $78 = HEAP32[(389576)>>2]|0;
    $79 = (($78|0) / 40)&-1;
    $ReallocAsyncCtx25 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($77,1106,$67,$79);
    $IsAsync93 = ___async;
    if ($IsAsync93) {
     HEAP32[$ReallocAsyncCtx25>>2] = 105;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx25>>2] = 105;
    sp = STACKTOP;
    return;
   }
   break;
  }
  case 38: {
   $82 = HEAP32[(389556)>>2]|0;
   $83 = HEAP32[$82>>2]|0;
   $84 = ($83|0)==(1);
   if ($84) {
    $85 = HEAP32[56>>2]|0;
    $86 = HEAP32[(389576)>>2]|0;
    $87 = (($86|0) / 40)&-1;
    $ReallocAsyncCtx24 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($85,1105,$80,$87);
    $IsAsync89 = ___async;
    if ($IsAsync89) {
     HEAP32[$ReallocAsyncCtx24>>2] = 106;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx24>>2] = 106;
    sp = STACKTOP;
    return;
   } else {
    $88 = HEAP32[48>>2]|0;
    $89 = HEAP32[(389576)>>2]|0;
    $90 = (($89|0) / 40)&-1;
    $ReallocAsyncCtx23 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($88,1105,$80,$90);
    $IsAsync85 = ___async;
    if ($IsAsync85) {
     HEAP32[$ReallocAsyncCtx23>>2] = 107;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx23>>2] = 107;
    sp = STACKTOP;
    return;
   }
   break;
  }
  case 47: {
   $98 = HEAP32[56>>2]|0;
   $99 = HEAP32[(389576)>>2]|0;
   $100 = (($99|0) / 40)&-1;
   $ReallocAsyncCtx22 = (_emscripten_realloc_async_context(4)|0);
   _move_paddle($98,1106,$94,$100);
   $IsAsync81 = ___async;
   if ($IsAsync81) {
    HEAP32[$ReallocAsyncCtx22>>2] = 108;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx22>>2] = 108;
   sp = STACKTOP;
   return;
   break;
  }
  case 51: {
   $103 = HEAP32[56>>2]|0;
   $104 = HEAP32[(389576)>>2]|0;
   $105 = (($104|0) / 40)&-1;
   $ReallocAsyncCtx21 = (_emscripten_realloc_async_context(4)|0);
   _move_paddle($103,1105,$101,$105);
   $IsAsync77 = ___async;
   if ($IsAsync77) {
    HEAP32[$ReallocAsyncCtx21>>2] = 109;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx21>>2] = 109;
   sp = STACKTOP;
   return;
   break;
  }
  case 55: {
   $ReallocAsyncCtx20 = (_emscripten_realloc_async_context(4)|0);
   _paddle_ai(2);
   $IsAsync73 = ___async;
   if ($IsAsync73) {
    HEAP32[$ReallocAsyncCtx20>>2] = 110;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx20>>2] = 110;
   sp = STACKTOP;
   return;
   break;
  }
  case 59: {
   $115 = HEAP8[104>>0]|0;
   $116 = ($115<<24>>24)==(0);
   if ($116) {
    $ReallocAsyncCtx39 = (_emscripten_realloc_async_context(4)|0);
    $117 = (_collision_ball()|0);
    $IsAsync146 = ___async;
    if ($IsAsync146) {
     HEAP32[$ReallocAsyncCtx39>>2] = 111;
     sp = STACKTOP;
     return;
    }
    $118 = ___async_retval;
    $$expand_i1_val = $117&1;
    HEAP8[$118>>0] = $$expand_i1_val;
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx39>>2] = 111;
    sp = STACKTOP;
    return;
   } else {
    $ReallocAsyncCtx38 = (_emscripten_realloc_async_context(4)|0);
    _update_ball();
    $IsAsync142 = ___async;
    if ($IsAsync142) {
     HEAP32[$ReallocAsyncCtx38>>2] = 112;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx38>>2] = 112;
    sp = STACKTOP;
    return;
   }
   break;
  }
  case 71: {
   $ReallocAsyncCtx32 = (_emscripten_realloc_async_context(4)|0);
   _end_danger();
   $IsAsync120 = ___async;
   if ($IsAsync120) {
    HEAP32[$ReallocAsyncCtx32>>2] = 124;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx32>>2] = 124;
   sp = STACKTOP;
   return;
   break;
  }
  case 77: {
   $168 = HEAP32[(651924)>>2]|0;
   $169 = $163 * 1.2;
   $170 = $169;
   HEAPF32[$161>>2] = $170;
   $171 = ((($151)) + 36|0);
   $172 = +HEAPF32[$171>>2];
   $173 = $172;
   $174 = $173 * 1.2;
   $175 = $174;
   HEAPF32[$171>>2] = $175;
   $ReallocAsyncCtx15 = (_emscripten_realloc_async_context(8)|0);
   FUNCTION_TABLE_vidd[$168 & 255]($151,$170,$175);
   $IsAsync54 = ___async;
   if ($IsAsync54) {
    HEAP32[$ReallocAsyncCtx15>>2] = 125;
    $176 = ((($ReallocAsyncCtx15)) + 4|0);
    HEAP32[$176>>2] = $pad$0;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx15>>2] = 125;
   $176 = ((($ReallocAsyncCtx15)) + 4|0);
   HEAP32[$176>>2] = $pad$0;
   sp = STACKTOP;
   return;
   break;
  }
  case 82: {
   $184 = HEAP32[(651924)>>2]|0;
   $185 = $179 * 1.2;
   $186 = $185;
   HEAPF32[$177>>2] = $186;
   $187 = ((($pad$0)) + 36|0);
   $188 = +HEAPF32[$187>>2];
   $189 = $188;
   $190 = $189 * 1.1000000000000001;
   $191 = $190;
   HEAPF32[$187>>2] = $191;
   $ReallocAsyncCtx16 = (_emscripten_realloc_async_context(8)|0);
   FUNCTION_TABLE_vidd[$184 & 255]($pad$0,$186,$191);
   $IsAsync58 = ___async;
   if ($IsAsync58) {
    HEAP32[$ReallocAsyncCtx16>>2] = 126;
    $192 = ((($ReallocAsyncCtx16)) + 4|0);
    HEAP32[$192>>2] = $pad$0;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx16>>2] = 126;
   $192 = ((($ReallocAsyncCtx16)) + 4|0);
   HEAP32[$192>>2] = $pad$0;
   sp = STACKTOP;
   return;
   break;
  }
  case 100: {
   return;
   break;
  }
 }
}
function _pong__async_cb137($0) {
 $0 = $0|0;
 var $$expand_i1_val = 0, $$not7 = 0, $$pr = 0, $$pr32 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0.0, $158 = 0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0, $163 = 0.0, $164 = 0.0, $165 = 0, $166 = 0, $167 = 0.0;
 var $168 = 0.0, $169 = 0, $17 = 0, $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0, $175 = 0, $176 = 0.0, $177 = 0.0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0, $182 = 0, $183 = 0.0, $184 = 0.0, $185 = 0;
 var $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $26 = 0.0, $27 = 0, $28 = 0.0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $IsAsync11 = 0, $IsAsync120 = 0;
 var $IsAsync142 = 0, $IsAsync146 = 0, $IsAsync18 = 0, $IsAsync22 = 0, $IsAsync30 = 0, $IsAsync4 = 0, $IsAsync54 = 0, $IsAsync58 = 0, $IsAsync62 = 0, $IsAsync73 = 0, $IsAsync77 = 0, $IsAsync81 = 0, $IsAsync85 = 0, $IsAsync89 = 0, $IsAsync93 = 0, $IsAsync97 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx16 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx2 = 0;
 var $ReallocAsyncCtx20 = 0, $ReallocAsyncCtx21 = 0, $ReallocAsyncCtx22 = 0, $ReallocAsyncCtx23 = 0, $ReallocAsyncCtx24 = 0, $ReallocAsyncCtx25 = 0, $ReallocAsyncCtx26 = 0, $ReallocAsyncCtx32 = 0, $ReallocAsyncCtx38 = 0, $ReallocAsyncCtx39 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx9 = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond30 = 0, $or$cond42 = 0;
 var $or$cond44 = 0, $or$cond9 = 0, $pad$0 = 0, $paddle2$paddle1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 L2: while(1) {
  $3 = HEAP32[(389696)>>2]|0;
  $4 = ($3|0)==(0);
  if (!($4)) {
   HEAP8[128>>0] = 0;
  }
  $5 = (_score_ball()|0);
  if ((($5|0) == 5)) {
   $6 = HEAP8[382784>>0]|0;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    label = 11;
    break;
   }
  } else if (!((($5|0) == 0))) {
   $$pr = HEAP8[382784>>0]|0;
   $62 = ($$pr<<24>>24)==(0);
   if ($62) {
    label = 27;
    break;
   }
  }
  $65 = HEAP32[(394012)>>2]|0;
  $66 = ($65|0)>(0);
  $67 = HEAP8[382784>>0]|0;
  $68 = ($67<<24>>24)==(0);
  $or$cond11 = $66 & $68;
  if ($or$cond11) {
   label = 31;
   break;
  }
  $78 = HEAP32[(394008)>>2]|0;
  $79 = ($78|0)>(0);
  $or$cond13 = $68 & $79;
  if ($or$cond13) {
   label = 39;
   break;
  }
  $89 = HEAP32[(389556)>>2]|0;
  $90 = HEAP32[$89>>2]|0;
  $91 = ($90|0)==(2);
  if ($91) {
   $92 = HEAP32[(390064)>>2]|0;
   $93 = ($92|0)>(0);
   $94 = HEAP8[382784>>0]|0;
   $95 = ($94<<24>>24)==(0);
   $or$cond15 = $93 & $95;
   if ($or$cond15) {
    label = 48;
    break;
   }
   $99 = HEAP32[(390048)>>2]|0;
   $100 = ($99|0)>(0);
   $or$cond17 = $95 & $100;
   if ($or$cond17) {
    label = 52;
    break;
   }
  }
  $104 = HEAP32[(389556)>>2]|0;
  $105 = HEAP32[$104>>2]|0;
  $106 = ($105|0)<(2);
  if ($106) {
   label = 56;
   break;
  }
  $107 = HEAP32[8>>2]|0;
  $108 = ((($107)) + 8|0);
  $109 = +HEAPF32[$108>>2];
  $110 = (~~(($109)));
  HEAP32[382808>>2] = $110;
  $111 = HEAP8[382784>>0]|0;
  $112 = ($111<<24>>24)==(0);
  if ($112) {
   label = 60;
   break;
  }
  $$pr32 = HEAP8[35112>>0]|0;
  $117 = ($$pr32<<24>>24)==(0);
  if (!($117)) {
   $118 = 389544;
   $119 = $118;
   $120 = HEAP32[$119>>2]|0;
   $121 = (($118) + 4)|0;
   $122 = $121;
   $123 = HEAP32[$122>>2]|0;
   $124 = 35120;
   $125 = $124;
   $126 = HEAP32[$125>>2]|0;
   $127 = (($124) + 4)|0;
   $128 = $127;
   $129 = HEAP32[$128>>2]|0;
   $130 = (_i64Subtract(($120|0),($123|0),($126|0),($129|0))|0);
   $131 = tempRet0;
   $132 = ($131>>>0)>(0);
   $133 = ($130>>>0)>(10000000);
   $134 = ($131|0)==(0);
   $135 = $134 & $133;
   $136 = $132 | $135;
   if ($136) {
    label = 72;
    break;
   }
   $137 = HEAP32[(651780)>>2]|0;
   if ((($137|0) == 5) | (($137|0) == 15)) {
    $138 = HEAP32[40>>2]|0;
    $139 = ((($138)) + 4|0);
    $140 = HEAP32[$139>>2]|0;
    $141 = ($140|0)==(4);
    $142 = ($131>>>0)>(0);
    $143 = ($130>>>0)>(5000000);
    $144 = ($131|0)==(0);
    $145 = $144 & $143;
    $146 = $142 | $145;
    $or$cond30 = $146 & $141;
    if ($or$cond30) {
     label = 72;
     break;
    }
   }
  }
  $147 = HEAP8[104>>0]|0;
  $148 = ($147<<24>>24)==(0);
  do {
   if (!($148)) {
    $149 = HEAP32[96>>2]|0;
    $150 = ((($149)) + 44|0);
    $151 = HEAP8[$150>>0]|0;
    $152 = ($151<<24>>24)==(0);
    if (!($152)) {
     $153 = ((($149)) + 8|0);
     $154 = +HEAPF32[$153>>2];
     $155 = HEAP32[(389572)>>2]|0;
     $156 = (($155|0) / 2)&-1;
     $157 = (+($156|0));
     $158 = $154 > $157;
     $paddle2$paddle1 = $158 ? 48 : 56;
     $pad$0 = HEAP32[$paddle2$paddle1>>2]|0;
     $159 = ((($149)) + 40|0);
     $160 = +HEAPF32[$159>>2];
     $161 = $160;
     $162 = (($155|0) / 40)&-1;
     $163 = (+($162|0));
     $164 = $163 * 10.0;
     $165 = $161 < $164;
     if ($165) {
      label = 78;
      break L2;
     }
     HEAP8[$150>>0] = 0;
     $175 = ((($pad$0)) + 40|0);
     $176 = +HEAPF32[$175>>2];
     $177 = $176;
     $178 = (($155|0) / 40)&-1;
     $179 = (+($178|0));
     $180 = $179 * 20.0;
     $181 = $177 < $180;
     if ($181) {
      label = 83;
      break L2;
     }
     $191 = ((($pad$0)) + 44|0);
     HEAP8[$191>>0] = 0;
     $192 = ((($pad$0)) + 4|0);
     $193 = HEAP32[$192>>2]|0;
     if ((($193|0) == 0)) {
      HEAP32[$192>>2] = 1;
      break;
     } else if ((($193|0) == 10)) {
      HEAP32[$192>>2] = 11;
      break;
     } else {
      break;
     }
    }
   }
  } while(0);
  $194 = HEAP8[382784>>0]|0;
  $195 = ($194<<24>>24)==(0);
  if ($195) {
   $196 = 389544;
   $197 = $196;
   $198 = HEAP32[$197>>2]|0;
   $199 = (($196) + 4)|0;
   $200 = $199;
   $201 = HEAP32[$200>>2]|0;
   $237 = $198;$238 = $201;
  } else {
   $202 = HEAP8[104>>0]|0;
   $203 = ($202<<24>>24)==(0);
   $204 = 389544;
   $205 = $204;
   $206 = HEAP32[$205>>2]|0;
   $207 = (($204) + 4)|0;
   $208 = $207;
   $209 = HEAP32[$208>>2]|0;
   $210 = 382800;
   $211 = $210;
   $212 = HEAP32[$211>>2]|0;
   $213 = (($210) + 4)|0;
   $214 = $213;
   $215 = HEAP32[$214>>2]|0;
   $216 = (_i64Subtract(($206|0),($209|0),($212|0),($215|0))|0);
   $217 = tempRet0;
   $218 = ($217>>>0)>(0);
   $219 = ($216>>>0)>(3000000);
   $220 = ($217|0)==(0);
   $221 = $220 & $219;
   $222 = $218 | $221;
   $or$cond42 = $203 & $222;
   $223 = (_i64Subtract(($206|0),($209|0),($212|0),($215|0))|0);
   $224 = tempRet0;
   $225 = ($224>>>0)>(0);
   $226 = ($223>>>0)>(6000000);
   $227 = ($224|0)==(0);
   $228 = $227 & $226;
   $229 = $225 | $228;
   $or$cond44 = $or$cond42 | $229;
   if ($or$cond44) {
    $230 = HEAP32[35096>>2]|0;
    $231 = ($230|0)==(6);
    if ($231) {
     $232 = HEAP32[(389556)>>2]|0;
     $233 = HEAP32[$232>>2]|0;
     $234 = ($233|0)==(1);
     if ($234) {
      $235 = ((($232)) + 4|0);
      HEAP8[$235>>0] = 1;
     } else {
      label = 96;
     }
    } else {
     label = 96;
    }
    if ((label|0) == 96) {
     label = 0;
     HEAP32[(651780)>>2] = 0;
    }
    HEAP8[128>>0] = 0;
    $237 = $206;$238 = $209;
   } else {
    $237 = $206;$238 = $209;
   }
  }
  $236 = HEAP32[216>>2]|0;
  $1 = (($236) + -40000)|0;
  HEAP32[216>>2] = $1;
  $239 = (_i64Add(($237|0),($238|0),40000,0)|0);
  $240 = tempRet0;
  $241 = 389544;
  $242 = $241;
  HEAP32[$242>>2] = $239;
  $243 = (($241) + 4)|0;
  $244 = $243;
  HEAP32[$244>>2] = $240;
  $2 = ($1|0)>(39999);
  if ($2) {
   label = 3;
   break;
  }
  __render();
  $245 = HEAP8[128>>0]|0;
  $$not7 = ($245<<24>>24)==(0);
  $246 = 389544;
  $247 = $246;
  $248 = HEAP32[$247>>2]|0;
  $249 = (($246) + 4)|0;
  $250 = $249;
  $251 = HEAP32[$250>>2]|0;
  $252 = ($248|0)==(0);
  $253 = ($251|0)==(0);
  $254 = $252 & $253;
  $or$cond9 = $$not7 & $254;
  if (!($or$cond9)) {
   label = 100;
   break;
  }
 }
 switch (label|0) {
  case 3: {
   $ReallocAsyncCtx17 = (_emscripten_realloc_async_context(4)|0);
   __update();
   $IsAsync62 = ___async;
   if ($IsAsync62) {
    HEAP32[$ReallocAsyncCtx17>>2] = 94;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx17>>2] = 94;
   sp = STACKTOP;
   return;
   break;
  }
  case 11: {
   HEAP8[382784>>0] = 1;
   $8 = HEAP32[(389556)>>2]|0;
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(1);
   if ($10) {
    $11 = (_get_score(1)|0);
    $12 = ($11|0)==(5);
    if ($12) {
     $13 = 389544;
     $14 = $13;
     $15 = HEAP32[$14>>2]|0;
     $16 = (($13) + 4)|0;
     $17 = $16;
     $18 = HEAP32[$17>>2]|0;
     $19 = 382800;
     $20 = $19;
     HEAP32[$20>>2] = $15;
     $21 = (($19) + 4)|0;
     $22 = $21;
     HEAP32[$22>>2] = $18;
     $23 = HEAP32[(651920)>>2]|0;
     $24 = HEAP32[8>>2]|0;
     $25 = HEAP32[(389572)>>2]|0;
     $26 = (+($25|0));
     $27 = ((($24)) + 12|0);
     $28 = +HEAPF32[$27>>2];
     $ReallocAsyncCtx2 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vidd[$23 & 255]($24,$26,$28);
     $IsAsync4 = ___async;
     if ($IsAsync4) {
      HEAP32[$ReallocAsyncCtx2>>2] = 95;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx2>>2] = 95;
     sp = STACKTOP;
     return;
    } else {
     HEAP8[382784>>0] = 1;
     $29 = 389544;
     $30 = $29;
     $31 = HEAP32[$30>>2]|0;
     $32 = (($29) + 4)|0;
     $33 = $32;
     $34 = HEAP32[$33>>2]|0;
     $35 = 382800;
     $36 = $35;
     HEAP32[$36>>2] = $31;
     $37 = (($35) + 4)|0;
     $38 = $37;
     HEAP32[$38>>2] = $34;
     $39 = HEAP32[(651952)>>2]|0;
     $40 = HEAP32[35168>>2]|0;
     $ReallocAsyncCtx4 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vi[$39 & 255]($40);
     $IsAsync11 = ___async;
     if ($IsAsync11) {
      HEAP32[$ReallocAsyncCtx4>>2] = 97;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx4>>2] = 97;
     sp = STACKTOP;
     return;
    }
   } else {
    $41 = 389544;
    $42 = $41;
    $43 = HEAP32[$42>>2]|0;
    $44 = (($41) + 4)|0;
    $45 = $44;
    $46 = HEAP32[$45>>2]|0;
    $47 = 382800;
    $48 = $47;
    HEAP32[$48>>2] = $43;
    $49 = (($47) + 4)|0;
    $50 = $49;
    HEAP32[$50>>2] = $46;
    $51 = HEAP32[8>>2]|0;
    $52 = ((($51)) + 8|0);
    $53 = +HEAPF32[$52>>2];
    $54 = HEAP32[(389572)>>2]|0;
    $55 = (($54|0) / 2)&-1;
    $56 = (+($55|0));
    $57 = $53 > $56;
    $58 = HEAP32[(651920)>>2]|0;
    $59 = ((($51)) + 12|0);
    $60 = +HEAPF32[$59>>2];
    if ($57) {
     $61 = (+($54|0));
     $ReallocAsyncCtx6 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vidd[$58 & 255]($51,$61,$60);
     $IsAsync18 = ___async;
     if ($IsAsync18) {
      HEAP32[$ReallocAsyncCtx6>>2] = 99;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx6>>2] = 99;
     sp = STACKTOP;
     return;
    } else {
     $ReallocAsyncCtx7 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vidd[$58 & 255]($51,0.0,$60);
     $IsAsync22 = ___async;
     if ($IsAsync22) {
      HEAP32[$ReallocAsyncCtx7>>2] = 100;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx7>>2] = 100;
     sp = STACKTOP;
     return;
    }
   }
   break;
  }
  case 27: {
   $63 = HEAP32[(651952)>>2]|0;
   $64 = HEAP32[35128>>2]|0;
   $ReallocAsyncCtx9 = (_emscripten_realloc_async_context(4)|0);
   FUNCTION_TABLE_vi[$63 & 255]($64);
   $IsAsync30 = ___async;
   if ($IsAsync30) {
    HEAP32[$ReallocAsyncCtx9>>2] = 102;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx9>>2] = 102;
   sp = STACKTOP;
   return;
   break;
  }
  case 31: {
   $69 = HEAP32[(389556)>>2]|0;
   $70 = HEAP32[$69>>2]|0;
   $71 = ($70|0)==(1);
   if ($71) {
    $72 = HEAP32[56>>2]|0;
    $73 = HEAP32[(389576)>>2]|0;
    $74 = (($73|0) / 40)&-1;
    $ReallocAsyncCtx26 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($72,1106,$65,$74);
    $IsAsync97 = ___async;
    if ($IsAsync97) {
     HEAP32[$ReallocAsyncCtx26>>2] = 104;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx26>>2] = 104;
    sp = STACKTOP;
    return;
   } else {
    $75 = HEAP32[48>>2]|0;
    $76 = HEAP32[(389576)>>2]|0;
    $77 = (($76|0) / 40)&-1;
    $ReallocAsyncCtx25 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($75,1106,$65,$77);
    $IsAsync93 = ___async;
    if ($IsAsync93) {
     HEAP32[$ReallocAsyncCtx25>>2] = 105;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx25>>2] = 105;
    sp = STACKTOP;
    return;
   }
   break;
  }
  case 39: {
   $80 = HEAP32[(389556)>>2]|0;
   $81 = HEAP32[$80>>2]|0;
   $82 = ($81|0)==(1);
   if ($82) {
    $83 = HEAP32[56>>2]|0;
    $84 = HEAP32[(389576)>>2]|0;
    $85 = (($84|0) / 40)&-1;
    $ReallocAsyncCtx24 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($83,1105,$78,$85);
    $IsAsync89 = ___async;
    if ($IsAsync89) {
     HEAP32[$ReallocAsyncCtx24>>2] = 106;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx24>>2] = 106;
    sp = STACKTOP;
    return;
   } else {
    $86 = HEAP32[48>>2]|0;
    $87 = HEAP32[(389576)>>2]|0;
    $88 = (($87|0) / 40)&-1;
    $ReallocAsyncCtx23 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($86,1105,$78,$88);
    $IsAsync85 = ___async;
    if ($IsAsync85) {
     HEAP32[$ReallocAsyncCtx23>>2] = 107;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx23>>2] = 107;
    sp = STACKTOP;
    return;
   }
   break;
  }
  case 48: {
   $96 = HEAP32[56>>2]|0;
   $97 = HEAP32[(389576)>>2]|0;
   $98 = (($97|0) / 40)&-1;
   $ReallocAsyncCtx22 = (_emscripten_realloc_async_context(4)|0);
   _move_paddle($96,1106,$92,$98);
   $IsAsync81 = ___async;
   if ($IsAsync81) {
    HEAP32[$ReallocAsyncCtx22>>2] = 108;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx22>>2] = 108;
   sp = STACKTOP;
   return;
   break;
  }
  case 52: {
   $101 = HEAP32[56>>2]|0;
   $102 = HEAP32[(389576)>>2]|0;
   $103 = (($102|0) / 40)&-1;
   $ReallocAsyncCtx21 = (_emscripten_realloc_async_context(4)|0);
   _move_paddle($101,1105,$99,$103);
   $IsAsync77 = ___async;
   if ($IsAsync77) {
    HEAP32[$ReallocAsyncCtx21>>2] = 109;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx21>>2] = 109;
   sp = STACKTOP;
   return;
   break;
  }
  case 56: {
   $ReallocAsyncCtx20 = (_emscripten_realloc_async_context(4)|0);
   _paddle_ai(2);
   $IsAsync73 = ___async;
   if ($IsAsync73) {
    HEAP32[$ReallocAsyncCtx20>>2] = 110;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx20>>2] = 110;
   sp = STACKTOP;
   return;
   break;
  }
  case 60: {
   $113 = HEAP8[104>>0]|0;
   $114 = ($113<<24>>24)==(0);
   if ($114) {
    $ReallocAsyncCtx39 = (_emscripten_realloc_async_context(4)|0);
    $115 = (_collision_ball()|0);
    $IsAsync146 = ___async;
    if ($IsAsync146) {
     HEAP32[$ReallocAsyncCtx39>>2] = 111;
     sp = STACKTOP;
     return;
    }
    $116 = ___async_retval;
    $$expand_i1_val = $115&1;
    HEAP8[$116>>0] = $$expand_i1_val;
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx39>>2] = 111;
    sp = STACKTOP;
    return;
   } else {
    $ReallocAsyncCtx38 = (_emscripten_realloc_async_context(4)|0);
    _update_ball();
    $IsAsync142 = ___async;
    if ($IsAsync142) {
     HEAP32[$ReallocAsyncCtx38>>2] = 112;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx38>>2] = 112;
    sp = STACKTOP;
    return;
   }
   break;
  }
  case 72: {
   $ReallocAsyncCtx32 = (_emscripten_realloc_async_context(4)|0);
   _end_danger();
   $IsAsync120 = ___async;
   if ($IsAsync120) {
    HEAP32[$ReallocAsyncCtx32>>2] = 124;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx32>>2] = 124;
   sp = STACKTOP;
   return;
   break;
  }
  case 78: {
   $166 = HEAP32[(651924)>>2]|0;
   $167 = $161 * 1.2;
   $168 = $167;
   HEAPF32[$159>>2] = $168;
   $169 = ((($149)) + 36|0);
   $170 = +HEAPF32[$169>>2];
   $171 = $170;
   $172 = $171 * 1.2;
   $173 = $172;
   HEAPF32[$169>>2] = $173;
   $ReallocAsyncCtx15 = (_emscripten_realloc_async_context(8)|0);
   FUNCTION_TABLE_vidd[$166 & 255]($149,$168,$173);
   $IsAsync54 = ___async;
   if ($IsAsync54) {
    HEAP32[$ReallocAsyncCtx15>>2] = 125;
    $174 = ((($ReallocAsyncCtx15)) + 4|0);
    HEAP32[$174>>2] = $pad$0;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx15>>2] = 125;
   $174 = ((($ReallocAsyncCtx15)) + 4|0);
   HEAP32[$174>>2] = $pad$0;
   sp = STACKTOP;
   return;
   break;
  }
  case 83: {
   $182 = HEAP32[(651924)>>2]|0;
   $183 = $177 * 1.2;
   $184 = $183;
   HEAPF32[$175>>2] = $184;
   $185 = ((($pad$0)) + 36|0);
   $186 = +HEAPF32[$185>>2];
   $187 = $186;
   $188 = $187 * 1.1000000000000001;
   $189 = $188;
   HEAPF32[$185>>2] = $189;
   $ReallocAsyncCtx16 = (_emscripten_realloc_async_context(8)|0);
   FUNCTION_TABLE_vidd[$182 & 255]($pad$0,$184,$189);
   $IsAsync58 = ___async;
   if ($IsAsync58) {
    HEAP32[$ReallocAsyncCtx16>>2] = 126;
    $190 = ((($ReallocAsyncCtx16)) + 4|0);
    HEAP32[$190>>2] = $pad$0;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx16>>2] = 126;
   $190 = ((($ReallocAsyncCtx16)) + 4|0);
   HEAP32[$190>>2] = $pad$0;
   sp = STACKTOP;
   return;
   break;
  }
  case 100: {
   return;
   break;
  }
 }
}
function _pong__async_cb138($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 // unreachable;
}
function _pong__async_cb139($0) {
 $0 = $0|0;
 var $IsAsync153 = 0, $ReallocAsyncCtx41 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ReallocAsyncCtx41 = (_emscripten_realloc_async_context(4)|0);
 _initialize_ball();
 $IsAsync153 = ___async;
 if (!($IsAsync153)) {
  ___async_unwind = 0;
 }
 HEAP32[$ReallocAsyncCtx41>>2] = 90;
 sp = STACKTOP;
 return;
}
function _pong__async_cb140($0) {
 $0 = $0|0;
 var $$expand_i1_val = 0, $$not7 = 0, $$pr = 0, $$pr32 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0.0, $158 = 0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0, $163 = 0.0, $164 = 0.0, $165 = 0, $166 = 0, $167 = 0.0;
 var $168 = 0.0, $169 = 0, $17 = 0, $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0, $175 = 0, $176 = 0.0, $177 = 0.0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0, $182 = 0, $183 = 0.0, $184 = 0.0, $185 = 0;
 var $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $26 = 0.0, $27 = 0, $28 = 0.0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $IsAsync11 = 0, $IsAsync120 = 0;
 var $IsAsync142 = 0, $IsAsync146 = 0, $IsAsync18 = 0, $IsAsync22 = 0, $IsAsync30 = 0, $IsAsync4 = 0, $IsAsync54 = 0, $IsAsync58 = 0, $IsAsync62 = 0, $IsAsync73 = 0, $IsAsync77 = 0, $IsAsync81 = 0, $IsAsync85 = 0, $IsAsync89 = 0, $IsAsync93 = 0, $IsAsync97 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx16 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx2 = 0;
 var $ReallocAsyncCtx20 = 0, $ReallocAsyncCtx21 = 0, $ReallocAsyncCtx22 = 0, $ReallocAsyncCtx23 = 0, $ReallocAsyncCtx24 = 0, $ReallocAsyncCtx25 = 0, $ReallocAsyncCtx26 = 0, $ReallocAsyncCtx32 = 0, $ReallocAsyncCtx38 = 0, $ReallocAsyncCtx39 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx9 = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond30 = 0, $or$cond42 = 0;
 var $or$cond44 = 0, $or$cond9 = 0, $pad$0 = 0, $paddle2$paddle1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 L2: while(1) {
  $107 = HEAP32[8>>2]|0;
  $108 = ((($107)) + 8|0);
  $109 = +HEAPF32[$108>>2];
  $110 = (~~(($109)));
  HEAP32[382808>>2] = $110;
  $111 = HEAP8[382784>>0]|0;
  $112 = ($111<<24>>24)==(0);
  if ($112) {
   label = 60;
   break;
  }
  $$pr32 = HEAP8[35112>>0]|0;
  $117 = ($$pr32<<24>>24)==(0);
  if (!($117)) {
   $118 = 389544;
   $119 = $118;
   $120 = HEAP32[$119>>2]|0;
   $121 = (($118) + 4)|0;
   $122 = $121;
   $123 = HEAP32[$122>>2]|0;
   $124 = 35120;
   $125 = $124;
   $126 = HEAP32[$125>>2]|0;
   $127 = (($124) + 4)|0;
   $128 = $127;
   $129 = HEAP32[$128>>2]|0;
   $130 = (_i64Subtract(($120|0),($123|0),($126|0),($129|0))|0);
   $131 = tempRet0;
   $132 = ($131>>>0)>(0);
   $133 = ($130>>>0)>(10000000);
   $134 = ($131|0)==(0);
   $135 = $134 & $133;
   $136 = $132 | $135;
   if ($136) {
    label = 72;
    break;
   }
   $137 = HEAP32[(651780)>>2]|0;
   if ((($137|0) == 5) | (($137|0) == 15)) {
    $138 = HEAP32[40>>2]|0;
    $139 = ((($138)) + 4|0);
    $140 = HEAP32[$139>>2]|0;
    $141 = ($140|0)==(4);
    $142 = ($131>>>0)>(0);
    $143 = ($130>>>0)>(5000000);
    $144 = ($131|0)==(0);
    $145 = $144 & $143;
    $146 = $142 | $145;
    $or$cond30 = $146 & $141;
    if ($or$cond30) {
     label = 72;
     break;
    }
   }
  }
  $147 = HEAP8[104>>0]|0;
  $148 = ($147<<24>>24)==(0);
  do {
   if (!($148)) {
    $149 = HEAP32[96>>2]|0;
    $150 = ((($149)) + 44|0);
    $151 = HEAP8[$150>>0]|0;
    $152 = ($151<<24>>24)==(0);
    if (!($152)) {
     $153 = ((($149)) + 8|0);
     $154 = +HEAPF32[$153>>2];
     $155 = HEAP32[(389572)>>2]|0;
     $156 = (($155|0) / 2)&-1;
     $157 = (+($156|0));
     $158 = $154 > $157;
     $paddle2$paddle1 = $158 ? 48 : 56;
     $pad$0 = HEAP32[$paddle2$paddle1>>2]|0;
     $159 = ((($149)) + 40|0);
     $160 = +HEAPF32[$159>>2];
     $161 = $160;
     $162 = (($155|0) / 40)&-1;
     $163 = (+($162|0));
     $164 = $163 * 10.0;
     $165 = $161 < $164;
     if ($165) {
      label = 78;
      break L2;
     }
     HEAP8[$150>>0] = 0;
     $175 = ((($pad$0)) + 40|0);
     $176 = +HEAPF32[$175>>2];
     $177 = $176;
     $178 = (($155|0) / 40)&-1;
     $179 = (+($178|0));
     $180 = $179 * 20.0;
     $181 = $177 < $180;
     if ($181) {
      label = 83;
      break L2;
     }
     $191 = ((($pad$0)) + 44|0);
     HEAP8[$191>>0] = 0;
     $192 = ((($pad$0)) + 4|0);
     $193 = HEAP32[$192>>2]|0;
     if ((($193|0) == 10)) {
      HEAP32[$192>>2] = 11;
      break;
     } else if ((($193|0) == 0)) {
      HEAP32[$192>>2] = 1;
      break;
     } else {
      break;
     }
    }
   }
  } while(0);
  $194 = HEAP8[382784>>0]|0;
  $195 = ($194<<24>>24)==(0);
  if ($195) {
   $196 = 389544;
   $197 = $196;
   $198 = HEAP32[$197>>2]|0;
   $199 = (($196) + 4)|0;
   $200 = $199;
   $201 = HEAP32[$200>>2]|0;
   $237 = $198;$238 = $201;
  } else {
   $202 = HEAP8[104>>0]|0;
   $203 = ($202<<24>>24)==(0);
   $204 = 389544;
   $205 = $204;
   $206 = HEAP32[$205>>2]|0;
   $207 = (($204) + 4)|0;
   $208 = $207;
   $209 = HEAP32[$208>>2]|0;
   $210 = 382800;
   $211 = $210;
   $212 = HEAP32[$211>>2]|0;
   $213 = (($210) + 4)|0;
   $214 = $213;
   $215 = HEAP32[$214>>2]|0;
   $216 = (_i64Subtract(($206|0),($209|0),($212|0),($215|0))|0);
   $217 = tempRet0;
   $218 = ($217>>>0)>(0);
   $219 = ($216>>>0)>(3000000);
   $220 = ($217|0)==(0);
   $221 = $220 & $219;
   $222 = $218 | $221;
   $or$cond42 = $203 & $222;
   $223 = (_i64Subtract(($206|0),($209|0),($212|0),($215|0))|0);
   $224 = tempRet0;
   $225 = ($224>>>0)>(0);
   $226 = ($223>>>0)>(6000000);
   $227 = ($224|0)==(0);
   $228 = $227 & $226;
   $229 = $225 | $228;
   $or$cond44 = $or$cond42 | $229;
   if ($or$cond44) {
    $230 = HEAP32[35096>>2]|0;
    $231 = ($230|0)==(6);
    if ($231) {
     $232 = HEAP32[(389556)>>2]|0;
     $233 = HEAP32[$232>>2]|0;
     $234 = ($233|0)==(1);
     if ($234) {
      $235 = ((($232)) + 4|0);
      HEAP8[$235>>0] = 1;
     } else {
      label = 96;
     }
    } else {
     label = 96;
    }
    if ((label|0) == 96) {
     label = 0;
     HEAP32[(651780)>>2] = 0;
    }
    HEAP8[128>>0] = 0;
    $237 = $206;$238 = $209;
   } else {
    $237 = $206;$238 = $209;
   }
  }
  $236 = HEAP32[216>>2]|0;
  $1 = (($236) + -40000)|0;
  HEAP32[216>>2] = $1;
  $239 = (_i64Add(($237|0),($238|0),40000,0)|0);
  $240 = tempRet0;
  $241 = 389544;
  $242 = $241;
  HEAP32[$242>>2] = $239;
  $243 = (($241) + 4)|0;
  $244 = $243;
  HEAP32[$244>>2] = $240;
  $2 = ($1|0)>(39999);
  if ($2) {
   label = 3;
   break;
  }
  __render();
  $245 = HEAP8[128>>0]|0;
  $$not7 = ($245<<24>>24)==(0);
  $246 = 389544;
  $247 = $246;
  $248 = HEAP32[$247>>2]|0;
  $249 = (($246) + 4)|0;
  $250 = $249;
  $251 = HEAP32[$250>>2]|0;
  $252 = ($248|0)==(0);
  $253 = ($251|0)==(0);
  $254 = $252 & $253;
  $or$cond9 = $$not7 & $254;
  if (!($or$cond9)) {
   label = 100;
   break;
  }
  $3 = HEAP32[(389696)>>2]|0;
  $4 = ($3|0)==(0);
  if (!($4)) {
   HEAP8[128>>0] = 0;
  }
  $5 = (_score_ball()|0);
  if ((($5|0) == 5)) {
   $6 = HEAP8[382784>>0]|0;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    label = 10;
    break;
   }
  } else if (!((($5|0) == 0))) {
   $$pr = HEAP8[382784>>0]|0;
   $62 = ($$pr<<24>>24)==(0);
   if ($62) {
    label = 26;
    break;
   }
  }
  $65 = HEAP32[(394012)>>2]|0;
  $66 = ($65|0)>(0);
  $67 = HEAP8[382784>>0]|0;
  $68 = ($67<<24>>24)==(0);
  $or$cond11 = $66 & $68;
  if ($or$cond11) {
   label = 30;
   break;
  }
  $78 = HEAP32[(394008)>>2]|0;
  $79 = ($78|0)>(0);
  $or$cond13 = $68 & $79;
  if ($or$cond13) {
   label = 38;
   break;
  }
  $89 = HEAP32[(389556)>>2]|0;
  $90 = HEAP32[$89>>2]|0;
  $91 = ($90|0)==(2);
  if ($91) {
   $92 = HEAP32[(390064)>>2]|0;
   $93 = ($92|0)>(0);
   $94 = HEAP8[382784>>0]|0;
   $95 = ($94<<24>>24)==(0);
   $or$cond15 = $93 & $95;
   if ($or$cond15) {
    label = 47;
    break;
   }
   $99 = HEAP32[(390048)>>2]|0;
   $100 = ($99|0)>(0);
   $or$cond17 = $95 & $100;
   if ($or$cond17) {
    label = 51;
    break;
   }
  }
  $104 = HEAP32[(389556)>>2]|0;
  $105 = HEAP32[$104>>2]|0;
  $106 = ($105|0)<(2);
  if ($106) {
   label = 55;
   break;
  }
 }
 switch (label|0) {
  case 3: {
   $ReallocAsyncCtx17 = (_emscripten_realloc_async_context(4)|0);
   __update();
   $IsAsync62 = ___async;
   if ($IsAsync62) {
    HEAP32[$ReallocAsyncCtx17>>2] = 94;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx17>>2] = 94;
   sp = STACKTOP;
   return;
   break;
  }
  case 10: {
   HEAP8[382784>>0] = 1;
   $8 = HEAP32[(389556)>>2]|0;
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(1);
   if ($10) {
    $11 = (_get_score(1)|0);
    $12 = ($11|0)==(5);
    if ($12) {
     $13 = 389544;
     $14 = $13;
     $15 = HEAP32[$14>>2]|0;
     $16 = (($13) + 4)|0;
     $17 = $16;
     $18 = HEAP32[$17>>2]|0;
     $19 = 382800;
     $20 = $19;
     HEAP32[$20>>2] = $15;
     $21 = (($19) + 4)|0;
     $22 = $21;
     HEAP32[$22>>2] = $18;
     $23 = HEAP32[(651920)>>2]|0;
     $24 = HEAP32[8>>2]|0;
     $25 = HEAP32[(389572)>>2]|0;
     $26 = (+($25|0));
     $27 = ((($24)) + 12|0);
     $28 = +HEAPF32[$27>>2];
     $ReallocAsyncCtx2 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vidd[$23 & 255]($24,$26,$28);
     $IsAsync4 = ___async;
     if ($IsAsync4) {
      HEAP32[$ReallocAsyncCtx2>>2] = 95;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx2>>2] = 95;
     sp = STACKTOP;
     return;
    } else {
     HEAP8[382784>>0] = 1;
     $29 = 389544;
     $30 = $29;
     $31 = HEAP32[$30>>2]|0;
     $32 = (($29) + 4)|0;
     $33 = $32;
     $34 = HEAP32[$33>>2]|0;
     $35 = 382800;
     $36 = $35;
     HEAP32[$36>>2] = $31;
     $37 = (($35) + 4)|0;
     $38 = $37;
     HEAP32[$38>>2] = $34;
     $39 = HEAP32[(651952)>>2]|0;
     $40 = HEAP32[35168>>2]|0;
     $ReallocAsyncCtx4 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vi[$39 & 255]($40);
     $IsAsync11 = ___async;
     if ($IsAsync11) {
      HEAP32[$ReallocAsyncCtx4>>2] = 97;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx4>>2] = 97;
     sp = STACKTOP;
     return;
    }
   } else {
    $41 = 389544;
    $42 = $41;
    $43 = HEAP32[$42>>2]|0;
    $44 = (($41) + 4)|0;
    $45 = $44;
    $46 = HEAP32[$45>>2]|0;
    $47 = 382800;
    $48 = $47;
    HEAP32[$48>>2] = $43;
    $49 = (($47) + 4)|0;
    $50 = $49;
    HEAP32[$50>>2] = $46;
    $51 = HEAP32[8>>2]|0;
    $52 = ((($51)) + 8|0);
    $53 = +HEAPF32[$52>>2];
    $54 = HEAP32[(389572)>>2]|0;
    $55 = (($54|0) / 2)&-1;
    $56 = (+($55|0));
    $57 = $53 > $56;
    $58 = HEAP32[(651920)>>2]|0;
    $59 = ((($51)) + 12|0);
    $60 = +HEAPF32[$59>>2];
    if ($57) {
     $61 = (+($54|0));
     $ReallocAsyncCtx6 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vidd[$58 & 255]($51,$61,$60);
     $IsAsync18 = ___async;
     if ($IsAsync18) {
      HEAP32[$ReallocAsyncCtx6>>2] = 99;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx6>>2] = 99;
     sp = STACKTOP;
     return;
    } else {
     $ReallocAsyncCtx7 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vidd[$58 & 255]($51,0.0,$60);
     $IsAsync22 = ___async;
     if ($IsAsync22) {
      HEAP32[$ReallocAsyncCtx7>>2] = 100;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx7>>2] = 100;
     sp = STACKTOP;
     return;
    }
   }
   break;
  }
  case 26: {
   $63 = HEAP32[(651952)>>2]|0;
   $64 = HEAP32[35128>>2]|0;
   $ReallocAsyncCtx9 = (_emscripten_realloc_async_context(4)|0);
   FUNCTION_TABLE_vi[$63 & 255]($64);
   $IsAsync30 = ___async;
   if ($IsAsync30) {
    HEAP32[$ReallocAsyncCtx9>>2] = 102;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx9>>2] = 102;
   sp = STACKTOP;
   return;
   break;
  }
  case 30: {
   $69 = HEAP32[(389556)>>2]|0;
   $70 = HEAP32[$69>>2]|0;
   $71 = ($70|0)==(1);
   if ($71) {
    $72 = HEAP32[56>>2]|0;
    $73 = HEAP32[(389576)>>2]|0;
    $74 = (($73|0) / 40)&-1;
    $ReallocAsyncCtx26 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($72,1106,$65,$74);
    $IsAsync97 = ___async;
    if ($IsAsync97) {
     HEAP32[$ReallocAsyncCtx26>>2] = 104;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx26>>2] = 104;
    sp = STACKTOP;
    return;
   } else {
    $75 = HEAP32[48>>2]|0;
    $76 = HEAP32[(389576)>>2]|0;
    $77 = (($76|0) / 40)&-1;
    $ReallocAsyncCtx25 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($75,1106,$65,$77);
    $IsAsync93 = ___async;
    if ($IsAsync93) {
     HEAP32[$ReallocAsyncCtx25>>2] = 105;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx25>>2] = 105;
    sp = STACKTOP;
    return;
   }
   break;
  }
  case 38: {
   $80 = HEAP32[(389556)>>2]|0;
   $81 = HEAP32[$80>>2]|0;
   $82 = ($81|0)==(1);
   if ($82) {
    $83 = HEAP32[56>>2]|0;
    $84 = HEAP32[(389576)>>2]|0;
    $85 = (($84|0) / 40)&-1;
    $ReallocAsyncCtx24 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($83,1105,$78,$85);
    $IsAsync89 = ___async;
    if ($IsAsync89) {
     HEAP32[$ReallocAsyncCtx24>>2] = 106;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx24>>2] = 106;
    sp = STACKTOP;
    return;
   } else {
    $86 = HEAP32[48>>2]|0;
    $87 = HEAP32[(389576)>>2]|0;
    $88 = (($87|0) / 40)&-1;
    $ReallocAsyncCtx23 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($86,1105,$78,$88);
    $IsAsync85 = ___async;
    if ($IsAsync85) {
     HEAP32[$ReallocAsyncCtx23>>2] = 107;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx23>>2] = 107;
    sp = STACKTOP;
    return;
   }
   break;
  }
  case 47: {
   $96 = HEAP32[56>>2]|0;
   $97 = HEAP32[(389576)>>2]|0;
   $98 = (($97|0) / 40)&-1;
   $ReallocAsyncCtx22 = (_emscripten_realloc_async_context(4)|0);
   _move_paddle($96,1106,$92,$98);
   $IsAsync81 = ___async;
   if ($IsAsync81) {
    HEAP32[$ReallocAsyncCtx22>>2] = 108;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx22>>2] = 108;
   sp = STACKTOP;
   return;
   break;
  }
  case 51: {
   $101 = HEAP32[56>>2]|0;
   $102 = HEAP32[(389576)>>2]|0;
   $103 = (($102|0) / 40)&-1;
   $ReallocAsyncCtx21 = (_emscripten_realloc_async_context(4)|0);
   _move_paddle($101,1105,$99,$103);
   $IsAsync77 = ___async;
   if ($IsAsync77) {
    HEAP32[$ReallocAsyncCtx21>>2] = 109;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx21>>2] = 109;
   sp = STACKTOP;
   return;
   break;
  }
  case 55: {
   $ReallocAsyncCtx20 = (_emscripten_realloc_async_context(4)|0);
   _paddle_ai(2);
   $IsAsync73 = ___async;
   if ($IsAsync73) {
    HEAP32[$ReallocAsyncCtx20>>2] = 110;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx20>>2] = 110;
   sp = STACKTOP;
   return;
   break;
  }
  case 60: {
   $113 = HEAP8[104>>0]|0;
   $114 = ($113<<24>>24)==(0);
   if ($114) {
    $ReallocAsyncCtx39 = (_emscripten_realloc_async_context(4)|0);
    $115 = (_collision_ball()|0);
    $IsAsync146 = ___async;
    if ($IsAsync146) {
     HEAP32[$ReallocAsyncCtx39>>2] = 111;
     sp = STACKTOP;
     return;
    }
    $116 = ___async_retval;
    $$expand_i1_val = $115&1;
    HEAP8[$116>>0] = $$expand_i1_val;
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx39>>2] = 111;
    sp = STACKTOP;
    return;
   } else {
    $ReallocAsyncCtx38 = (_emscripten_realloc_async_context(4)|0);
    _update_ball();
    $IsAsync142 = ___async;
    if ($IsAsync142) {
     HEAP32[$ReallocAsyncCtx38>>2] = 112;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx38>>2] = 112;
    sp = STACKTOP;
    return;
   }
   break;
  }
  case 72: {
   $ReallocAsyncCtx32 = (_emscripten_realloc_async_context(4)|0);
   _end_danger();
   $IsAsync120 = ___async;
   if ($IsAsync120) {
    HEAP32[$ReallocAsyncCtx32>>2] = 124;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx32>>2] = 124;
   sp = STACKTOP;
   return;
   break;
  }
  case 78: {
   $166 = HEAP32[(651924)>>2]|0;
   $167 = $161 * 1.2;
   $168 = $167;
   HEAPF32[$159>>2] = $168;
   $169 = ((($149)) + 36|0);
   $170 = +HEAPF32[$169>>2];
   $171 = $170;
   $172 = $171 * 1.2;
   $173 = $172;
   HEAPF32[$169>>2] = $173;
   $ReallocAsyncCtx15 = (_emscripten_realloc_async_context(8)|0);
   FUNCTION_TABLE_vidd[$166 & 255]($149,$168,$173);
   $IsAsync54 = ___async;
   if ($IsAsync54) {
    HEAP32[$ReallocAsyncCtx15>>2] = 125;
    $174 = ((($ReallocAsyncCtx15)) + 4|0);
    HEAP32[$174>>2] = $pad$0;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx15>>2] = 125;
   $174 = ((($ReallocAsyncCtx15)) + 4|0);
   HEAP32[$174>>2] = $pad$0;
   sp = STACKTOP;
   return;
   break;
  }
  case 83: {
   $182 = HEAP32[(651924)>>2]|0;
   $183 = $177 * 1.2;
   $184 = $183;
   HEAPF32[$175>>2] = $184;
   $185 = ((($pad$0)) + 36|0);
   $186 = +HEAPF32[$185>>2];
   $187 = $186;
   $188 = $187 * 1.1000000000000001;
   $189 = $188;
   HEAPF32[$185>>2] = $189;
   $ReallocAsyncCtx16 = (_emscripten_realloc_async_context(8)|0);
   FUNCTION_TABLE_vidd[$182 & 255]($pad$0,$184,$189);
   $IsAsync58 = ___async;
   if ($IsAsync58) {
    HEAP32[$ReallocAsyncCtx16>>2] = 126;
    $190 = ((($ReallocAsyncCtx16)) + 4|0);
    HEAP32[$190>>2] = $pad$0;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx16>>2] = 126;
   $190 = ((($ReallocAsyncCtx16)) + 4|0);
   HEAP32[$190>>2] = $pad$0;
   sp = STACKTOP;
   return;
   break;
  }
  case 100: {
   return;
   break;
  }
 }
}
function _pong__async_cb141($0) {
 $0 = $0|0;
 var $$expand_i1_val = 0, $$not7 = 0, $$pr = 0, $$pr32 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0.0, $158 = 0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0, $163 = 0.0, $164 = 0.0, $165 = 0, $166 = 0, $167 = 0.0;
 var $168 = 0.0, $169 = 0, $17 = 0, $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0, $175 = 0, $176 = 0.0, $177 = 0.0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0, $182 = 0, $183 = 0.0, $184 = 0.0, $185 = 0;
 var $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $26 = 0.0, $27 = 0, $28 = 0.0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $IsAsync11 = 0, $IsAsync120 = 0;
 var $IsAsync142 = 0, $IsAsync146 = 0, $IsAsync18 = 0, $IsAsync22 = 0, $IsAsync30 = 0, $IsAsync4 = 0, $IsAsync54 = 0, $IsAsync58 = 0, $IsAsync62 = 0, $IsAsync73 = 0, $IsAsync77 = 0, $IsAsync81 = 0, $IsAsync85 = 0, $IsAsync89 = 0, $IsAsync93 = 0, $IsAsync97 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx16 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx2 = 0;
 var $ReallocAsyncCtx20 = 0, $ReallocAsyncCtx21 = 0, $ReallocAsyncCtx22 = 0, $ReallocAsyncCtx23 = 0, $ReallocAsyncCtx24 = 0, $ReallocAsyncCtx25 = 0, $ReallocAsyncCtx26 = 0, $ReallocAsyncCtx32 = 0, $ReallocAsyncCtx38 = 0, $ReallocAsyncCtx39 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx9 = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond30 = 0, $or$cond42 = 0;
 var $or$cond44 = 0, $or$cond9 = 0, $pad$0 = 0, $paddle2$paddle1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 L2: while(1) {
  $104 = HEAP32[(389556)>>2]|0;
  $105 = HEAP32[$104>>2]|0;
  $106 = ($105|0)<(2);
  if ($106) {
   label = 56;
   break;
  }
  $107 = HEAP32[8>>2]|0;
  $108 = ((($107)) + 8|0);
  $109 = +HEAPF32[$108>>2];
  $110 = (~~(($109)));
  HEAP32[382808>>2] = $110;
  $111 = HEAP8[382784>>0]|0;
  $112 = ($111<<24>>24)==(0);
  if ($112) {
   label = 60;
   break;
  }
  $$pr32 = HEAP8[35112>>0]|0;
  $117 = ($$pr32<<24>>24)==(0);
  if (!($117)) {
   $118 = 389544;
   $119 = $118;
   $120 = HEAP32[$119>>2]|0;
   $121 = (($118) + 4)|0;
   $122 = $121;
   $123 = HEAP32[$122>>2]|0;
   $124 = 35120;
   $125 = $124;
   $126 = HEAP32[$125>>2]|0;
   $127 = (($124) + 4)|0;
   $128 = $127;
   $129 = HEAP32[$128>>2]|0;
   $130 = (_i64Subtract(($120|0),($123|0),($126|0),($129|0))|0);
   $131 = tempRet0;
   $132 = ($131>>>0)>(0);
   $133 = ($130>>>0)>(10000000);
   $134 = ($131|0)==(0);
   $135 = $134 & $133;
   $136 = $132 | $135;
   if ($136) {
    label = 72;
    break;
   }
   $137 = HEAP32[(651780)>>2]|0;
   if ((($137|0) == 5) | (($137|0) == 15)) {
    $138 = HEAP32[40>>2]|0;
    $139 = ((($138)) + 4|0);
    $140 = HEAP32[$139>>2]|0;
    $141 = ($140|0)==(4);
    $142 = ($131>>>0)>(0);
    $143 = ($130>>>0)>(5000000);
    $144 = ($131|0)==(0);
    $145 = $144 & $143;
    $146 = $142 | $145;
    $or$cond30 = $146 & $141;
    if ($or$cond30) {
     label = 72;
     break;
    }
   }
  }
  $147 = HEAP8[104>>0]|0;
  $148 = ($147<<24>>24)==(0);
  do {
   if (!($148)) {
    $149 = HEAP32[96>>2]|0;
    $150 = ((($149)) + 44|0);
    $151 = HEAP8[$150>>0]|0;
    $152 = ($151<<24>>24)==(0);
    if (!($152)) {
     $153 = ((($149)) + 8|0);
     $154 = +HEAPF32[$153>>2];
     $155 = HEAP32[(389572)>>2]|0;
     $156 = (($155|0) / 2)&-1;
     $157 = (+($156|0));
     $158 = $154 > $157;
     $paddle2$paddle1 = $158 ? 48 : 56;
     $pad$0 = HEAP32[$paddle2$paddle1>>2]|0;
     $159 = ((($149)) + 40|0);
     $160 = +HEAPF32[$159>>2];
     $161 = $160;
     $162 = (($155|0) / 40)&-1;
     $163 = (+($162|0));
     $164 = $163 * 10.0;
     $165 = $161 < $164;
     if ($165) {
      label = 78;
      break L2;
     }
     HEAP8[$150>>0] = 0;
     $175 = ((($pad$0)) + 40|0);
     $176 = +HEAPF32[$175>>2];
     $177 = $176;
     $178 = (($155|0) / 40)&-1;
     $179 = (+($178|0));
     $180 = $179 * 20.0;
     $181 = $177 < $180;
     if ($181) {
      label = 83;
      break L2;
     }
     $191 = ((($pad$0)) + 44|0);
     HEAP8[$191>>0] = 0;
     $192 = ((($pad$0)) + 4|0);
     $193 = HEAP32[$192>>2]|0;
     if ((($193|0) == 10)) {
      HEAP32[$192>>2] = 11;
      break;
     } else if ((($193|0) == 0)) {
      HEAP32[$192>>2] = 1;
      break;
     } else {
      break;
     }
    }
   }
  } while(0);
  $194 = HEAP8[382784>>0]|0;
  $195 = ($194<<24>>24)==(0);
  if ($195) {
   $196 = 389544;
   $197 = $196;
   $198 = HEAP32[$197>>2]|0;
   $199 = (($196) + 4)|0;
   $200 = $199;
   $201 = HEAP32[$200>>2]|0;
   $237 = $198;$238 = $201;
  } else {
   $202 = HEAP8[104>>0]|0;
   $203 = ($202<<24>>24)==(0);
   $204 = 389544;
   $205 = $204;
   $206 = HEAP32[$205>>2]|0;
   $207 = (($204) + 4)|0;
   $208 = $207;
   $209 = HEAP32[$208>>2]|0;
   $210 = 382800;
   $211 = $210;
   $212 = HEAP32[$211>>2]|0;
   $213 = (($210) + 4)|0;
   $214 = $213;
   $215 = HEAP32[$214>>2]|0;
   $216 = (_i64Subtract(($206|0),($209|0),($212|0),($215|0))|0);
   $217 = tempRet0;
   $218 = ($217>>>0)>(0);
   $219 = ($216>>>0)>(3000000);
   $220 = ($217|0)==(0);
   $221 = $220 & $219;
   $222 = $218 | $221;
   $or$cond42 = $203 & $222;
   $223 = (_i64Subtract(($206|0),($209|0),($212|0),($215|0))|0);
   $224 = tempRet0;
   $225 = ($224>>>0)>(0);
   $226 = ($223>>>0)>(6000000);
   $227 = ($224|0)==(0);
   $228 = $227 & $226;
   $229 = $225 | $228;
   $or$cond44 = $or$cond42 | $229;
   if ($or$cond44) {
    $230 = HEAP32[35096>>2]|0;
    $231 = ($230|0)==(6);
    if ($231) {
     $232 = HEAP32[(389556)>>2]|0;
     $233 = HEAP32[$232>>2]|0;
     $234 = ($233|0)==(1);
     if ($234) {
      $235 = ((($232)) + 4|0);
      HEAP8[$235>>0] = 1;
     } else {
      label = 96;
     }
    } else {
     label = 96;
    }
    if ((label|0) == 96) {
     label = 0;
     HEAP32[(651780)>>2] = 0;
    }
    HEAP8[128>>0] = 0;
    $237 = $206;$238 = $209;
   } else {
    $237 = $206;$238 = $209;
   }
  }
  $236 = HEAP32[216>>2]|0;
  $1 = (($236) + -40000)|0;
  HEAP32[216>>2] = $1;
  $239 = (_i64Add(($237|0),($238|0),40000,0)|0);
  $240 = tempRet0;
  $241 = 389544;
  $242 = $241;
  HEAP32[$242>>2] = $239;
  $243 = (($241) + 4)|0;
  $244 = $243;
  HEAP32[$244>>2] = $240;
  $2 = ($1|0)>(39999);
  if ($2) {
   label = 3;
   break;
  }
  __render();
  $245 = HEAP8[128>>0]|0;
  $$not7 = ($245<<24>>24)==(0);
  $246 = 389544;
  $247 = $246;
  $248 = HEAP32[$247>>2]|0;
  $249 = (($246) + 4)|0;
  $250 = $249;
  $251 = HEAP32[$250>>2]|0;
  $252 = ($248|0)==(0);
  $253 = ($251|0)==(0);
  $254 = $252 & $253;
  $or$cond9 = $$not7 & $254;
  if (!($or$cond9)) {
   label = 100;
   break;
  }
  $3 = HEAP32[(389696)>>2]|0;
  $4 = ($3|0)==(0);
  if (!($4)) {
   HEAP8[128>>0] = 0;
  }
  $5 = (_score_ball()|0);
  if ((($5|0) == 5)) {
   $6 = HEAP8[382784>>0]|0;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    label = 10;
    break;
   }
  } else if (!((($5|0) == 0))) {
   $$pr = HEAP8[382784>>0]|0;
   $62 = ($$pr<<24>>24)==(0);
   if ($62) {
    label = 26;
    break;
   }
  }
  $65 = HEAP32[(394012)>>2]|0;
  $66 = ($65|0)>(0);
  $67 = HEAP8[382784>>0]|0;
  $68 = ($67<<24>>24)==(0);
  $or$cond11 = $66 & $68;
  if ($or$cond11) {
   label = 30;
   break;
  }
  $78 = HEAP32[(394008)>>2]|0;
  $79 = ($78|0)>(0);
  $or$cond13 = $68 & $79;
  if ($or$cond13) {
   label = 38;
   break;
  }
  $89 = HEAP32[(389556)>>2]|0;
  $90 = HEAP32[$89>>2]|0;
  $91 = ($90|0)==(2);
  if (!($91)) {
   continue;
  }
  $92 = HEAP32[(390064)>>2]|0;
  $93 = ($92|0)>(0);
  $94 = HEAP8[382784>>0]|0;
  $95 = ($94<<24>>24)==(0);
  $or$cond15 = $93 & $95;
  if ($or$cond15) {
   label = 47;
   break;
  }
  $99 = HEAP32[(390048)>>2]|0;
  $100 = ($99|0)>(0);
  $or$cond17 = $95 & $100;
  if ($or$cond17) {
   label = 51;
   break;
  }
 }
 switch (label|0) {
  case 3: {
   $ReallocAsyncCtx17 = (_emscripten_realloc_async_context(4)|0);
   __update();
   $IsAsync62 = ___async;
   if ($IsAsync62) {
    HEAP32[$ReallocAsyncCtx17>>2] = 94;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx17>>2] = 94;
   sp = STACKTOP;
   return;
   break;
  }
  case 10: {
   HEAP8[382784>>0] = 1;
   $8 = HEAP32[(389556)>>2]|0;
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(1);
   if ($10) {
    $11 = (_get_score(1)|0);
    $12 = ($11|0)==(5);
    if ($12) {
     $13 = 389544;
     $14 = $13;
     $15 = HEAP32[$14>>2]|0;
     $16 = (($13) + 4)|0;
     $17 = $16;
     $18 = HEAP32[$17>>2]|0;
     $19 = 382800;
     $20 = $19;
     HEAP32[$20>>2] = $15;
     $21 = (($19) + 4)|0;
     $22 = $21;
     HEAP32[$22>>2] = $18;
     $23 = HEAP32[(651920)>>2]|0;
     $24 = HEAP32[8>>2]|0;
     $25 = HEAP32[(389572)>>2]|0;
     $26 = (+($25|0));
     $27 = ((($24)) + 12|0);
     $28 = +HEAPF32[$27>>2];
     $ReallocAsyncCtx2 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vidd[$23 & 255]($24,$26,$28);
     $IsAsync4 = ___async;
     if ($IsAsync4) {
      HEAP32[$ReallocAsyncCtx2>>2] = 95;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx2>>2] = 95;
     sp = STACKTOP;
     return;
    } else {
     HEAP8[382784>>0] = 1;
     $29 = 389544;
     $30 = $29;
     $31 = HEAP32[$30>>2]|0;
     $32 = (($29) + 4)|0;
     $33 = $32;
     $34 = HEAP32[$33>>2]|0;
     $35 = 382800;
     $36 = $35;
     HEAP32[$36>>2] = $31;
     $37 = (($35) + 4)|0;
     $38 = $37;
     HEAP32[$38>>2] = $34;
     $39 = HEAP32[(651952)>>2]|0;
     $40 = HEAP32[35168>>2]|0;
     $ReallocAsyncCtx4 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vi[$39 & 255]($40);
     $IsAsync11 = ___async;
     if ($IsAsync11) {
      HEAP32[$ReallocAsyncCtx4>>2] = 97;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx4>>2] = 97;
     sp = STACKTOP;
     return;
    }
   } else {
    $41 = 389544;
    $42 = $41;
    $43 = HEAP32[$42>>2]|0;
    $44 = (($41) + 4)|0;
    $45 = $44;
    $46 = HEAP32[$45>>2]|0;
    $47 = 382800;
    $48 = $47;
    HEAP32[$48>>2] = $43;
    $49 = (($47) + 4)|0;
    $50 = $49;
    HEAP32[$50>>2] = $46;
    $51 = HEAP32[8>>2]|0;
    $52 = ((($51)) + 8|0);
    $53 = +HEAPF32[$52>>2];
    $54 = HEAP32[(389572)>>2]|0;
    $55 = (($54|0) / 2)&-1;
    $56 = (+($55|0));
    $57 = $53 > $56;
    $58 = HEAP32[(651920)>>2]|0;
    $59 = ((($51)) + 12|0);
    $60 = +HEAPF32[$59>>2];
    if ($57) {
     $61 = (+($54|0));
     $ReallocAsyncCtx6 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vidd[$58 & 255]($51,$61,$60);
     $IsAsync18 = ___async;
     if ($IsAsync18) {
      HEAP32[$ReallocAsyncCtx6>>2] = 99;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx6>>2] = 99;
     sp = STACKTOP;
     return;
    } else {
     $ReallocAsyncCtx7 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vidd[$58 & 255]($51,0.0,$60);
     $IsAsync22 = ___async;
     if ($IsAsync22) {
      HEAP32[$ReallocAsyncCtx7>>2] = 100;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx7>>2] = 100;
     sp = STACKTOP;
     return;
    }
   }
   break;
  }
  case 26: {
   $63 = HEAP32[(651952)>>2]|0;
   $64 = HEAP32[35128>>2]|0;
   $ReallocAsyncCtx9 = (_emscripten_realloc_async_context(4)|0);
   FUNCTION_TABLE_vi[$63 & 255]($64);
   $IsAsync30 = ___async;
   if ($IsAsync30) {
    HEAP32[$ReallocAsyncCtx9>>2] = 102;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx9>>2] = 102;
   sp = STACKTOP;
   return;
   break;
  }
  case 30: {
   $69 = HEAP32[(389556)>>2]|0;
   $70 = HEAP32[$69>>2]|0;
   $71 = ($70|0)==(1);
   if ($71) {
    $72 = HEAP32[56>>2]|0;
    $73 = HEAP32[(389576)>>2]|0;
    $74 = (($73|0) / 40)&-1;
    $ReallocAsyncCtx26 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($72,1106,$65,$74);
    $IsAsync97 = ___async;
    if ($IsAsync97) {
     HEAP32[$ReallocAsyncCtx26>>2] = 104;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx26>>2] = 104;
    sp = STACKTOP;
    return;
   } else {
    $75 = HEAP32[48>>2]|0;
    $76 = HEAP32[(389576)>>2]|0;
    $77 = (($76|0) / 40)&-1;
    $ReallocAsyncCtx25 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($75,1106,$65,$77);
    $IsAsync93 = ___async;
    if ($IsAsync93) {
     HEAP32[$ReallocAsyncCtx25>>2] = 105;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx25>>2] = 105;
    sp = STACKTOP;
    return;
   }
   break;
  }
  case 38: {
   $80 = HEAP32[(389556)>>2]|0;
   $81 = HEAP32[$80>>2]|0;
   $82 = ($81|0)==(1);
   if ($82) {
    $83 = HEAP32[56>>2]|0;
    $84 = HEAP32[(389576)>>2]|0;
    $85 = (($84|0) / 40)&-1;
    $ReallocAsyncCtx24 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($83,1105,$78,$85);
    $IsAsync89 = ___async;
    if ($IsAsync89) {
     HEAP32[$ReallocAsyncCtx24>>2] = 106;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx24>>2] = 106;
    sp = STACKTOP;
    return;
   } else {
    $86 = HEAP32[48>>2]|0;
    $87 = HEAP32[(389576)>>2]|0;
    $88 = (($87|0) / 40)&-1;
    $ReallocAsyncCtx23 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($86,1105,$78,$88);
    $IsAsync85 = ___async;
    if ($IsAsync85) {
     HEAP32[$ReallocAsyncCtx23>>2] = 107;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx23>>2] = 107;
    sp = STACKTOP;
    return;
   }
   break;
  }
  case 47: {
   $96 = HEAP32[56>>2]|0;
   $97 = HEAP32[(389576)>>2]|0;
   $98 = (($97|0) / 40)&-1;
   $ReallocAsyncCtx22 = (_emscripten_realloc_async_context(4)|0);
   _move_paddle($96,1106,$92,$98);
   $IsAsync81 = ___async;
   if ($IsAsync81) {
    HEAP32[$ReallocAsyncCtx22>>2] = 108;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx22>>2] = 108;
   sp = STACKTOP;
   return;
   break;
  }
  case 51: {
   $101 = HEAP32[56>>2]|0;
   $102 = HEAP32[(389576)>>2]|0;
   $103 = (($102|0) / 40)&-1;
   $ReallocAsyncCtx21 = (_emscripten_realloc_async_context(4)|0);
   _move_paddle($101,1105,$99,$103);
   $IsAsync77 = ___async;
   if ($IsAsync77) {
    HEAP32[$ReallocAsyncCtx21>>2] = 109;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx21>>2] = 109;
   sp = STACKTOP;
   return;
   break;
  }
  case 56: {
   $ReallocAsyncCtx20 = (_emscripten_realloc_async_context(4)|0);
   _paddle_ai(2);
   $IsAsync73 = ___async;
   if ($IsAsync73) {
    HEAP32[$ReallocAsyncCtx20>>2] = 110;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx20>>2] = 110;
   sp = STACKTOP;
   return;
   break;
  }
  case 60: {
   $113 = HEAP8[104>>0]|0;
   $114 = ($113<<24>>24)==(0);
   if ($114) {
    $ReallocAsyncCtx39 = (_emscripten_realloc_async_context(4)|0);
    $115 = (_collision_ball()|0);
    $IsAsync146 = ___async;
    if ($IsAsync146) {
     HEAP32[$ReallocAsyncCtx39>>2] = 111;
     sp = STACKTOP;
     return;
    }
    $116 = ___async_retval;
    $$expand_i1_val = $115&1;
    HEAP8[$116>>0] = $$expand_i1_val;
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx39>>2] = 111;
    sp = STACKTOP;
    return;
   } else {
    $ReallocAsyncCtx38 = (_emscripten_realloc_async_context(4)|0);
    _update_ball();
    $IsAsync142 = ___async;
    if ($IsAsync142) {
     HEAP32[$ReallocAsyncCtx38>>2] = 112;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx38>>2] = 112;
    sp = STACKTOP;
    return;
   }
   break;
  }
  case 72: {
   $ReallocAsyncCtx32 = (_emscripten_realloc_async_context(4)|0);
   _end_danger();
   $IsAsync120 = ___async;
   if ($IsAsync120) {
    HEAP32[$ReallocAsyncCtx32>>2] = 124;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx32>>2] = 124;
   sp = STACKTOP;
   return;
   break;
  }
  case 78: {
   $166 = HEAP32[(651924)>>2]|0;
   $167 = $161 * 1.2;
   $168 = $167;
   HEAPF32[$159>>2] = $168;
   $169 = ((($149)) + 36|0);
   $170 = +HEAPF32[$169>>2];
   $171 = $170;
   $172 = $171 * 1.2;
   $173 = $172;
   HEAPF32[$169>>2] = $173;
   $ReallocAsyncCtx15 = (_emscripten_realloc_async_context(8)|0);
   FUNCTION_TABLE_vidd[$166 & 255]($149,$168,$173);
   $IsAsync54 = ___async;
   if ($IsAsync54) {
    HEAP32[$ReallocAsyncCtx15>>2] = 125;
    $174 = ((($ReallocAsyncCtx15)) + 4|0);
    HEAP32[$174>>2] = $pad$0;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx15>>2] = 125;
   $174 = ((($ReallocAsyncCtx15)) + 4|0);
   HEAP32[$174>>2] = $pad$0;
   sp = STACKTOP;
   return;
   break;
  }
  case 83: {
   $182 = HEAP32[(651924)>>2]|0;
   $183 = $177 * 1.2;
   $184 = $183;
   HEAPF32[$175>>2] = $184;
   $185 = ((($pad$0)) + 36|0);
   $186 = +HEAPF32[$185>>2];
   $187 = $186;
   $188 = $187 * 1.1000000000000001;
   $189 = $188;
   HEAPF32[$185>>2] = $189;
   $ReallocAsyncCtx16 = (_emscripten_realloc_async_context(8)|0);
   FUNCTION_TABLE_vidd[$182 & 255]($pad$0,$184,$189);
   $IsAsync58 = ___async;
   if ($IsAsync58) {
    HEAP32[$ReallocAsyncCtx16>>2] = 126;
    $190 = ((($ReallocAsyncCtx16)) + 4|0);
    HEAP32[$190>>2] = $pad$0;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx16>>2] = 126;
   $190 = ((($ReallocAsyncCtx16)) + 4|0);
   HEAP32[$190>>2] = $pad$0;
   sp = STACKTOP;
   return;
   break;
  }
  case 100: {
   return;
   break;
  }
 }
}
function _pong__async_cb142($0) {
 $0 = $0|0;
 var $$expand_i1_val = 0, $$not7 = 0, $$pr = 0, $$pr32 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0.0, $158 = 0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0, $163 = 0.0, $164 = 0.0, $165 = 0, $166 = 0, $167 = 0.0;
 var $168 = 0.0, $169 = 0, $17 = 0, $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0, $175 = 0, $176 = 0.0, $177 = 0.0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0, $182 = 0, $183 = 0.0, $184 = 0.0, $185 = 0;
 var $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $26 = 0.0, $27 = 0, $28 = 0.0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $IsAsync11 = 0, $IsAsync120 = 0;
 var $IsAsync142 = 0, $IsAsync146 = 0, $IsAsync18 = 0, $IsAsync22 = 0, $IsAsync30 = 0, $IsAsync4 = 0, $IsAsync54 = 0, $IsAsync58 = 0, $IsAsync62 = 0, $IsAsync73 = 0, $IsAsync77 = 0, $IsAsync81 = 0, $IsAsync85 = 0, $IsAsync89 = 0, $IsAsync93 = 0, $IsAsync97 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx16 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx2 = 0;
 var $ReallocAsyncCtx20 = 0, $ReallocAsyncCtx21 = 0, $ReallocAsyncCtx22 = 0, $ReallocAsyncCtx23 = 0, $ReallocAsyncCtx24 = 0, $ReallocAsyncCtx25 = 0, $ReallocAsyncCtx26 = 0, $ReallocAsyncCtx32 = 0, $ReallocAsyncCtx38 = 0, $ReallocAsyncCtx39 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx9 = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond30 = 0, $or$cond42 = 0;
 var $or$cond44 = 0, $or$cond9 = 0, $pad$0 = 0, $paddle2$paddle1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 L2: while(1) {
  $104 = HEAP32[(389556)>>2]|0;
  $105 = HEAP32[$104>>2]|0;
  $106 = ($105|0)<(2);
  if ($106) {
   label = 56;
   break;
  }
  $107 = HEAP32[8>>2]|0;
  $108 = ((($107)) + 8|0);
  $109 = +HEAPF32[$108>>2];
  $110 = (~~(($109)));
  HEAP32[382808>>2] = $110;
  $111 = HEAP8[382784>>0]|0;
  $112 = ($111<<24>>24)==(0);
  if ($112) {
   label = 60;
   break;
  }
  $$pr32 = HEAP8[35112>>0]|0;
  $117 = ($$pr32<<24>>24)==(0);
  if (!($117)) {
   $118 = 389544;
   $119 = $118;
   $120 = HEAP32[$119>>2]|0;
   $121 = (($118) + 4)|0;
   $122 = $121;
   $123 = HEAP32[$122>>2]|0;
   $124 = 35120;
   $125 = $124;
   $126 = HEAP32[$125>>2]|0;
   $127 = (($124) + 4)|0;
   $128 = $127;
   $129 = HEAP32[$128>>2]|0;
   $130 = (_i64Subtract(($120|0),($123|0),($126|0),($129|0))|0);
   $131 = tempRet0;
   $132 = ($131>>>0)>(0);
   $133 = ($130>>>0)>(10000000);
   $134 = ($131|0)==(0);
   $135 = $134 & $133;
   $136 = $132 | $135;
   if ($136) {
    label = 72;
    break;
   }
   $137 = HEAP32[(651780)>>2]|0;
   if ((($137|0) == 5) | (($137|0) == 15)) {
    $138 = HEAP32[40>>2]|0;
    $139 = ((($138)) + 4|0);
    $140 = HEAP32[$139>>2]|0;
    $141 = ($140|0)==(4);
    $142 = ($131>>>0)>(0);
    $143 = ($130>>>0)>(5000000);
    $144 = ($131|0)==(0);
    $145 = $144 & $143;
    $146 = $142 | $145;
    $or$cond30 = $146 & $141;
    if ($or$cond30) {
     label = 72;
     break;
    }
   }
  }
  $147 = HEAP8[104>>0]|0;
  $148 = ($147<<24>>24)==(0);
  do {
   if (!($148)) {
    $149 = HEAP32[96>>2]|0;
    $150 = ((($149)) + 44|0);
    $151 = HEAP8[$150>>0]|0;
    $152 = ($151<<24>>24)==(0);
    if (!($152)) {
     $153 = ((($149)) + 8|0);
     $154 = +HEAPF32[$153>>2];
     $155 = HEAP32[(389572)>>2]|0;
     $156 = (($155|0) / 2)&-1;
     $157 = (+($156|0));
     $158 = $154 > $157;
     $paddle2$paddle1 = $158 ? 48 : 56;
     $pad$0 = HEAP32[$paddle2$paddle1>>2]|0;
     $159 = ((($149)) + 40|0);
     $160 = +HEAPF32[$159>>2];
     $161 = $160;
     $162 = (($155|0) / 40)&-1;
     $163 = (+($162|0));
     $164 = $163 * 10.0;
     $165 = $161 < $164;
     if ($165) {
      label = 78;
      break L2;
     }
     HEAP8[$150>>0] = 0;
     $175 = ((($pad$0)) + 40|0);
     $176 = +HEAPF32[$175>>2];
     $177 = $176;
     $178 = (($155|0) / 40)&-1;
     $179 = (+($178|0));
     $180 = $179 * 20.0;
     $181 = $177 < $180;
     if ($181) {
      label = 83;
      break L2;
     }
     $191 = ((($pad$0)) + 44|0);
     HEAP8[$191>>0] = 0;
     $192 = ((($pad$0)) + 4|0);
     $193 = HEAP32[$192>>2]|0;
     if ((($193|0) == 0)) {
      HEAP32[$192>>2] = 1;
      break;
     } else if ((($193|0) == 10)) {
      HEAP32[$192>>2] = 11;
      break;
     } else {
      break;
     }
    }
   }
  } while(0);
  $194 = HEAP8[382784>>0]|0;
  $195 = ($194<<24>>24)==(0);
  if ($195) {
   $196 = 389544;
   $197 = $196;
   $198 = HEAP32[$197>>2]|0;
   $199 = (($196) + 4)|0;
   $200 = $199;
   $201 = HEAP32[$200>>2]|0;
   $237 = $198;$238 = $201;
  } else {
   $202 = HEAP8[104>>0]|0;
   $203 = ($202<<24>>24)==(0);
   $204 = 389544;
   $205 = $204;
   $206 = HEAP32[$205>>2]|0;
   $207 = (($204) + 4)|0;
   $208 = $207;
   $209 = HEAP32[$208>>2]|0;
   $210 = 382800;
   $211 = $210;
   $212 = HEAP32[$211>>2]|0;
   $213 = (($210) + 4)|0;
   $214 = $213;
   $215 = HEAP32[$214>>2]|0;
   $216 = (_i64Subtract(($206|0),($209|0),($212|0),($215|0))|0);
   $217 = tempRet0;
   $218 = ($217>>>0)>(0);
   $219 = ($216>>>0)>(3000000);
   $220 = ($217|0)==(0);
   $221 = $220 & $219;
   $222 = $218 | $221;
   $or$cond42 = $203 & $222;
   $223 = (_i64Subtract(($206|0),($209|0),($212|0),($215|0))|0);
   $224 = tempRet0;
   $225 = ($224>>>0)>(0);
   $226 = ($223>>>0)>(6000000);
   $227 = ($224|0)==(0);
   $228 = $227 & $226;
   $229 = $225 | $228;
   $or$cond44 = $or$cond42 | $229;
   if ($or$cond44) {
    $230 = HEAP32[35096>>2]|0;
    $231 = ($230|0)==(6);
    if ($231) {
     $232 = HEAP32[(389556)>>2]|0;
     $233 = HEAP32[$232>>2]|0;
     $234 = ($233|0)==(1);
     if ($234) {
      $235 = ((($232)) + 4|0);
      HEAP8[$235>>0] = 1;
     } else {
      label = 96;
     }
    } else {
     label = 96;
    }
    if ((label|0) == 96) {
     label = 0;
     HEAP32[(651780)>>2] = 0;
    }
    HEAP8[128>>0] = 0;
    $237 = $206;$238 = $209;
   } else {
    $237 = $206;$238 = $209;
   }
  }
  $236 = HEAP32[216>>2]|0;
  $1 = (($236) + -40000)|0;
  HEAP32[216>>2] = $1;
  $239 = (_i64Add(($237|0),($238|0),40000,0)|0);
  $240 = tempRet0;
  $241 = 389544;
  $242 = $241;
  HEAP32[$242>>2] = $239;
  $243 = (($241) + 4)|0;
  $244 = $243;
  HEAP32[$244>>2] = $240;
  $2 = ($1|0)>(39999);
  if ($2) {
   label = 3;
   break;
  }
  __render();
  $245 = HEAP8[128>>0]|0;
  $$not7 = ($245<<24>>24)==(0);
  $246 = 389544;
  $247 = $246;
  $248 = HEAP32[$247>>2]|0;
  $249 = (($246) + 4)|0;
  $250 = $249;
  $251 = HEAP32[$250>>2]|0;
  $252 = ($248|0)==(0);
  $253 = ($251|0)==(0);
  $254 = $252 & $253;
  $or$cond9 = $$not7 & $254;
  if (!($or$cond9)) {
   label = 100;
   break;
  }
  $3 = HEAP32[(389696)>>2]|0;
  $4 = ($3|0)==(0);
  if (!($4)) {
   HEAP8[128>>0] = 0;
  }
  $5 = (_score_ball()|0);
  if ((($5|0) == 5)) {
   $6 = HEAP8[382784>>0]|0;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    label = 10;
    break;
   }
  } else if (!((($5|0) == 0))) {
   $$pr = HEAP8[382784>>0]|0;
   $62 = ($$pr<<24>>24)==(0);
   if ($62) {
    label = 26;
    break;
   }
  }
  $65 = HEAP32[(394012)>>2]|0;
  $66 = ($65|0)>(0);
  $67 = HEAP8[382784>>0]|0;
  $68 = ($67<<24>>24)==(0);
  $or$cond11 = $66 & $68;
  if ($or$cond11) {
   label = 30;
   break;
  }
  $78 = HEAP32[(394008)>>2]|0;
  $79 = ($78|0)>(0);
  $or$cond13 = $68 & $79;
  if ($or$cond13) {
   label = 38;
   break;
  }
  $89 = HEAP32[(389556)>>2]|0;
  $90 = HEAP32[$89>>2]|0;
  $91 = ($90|0)==(2);
  if (!($91)) {
   continue;
  }
  $92 = HEAP32[(390064)>>2]|0;
  $93 = ($92|0)>(0);
  $94 = HEAP8[382784>>0]|0;
  $95 = ($94<<24>>24)==(0);
  $or$cond15 = $93 & $95;
  if ($or$cond15) {
   label = 47;
   break;
  }
  $99 = HEAP32[(390048)>>2]|0;
  $100 = ($99|0)>(0);
  $or$cond17 = $95 & $100;
  if ($or$cond17) {
   label = 52;
   break;
  }
 }
 switch (label|0) {
  case 3: {
   $ReallocAsyncCtx17 = (_emscripten_realloc_async_context(4)|0);
   __update();
   $IsAsync62 = ___async;
   if ($IsAsync62) {
    HEAP32[$ReallocAsyncCtx17>>2] = 94;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx17>>2] = 94;
   sp = STACKTOP;
   return;
   break;
  }
  case 10: {
   HEAP8[382784>>0] = 1;
   $8 = HEAP32[(389556)>>2]|0;
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(1);
   if ($10) {
    $11 = (_get_score(1)|0);
    $12 = ($11|0)==(5);
    if ($12) {
     $13 = 389544;
     $14 = $13;
     $15 = HEAP32[$14>>2]|0;
     $16 = (($13) + 4)|0;
     $17 = $16;
     $18 = HEAP32[$17>>2]|0;
     $19 = 382800;
     $20 = $19;
     HEAP32[$20>>2] = $15;
     $21 = (($19) + 4)|0;
     $22 = $21;
     HEAP32[$22>>2] = $18;
     $23 = HEAP32[(651920)>>2]|0;
     $24 = HEAP32[8>>2]|0;
     $25 = HEAP32[(389572)>>2]|0;
     $26 = (+($25|0));
     $27 = ((($24)) + 12|0);
     $28 = +HEAPF32[$27>>2];
     $ReallocAsyncCtx2 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vidd[$23 & 255]($24,$26,$28);
     $IsAsync4 = ___async;
     if ($IsAsync4) {
      HEAP32[$ReallocAsyncCtx2>>2] = 95;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx2>>2] = 95;
     sp = STACKTOP;
     return;
    } else {
     HEAP8[382784>>0] = 1;
     $29 = 389544;
     $30 = $29;
     $31 = HEAP32[$30>>2]|0;
     $32 = (($29) + 4)|0;
     $33 = $32;
     $34 = HEAP32[$33>>2]|0;
     $35 = 382800;
     $36 = $35;
     HEAP32[$36>>2] = $31;
     $37 = (($35) + 4)|0;
     $38 = $37;
     HEAP32[$38>>2] = $34;
     $39 = HEAP32[(651952)>>2]|0;
     $40 = HEAP32[35168>>2]|0;
     $ReallocAsyncCtx4 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vi[$39 & 255]($40);
     $IsAsync11 = ___async;
     if ($IsAsync11) {
      HEAP32[$ReallocAsyncCtx4>>2] = 97;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx4>>2] = 97;
     sp = STACKTOP;
     return;
    }
   } else {
    $41 = 389544;
    $42 = $41;
    $43 = HEAP32[$42>>2]|0;
    $44 = (($41) + 4)|0;
    $45 = $44;
    $46 = HEAP32[$45>>2]|0;
    $47 = 382800;
    $48 = $47;
    HEAP32[$48>>2] = $43;
    $49 = (($47) + 4)|0;
    $50 = $49;
    HEAP32[$50>>2] = $46;
    $51 = HEAP32[8>>2]|0;
    $52 = ((($51)) + 8|0);
    $53 = +HEAPF32[$52>>2];
    $54 = HEAP32[(389572)>>2]|0;
    $55 = (($54|0) / 2)&-1;
    $56 = (+($55|0));
    $57 = $53 > $56;
    $58 = HEAP32[(651920)>>2]|0;
    $59 = ((($51)) + 12|0);
    $60 = +HEAPF32[$59>>2];
    if ($57) {
     $61 = (+($54|0));
     $ReallocAsyncCtx6 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vidd[$58 & 255]($51,$61,$60);
     $IsAsync18 = ___async;
     if ($IsAsync18) {
      HEAP32[$ReallocAsyncCtx6>>2] = 99;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx6>>2] = 99;
     sp = STACKTOP;
     return;
    } else {
     $ReallocAsyncCtx7 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vidd[$58 & 255]($51,0.0,$60);
     $IsAsync22 = ___async;
     if ($IsAsync22) {
      HEAP32[$ReallocAsyncCtx7>>2] = 100;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx7>>2] = 100;
     sp = STACKTOP;
     return;
    }
   }
   break;
  }
  case 26: {
   $63 = HEAP32[(651952)>>2]|0;
   $64 = HEAP32[35128>>2]|0;
   $ReallocAsyncCtx9 = (_emscripten_realloc_async_context(4)|0);
   FUNCTION_TABLE_vi[$63 & 255]($64);
   $IsAsync30 = ___async;
   if ($IsAsync30) {
    HEAP32[$ReallocAsyncCtx9>>2] = 102;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx9>>2] = 102;
   sp = STACKTOP;
   return;
   break;
  }
  case 30: {
   $69 = HEAP32[(389556)>>2]|0;
   $70 = HEAP32[$69>>2]|0;
   $71 = ($70|0)==(1);
   if ($71) {
    $72 = HEAP32[56>>2]|0;
    $73 = HEAP32[(389576)>>2]|0;
    $74 = (($73|0) / 40)&-1;
    $ReallocAsyncCtx26 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($72,1106,$65,$74);
    $IsAsync97 = ___async;
    if ($IsAsync97) {
     HEAP32[$ReallocAsyncCtx26>>2] = 104;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx26>>2] = 104;
    sp = STACKTOP;
    return;
   } else {
    $75 = HEAP32[48>>2]|0;
    $76 = HEAP32[(389576)>>2]|0;
    $77 = (($76|0) / 40)&-1;
    $ReallocAsyncCtx25 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($75,1106,$65,$77);
    $IsAsync93 = ___async;
    if ($IsAsync93) {
     HEAP32[$ReallocAsyncCtx25>>2] = 105;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx25>>2] = 105;
    sp = STACKTOP;
    return;
   }
   break;
  }
  case 38: {
   $80 = HEAP32[(389556)>>2]|0;
   $81 = HEAP32[$80>>2]|0;
   $82 = ($81|0)==(1);
   if ($82) {
    $83 = HEAP32[56>>2]|0;
    $84 = HEAP32[(389576)>>2]|0;
    $85 = (($84|0) / 40)&-1;
    $ReallocAsyncCtx24 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($83,1105,$78,$85);
    $IsAsync89 = ___async;
    if ($IsAsync89) {
     HEAP32[$ReallocAsyncCtx24>>2] = 106;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx24>>2] = 106;
    sp = STACKTOP;
    return;
   } else {
    $86 = HEAP32[48>>2]|0;
    $87 = HEAP32[(389576)>>2]|0;
    $88 = (($87|0) / 40)&-1;
    $ReallocAsyncCtx23 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($86,1105,$78,$88);
    $IsAsync85 = ___async;
    if ($IsAsync85) {
     HEAP32[$ReallocAsyncCtx23>>2] = 107;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx23>>2] = 107;
    sp = STACKTOP;
    return;
   }
   break;
  }
  case 47: {
   $96 = HEAP32[56>>2]|0;
   $97 = HEAP32[(389576)>>2]|0;
   $98 = (($97|0) / 40)&-1;
   $ReallocAsyncCtx22 = (_emscripten_realloc_async_context(4)|0);
   _move_paddle($96,1106,$92,$98);
   $IsAsync81 = ___async;
   if ($IsAsync81) {
    HEAP32[$ReallocAsyncCtx22>>2] = 108;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx22>>2] = 108;
   sp = STACKTOP;
   return;
   break;
  }
  case 52: {
   $101 = HEAP32[56>>2]|0;
   $102 = HEAP32[(389576)>>2]|0;
   $103 = (($102|0) / 40)&-1;
   $ReallocAsyncCtx21 = (_emscripten_realloc_async_context(4)|0);
   _move_paddle($101,1105,$99,$103);
   $IsAsync77 = ___async;
   if ($IsAsync77) {
    HEAP32[$ReallocAsyncCtx21>>2] = 109;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx21>>2] = 109;
   sp = STACKTOP;
   return;
   break;
  }
  case 56: {
   $ReallocAsyncCtx20 = (_emscripten_realloc_async_context(4)|0);
   _paddle_ai(2);
   $IsAsync73 = ___async;
   if ($IsAsync73) {
    HEAP32[$ReallocAsyncCtx20>>2] = 110;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx20>>2] = 110;
   sp = STACKTOP;
   return;
   break;
  }
  case 60: {
   $113 = HEAP8[104>>0]|0;
   $114 = ($113<<24>>24)==(0);
   if ($114) {
    $ReallocAsyncCtx39 = (_emscripten_realloc_async_context(4)|0);
    $115 = (_collision_ball()|0);
    $IsAsync146 = ___async;
    if ($IsAsync146) {
     HEAP32[$ReallocAsyncCtx39>>2] = 111;
     sp = STACKTOP;
     return;
    }
    $116 = ___async_retval;
    $$expand_i1_val = $115&1;
    HEAP8[$116>>0] = $$expand_i1_val;
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx39>>2] = 111;
    sp = STACKTOP;
    return;
   } else {
    $ReallocAsyncCtx38 = (_emscripten_realloc_async_context(4)|0);
    _update_ball();
    $IsAsync142 = ___async;
    if ($IsAsync142) {
     HEAP32[$ReallocAsyncCtx38>>2] = 112;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx38>>2] = 112;
    sp = STACKTOP;
    return;
   }
   break;
  }
  case 72: {
   $ReallocAsyncCtx32 = (_emscripten_realloc_async_context(4)|0);
   _end_danger();
   $IsAsync120 = ___async;
   if ($IsAsync120) {
    HEAP32[$ReallocAsyncCtx32>>2] = 124;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx32>>2] = 124;
   sp = STACKTOP;
   return;
   break;
  }
  case 78: {
   $166 = HEAP32[(651924)>>2]|0;
   $167 = $161 * 1.2;
   $168 = $167;
   HEAPF32[$159>>2] = $168;
   $169 = ((($149)) + 36|0);
   $170 = +HEAPF32[$169>>2];
   $171 = $170;
   $172 = $171 * 1.2;
   $173 = $172;
   HEAPF32[$169>>2] = $173;
   $ReallocAsyncCtx15 = (_emscripten_realloc_async_context(8)|0);
   FUNCTION_TABLE_vidd[$166 & 255]($149,$168,$173);
   $IsAsync54 = ___async;
   if ($IsAsync54) {
    HEAP32[$ReallocAsyncCtx15>>2] = 125;
    $174 = ((($ReallocAsyncCtx15)) + 4|0);
    HEAP32[$174>>2] = $pad$0;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx15>>2] = 125;
   $174 = ((($ReallocAsyncCtx15)) + 4|0);
   HEAP32[$174>>2] = $pad$0;
   sp = STACKTOP;
   return;
   break;
  }
  case 83: {
   $182 = HEAP32[(651924)>>2]|0;
   $183 = $177 * 1.2;
   $184 = $183;
   HEAPF32[$175>>2] = $184;
   $185 = ((($pad$0)) + 36|0);
   $186 = +HEAPF32[$185>>2];
   $187 = $186;
   $188 = $187 * 1.1000000000000001;
   $189 = $188;
   HEAPF32[$185>>2] = $189;
   $ReallocAsyncCtx16 = (_emscripten_realloc_async_context(8)|0);
   FUNCTION_TABLE_vidd[$182 & 255]($pad$0,$184,$189);
   $IsAsync58 = ___async;
   if ($IsAsync58) {
    HEAP32[$ReallocAsyncCtx16>>2] = 126;
    $190 = ((($ReallocAsyncCtx16)) + 4|0);
    HEAP32[$190>>2] = $pad$0;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx16>>2] = 126;
   $190 = ((($ReallocAsyncCtx16)) + 4|0);
   HEAP32[$190>>2] = $pad$0;
   sp = STACKTOP;
   return;
   break;
  }
  case 100: {
   return;
   break;
  }
 }
}
function _pong__async_cb143($0) {
 $0 = $0|0;
 var $$expand_i1_val = 0, $$not7 = 0, $$pr = 0, $$pr32 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0.0, $158 = 0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0, $163 = 0.0, $164 = 0.0, $165 = 0, $166 = 0, $167 = 0.0;
 var $168 = 0.0, $169 = 0, $17 = 0, $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0, $175 = 0, $176 = 0.0, $177 = 0.0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0, $182 = 0, $183 = 0.0, $184 = 0.0, $185 = 0;
 var $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $26 = 0.0, $27 = 0, $28 = 0.0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $IsAsync11 = 0, $IsAsync120 = 0;
 var $IsAsync142 = 0, $IsAsync146 = 0, $IsAsync18 = 0, $IsAsync22 = 0, $IsAsync30 = 0, $IsAsync4 = 0, $IsAsync54 = 0, $IsAsync58 = 0, $IsAsync62 = 0, $IsAsync73 = 0, $IsAsync77 = 0, $IsAsync81 = 0, $IsAsync85 = 0, $IsAsync89 = 0, $IsAsync93 = 0, $IsAsync97 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx16 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx2 = 0;
 var $ReallocAsyncCtx20 = 0, $ReallocAsyncCtx21 = 0, $ReallocAsyncCtx22 = 0, $ReallocAsyncCtx23 = 0, $ReallocAsyncCtx24 = 0, $ReallocAsyncCtx25 = 0, $ReallocAsyncCtx26 = 0, $ReallocAsyncCtx32 = 0, $ReallocAsyncCtx38 = 0, $ReallocAsyncCtx39 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx9 = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond30 = 0, $or$cond42 = 0;
 var $or$cond44 = 0, $or$cond9 = 0, $pad$0 = 0, $paddle2$paddle1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 L2: while(1) {
  $89 = HEAP32[(389556)>>2]|0;
  $90 = HEAP32[$89>>2]|0;
  $91 = ($90|0)==(2);
  if ($91) {
   $92 = HEAP32[(390064)>>2]|0;
   $93 = ($92|0)>(0);
   $94 = HEAP8[382784>>0]|0;
   $95 = ($94<<24>>24)==(0);
   $or$cond15 = $93 & $95;
   if ($or$cond15) {
    label = 48;
    break;
   }
   $99 = HEAP32[(390048)>>2]|0;
   $100 = ($99|0)>(0);
   $or$cond17 = $95 & $100;
   if ($or$cond17) {
    label = 52;
    break;
   }
  }
  $104 = HEAP32[(389556)>>2]|0;
  $105 = HEAP32[$104>>2]|0;
  $106 = ($105|0)<(2);
  if ($106) {
   label = 56;
   break;
  }
  $107 = HEAP32[8>>2]|0;
  $108 = ((($107)) + 8|0);
  $109 = +HEAPF32[$108>>2];
  $110 = (~~(($109)));
  HEAP32[382808>>2] = $110;
  $111 = HEAP8[382784>>0]|0;
  $112 = ($111<<24>>24)==(0);
  if ($112) {
   label = 60;
   break;
  }
  $$pr32 = HEAP8[35112>>0]|0;
  $117 = ($$pr32<<24>>24)==(0);
  if (!($117)) {
   $118 = 389544;
   $119 = $118;
   $120 = HEAP32[$119>>2]|0;
   $121 = (($118) + 4)|0;
   $122 = $121;
   $123 = HEAP32[$122>>2]|0;
   $124 = 35120;
   $125 = $124;
   $126 = HEAP32[$125>>2]|0;
   $127 = (($124) + 4)|0;
   $128 = $127;
   $129 = HEAP32[$128>>2]|0;
   $130 = (_i64Subtract(($120|0),($123|0),($126|0),($129|0))|0);
   $131 = tempRet0;
   $132 = ($131>>>0)>(0);
   $133 = ($130>>>0)>(10000000);
   $134 = ($131|0)==(0);
   $135 = $134 & $133;
   $136 = $132 | $135;
   if ($136) {
    label = 72;
    break;
   }
   $137 = HEAP32[(651780)>>2]|0;
   if ((($137|0) == 5) | (($137|0) == 15)) {
    $138 = HEAP32[40>>2]|0;
    $139 = ((($138)) + 4|0);
    $140 = HEAP32[$139>>2]|0;
    $141 = ($140|0)==(4);
    $142 = ($131>>>0)>(0);
    $143 = ($130>>>0)>(5000000);
    $144 = ($131|0)==(0);
    $145 = $144 & $143;
    $146 = $142 | $145;
    $or$cond30 = $146 & $141;
    if ($or$cond30) {
     label = 72;
     break;
    }
   }
  }
  $147 = HEAP8[104>>0]|0;
  $148 = ($147<<24>>24)==(0);
  do {
   if (!($148)) {
    $149 = HEAP32[96>>2]|0;
    $150 = ((($149)) + 44|0);
    $151 = HEAP8[$150>>0]|0;
    $152 = ($151<<24>>24)==(0);
    if (!($152)) {
     $153 = ((($149)) + 8|0);
     $154 = +HEAPF32[$153>>2];
     $155 = HEAP32[(389572)>>2]|0;
     $156 = (($155|0) / 2)&-1;
     $157 = (+($156|0));
     $158 = $154 > $157;
     $paddle2$paddle1 = $158 ? 48 : 56;
     $pad$0 = HEAP32[$paddle2$paddle1>>2]|0;
     $159 = ((($149)) + 40|0);
     $160 = +HEAPF32[$159>>2];
     $161 = $160;
     $162 = (($155|0) / 40)&-1;
     $163 = (+($162|0));
     $164 = $163 * 10.0;
     $165 = $161 < $164;
     if ($165) {
      label = 78;
      break L2;
     }
     HEAP8[$150>>0] = 0;
     $175 = ((($pad$0)) + 40|0);
     $176 = +HEAPF32[$175>>2];
     $177 = $176;
     $178 = (($155|0) / 40)&-1;
     $179 = (+($178|0));
     $180 = $179 * 20.0;
     $181 = $177 < $180;
     if ($181) {
      label = 83;
      break L2;
     }
     $191 = ((($pad$0)) + 44|0);
     HEAP8[$191>>0] = 0;
     $192 = ((($pad$0)) + 4|0);
     $193 = HEAP32[$192>>2]|0;
     if ((($193|0) == 10)) {
      HEAP32[$192>>2] = 11;
      break;
     } else if ((($193|0) == 0)) {
      HEAP32[$192>>2] = 1;
      break;
     } else {
      break;
     }
    }
   }
  } while(0);
  $194 = HEAP8[382784>>0]|0;
  $195 = ($194<<24>>24)==(0);
  if ($195) {
   $196 = 389544;
   $197 = $196;
   $198 = HEAP32[$197>>2]|0;
   $199 = (($196) + 4)|0;
   $200 = $199;
   $201 = HEAP32[$200>>2]|0;
   $237 = $198;$238 = $201;
  } else {
   $202 = HEAP8[104>>0]|0;
   $203 = ($202<<24>>24)==(0);
   $204 = 389544;
   $205 = $204;
   $206 = HEAP32[$205>>2]|0;
   $207 = (($204) + 4)|0;
   $208 = $207;
   $209 = HEAP32[$208>>2]|0;
   $210 = 382800;
   $211 = $210;
   $212 = HEAP32[$211>>2]|0;
   $213 = (($210) + 4)|0;
   $214 = $213;
   $215 = HEAP32[$214>>2]|0;
   $216 = (_i64Subtract(($206|0),($209|0),($212|0),($215|0))|0);
   $217 = tempRet0;
   $218 = ($217>>>0)>(0);
   $219 = ($216>>>0)>(3000000);
   $220 = ($217|0)==(0);
   $221 = $220 & $219;
   $222 = $218 | $221;
   $or$cond42 = $203 & $222;
   $223 = (_i64Subtract(($206|0),($209|0),($212|0),($215|0))|0);
   $224 = tempRet0;
   $225 = ($224>>>0)>(0);
   $226 = ($223>>>0)>(6000000);
   $227 = ($224|0)==(0);
   $228 = $227 & $226;
   $229 = $225 | $228;
   $or$cond44 = $or$cond42 | $229;
   if ($or$cond44) {
    $230 = HEAP32[35096>>2]|0;
    $231 = ($230|0)==(6);
    if ($231) {
     $232 = HEAP32[(389556)>>2]|0;
     $233 = HEAP32[$232>>2]|0;
     $234 = ($233|0)==(1);
     if ($234) {
      $235 = ((($232)) + 4|0);
      HEAP8[$235>>0] = 1;
     } else {
      label = 96;
     }
    } else {
     label = 96;
    }
    if ((label|0) == 96) {
     label = 0;
     HEAP32[(651780)>>2] = 0;
    }
    HEAP8[128>>0] = 0;
    $237 = $206;$238 = $209;
   } else {
    $237 = $206;$238 = $209;
   }
  }
  $236 = HEAP32[216>>2]|0;
  $1 = (($236) + -40000)|0;
  HEAP32[216>>2] = $1;
  $239 = (_i64Add(($237|0),($238|0),40000,0)|0);
  $240 = tempRet0;
  $241 = 389544;
  $242 = $241;
  HEAP32[$242>>2] = $239;
  $243 = (($241) + 4)|0;
  $244 = $243;
  HEAP32[$244>>2] = $240;
  $2 = ($1|0)>(39999);
  if ($2) {
   label = 3;
   break;
  }
  __render();
  $245 = HEAP8[128>>0]|0;
  $$not7 = ($245<<24>>24)==(0);
  $246 = 389544;
  $247 = $246;
  $248 = HEAP32[$247>>2]|0;
  $249 = (($246) + 4)|0;
  $250 = $249;
  $251 = HEAP32[$250>>2]|0;
  $252 = ($248|0)==(0);
  $253 = ($251|0)==(0);
  $254 = $252 & $253;
  $or$cond9 = $$not7 & $254;
  if (!($or$cond9)) {
   label = 100;
   break;
  }
  $3 = HEAP32[(389696)>>2]|0;
  $4 = ($3|0)==(0);
  if (!($4)) {
   HEAP8[128>>0] = 0;
  }
  $5 = (_score_ball()|0);
  if ((($5|0) == 5)) {
   $6 = HEAP8[382784>>0]|0;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    label = 10;
    break;
   }
  } else if (!((($5|0) == 0))) {
   $$pr = HEAP8[382784>>0]|0;
   $62 = ($$pr<<24>>24)==(0);
   if ($62) {
    label = 26;
    break;
   }
  }
  $65 = HEAP32[(394012)>>2]|0;
  $66 = ($65|0)>(0);
  $67 = HEAP8[382784>>0]|0;
  $68 = ($67<<24>>24)==(0);
  $or$cond11 = $66 & $68;
  if ($or$cond11) {
   label = 30;
   break;
  }
  $78 = HEAP32[(394008)>>2]|0;
  $79 = ($78|0)>(0);
  $or$cond13 = $68 & $79;
  if ($or$cond13) {
   label = 38;
   break;
  }
 }
 switch (label|0) {
  case 3: {
   $ReallocAsyncCtx17 = (_emscripten_realloc_async_context(4)|0);
   __update();
   $IsAsync62 = ___async;
   if ($IsAsync62) {
    HEAP32[$ReallocAsyncCtx17>>2] = 94;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx17>>2] = 94;
   sp = STACKTOP;
   return;
   break;
  }
  case 10: {
   HEAP8[382784>>0] = 1;
   $8 = HEAP32[(389556)>>2]|0;
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(1);
   if ($10) {
    $11 = (_get_score(1)|0);
    $12 = ($11|0)==(5);
    if ($12) {
     $13 = 389544;
     $14 = $13;
     $15 = HEAP32[$14>>2]|0;
     $16 = (($13) + 4)|0;
     $17 = $16;
     $18 = HEAP32[$17>>2]|0;
     $19 = 382800;
     $20 = $19;
     HEAP32[$20>>2] = $15;
     $21 = (($19) + 4)|0;
     $22 = $21;
     HEAP32[$22>>2] = $18;
     $23 = HEAP32[(651920)>>2]|0;
     $24 = HEAP32[8>>2]|0;
     $25 = HEAP32[(389572)>>2]|0;
     $26 = (+($25|0));
     $27 = ((($24)) + 12|0);
     $28 = +HEAPF32[$27>>2];
     $ReallocAsyncCtx2 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vidd[$23 & 255]($24,$26,$28);
     $IsAsync4 = ___async;
     if ($IsAsync4) {
      HEAP32[$ReallocAsyncCtx2>>2] = 95;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx2>>2] = 95;
     sp = STACKTOP;
     return;
    } else {
     HEAP8[382784>>0] = 1;
     $29 = 389544;
     $30 = $29;
     $31 = HEAP32[$30>>2]|0;
     $32 = (($29) + 4)|0;
     $33 = $32;
     $34 = HEAP32[$33>>2]|0;
     $35 = 382800;
     $36 = $35;
     HEAP32[$36>>2] = $31;
     $37 = (($35) + 4)|0;
     $38 = $37;
     HEAP32[$38>>2] = $34;
     $39 = HEAP32[(651952)>>2]|0;
     $40 = HEAP32[35168>>2]|0;
     $ReallocAsyncCtx4 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vi[$39 & 255]($40);
     $IsAsync11 = ___async;
     if ($IsAsync11) {
      HEAP32[$ReallocAsyncCtx4>>2] = 97;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx4>>2] = 97;
     sp = STACKTOP;
     return;
    }
   } else {
    $41 = 389544;
    $42 = $41;
    $43 = HEAP32[$42>>2]|0;
    $44 = (($41) + 4)|0;
    $45 = $44;
    $46 = HEAP32[$45>>2]|0;
    $47 = 382800;
    $48 = $47;
    HEAP32[$48>>2] = $43;
    $49 = (($47) + 4)|0;
    $50 = $49;
    HEAP32[$50>>2] = $46;
    $51 = HEAP32[8>>2]|0;
    $52 = ((($51)) + 8|0);
    $53 = +HEAPF32[$52>>2];
    $54 = HEAP32[(389572)>>2]|0;
    $55 = (($54|0) / 2)&-1;
    $56 = (+($55|0));
    $57 = $53 > $56;
    $58 = HEAP32[(651920)>>2]|0;
    $59 = ((($51)) + 12|0);
    $60 = +HEAPF32[$59>>2];
    if ($57) {
     $61 = (+($54|0));
     $ReallocAsyncCtx6 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vidd[$58 & 255]($51,$61,$60);
     $IsAsync18 = ___async;
     if ($IsAsync18) {
      HEAP32[$ReallocAsyncCtx6>>2] = 99;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx6>>2] = 99;
     sp = STACKTOP;
     return;
    } else {
     $ReallocAsyncCtx7 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vidd[$58 & 255]($51,0.0,$60);
     $IsAsync22 = ___async;
     if ($IsAsync22) {
      HEAP32[$ReallocAsyncCtx7>>2] = 100;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx7>>2] = 100;
     sp = STACKTOP;
     return;
    }
   }
   break;
  }
  case 26: {
   $63 = HEAP32[(651952)>>2]|0;
   $64 = HEAP32[35128>>2]|0;
   $ReallocAsyncCtx9 = (_emscripten_realloc_async_context(4)|0);
   FUNCTION_TABLE_vi[$63 & 255]($64);
   $IsAsync30 = ___async;
   if ($IsAsync30) {
    HEAP32[$ReallocAsyncCtx9>>2] = 102;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx9>>2] = 102;
   sp = STACKTOP;
   return;
   break;
  }
  case 30: {
   $69 = HEAP32[(389556)>>2]|0;
   $70 = HEAP32[$69>>2]|0;
   $71 = ($70|0)==(1);
   if ($71) {
    $72 = HEAP32[56>>2]|0;
    $73 = HEAP32[(389576)>>2]|0;
    $74 = (($73|0) / 40)&-1;
    $ReallocAsyncCtx26 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($72,1106,$65,$74);
    $IsAsync97 = ___async;
    if ($IsAsync97) {
     HEAP32[$ReallocAsyncCtx26>>2] = 104;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx26>>2] = 104;
    sp = STACKTOP;
    return;
   } else {
    $75 = HEAP32[48>>2]|0;
    $76 = HEAP32[(389576)>>2]|0;
    $77 = (($76|0) / 40)&-1;
    $ReallocAsyncCtx25 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($75,1106,$65,$77);
    $IsAsync93 = ___async;
    if ($IsAsync93) {
     HEAP32[$ReallocAsyncCtx25>>2] = 105;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx25>>2] = 105;
    sp = STACKTOP;
    return;
   }
   break;
  }
  case 38: {
   $80 = HEAP32[(389556)>>2]|0;
   $81 = HEAP32[$80>>2]|0;
   $82 = ($81|0)==(1);
   if ($82) {
    $83 = HEAP32[56>>2]|0;
    $84 = HEAP32[(389576)>>2]|0;
    $85 = (($84|0) / 40)&-1;
    $ReallocAsyncCtx24 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($83,1105,$78,$85);
    $IsAsync89 = ___async;
    if ($IsAsync89) {
     HEAP32[$ReallocAsyncCtx24>>2] = 106;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx24>>2] = 106;
    sp = STACKTOP;
    return;
   } else {
    $86 = HEAP32[48>>2]|0;
    $87 = HEAP32[(389576)>>2]|0;
    $88 = (($87|0) / 40)&-1;
    $ReallocAsyncCtx23 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($86,1105,$78,$88);
    $IsAsync85 = ___async;
    if ($IsAsync85) {
     HEAP32[$ReallocAsyncCtx23>>2] = 107;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx23>>2] = 107;
    sp = STACKTOP;
    return;
   }
   break;
  }
  case 48: {
   $96 = HEAP32[56>>2]|0;
   $97 = HEAP32[(389576)>>2]|0;
   $98 = (($97|0) / 40)&-1;
   $ReallocAsyncCtx22 = (_emscripten_realloc_async_context(4)|0);
   _move_paddle($96,1106,$92,$98);
   $IsAsync81 = ___async;
   if ($IsAsync81) {
    HEAP32[$ReallocAsyncCtx22>>2] = 108;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx22>>2] = 108;
   sp = STACKTOP;
   return;
   break;
  }
  case 52: {
   $101 = HEAP32[56>>2]|0;
   $102 = HEAP32[(389576)>>2]|0;
   $103 = (($102|0) / 40)&-1;
   $ReallocAsyncCtx21 = (_emscripten_realloc_async_context(4)|0);
   _move_paddle($101,1105,$99,$103);
   $IsAsync77 = ___async;
   if ($IsAsync77) {
    HEAP32[$ReallocAsyncCtx21>>2] = 109;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx21>>2] = 109;
   sp = STACKTOP;
   return;
   break;
  }
  case 56: {
   $ReallocAsyncCtx20 = (_emscripten_realloc_async_context(4)|0);
   _paddle_ai(2);
   $IsAsync73 = ___async;
   if ($IsAsync73) {
    HEAP32[$ReallocAsyncCtx20>>2] = 110;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx20>>2] = 110;
   sp = STACKTOP;
   return;
   break;
  }
  case 60: {
   $113 = HEAP8[104>>0]|0;
   $114 = ($113<<24>>24)==(0);
   if ($114) {
    $ReallocAsyncCtx39 = (_emscripten_realloc_async_context(4)|0);
    $115 = (_collision_ball()|0);
    $IsAsync146 = ___async;
    if ($IsAsync146) {
     HEAP32[$ReallocAsyncCtx39>>2] = 111;
     sp = STACKTOP;
     return;
    }
    $116 = ___async_retval;
    $$expand_i1_val = $115&1;
    HEAP8[$116>>0] = $$expand_i1_val;
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx39>>2] = 111;
    sp = STACKTOP;
    return;
   } else {
    $ReallocAsyncCtx38 = (_emscripten_realloc_async_context(4)|0);
    _update_ball();
    $IsAsync142 = ___async;
    if ($IsAsync142) {
     HEAP32[$ReallocAsyncCtx38>>2] = 112;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx38>>2] = 112;
    sp = STACKTOP;
    return;
   }
   break;
  }
  case 72: {
   $ReallocAsyncCtx32 = (_emscripten_realloc_async_context(4)|0);
   _end_danger();
   $IsAsync120 = ___async;
   if ($IsAsync120) {
    HEAP32[$ReallocAsyncCtx32>>2] = 124;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx32>>2] = 124;
   sp = STACKTOP;
   return;
   break;
  }
  case 78: {
   $166 = HEAP32[(651924)>>2]|0;
   $167 = $161 * 1.2;
   $168 = $167;
   HEAPF32[$159>>2] = $168;
   $169 = ((($149)) + 36|0);
   $170 = +HEAPF32[$169>>2];
   $171 = $170;
   $172 = $171 * 1.2;
   $173 = $172;
   HEAPF32[$169>>2] = $173;
   $ReallocAsyncCtx15 = (_emscripten_realloc_async_context(8)|0);
   FUNCTION_TABLE_vidd[$166 & 255]($149,$168,$173);
   $IsAsync54 = ___async;
   if ($IsAsync54) {
    HEAP32[$ReallocAsyncCtx15>>2] = 125;
    $174 = ((($ReallocAsyncCtx15)) + 4|0);
    HEAP32[$174>>2] = $pad$0;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx15>>2] = 125;
   $174 = ((($ReallocAsyncCtx15)) + 4|0);
   HEAP32[$174>>2] = $pad$0;
   sp = STACKTOP;
   return;
   break;
  }
  case 83: {
   $182 = HEAP32[(651924)>>2]|0;
   $183 = $177 * 1.2;
   $184 = $183;
   HEAPF32[$175>>2] = $184;
   $185 = ((($pad$0)) + 36|0);
   $186 = +HEAPF32[$185>>2];
   $187 = $186;
   $188 = $187 * 1.1000000000000001;
   $189 = $188;
   HEAPF32[$185>>2] = $189;
   $ReallocAsyncCtx16 = (_emscripten_realloc_async_context(8)|0);
   FUNCTION_TABLE_vidd[$182 & 255]($pad$0,$184,$189);
   $IsAsync58 = ___async;
   if ($IsAsync58) {
    HEAP32[$ReallocAsyncCtx16>>2] = 126;
    $190 = ((($ReallocAsyncCtx16)) + 4|0);
    HEAP32[$190>>2] = $pad$0;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx16>>2] = 126;
   $190 = ((($ReallocAsyncCtx16)) + 4|0);
   HEAP32[$190>>2] = $pad$0;
   sp = STACKTOP;
   return;
   break;
  }
  case 100: {
   return;
   break;
  }
 }
}
function _pong__async_cb144($0) {
 $0 = $0|0;
 var $$expand_i1_val = 0, $$not7 = 0, $$pr = 0, $$pr32 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0.0, $158 = 0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0, $163 = 0.0, $164 = 0.0, $165 = 0, $166 = 0, $167 = 0.0;
 var $168 = 0.0, $169 = 0, $17 = 0, $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0, $175 = 0, $176 = 0.0, $177 = 0.0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0, $182 = 0, $183 = 0.0, $184 = 0.0, $185 = 0;
 var $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $26 = 0.0, $27 = 0, $28 = 0.0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $IsAsync11 = 0, $IsAsync120 = 0;
 var $IsAsync142 = 0, $IsAsync146 = 0, $IsAsync18 = 0, $IsAsync22 = 0, $IsAsync30 = 0, $IsAsync4 = 0, $IsAsync54 = 0, $IsAsync58 = 0, $IsAsync62 = 0, $IsAsync73 = 0, $IsAsync77 = 0, $IsAsync81 = 0, $IsAsync85 = 0, $IsAsync89 = 0, $IsAsync93 = 0, $IsAsync97 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx16 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx2 = 0;
 var $ReallocAsyncCtx20 = 0, $ReallocAsyncCtx21 = 0, $ReallocAsyncCtx22 = 0, $ReallocAsyncCtx23 = 0, $ReallocAsyncCtx24 = 0, $ReallocAsyncCtx25 = 0, $ReallocAsyncCtx26 = 0, $ReallocAsyncCtx32 = 0, $ReallocAsyncCtx38 = 0, $ReallocAsyncCtx39 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx9 = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond30 = 0, $or$cond42 = 0;
 var $or$cond44 = 0, $or$cond9 = 0, $pad$0 = 0, $paddle2$paddle1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 L2: while(1) {
  $89 = HEAP32[(389556)>>2]|0;
  $90 = HEAP32[$89>>2]|0;
  $91 = ($90|0)==(2);
  if ($91) {
   $92 = HEAP32[(390064)>>2]|0;
   $93 = ($92|0)>(0);
   $94 = HEAP8[382784>>0]|0;
   $95 = ($94<<24>>24)==(0);
   $or$cond15 = $93 & $95;
   if ($or$cond15) {
    label = 48;
    break;
   }
   $99 = HEAP32[(390048)>>2]|0;
   $100 = ($99|0)>(0);
   $or$cond17 = $95 & $100;
   if ($or$cond17) {
    label = 52;
    break;
   }
  }
  $104 = HEAP32[(389556)>>2]|0;
  $105 = HEAP32[$104>>2]|0;
  $106 = ($105|0)<(2);
  if ($106) {
   label = 56;
   break;
  }
  $107 = HEAP32[8>>2]|0;
  $108 = ((($107)) + 8|0);
  $109 = +HEAPF32[$108>>2];
  $110 = (~~(($109)));
  HEAP32[382808>>2] = $110;
  $111 = HEAP8[382784>>0]|0;
  $112 = ($111<<24>>24)==(0);
  if ($112) {
   label = 60;
   break;
  }
  $$pr32 = HEAP8[35112>>0]|0;
  $117 = ($$pr32<<24>>24)==(0);
  if (!($117)) {
   $118 = 389544;
   $119 = $118;
   $120 = HEAP32[$119>>2]|0;
   $121 = (($118) + 4)|0;
   $122 = $121;
   $123 = HEAP32[$122>>2]|0;
   $124 = 35120;
   $125 = $124;
   $126 = HEAP32[$125>>2]|0;
   $127 = (($124) + 4)|0;
   $128 = $127;
   $129 = HEAP32[$128>>2]|0;
   $130 = (_i64Subtract(($120|0),($123|0),($126|0),($129|0))|0);
   $131 = tempRet0;
   $132 = ($131>>>0)>(0);
   $133 = ($130>>>0)>(10000000);
   $134 = ($131|0)==(0);
   $135 = $134 & $133;
   $136 = $132 | $135;
   if ($136) {
    label = 72;
    break;
   }
   $137 = HEAP32[(651780)>>2]|0;
   if ((($137|0) == 5) | (($137|0) == 15)) {
    $138 = HEAP32[40>>2]|0;
    $139 = ((($138)) + 4|0);
    $140 = HEAP32[$139>>2]|0;
    $141 = ($140|0)==(4);
    $142 = ($131>>>0)>(0);
    $143 = ($130>>>0)>(5000000);
    $144 = ($131|0)==(0);
    $145 = $144 & $143;
    $146 = $142 | $145;
    $or$cond30 = $146 & $141;
    if ($or$cond30) {
     label = 72;
     break;
    }
   }
  }
  $147 = HEAP8[104>>0]|0;
  $148 = ($147<<24>>24)==(0);
  do {
   if (!($148)) {
    $149 = HEAP32[96>>2]|0;
    $150 = ((($149)) + 44|0);
    $151 = HEAP8[$150>>0]|0;
    $152 = ($151<<24>>24)==(0);
    if (!($152)) {
     $153 = ((($149)) + 8|0);
     $154 = +HEAPF32[$153>>2];
     $155 = HEAP32[(389572)>>2]|0;
     $156 = (($155|0) / 2)&-1;
     $157 = (+($156|0));
     $158 = $154 > $157;
     $paddle2$paddle1 = $158 ? 48 : 56;
     $pad$0 = HEAP32[$paddle2$paddle1>>2]|0;
     $159 = ((($149)) + 40|0);
     $160 = +HEAPF32[$159>>2];
     $161 = $160;
     $162 = (($155|0) / 40)&-1;
     $163 = (+($162|0));
     $164 = $163 * 10.0;
     $165 = $161 < $164;
     if ($165) {
      label = 78;
      break L2;
     }
     HEAP8[$150>>0] = 0;
     $175 = ((($pad$0)) + 40|0);
     $176 = +HEAPF32[$175>>2];
     $177 = $176;
     $178 = (($155|0) / 40)&-1;
     $179 = (+($178|0));
     $180 = $179 * 20.0;
     $181 = $177 < $180;
     if ($181) {
      label = 83;
      break L2;
     }
     $191 = ((($pad$0)) + 44|0);
     HEAP8[$191>>0] = 0;
     $192 = ((($pad$0)) + 4|0);
     $193 = HEAP32[$192>>2]|0;
     if ((($193|0) == 0)) {
      HEAP32[$192>>2] = 1;
      break;
     } else if ((($193|0) == 10)) {
      HEAP32[$192>>2] = 11;
      break;
     } else {
      break;
     }
    }
   }
  } while(0);
  $194 = HEAP8[382784>>0]|0;
  $195 = ($194<<24>>24)==(0);
  if ($195) {
   $196 = 389544;
   $197 = $196;
   $198 = HEAP32[$197>>2]|0;
   $199 = (($196) + 4)|0;
   $200 = $199;
   $201 = HEAP32[$200>>2]|0;
   $237 = $198;$238 = $201;
  } else {
   $202 = HEAP8[104>>0]|0;
   $203 = ($202<<24>>24)==(0);
   $204 = 389544;
   $205 = $204;
   $206 = HEAP32[$205>>2]|0;
   $207 = (($204) + 4)|0;
   $208 = $207;
   $209 = HEAP32[$208>>2]|0;
   $210 = 382800;
   $211 = $210;
   $212 = HEAP32[$211>>2]|0;
   $213 = (($210) + 4)|0;
   $214 = $213;
   $215 = HEAP32[$214>>2]|0;
   $216 = (_i64Subtract(($206|0),($209|0),($212|0),($215|0))|0);
   $217 = tempRet0;
   $218 = ($217>>>0)>(0);
   $219 = ($216>>>0)>(3000000);
   $220 = ($217|0)==(0);
   $221 = $220 & $219;
   $222 = $218 | $221;
   $or$cond42 = $203 & $222;
   $223 = (_i64Subtract(($206|0),($209|0),($212|0),($215|0))|0);
   $224 = tempRet0;
   $225 = ($224>>>0)>(0);
   $226 = ($223>>>0)>(6000000);
   $227 = ($224|0)==(0);
   $228 = $227 & $226;
   $229 = $225 | $228;
   $or$cond44 = $or$cond42 | $229;
   if ($or$cond44) {
    $230 = HEAP32[35096>>2]|0;
    $231 = ($230|0)==(6);
    if ($231) {
     $232 = HEAP32[(389556)>>2]|0;
     $233 = HEAP32[$232>>2]|0;
     $234 = ($233|0)==(1);
     if ($234) {
      $235 = ((($232)) + 4|0);
      HEAP8[$235>>0] = 1;
     } else {
      label = 96;
     }
    } else {
     label = 96;
    }
    if ((label|0) == 96) {
     label = 0;
     HEAP32[(651780)>>2] = 0;
    }
    HEAP8[128>>0] = 0;
    $237 = $206;$238 = $209;
   } else {
    $237 = $206;$238 = $209;
   }
  }
  $236 = HEAP32[216>>2]|0;
  $1 = (($236) + -40000)|0;
  HEAP32[216>>2] = $1;
  $239 = (_i64Add(($237|0),($238|0),40000,0)|0);
  $240 = tempRet0;
  $241 = 389544;
  $242 = $241;
  HEAP32[$242>>2] = $239;
  $243 = (($241) + 4)|0;
  $244 = $243;
  HEAP32[$244>>2] = $240;
  $2 = ($1|0)>(39999);
  if ($2) {
   label = 3;
   break;
  }
  __render();
  $245 = HEAP8[128>>0]|0;
  $$not7 = ($245<<24>>24)==(0);
  $246 = 389544;
  $247 = $246;
  $248 = HEAP32[$247>>2]|0;
  $249 = (($246) + 4)|0;
  $250 = $249;
  $251 = HEAP32[$250>>2]|0;
  $252 = ($248|0)==(0);
  $253 = ($251|0)==(0);
  $254 = $252 & $253;
  $or$cond9 = $$not7 & $254;
  if (!($or$cond9)) {
   label = 100;
   break;
  }
  $3 = HEAP32[(389696)>>2]|0;
  $4 = ($3|0)==(0);
  if (!($4)) {
   HEAP8[128>>0] = 0;
  }
  $5 = (_score_ball()|0);
  if ((($5|0) == 5)) {
   $6 = HEAP8[382784>>0]|0;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    label = 10;
    break;
   }
  } else if (!((($5|0) == 0))) {
   $$pr = HEAP8[382784>>0]|0;
   $62 = ($$pr<<24>>24)==(0);
   if ($62) {
    label = 26;
    break;
   }
  }
  $65 = HEAP32[(394012)>>2]|0;
  $66 = ($65|0)>(0);
  $67 = HEAP8[382784>>0]|0;
  $68 = ($67<<24>>24)==(0);
  $or$cond11 = $66 & $68;
  if ($or$cond11) {
   label = 30;
   break;
  }
  $78 = HEAP32[(394008)>>2]|0;
  $79 = ($78|0)>(0);
  $or$cond13 = $68 & $79;
  if ($or$cond13) {
   label = 38;
   break;
  }
 }
 switch (label|0) {
  case 3: {
   $ReallocAsyncCtx17 = (_emscripten_realloc_async_context(4)|0);
   __update();
   $IsAsync62 = ___async;
   if ($IsAsync62) {
    HEAP32[$ReallocAsyncCtx17>>2] = 94;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx17>>2] = 94;
   sp = STACKTOP;
   return;
   break;
  }
  case 10: {
   HEAP8[382784>>0] = 1;
   $8 = HEAP32[(389556)>>2]|0;
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(1);
   if ($10) {
    $11 = (_get_score(1)|0);
    $12 = ($11|0)==(5);
    if ($12) {
     $13 = 389544;
     $14 = $13;
     $15 = HEAP32[$14>>2]|0;
     $16 = (($13) + 4)|0;
     $17 = $16;
     $18 = HEAP32[$17>>2]|0;
     $19 = 382800;
     $20 = $19;
     HEAP32[$20>>2] = $15;
     $21 = (($19) + 4)|0;
     $22 = $21;
     HEAP32[$22>>2] = $18;
     $23 = HEAP32[(651920)>>2]|0;
     $24 = HEAP32[8>>2]|0;
     $25 = HEAP32[(389572)>>2]|0;
     $26 = (+($25|0));
     $27 = ((($24)) + 12|0);
     $28 = +HEAPF32[$27>>2];
     $ReallocAsyncCtx2 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vidd[$23 & 255]($24,$26,$28);
     $IsAsync4 = ___async;
     if ($IsAsync4) {
      HEAP32[$ReallocAsyncCtx2>>2] = 95;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx2>>2] = 95;
     sp = STACKTOP;
     return;
    } else {
     HEAP8[382784>>0] = 1;
     $29 = 389544;
     $30 = $29;
     $31 = HEAP32[$30>>2]|0;
     $32 = (($29) + 4)|0;
     $33 = $32;
     $34 = HEAP32[$33>>2]|0;
     $35 = 382800;
     $36 = $35;
     HEAP32[$36>>2] = $31;
     $37 = (($35) + 4)|0;
     $38 = $37;
     HEAP32[$38>>2] = $34;
     $39 = HEAP32[(651952)>>2]|0;
     $40 = HEAP32[35168>>2]|0;
     $ReallocAsyncCtx4 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vi[$39 & 255]($40);
     $IsAsync11 = ___async;
     if ($IsAsync11) {
      HEAP32[$ReallocAsyncCtx4>>2] = 97;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx4>>2] = 97;
     sp = STACKTOP;
     return;
    }
   } else {
    $41 = 389544;
    $42 = $41;
    $43 = HEAP32[$42>>2]|0;
    $44 = (($41) + 4)|0;
    $45 = $44;
    $46 = HEAP32[$45>>2]|0;
    $47 = 382800;
    $48 = $47;
    HEAP32[$48>>2] = $43;
    $49 = (($47) + 4)|0;
    $50 = $49;
    HEAP32[$50>>2] = $46;
    $51 = HEAP32[8>>2]|0;
    $52 = ((($51)) + 8|0);
    $53 = +HEAPF32[$52>>2];
    $54 = HEAP32[(389572)>>2]|0;
    $55 = (($54|0) / 2)&-1;
    $56 = (+($55|0));
    $57 = $53 > $56;
    $58 = HEAP32[(651920)>>2]|0;
    $59 = ((($51)) + 12|0);
    $60 = +HEAPF32[$59>>2];
    if ($57) {
     $61 = (+($54|0));
     $ReallocAsyncCtx6 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vidd[$58 & 255]($51,$61,$60);
     $IsAsync18 = ___async;
     if ($IsAsync18) {
      HEAP32[$ReallocAsyncCtx6>>2] = 99;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx6>>2] = 99;
     sp = STACKTOP;
     return;
    } else {
     $ReallocAsyncCtx7 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vidd[$58 & 255]($51,0.0,$60);
     $IsAsync22 = ___async;
     if ($IsAsync22) {
      HEAP32[$ReallocAsyncCtx7>>2] = 100;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx7>>2] = 100;
     sp = STACKTOP;
     return;
    }
   }
   break;
  }
  case 26: {
   $63 = HEAP32[(651952)>>2]|0;
   $64 = HEAP32[35128>>2]|0;
   $ReallocAsyncCtx9 = (_emscripten_realloc_async_context(4)|0);
   FUNCTION_TABLE_vi[$63 & 255]($64);
   $IsAsync30 = ___async;
   if ($IsAsync30) {
    HEAP32[$ReallocAsyncCtx9>>2] = 102;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx9>>2] = 102;
   sp = STACKTOP;
   return;
   break;
  }
  case 30: {
   $69 = HEAP32[(389556)>>2]|0;
   $70 = HEAP32[$69>>2]|0;
   $71 = ($70|0)==(1);
   if ($71) {
    $72 = HEAP32[56>>2]|0;
    $73 = HEAP32[(389576)>>2]|0;
    $74 = (($73|0) / 40)&-1;
    $ReallocAsyncCtx26 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($72,1106,$65,$74);
    $IsAsync97 = ___async;
    if ($IsAsync97) {
     HEAP32[$ReallocAsyncCtx26>>2] = 104;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx26>>2] = 104;
    sp = STACKTOP;
    return;
   } else {
    $75 = HEAP32[48>>2]|0;
    $76 = HEAP32[(389576)>>2]|0;
    $77 = (($76|0) / 40)&-1;
    $ReallocAsyncCtx25 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($75,1106,$65,$77);
    $IsAsync93 = ___async;
    if ($IsAsync93) {
     HEAP32[$ReallocAsyncCtx25>>2] = 105;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx25>>2] = 105;
    sp = STACKTOP;
    return;
   }
   break;
  }
  case 38: {
   $80 = HEAP32[(389556)>>2]|0;
   $81 = HEAP32[$80>>2]|0;
   $82 = ($81|0)==(1);
   if ($82) {
    $83 = HEAP32[56>>2]|0;
    $84 = HEAP32[(389576)>>2]|0;
    $85 = (($84|0) / 40)&-1;
    $ReallocAsyncCtx24 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($83,1105,$78,$85);
    $IsAsync89 = ___async;
    if ($IsAsync89) {
     HEAP32[$ReallocAsyncCtx24>>2] = 106;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx24>>2] = 106;
    sp = STACKTOP;
    return;
   } else {
    $86 = HEAP32[48>>2]|0;
    $87 = HEAP32[(389576)>>2]|0;
    $88 = (($87|0) / 40)&-1;
    $ReallocAsyncCtx23 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($86,1105,$78,$88);
    $IsAsync85 = ___async;
    if ($IsAsync85) {
     HEAP32[$ReallocAsyncCtx23>>2] = 107;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx23>>2] = 107;
    sp = STACKTOP;
    return;
   }
   break;
  }
  case 48: {
   $96 = HEAP32[56>>2]|0;
   $97 = HEAP32[(389576)>>2]|0;
   $98 = (($97|0) / 40)&-1;
   $ReallocAsyncCtx22 = (_emscripten_realloc_async_context(4)|0);
   _move_paddle($96,1106,$92,$98);
   $IsAsync81 = ___async;
   if ($IsAsync81) {
    HEAP32[$ReallocAsyncCtx22>>2] = 108;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx22>>2] = 108;
   sp = STACKTOP;
   return;
   break;
  }
  case 52: {
   $101 = HEAP32[56>>2]|0;
   $102 = HEAP32[(389576)>>2]|0;
   $103 = (($102|0) / 40)&-1;
   $ReallocAsyncCtx21 = (_emscripten_realloc_async_context(4)|0);
   _move_paddle($101,1105,$99,$103);
   $IsAsync77 = ___async;
   if ($IsAsync77) {
    HEAP32[$ReallocAsyncCtx21>>2] = 109;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx21>>2] = 109;
   sp = STACKTOP;
   return;
   break;
  }
  case 56: {
   $ReallocAsyncCtx20 = (_emscripten_realloc_async_context(4)|0);
   _paddle_ai(2);
   $IsAsync73 = ___async;
   if ($IsAsync73) {
    HEAP32[$ReallocAsyncCtx20>>2] = 110;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx20>>2] = 110;
   sp = STACKTOP;
   return;
   break;
  }
  case 60: {
   $113 = HEAP8[104>>0]|0;
   $114 = ($113<<24>>24)==(0);
   if ($114) {
    $ReallocAsyncCtx39 = (_emscripten_realloc_async_context(4)|0);
    $115 = (_collision_ball()|0);
    $IsAsync146 = ___async;
    if ($IsAsync146) {
     HEAP32[$ReallocAsyncCtx39>>2] = 111;
     sp = STACKTOP;
     return;
    }
    $116 = ___async_retval;
    $$expand_i1_val = $115&1;
    HEAP8[$116>>0] = $$expand_i1_val;
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx39>>2] = 111;
    sp = STACKTOP;
    return;
   } else {
    $ReallocAsyncCtx38 = (_emscripten_realloc_async_context(4)|0);
    _update_ball();
    $IsAsync142 = ___async;
    if ($IsAsync142) {
     HEAP32[$ReallocAsyncCtx38>>2] = 112;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx38>>2] = 112;
    sp = STACKTOP;
    return;
   }
   break;
  }
  case 72: {
   $ReallocAsyncCtx32 = (_emscripten_realloc_async_context(4)|0);
   _end_danger();
   $IsAsync120 = ___async;
   if ($IsAsync120) {
    HEAP32[$ReallocAsyncCtx32>>2] = 124;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx32>>2] = 124;
   sp = STACKTOP;
   return;
   break;
  }
  case 78: {
   $166 = HEAP32[(651924)>>2]|0;
   $167 = $161 * 1.2;
   $168 = $167;
   HEAPF32[$159>>2] = $168;
   $169 = ((($149)) + 36|0);
   $170 = +HEAPF32[$169>>2];
   $171 = $170;
   $172 = $171 * 1.2;
   $173 = $172;
   HEAPF32[$169>>2] = $173;
   $ReallocAsyncCtx15 = (_emscripten_realloc_async_context(8)|0);
   FUNCTION_TABLE_vidd[$166 & 255]($149,$168,$173);
   $IsAsync54 = ___async;
   if ($IsAsync54) {
    HEAP32[$ReallocAsyncCtx15>>2] = 125;
    $174 = ((($ReallocAsyncCtx15)) + 4|0);
    HEAP32[$174>>2] = $pad$0;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx15>>2] = 125;
   $174 = ((($ReallocAsyncCtx15)) + 4|0);
   HEAP32[$174>>2] = $pad$0;
   sp = STACKTOP;
   return;
   break;
  }
  case 83: {
   $182 = HEAP32[(651924)>>2]|0;
   $183 = $177 * 1.2;
   $184 = $183;
   HEAPF32[$175>>2] = $184;
   $185 = ((($pad$0)) + 36|0);
   $186 = +HEAPF32[$185>>2];
   $187 = $186;
   $188 = $187 * 1.1000000000000001;
   $189 = $188;
   HEAPF32[$185>>2] = $189;
   $ReallocAsyncCtx16 = (_emscripten_realloc_async_context(8)|0);
   FUNCTION_TABLE_vidd[$182 & 255]($pad$0,$184,$189);
   $IsAsync58 = ___async;
   if ($IsAsync58) {
    HEAP32[$ReallocAsyncCtx16>>2] = 126;
    $190 = ((($ReallocAsyncCtx16)) + 4|0);
    HEAP32[$190>>2] = $pad$0;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx16>>2] = 126;
   $190 = ((($ReallocAsyncCtx16)) + 4|0);
   HEAP32[$190>>2] = $pad$0;
   sp = STACKTOP;
   return;
   break;
  }
  case 100: {
   return;
   break;
  }
 }
}
function _pong__async_cb145($0) {
 $0 = $0|0;
 var $$expand_i1_val = 0, $$not7 = 0, $$pr = 0, $$pr32 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0.0, $158 = 0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0, $163 = 0.0, $164 = 0.0, $165 = 0, $166 = 0, $167 = 0.0;
 var $168 = 0.0, $169 = 0, $17 = 0, $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0, $175 = 0, $176 = 0.0, $177 = 0.0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0, $182 = 0, $183 = 0.0, $184 = 0.0, $185 = 0;
 var $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $26 = 0.0, $27 = 0, $28 = 0.0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $IsAsync11 = 0, $IsAsync120 = 0;
 var $IsAsync142 = 0, $IsAsync146 = 0, $IsAsync18 = 0, $IsAsync22 = 0, $IsAsync30 = 0, $IsAsync4 = 0, $IsAsync54 = 0, $IsAsync58 = 0, $IsAsync62 = 0, $IsAsync73 = 0, $IsAsync77 = 0, $IsAsync81 = 0, $IsAsync85 = 0, $IsAsync89 = 0, $IsAsync93 = 0, $IsAsync97 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx16 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx2 = 0;
 var $ReallocAsyncCtx20 = 0, $ReallocAsyncCtx21 = 0, $ReallocAsyncCtx22 = 0, $ReallocAsyncCtx23 = 0, $ReallocAsyncCtx24 = 0, $ReallocAsyncCtx25 = 0, $ReallocAsyncCtx26 = 0, $ReallocAsyncCtx32 = 0, $ReallocAsyncCtx38 = 0, $ReallocAsyncCtx39 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx9 = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond30 = 0, $or$cond42 = 0;
 var $or$cond44 = 0, $or$cond9 = 0, $pad$0 = 0, $paddle2$paddle1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 L2: while(1) {
  $89 = HEAP32[(389556)>>2]|0;
  $90 = HEAP32[$89>>2]|0;
  $91 = ($90|0)==(2);
  if ($91) {
   $92 = HEAP32[(390064)>>2]|0;
   $93 = ($92|0)>(0);
   $94 = HEAP8[382784>>0]|0;
   $95 = ($94<<24>>24)==(0);
   $or$cond15 = $93 & $95;
   if ($or$cond15) {
    label = 48;
    break;
   }
   $99 = HEAP32[(390048)>>2]|0;
   $100 = ($99|0)>(0);
   $or$cond17 = $95 & $100;
   if ($or$cond17) {
    label = 52;
    break;
   }
  }
  $104 = HEAP32[(389556)>>2]|0;
  $105 = HEAP32[$104>>2]|0;
  $106 = ($105|0)<(2);
  if ($106) {
   label = 56;
   break;
  }
  $107 = HEAP32[8>>2]|0;
  $108 = ((($107)) + 8|0);
  $109 = +HEAPF32[$108>>2];
  $110 = (~~(($109)));
  HEAP32[382808>>2] = $110;
  $111 = HEAP8[382784>>0]|0;
  $112 = ($111<<24>>24)==(0);
  if ($112) {
   label = 60;
   break;
  }
  $$pr32 = HEAP8[35112>>0]|0;
  $117 = ($$pr32<<24>>24)==(0);
  if (!($117)) {
   $118 = 389544;
   $119 = $118;
   $120 = HEAP32[$119>>2]|0;
   $121 = (($118) + 4)|0;
   $122 = $121;
   $123 = HEAP32[$122>>2]|0;
   $124 = 35120;
   $125 = $124;
   $126 = HEAP32[$125>>2]|0;
   $127 = (($124) + 4)|0;
   $128 = $127;
   $129 = HEAP32[$128>>2]|0;
   $130 = (_i64Subtract(($120|0),($123|0),($126|0),($129|0))|0);
   $131 = tempRet0;
   $132 = ($131>>>0)>(0);
   $133 = ($130>>>0)>(10000000);
   $134 = ($131|0)==(0);
   $135 = $134 & $133;
   $136 = $132 | $135;
   if ($136) {
    label = 72;
    break;
   }
   $137 = HEAP32[(651780)>>2]|0;
   if ((($137|0) == 5) | (($137|0) == 15)) {
    $138 = HEAP32[40>>2]|0;
    $139 = ((($138)) + 4|0);
    $140 = HEAP32[$139>>2]|0;
    $141 = ($140|0)==(4);
    $142 = ($131>>>0)>(0);
    $143 = ($130>>>0)>(5000000);
    $144 = ($131|0)==(0);
    $145 = $144 & $143;
    $146 = $142 | $145;
    $or$cond30 = $146 & $141;
    if ($or$cond30) {
     label = 72;
     break;
    }
   }
  }
  $147 = HEAP8[104>>0]|0;
  $148 = ($147<<24>>24)==(0);
  do {
   if (!($148)) {
    $149 = HEAP32[96>>2]|0;
    $150 = ((($149)) + 44|0);
    $151 = HEAP8[$150>>0]|0;
    $152 = ($151<<24>>24)==(0);
    if (!($152)) {
     $153 = ((($149)) + 8|0);
     $154 = +HEAPF32[$153>>2];
     $155 = HEAP32[(389572)>>2]|0;
     $156 = (($155|0) / 2)&-1;
     $157 = (+($156|0));
     $158 = $154 > $157;
     $paddle2$paddle1 = $158 ? 48 : 56;
     $pad$0 = HEAP32[$paddle2$paddle1>>2]|0;
     $159 = ((($149)) + 40|0);
     $160 = +HEAPF32[$159>>2];
     $161 = $160;
     $162 = (($155|0) / 40)&-1;
     $163 = (+($162|0));
     $164 = $163 * 10.0;
     $165 = $161 < $164;
     if ($165) {
      label = 78;
      break L2;
     }
     HEAP8[$150>>0] = 0;
     $175 = ((($pad$0)) + 40|0);
     $176 = +HEAPF32[$175>>2];
     $177 = $176;
     $178 = (($155|0) / 40)&-1;
     $179 = (+($178|0));
     $180 = $179 * 20.0;
     $181 = $177 < $180;
     if ($181) {
      label = 83;
      break L2;
     }
     $191 = ((($pad$0)) + 44|0);
     HEAP8[$191>>0] = 0;
     $192 = ((($pad$0)) + 4|0);
     $193 = HEAP32[$192>>2]|0;
     if ((($193|0) == 0)) {
      HEAP32[$192>>2] = 1;
      break;
     } else if ((($193|0) == 10)) {
      HEAP32[$192>>2] = 11;
      break;
     } else {
      break;
     }
    }
   }
  } while(0);
  $194 = HEAP8[382784>>0]|0;
  $195 = ($194<<24>>24)==(0);
  if ($195) {
   $196 = 389544;
   $197 = $196;
   $198 = HEAP32[$197>>2]|0;
   $199 = (($196) + 4)|0;
   $200 = $199;
   $201 = HEAP32[$200>>2]|0;
   $237 = $198;$238 = $201;
  } else {
   $202 = HEAP8[104>>0]|0;
   $203 = ($202<<24>>24)==(0);
   $204 = 389544;
   $205 = $204;
   $206 = HEAP32[$205>>2]|0;
   $207 = (($204) + 4)|0;
   $208 = $207;
   $209 = HEAP32[$208>>2]|0;
   $210 = 382800;
   $211 = $210;
   $212 = HEAP32[$211>>2]|0;
   $213 = (($210) + 4)|0;
   $214 = $213;
   $215 = HEAP32[$214>>2]|0;
   $216 = (_i64Subtract(($206|0),($209|0),($212|0),($215|0))|0);
   $217 = tempRet0;
   $218 = ($217>>>0)>(0);
   $219 = ($216>>>0)>(3000000);
   $220 = ($217|0)==(0);
   $221 = $220 & $219;
   $222 = $218 | $221;
   $or$cond42 = $203 & $222;
   $223 = (_i64Subtract(($206|0),($209|0),($212|0),($215|0))|0);
   $224 = tempRet0;
   $225 = ($224>>>0)>(0);
   $226 = ($223>>>0)>(6000000);
   $227 = ($224|0)==(0);
   $228 = $227 & $226;
   $229 = $225 | $228;
   $or$cond44 = $or$cond42 | $229;
   if ($or$cond44) {
    $230 = HEAP32[35096>>2]|0;
    $231 = ($230|0)==(6);
    if ($231) {
     $232 = HEAP32[(389556)>>2]|0;
     $233 = HEAP32[$232>>2]|0;
     $234 = ($233|0)==(1);
     if ($234) {
      $235 = ((($232)) + 4|0);
      HEAP8[$235>>0] = 1;
     } else {
      label = 96;
     }
    } else {
     label = 96;
    }
    if ((label|0) == 96) {
     label = 0;
     HEAP32[(651780)>>2] = 0;
    }
    HEAP8[128>>0] = 0;
    $237 = $206;$238 = $209;
   } else {
    $237 = $206;$238 = $209;
   }
  }
  $236 = HEAP32[216>>2]|0;
  $1 = (($236) + -40000)|0;
  HEAP32[216>>2] = $1;
  $239 = (_i64Add(($237|0),($238|0),40000,0)|0);
  $240 = tempRet0;
  $241 = 389544;
  $242 = $241;
  HEAP32[$242>>2] = $239;
  $243 = (($241) + 4)|0;
  $244 = $243;
  HEAP32[$244>>2] = $240;
  $2 = ($1|0)>(39999);
  if ($2) {
   label = 3;
   break;
  }
  __render();
  $245 = HEAP8[128>>0]|0;
  $$not7 = ($245<<24>>24)==(0);
  $246 = 389544;
  $247 = $246;
  $248 = HEAP32[$247>>2]|0;
  $249 = (($246) + 4)|0;
  $250 = $249;
  $251 = HEAP32[$250>>2]|0;
  $252 = ($248|0)==(0);
  $253 = ($251|0)==(0);
  $254 = $252 & $253;
  $or$cond9 = $$not7 & $254;
  if (!($or$cond9)) {
   label = 100;
   break;
  }
  $3 = HEAP32[(389696)>>2]|0;
  $4 = ($3|0)==(0);
  if (!($4)) {
   HEAP8[128>>0] = 0;
  }
  $5 = (_score_ball()|0);
  if ((($5|0) == 5)) {
   $6 = HEAP8[382784>>0]|0;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    label = 10;
    break;
   }
  } else if (!((($5|0) == 0))) {
   $$pr = HEAP8[382784>>0]|0;
   $62 = ($$pr<<24>>24)==(0);
   if ($62) {
    label = 26;
    break;
   }
  }
  $65 = HEAP32[(394012)>>2]|0;
  $66 = ($65|0)>(0);
  $67 = HEAP8[382784>>0]|0;
  $68 = ($67<<24>>24)==(0);
  $or$cond11 = $66 & $68;
  if ($or$cond11) {
   label = 30;
   break;
  }
  $78 = HEAP32[(394008)>>2]|0;
  $79 = ($78|0)>(0);
  $or$cond13 = $68 & $79;
  if ($or$cond13) {
   label = 39;
   break;
  }
 }
 switch (label|0) {
  case 3: {
   $ReallocAsyncCtx17 = (_emscripten_realloc_async_context(4)|0);
   __update();
   $IsAsync62 = ___async;
   if ($IsAsync62) {
    HEAP32[$ReallocAsyncCtx17>>2] = 94;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx17>>2] = 94;
   sp = STACKTOP;
   return;
   break;
  }
  case 10: {
   HEAP8[382784>>0] = 1;
   $8 = HEAP32[(389556)>>2]|0;
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(1);
   if ($10) {
    $11 = (_get_score(1)|0);
    $12 = ($11|0)==(5);
    if ($12) {
     $13 = 389544;
     $14 = $13;
     $15 = HEAP32[$14>>2]|0;
     $16 = (($13) + 4)|0;
     $17 = $16;
     $18 = HEAP32[$17>>2]|0;
     $19 = 382800;
     $20 = $19;
     HEAP32[$20>>2] = $15;
     $21 = (($19) + 4)|0;
     $22 = $21;
     HEAP32[$22>>2] = $18;
     $23 = HEAP32[(651920)>>2]|0;
     $24 = HEAP32[8>>2]|0;
     $25 = HEAP32[(389572)>>2]|0;
     $26 = (+($25|0));
     $27 = ((($24)) + 12|0);
     $28 = +HEAPF32[$27>>2];
     $ReallocAsyncCtx2 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vidd[$23 & 255]($24,$26,$28);
     $IsAsync4 = ___async;
     if ($IsAsync4) {
      HEAP32[$ReallocAsyncCtx2>>2] = 95;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx2>>2] = 95;
     sp = STACKTOP;
     return;
    } else {
     HEAP8[382784>>0] = 1;
     $29 = 389544;
     $30 = $29;
     $31 = HEAP32[$30>>2]|0;
     $32 = (($29) + 4)|0;
     $33 = $32;
     $34 = HEAP32[$33>>2]|0;
     $35 = 382800;
     $36 = $35;
     HEAP32[$36>>2] = $31;
     $37 = (($35) + 4)|0;
     $38 = $37;
     HEAP32[$38>>2] = $34;
     $39 = HEAP32[(651952)>>2]|0;
     $40 = HEAP32[35168>>2]|0;
     $ReallocAsyncCtx4 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vi[$39 & 255]($40);
     $IsAsync11 = ___async;
     if ($IsAsync11) {
      HEAP32[$ReallocAsyncCtx4>>2] = 97;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx4>>2] = 97;
     sp = STACKTOP;
     return;
    }
   } else {
    $41 = 389544;
    $42 = $41;
    $43 = HEAP32[$42>>2]|0;
    $44 = (($41) + 4)|0;
    $45 = $44;
    $46 = HEAP32[$45>>2]|0;
    $47 = 382800;
    $48 = $47;
    HEAP32[$48>>2] = $43;
    $49 = (($47) + 4)|0;
    $50 = $49;
    HEAP32[$50>>2] = $46;
    $51 = HEAP32[8>>2]|0;
    $52 = ((($51)) + 8|0);
    $53 = +HEAPF32[$52>>2];
    $54 = HEAP32[(389572)>>2]|0;
    $55 = (($54|0) / 2)&-1;
    $56 = (+($55|0));
    $57 = $53 > $56;
    $58 = HEAP32[(651920)>>2]|0;
    $59 = ((($51)) + 12|0);
    $60 = +HEAPF32[$59>>2];
    if ($57) {
     $61 = (+($54|0));
     $ReallocAsyncCtx6 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vidd[$58 & 255]($51,$61,$60);
     $IsAsync18 = ___async;
     if ($IsAsync18) {
      HEAP32[$ReallocAsyncCtx6>>2] = 99;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx6>>2] = 99;
     sp = STACKTOP;
     return;
    } else {
     $ReallocAsyncCtx7 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vidd[$58 & 255]($51,0.0,$60);
     $IsAsync22 = ___async;
     if ($IsAsync22) {
      HEAP32[$ReallocAsyncCtx7>>2] = 100;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx7>>2] = 100;
     sp = STACKTOP;
     return;
    }
   }
   break;
  }
  case 26: {
   $63 = HEAP32[(651952)>>2]|0;
   $64 = HEAP32[35128>>2]|0;
   $ReallocAsyncCtx9 = (_emscripten_realloc_async_context(4)|0);
   FUNCTION_TABLE_vi[$63 & 255]($64);
   $IsAsync30 = ___async;
   if ($IsAsync30) {
    HEAP32[$ReallocAsyncCtx9>>2] = 102;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx9>>2] = 102;
   sp = STACKTOP;
   return;
   break;
  }
  case 30: {
   $69 = HEAP32[(389556)>>2]|0;
   $70 = HEAP32[$69>>2]|0;
   $71 = ($70|0)==(1);
   if ($71) {
    $72 = HEAP32[56>>2]|0;
    $73 = HEAP32[(389576)>>2]|0;
    $74 = (($73|0) / 40)&-1;
    $ReallocAsyncCtx26 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($72,1106,$65,$74);
    $IsAsync97 = ___async;
    if ($IsAsync97) {
     HEAP32[$ReallocAsyncCtx26>>2] = 104;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx26>>2] = 104;
    sp = STACKTOP;
    return;
   } else {
    $75 = HEAP32[48>>2]|0;
    $76 = HEAP32[(389576)>>2]|0;
    $77 = (($76|0) / 40)&-1;
    $ReallocAsyncCtx25 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($75,1106,$65,$77);
    $IsAsync93 = ___async;
    if ($IsAsync93) {
     HEAP32[$ReallocAsyncCtx25>>2] = 105;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx25>>2] = 105;
    sp = STACKTOP;
    return;
   }
   break;
  }
  case 39: {
   $80 = HEAP32[(389556)>>2]|0;
   $81 = HEAP32[$80>>2]|0;
   $82 = ($81|0)==(1);
   if ($82) {
    $83 = HEAP32[56>>2]|0;
    $84 = HEAP32[(389576)>>2]|0;
    $85 = (($84|0) / 40)&-1;
    $ReallocAsyncCtx24 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($83,1105,$78,$85);
    $IsAsync89 = ___async;
    if ($IsAsync89) {
     HEAP32[$ReallocAsyncCtx24>>2] = 106;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx24>>2] = 106;
    sp = STACKTOP;
    return;
   } else {
    $86 = HEAP32[48>>2]|0;
    $87 = HEAP32[(389576)>>2]|0;
    $88 = (($87|0) / 40)&-1;
    $ReallocAsyncCtx23 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($86,1105,$78,$88);
    $IsAsync85 = ___async;
    if ($IsAsync85) {
     HEAP32[$ReallocAsyncCtx23>>2] = 107;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx23>>2] = 107;
    sp = STACKTOP;
    return;
   }
   break;
  }
  case 48: {
   $96 = HEAP32[56>>2]|0;
   $97 = HEAP32[(389576)>>2]|0;
   $98 = (($97|0) / 40)&-1;
   $ReallocAsyncCtx22 = (_emscripten_realloc_async_context(4)|0);
   _move_paddle($96,1106,$92,$98);
   $IsAsync81 = ___async;
   if ($IsAsync81) {
    HEAP32[$ReallocAsyncCtx22>>2] = 108;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx22>>2] = 108;
   sp = STACKTOP;
   return;
   break;
  }
  case 52: {
   $101 = HEAP32[56>>2]|0;
   $102 = HEAP32[(389576)>>2]|0;
   $103 = (($102|0) / 40)&-1;
   $ReallocAsyncCtx21 = (_emscripten_realloc_async_context(4)|0);
   _move_paddle($101,1105,$99,$103);
   $IsAsync77 = ___async;
   if ($IsAsync77) {
    HEAP32[$ReallocAsyncCtx21>>2] = 109;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx21>>2] = 109;
   sp = STACKTOP;
   return;
   break;
  }
  case 56: {
   $ReallocAsyncCtx20 = (_emscripten_realloc_async_context(4)|0);
   _paddle_ai(2);
   $IsAsync73 = ___async;
   if ($IsAsync73) {
    HEAP32[$ReallocAsyncCtx20>>2] = 110;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx20>>2] = 110;
   sp = STACKTOP;
   return;
   break;
  }
  case 60: {
   $113 = HEAP8[104>>0]|0;
   $114 = ($113<<24>>24)==(0);
   if ($114) {
    $ReallocAsyncCtx39 = (_emscripten_realloc_async_context(4)|0);
    $115 = (_collision_ball()|0);
    $IsAsync146 = ___async;
    if ($IsAsync146) {
     HEAP32[$ReallocAsyncCtx39>>2] = 111;
     sp = STACKTOP;
     return;
    }
    $116 = ___async_retval;
    $$expand_i1_val = $115&1;
    HEAP8[$116>>0] = $$expand_i1_val;
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx39>>2] = 111;
    sp = STACKTOP;
    return;
   } else {
    $ReallocAsyncCtx38 = (_emscripten_realloc_async_context(4)|0);
    _update_ball();
    $IsAsync142 = ___async;
    if ($IsAsync142) {
     HEAP32[$ReallocAsyncCtx38>>2] = 112;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx38>>2] = 112;
    sp = STACKTOP;
    return;
   }
   break;
  }
  case 72: {
   $ReallocAsyncCtx32 = (_emscripten_realloc_async_context(4)|0);
   _end_danger();
   $IsAsync120 = ___async;
   if ($IsAsync120) {
    HEAP32[$ReallocAsyncCtx32>>2] = 124;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx32>>2] = 124;
   sp = STACKTOP;
   return;
   break;
  }
  case 78: {
   $166 = HEAP32[(651924)>>2]|0;
   $167 = $161 * 1.2;
   $168 = $167;
   HEAPF32[$159>>2] = $168;
   $169 = ((($149)) + 36|0);
   $170 = +HEAPF32[$169>>2];
   $171 = $170;
   $172 = $171 * 1.2;
   $173 = $172;
   HEAPF32[$169>>2] = $173;
   $ReallocAsyncCtx15 = (_emscripten_realloc_async_context(8)|0);
   FUNCTION_TABLE_vidd[$166 & 255]($149,$168,$173);
   $IsAsync54 = ___async;
   if ($IsAsync54) {
    HEAP32[$ReallocAsyncCtx15>>2] = 125;
    $174 = ((($ReallocAsyncCtx15)) + 4|0);
    HEAP32[$174>>2] = $pad$0;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx15>>2] = 125;
   $174 = ((($ReallocAsyncCtx15)) + 4|0);
   HEAP32[$174>>2] = $pad$0;
   sp = STACKTOP;
   return;
   break;
  }
  case 83: {
   $182 = HEAP32[(651924)>>2]|0;
   $183 = $177 * 1.2;
   $184 = $183;
   HEAPF32[$175>>2] = $184;
   $185 = ((($pad$0)) + 36|0);
   $186 = +HEAPF32[$185>>2];
   $187 = $186;
   $188 = $187 * 1.1000000000000001;
   $189 = $188;
   HEAPF32[$185>>2] = $189;
   $ReallocAsyncCtx16 = (_emscripten_realloc_async_context(8)|0);
   FUNCTION_TABLE_vidd[$182 & 255]($pad$0,$184,$189);
   $IsAsync58 = ___async;
   if ($IsAsync58) {
    HEAP32[$ReallocAsyncCtx16>>2] = 126;
    $190 = ((($ReallocAsyncCtx16)) + 4|0);
    HEAP32[$190>>2] = $pad$0;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx16>>2] = 126;
   $190 = ((($ReallocAsyncCtx16)) + 4|0);
   HEAP32[$190>>2] = $pad$0;
   sp = STACKTOP;
   return;
   break;
  }
  case 100: {
   return;
   break;
  }
 }
}
function _pong__async_cb146($0) {
 $0 = $0|0;
 var $$expand_i1_val = 0, $$not7 = 0, $$pr = 0, $$pr32 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0.0, $158 = 0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0, $163 = 0.0, $164 = 0.0, $165 = 0, $166 = 0, $167 = 0.0;
 var $168 = 0.0, $169 = 0, $17 = 0, $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0, $175 = 0, $176 = 0.0, $177 = 0.0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0, $182 = 0, $183 = 0.0, $184 = 0.0, $185 = 0;
 var $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $26 = 0.0, $27 = 0, $28 = 0.0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $IsAsync11 = 0, $IsAsync120 = 0;
 var $IsAsync142 = 0, $IsAsync146 = 0, $IsAsync18 = 0, $IsAsync22 = 0, $IsAsync30 = 0, $IsAsync4 = 0, $IsAsync54 = 0, $IsAsync58 = 0, $IsAsync62 = 0, $IsAsync73 = 0, $IsAsync77 = 0, $IsAsync81 = 0, $IsAsync85 = 0, $IsAsync89 = 0, $IsAsync93 = 0, $IsAsync97 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx16 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx2 = 0;
 var $ReallocAsyncCtx20 = 0, $ReallocAsyncCtx21 = 0, $ReallocAsyncCtx22 = 0, $ReallocAsyncCtx23 = 0, $ReallocAsyncCtx24 = 0, $ReallocAsyncCtx25 = 0, $ReallocAsyncCtx26 = 0, $ReallocAsyncCtx32 = 0, $ReallocAsyncCtx38 = 0, $ReallocAsyncCtx39 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx9 = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond30 = 0, $or$cond42 = 0;
 var $or$cond44 = 0, $or$cond9 = 0, $pad$0 = 0, $paddle2$paddle1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 L2: while(1) {
  $89 = HEAP32[(389556)>>2]|0;
  $90 = HEAP32[$89>>2]|0;
  $91 = ($90|0)==(2);
  if ($91) {
   $92 = HEAP32[(390064)>>2]|0;
   $93 = ($92|0)>(0);
   $94 = HEAP8[382784>>0]|0;
   $95 = ($94<<24>>24)==(0);
   $or$cond15 = $93 & $95;
   if ($or$cond15) {
    label = 48;
    break;
   }
   $99 = HEAP32[(390048)>>2]|0;
   $100 = ($99|0)>(0);
   $or$cond17 = $95 & $100;
   if ($or$cond17) {
    label = 52;
    break;
   }
  }
  $104 = HEAP32[(389556)>>2]|0;
  $105 = HEAP32[$104>>2]|0;
  $106 = ($105|0)<(2);
  if ($106) {
   label = 56;
   break;
  }
  $107 = HEAP32[8>>2]|0;
  $108 = ((($107)) + 8|0);
  $109 = +HEAPF32[$108>>2];
  $110 = (~~(($109)));
  HEAP32[382808>>2] = $110;
  $111 = HEAP8[382784>>0]|0;
  $112 = ($111<<24>>24)==(0);
  if ($112) {
   label = 60;
   break;
  }
  $$pr32 = HEAP8[35112>>0]|0;
  $117 = ($$pr32<<24>>24)==(0);
  if (!($117)) {
   $118 = 389544;
   $119 = $118;
   $120 = HEAP32[$119>>2]|0;
   $121 = (($118) + 4)|0;
   $122 = $121;
   $123 = HEAP32[$122>>2]|0;
   $124 = 35120;
   $125 = $124;
   $126 = HEAP32[$125>>2]|0;
   $127 = (($124) + 4)|0;
   $128 = $127;
   $129 = HEAP32[$128>>2]|0;
   $130 = (_i64Subtract(($120|0),($123|0),($126|0),($129|0))|0);
   $131 = tempRet0;
   $132 = ($131>>>0)>(0);
   $133 = ($130>>>0)>(10000000);
   $134 = ($131|0)==(0);
   $135 = $134 & $133;
   $136 = $132 | $135;
   if ($136) {
    label = 72;
    break;
   }
   $137 = HEAP32[(651780)>>2]|0;
   if ((($137|0) == 5) | (($137|0) == 15)) {
    $138 = HEAP32[40>>2]|0;
    $139 = ((($138)) + 4|0);
    $140 = HEAP32[$139>>2]|0;
    $141 = ($140|0)==(4);
    $142 = ($131>>>0)>(0);
    $143 = ($130>>>0)>(5000000);
    $144 = ($131|0)==(0);
    $145 = $144 & $143;
    $146 = $142 | $145;
    $or$cond30 = $146 & $141;
    if ($or$cond30) {
     label = 72;
     break;
    }
   }
  }
  $147 = HEAP8[104>>0]|0;
  $148 = ($147<<24>>24)==(0);
  do {
   if (!($148)) {
    $149 = HEAP32[96>>2]|0;
    $150 = ((($149)) + 44|0);
    $151 = HEAP8[$150>>0]|0;
    $152 = ($151<<24>>24)==(0);
    if (!($152)) {
     $153 = ((($149)) + 8|0);
     $154 = +HEAPF32[$153>>2];
     $155 = HEAP32[(389572)>>2]|0;
     $156 = (($155|0) / 2)&-1;
     $157 = (+($156|0));
     $158 = $154 > $157;
     $paddle2$paddle1 = $158 ? 48 : 56;
     $pad$0 = HEAP32[$paddle2$paddle1>>2]|0;
     $159 = ((($149)) + 40|0);
     $160 = +HEAPF32[$159>>2];
     $161 = $160;
     $162 = (($155|0) / 40)&-1;
     $163 = (+($162|0));
     $164 = $163 * 10.0;
     $165 = $161 < $164;
     if ($165) {
      label = 78;
      break L2;
     }
     HEAP8[$150>>0] = 0;
     $175 = ((($pad$0)) + 40|0);
     $176 = +HEAPF32[$175>>2];
     $177 = $176;
     $178 = (($155|0) / 40)&-1;
     $179 = (+($178|0));
     $180 = $179 * 20.0;
     $181 = $177 < $180;
     if ($181) {
      label = 83;
      break L2;
     }
     $191 = ((($pad$0)) + 44|0);
     HEAP8[$191>>0] = 0;
     $192 = ((($pad$0)) + 4|0);
     $193 = HEAP32[$192>>2]|0;
     if ((($193|0) == 10)) {
      HEAP32[$192>>2] = 11;
      break;
     } else if ((($193|0) == 0)) {
      HEAP32[$192>>2] = 1;
      break;
     } else {
      break;
     }
    }
   }
  } while(0);
  $194 = HEAP8[382784>>0]|0;
  $195 = ($194<<24>>24)==(0);
  if ($195) {
   $196 = 389544;
   $197 = $196;
   $198 = HEAP32[$197>>2]|0;
   $199 = (($196) + 4)|0;
   $200 = $199;
   $201 = HEAP32[$200>>2]|0;
   $237 = $198;$238 = $201;
  } else {
   $202 = HEAP8[104>>0]|0;
   $203 = ($202<<24>>24)==(0);
   $204 = 389544;
   $205 = $204;
   $206 = HEAP32[$205>>2]|0;
   $207 = (($204) + 4)|0;
   $208 = $207;
   $209 = HEAP32[$208>>2]|0;
   $210 = 382800;
   $211 = $210;
   $212 = HEAP32[$211>>2]|0;
   $213 = (($210) + 4)|0;
   $214 = $213;
   $215 = HEAP32[$214>>2]|0;
   $216 = (_i64Subtract(($206|0),($209|0),($212|0),($215|0))|0);
   $217 = tempRet0;
   $218 = ($217>>>0)>(0);
   $219 = ($216>>>0)>(3000000);
   $220 = ($217|0)==(0);
   $221 = $220 & $219;
   $222 = $218 | $221;
   $or$cond42 = $203 & $222;
   $223 = (_i64Subtract(($206|0),($209|0),($212|0),($215|0))|0);
   $224 = tempRet0;
   $225 = ($224>>>0)>(0);
   $226 = ($223>>>0)>(6000000);
   $227 = ($224|0)==(0);
   $228 = $227 & $226;
   $229 = $225 | $228;
   $or$cond44 = $or$cond42 | $229;
   if ($or$cond44) {
    $230 = HEAP32[35096>>2]|0;
    $231 = ($230|0)==(6);
    if ($231) {
     $232 = HEAP32[(389556)>>2]|0;
     $233 = HEAP32[$232>>2]|0;
     $234 = ($233|0)==(1);
     if ($234) {
      $235 = ((($232)) + 4|0);
      HEAP8[$235>>0] = 1;
     } else {
      label = 96;
     }
    } else {
     label = 96;
    }
    if ((label|0) == 96) {
     label = 0;
     HEAP32[(651780)>>2] = 0;
    }
    HEAP8[128>>0] = 0;
    $237 = $206;$238 = $209;
   } else {
    $237 = $206;$238 = $209;
   }
  }
  $236 = HEAP32[216>>2]|0;
  $1 = (($236) + -40000)|0;
  HEAP32[216>>2] = $1;
  $239 = (_i64Add(($237|0),($238|0),40000,0)|0);
  $240 = tempRet0;
  $241 = 389544;
  $242 = $241;
  HEAP32[$242>>2] = $239;
  $243 = (($241) + 4)|0;
  $244 = $243;
  HEAP32[$244>>2] = $240;
  $2 = ($1|0)>(39999);
  if ($2) {
   label = 3;
   break;
  }
  __render();
  $245 = HEAP8[128>>0]|0;
  $$not7 = ($245<<24>>24)==(0);
  $246 = 389544;
  $247 = $246;
  $248 = HEAP32[$247>>2]|0;
  $249 = (($246) + 4)|0;
  $250 = $249;
  $251 = HEAP32[$250>>2]|0;
  $252 = ($248|0)==(0);
  $253 = ($251|0)==(0);
  $254 = $252 & $253;
  $or$cond9 = $$not7 & $254;
  if (!($or$cond9)) {
   label = 100;
   break;
  }
  $3 = HEAP32[(389696)>>2]|0;
  $4 = ($3|0)==(0);
  if (!($4)) {
   HEAP8[128>>0] = 0;
  }
  $5 = (_score_ball()|0);
  if ((($5|0) == 5)) {
   $6 = HEAP8[382784>>0]|0;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    label = 10;
    break;
   }
  } else if (!((($5|0) == 0))) {
   $$pr = HEAP8[382784>>0]|0;
   $62 = ($$pr<<24>>24)==(0);
   if ($62) {
    label = 26;
    break;
   }
  }
  $65 = HEAP32[(394012)>>2]|0;
  $66 = ($65|0)>(0);
  $67 = HEAP8[382784>>0]|0;
  $68 = ($67<<24>>24)==(0);
  $or$cond11 = $66 & $68;
  if ($or$cond11) {
   label = 30;
   break;
  }
  $78 = HEAP32[(394008)>>2]|0;
  $79 = ($78|0)>(0);
  $or$cond13 = $68 & $79;
  if ($or$cond13) {
   label = 39;
   break;
  }
 }
 switch (label|0) {
  case 3: {
   $ReallocAsyncCtx17 = (_emscripten_realloc_async_context(4)|0);
   __update();
   $IsAsync62 = ___async;
   if ($IsAsync62) {
    HEAP32[$ReallocAsyncCtx17>>2] = 94;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx17>>2] = 94;
   sp = STACKTOP;
   return;
   break;
  }
  case 10: {
   HEAP8[382784>>0] = 1;
   $8 = HEAP32[(389556)>>2]|0;
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(1);
   if ($10) {
    $11 = (_get_score(1)|0);
    $12 = ($11|0)==(5);
    if ($12) {
     $13 = 389544;
     $14 = $13;
     $15 = HEAP32[$14>>2]|0;
     $16 = (($13) + 4)|0;
     $17 = $16;
     $18 = HEAP32[$17>>2]|0;
     $19 = 382800;
     $20 = $19;
     HEAP32[$20>>2] = $15;
     $21 = (($19) + 4)|0;
     $22 = $21;
     HEAP32[$22>>2] = $18;
     $23 = HEAP32[(651920)>>2]|0;
     $24 = HEAP32[8>>2]|0;
     $25 = HEAP32[(389572)>>2]|0;
     $26 = (+($25|0));
     $27 = ((($24)) + 12|0);
     $28 = +HEAPF32[$27>>2];
     $ReallocAsyncCtx2 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vidd[$23 & 255]($24,$26,$28);
     $IsAsync4 = ___async;
     if ($IsAsync4) {
      HEAP32[$ReallocAsyncCtx2>>2] = 95;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx2>>2] = 95;
     sp = STACKTOP;
     return;
    } else {
     HEAP8[382784>>0] = 1;
     $29 = 389544;
     $30 = $29;
     $31 = HEAP32[$30>>2]|0;
     $32 = (($29) + 4)|0;
     $33 = $32;
     $34 = HEAP32[$33>>2]|0;
     $35 = 382800;
     $36 = $35;
     HEAP32[$36>>2] = $31;
     $37 = (($35) + 4)|0;
     $38 = $37;
     HEAP32[$38>>2] = $34;
     $39 = HEAP32[(651952)>>2]|0;
     $40 = HEAP32[35168>>2]|0;
     $ReallocAsyncCtx4 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vi[$39 & 255]($40);
     $IsAsync11 = ___async;
     if ($IsAsync11) {
      HEAP32[$ReallocAsyncCtx4>>2] = 97;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx4>>2] = 97;
     sp = STACKTOP;
     return;
    }
   } else {
    $41 = 389544;
    $42 = $41;
    $43 = HEAP32[$42>>2]|0;
    $44 = (($41) + 4)|0;
    $45 = $44;
    $46 = HEAP32[$45>>2]|0;
    $47 = 382800;
    $48 = $47;
    HEAP32[$48>>2] = $43;
    $49 = (($47) + 4)|0;
    $50 = $49;
    HEAP32[$50>>2] = $46;
    $51 = HEAP32[8>>2]|0;
    $52 = ((($51)) + 8|0);
    $53 = +HEAPF32[$52>>2];
    $54 = HEAP32[(389572)>>2]|0;
    $55 = (($54|0) / 2)&-1;
    $56 = (+($55|0));
    $57 = $53 > $56;
    $58 = HEAP32[(651920)>>2]|0;
    $59 = ((($51)) + 12|0);
    $60 = +HEAPF32[$59>>2];
    if ($57) {
     $61 = (+($54|0));
     $ReallocAsyncCtx6 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vidd[$58 & 255]($51,$61,$60);
     $IsAsync18 = ___async;
     if ($IsAsync18) {
      HEAP32[$ReallocAsyncCtx6>>2] = 99;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx6>>2] = 99;
     sp = STACKTOP;
     return;
    } else {
     $ReallocAsyncCtx7 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vidd[$58 & 255]($51,0.0,$60);
     $IsAsync22 = ___async;
     if ($IsAsync22) {
      HEAP32[$ReallocAsyncCtx7>>2] = 100;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx7>>2] = 100;
     sp = STACKTOP;
     return;
    }
   }
   break;
  }
  case 26: {
   $63 = HEAP32[(651952)>>2]|0;
   $64 = HEAP32[35128>>2]|0;
   $ReallocAsyncCtx9 = (_emscripten_realloc_async_context(4)|0);
   FUNCTION_TABLE_vi[$63 & 255]($64);
   $IsAsync30 = ___async;
   if ($IsAsync30) {
    HEAP32[$ReallocAsyncCtx9>>2] = 102;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx9>>2] = 102;
   sp = STACKTOP;
   return;
   break;
  }
  case 30: {
   $69 = HEAP32[(389556)>>2]|0;
   $70 = HEAP32[$69>>2]|0;
   $71 = ($70|0)==(1);
   if ($71) {
    $72 = HEAP32[56>>2]|0;
    $73 = HEAP32[(389576)>>2]|0;
    $74 = (($73|0) / 40)&-1;
    $ReallocAsyncCtx26 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($72,1106,$65,$74);
    $IsAsync97 = ___async;
    if ($IsAsync97) {
     HEAP32[$ReallocAsyncCtx26>>2] = 104;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx26>>2] = 104;
    sp = STACKTOP;
    return;
   } else {
    $75 = HEAP32[48>>2]|0;
    $76 = HEAP32[(389576)>>2]|0;
    $77 = (($76|0) / 40)&-1;
    $ReallocAsyncCtx25 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($75,1106,$65,$77);
    $IsAsync93 = ___async;
    if ($IsAsync93) {
     HEAP32[$ReallocAsyncCtx25>>2] = 105;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx25>>2] = 105;
    sp = STACKTOP;
    return;
   }
   break;
  }
  case 39: {
   $80 = HEAP32[(389556)>>2]|0;
   $81 = HEAP32[$80>>2]|0;
   $82 = ($81|0)==(1);
   if ($82) {
    $83 = HEAP32[56>>2]|0;
    $84 = HEAP32[(389576)>>2]|0;
    $85 = (($84|0) / 40)&-1;
    $ReallocAsyncCtx24 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($83,1105,$78,$85);
    $IsAsync89 = ___async;
    if ($IsAsync89) {
     HEAP32[$ReallocAsyncCtx24>>2] = 106;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx24>>2] = 106;
    sp = STACKTOP;
    return;
   } else {
    $86 = HEAP32[48>>2]|0;
    $87 = HEAP32[(389576)>>2]|0;
    $88 = (($87|0) / 40)&-1;
    $ReallocAsyncCtx23 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($86,1105,$78,$88);
    $IsAsync85 = ___async;
    if ($IsAsync85) {
     HEAP32[$ReallocAsyncCtx23>>2] = 107;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx23>>2] = 107;
    sp = STACKTOP;
    return;
   }
   break;
  }
  case 48: {
   $96 = HEAP32[56>>2]|0;
   $97 = HEAP32[(389576)>>2]|0;
   $98 = (($97|0) / 40)&-1;
   $ReallocAsyncCtx22 = (_emscripten_realloc_async_context(4)|0);
   _move_paddle($96,1106,$92,$98);
   $IsAsync81 = ___async;
   if ($IsAsync81) {
    HEAP32[$ReallocAsyncCtx22>>2] = 108;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx22>>2] = 108;
   sp = STACKTOP;
   return;
   break;
  }
  case 52: {
   $101 = HEAP32[56>>2]|0;
   $102 = HEAP32[(389576)>>2]|0;
   $103 = (($102|0) / 40)&-1;
   $ReallocAsyncCtx21 = (_emscripten_realloc_async_context(4)|0);
   _move_paddle($101,1105,$99,$103);
   $IsAsync77 = ___async;
   if ($IsAsync77) {
    HEAP32[$ReallocAsyncCtx21>>2] = 109;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx21>>2] = 109;
   sp = STACKTOP;
   return;
   break;
  }
  case 56: {
   $ReallocAsyncCtx20 = (_emscripten_realloc_async_context(4)|0);
   _paddle_ai(2);
   $IsAsync73 = ___async;
   if ($IsAsync73) {
    HEAP32[$ReallocAsyncCtx20>>2] = 110;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx20>>2] = 110;
   sp = STACKTOP;
   return;
   break;
  }
  case 60: {
   $113 = HEAP8[104>>0]|0;
   $114 = ($113<<24>>24)==(0);
   if ($114) {
    $ReallocAsyncCtx39 = (_emscripten_realloc_async_context(4)|0);
    $115 = (_collision_ball()|0);
    $IsAsync146 = ___async;
    if ($IsAsync146) {
     HEAP32[$ReallocAsyncCtx39>>2] = 111;
     sp = STACKTOP;
     return;
    }
    $116 = ___async_retval;
    $$expand_i1_val = $115&1;
    HEAP8[$116>>0] = $$expand_i1_val;
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx39>>2] = 111;
    sp = STACKTOP;
    return;
   } else {
    $ReallocAsyncCtx38 = (_emscripten_realloc_async_context(4)|0);
    _update_ball();
    $IsAsync142 = ___async;
    if ($IsAsync142) {
     HEAP32[$ReallocAsyncCtx38>>2] = 112;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx38>>2] = 112;
    sp = STACKTOP;
    return;
   }
   break;
  }
  case 72: {
   $ReallocAsyncCtx32 = (_emscripten_realloc_async_context(4)|0);
   _end_danger();
   $IsAsync120 = ___async;
   if ($IsAsync120) {
    HEAP32[$ReallocAsyncCtx32>>2] = 124;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx32>>2] = 124;
   sp = STACKTOP;
   return;
   break;
  }
  case 78: {
   $166 = HEAP32[(651924)>>2]|0;
   $167 = $161 * 1.2;
   $168 = $167;
   HEAPF32[$159>>2] = $168;
   $169 = ((($149)) + 36|0);
   $170 = +HEAPF32[$169>>2];
   $171 = $170;
   $172 = $171 * 1.2;
   $173 = $172;
   HEAPF32[$169>>2] = $173;
   $ReallocAsyncCtx15 = (_emscripten_realloc_async_context(8)|0);
   FUNCTION_TABLE_vidd[$166 & 255]($149,$168,$173);
   $IsAsync54 = ___async;
   if ($IsAsync54) {
    HEAP32[$ReallocAsyncCtx15>>2] = 125;
    $174 = ((($ReallocAsyncCtx15)) + 4|0);
    HEAP32[$174>>2] = $pad$0;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx15>>2] = 125;
   $174 = ((($ReallocAsyncCtx15)) + 4|0);
   HEAP32[$174>>2] = $pad$0;
   sp = STACKTOP;
   return;
   break;
  }
  case 83: {
   $182 = HEAP32[(651924)>>2]|0;
   $183 = $177 * 1.2;
   $184 = $183;
   HEAPF32[$175>>2] = $184;
   $185 = ((($pad$0)) + 36|0);
   $186 = +HEAPF32[$185>>2];
   $187 = $186;
   $188 = $187 * 1.1000000000000001;
   $189 = $188;
   HEAPF32[$185>>2] = $189;
   $ReallocAsyncCtx16 = (_emscripten_realloc_async_context(8)|0);
   FUNCTION_TABLE_vidd[$182 & 255]($pad$0,$184,$189);
   $IsAsync58 = ___async;
   if ($IsAsync58) {
    HEAP32[$ReallocAsyncCtx16>>2] = 126;
    $190 = ((($ReallocAsyncCtx16)) + 4|0);
    HEAP32[$190>>2] = $pad$0;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx16>>2] = 126;
   $190 = ((($ReallocAsyncCtx16)) + 4|0);
   HEAP32[$190>>2] = $pad$0;
   sp = STACKTOP;
   return;
   break;
  }
  case 100: {
   return;
   break;
  }
 }
}
function _pong__async_cb147($0) {
 $0 = $0|0;
 var $IsAsync69 = 0, $ReallocAsyncCtx19 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ReallocAsyncCtx19 = (_emscripten_realloc_async_context(4)|0);
 _initialize_score();
 $IsAsync69 = ___async;
 if (!($IsAsync69)) {
  ___async_unwind = 0;
 }
 HEAP32[$ReallocAsyncCtx19>>2] = 89;
 sp = STACKTOP;
 return;
}
function _pong__async_cb148($0) {
 $0 = $0|0;
 var $$expand_i1_val = 0, $$not7 = 0, $$pr = 0, $$pr32 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0.0, $167 = 0;
 var $168 = 0, $169 = 0.0, $17 = 0, $170 = 0, $171 = 0, $172 = 0.0, $173 = 0.0, $174 = 0, $175 = 0.0, $176 = 0.0, $177 = 0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0;
 var $186 = 0, $187 = 0, $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0, $191 = 0.0, $192 = 0.0, $193 = 0, $194 = 0, $195 = 0.0, $196 = 0.0, $197 = 0, $198 = 0.0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0.0, $201 = 0.0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0.0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0;
 var $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $IsAsync11 = 0, $IsAsync120 = 0, $IsAsync142 = 0, $IsAsync146 = 0, $IsAsync18 = 0, $IsAsync22 = 0, $IsAsync30 = 0, $IsAsync4 = 0, $IsAsync50 = 0, $IsAsync54 = 0;
 var $IsAsync58 = 0, $IsAsync62 = 0, $IsAsync73 = 0, $IsAsync77 = 0, $IsAsync81 = 0, $IsAsync85 = 0, $IsAsync89 = 0, $IsAsync93 = 0, $IsAsync97 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx16 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx20 = 0, $ReallocAsyncCtx21 = 0, $ReallocAsyncCtx22 = 0, $ReallocAsyncCtx23 = 0, $ReallocAsyncCtx24 = 0, $ReallocAsyncCtx25 = 0;
 var $ReallocAsyncCtx26 = 0, $ReallocAsyncCtx32 = 0, $ReallocAsyncCtx38 = 0, $ReallocAsyncCtx39 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx9 = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond30 = 0, $or$cond42 = 0, $or$cond44 = 0, $or$cond9 = 0, $pad$0 = 0, $paddle2$paddle1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $117 = HEAP8[382792>>0]|0;
 $118 = ($117<<24>>24)==(0);
 if ($118) {
  $119 = HEAP32[88>>2]|0;
  $120 = ((($119)) + 44|0);
  $121 = HEAP8[$120>>0]|0;
  $122 = HEAP8[35112>>0]|0;
  $123 = $122 | $121;
  $124 = ($123<<24>>24)==(0);
  if ($124) {
   $125 = HEAP32[(651832)>>2]|0;
   $ReallocAsyncCtx14 = (_emscripten_realloc_async_context(4)|0);
   $126 = (FUNCTION_TABLE_i[$125 & 255]()|0);
   $IsAsync50 = ___async;
   if ($IsAsync50) {
    HEAP32[$ReallocAsyncCtx14>>2] = 122;
    sp = STACKTOP;
    return;
   }
   $127 = ___async_retval;
   HEAP32[$127>>2] = $126;
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx14>>2] = 122;
   sp = STACKTOP;
   return;
  } else {
   $128 = $122;
  }
 } else {
  label = 72;
 }
 L10: while(1) {
  if ((label|0) == 72) {
   label = 0;
   $$pr32 = HEAP8[35112>>0]|0;
   $128 = $$pr32;
  }
  $129 = ($128<<24>>24)==(0);
  if (!($129)) {
   $130 = 389544;
   $131 = $130;
   $132 = HEAP32[$131>>2]|0;
   $133 = (($130) + 4)|0;
   $134 = $133;
   $135 = HEAP32[$134>>2]|0;
   $136 = 35120;
   $137 = $136;
   $138 = HEAP32[$137>>2]|0;
   $139 = (($136) + 4)|0;
   $140 = $139;
   $141 = HEAP32[$140>>2]|0;
   $142 = (_i64Subtract(($132|0),($135|0),($138|0),($141|0))|0);
   $143 = tempRet0;
   $144 = ($143>>>0)>(0);
   $145 = ($142>>>0)>(10000000);
   $146 = ($143|0)==(0);
   $147 = $146 & $145;
   $148 = $144 | $147;
   if ($148) {
    label = 77;
    break;
   }
   $149 = HEAP32[(651780)>>2]|0;
   if ((($149|0) == 5) | (($149|0) == 15)) {
    $150 = HEAP32[40>>2]|0;
    $151 = ((($150)) + 4|0);
    $152 = HEAP32[$151>>2]|0;
    $153 = ($152|0)==(4);
    $154 = ($143>>>0)>(0);
    $155 = ($142>>>0)>(5000000);
    $156 = ($143|0)==(0);
    $157 = $156 & $155;
    $158 = $154 | $157;
    $or$cond30 = $158 & $153;
    if ($or$cond30) {
     label = 77;
     break;
    }
   }
  }
  $159 = HEAP8[104>>0]|0;
  $160 = ($159<<24>>24)==(0);
  do {
   if (!($160)) {
    $161 = HEAP32[96>>2]|0;
    $162 = ((($161)) + 44|0);
    $163 = HEAP8[$162>>0]|0;
    $164 = ($163<<24>>24)==(0);
    if (!($164)) {
     $165 = ((($161)) + 8|0);
     $166 = +HEAPF32[$165>>2];
     $167 = HEAP32[(389572)>>2]|0;
     $168 = (($167|0) / 2)&-1;
     $169 = (+($168|0));
     $170 = $166 > $169;
     $paddle2$paddle1 = $170 ? 48 : 56;
     $pad$0 = HEAP32[$paddle2$paddle1>>2]|0;
     $171 = ((($161)) + 40|0);
     $172 = +HEAPF32[$171>>2];
     $173 = $172;
     $174 = (($167|0) / 40)&-1;
     $175 = (+($174|0));
     $176 = $175 * 10.0;
     $177 = $173 < $176;
     if ($177) {
      label = 83;
      break L10;
     }
     HEAP8[$162>>0] = 0;
     $187 = ((($pad$0)) + 40|0);
     $188 = +HEAPF32[$187>>2];
     $189 = $188;
     $190 = (($167|0) / 40)&-1;
     $191 = (+($190|0));
     $192 = $191 * 20.0;
     $193 = $189 < $192;
     if ($193) {
      label = 88;
      break L10;
     }
     $203 = ((($pad$0)) + 44|0);
     HEAP8[$203>>0] = 0;
     $204 = ((($pad$0)) + 4|0);
     $205 = HEAP32[$204>>2]|0;
     if ((($205|0) == 10)) {
      HEAP32[$204>>2] = 11;
      break;
     } else if ((($205|0) == 0)) {
      HEAP32[$204>>2] = 1;
      break;
     } else {
      break;
     }
    }
   }
  } while(0);
  $206 = HEAP8[382784>>0]|0;
  $207 = ($206<<24>>24)==(0);
  if ($207) {
   $208 = 389544;
   $209 = $208;
   $210 = HEAP32[$209>>2]|0;
   $211 = (($208) + 4)|0;
   $212 = $211;
   $213 = HEAP32[$212>>2]|0;
   $249 = $210;$250 = $213;
  } else {
   $214 = HEAP8[104>>0]|0;
   $215 = ($214<<24>>24)==(0);
   $216 = 389544;
   $217 = $216;
   $218 = HEAP32[$217>>2]|0;
   $219 = (($216) + 4)|0;
   $220 = $219;
   $221 = HEAP32[$220>>2]|0;
   $222 = 382800;
   $223 = $222;
   $224 = HEAP32[$223>>2]|0;
   $225 = (($222) + 4)|0;
   $226 = $225;
   $227 = HEAP32[$226>>2]|0;
   $228 = (_i64Subtract(($218|0),($221|0),($224|0),($227|0))|0);
   $229 = tempRet0;
   $230 = ($229>>>0)>(0);
   $231 = ($228>>>0)>(3000000);
   $232 = ($229|0)==(0);
   $233 = $232 & $231;
   $234 = $230 | $233;
   $or$cond42 = $215 & $234;
   $235 = (_i64Subtract(($218|0),($221|0),($224|0),($227|0))|0);
   $236 = tempRet0;
   $237 = ($236>>>0)>(0);
   $238 = ($235>>>0)>(6000000);
   $239 = ($236|0)==(0);
   $240 = $239 & $238;
   $241 = $237 | $240;
   $or$cond44 = $or$cond42 | $241;
   if ($or$cond44) {
    $242 = HEAP32[35096>>2]|0;
    $243 = ($242|0)==(6);
    if ($243) {
     $244 = HEAP32[(389556)>>2]|0;
     $245 = HEAP32[$244>>2]|0;
     $246 = ($245|0)==(1);
     if ($246) {
      $247 = ((($244)) + 4|0);
      HEAP8[$247>>0] = 1;
     } else {
      label = 101;
     }
    } else {
     label = 101;
    }
    if ((label|0) == 101) {
     label = 0;
     HEAP32[(651780)>>2] = 0;
    }
    HEAP8[128>>0] = 0;
    $249 = $218;$250 = $221;
   } else {
    $249 = $218;$250 = $221;
   }
  }
  $248 = HEAP32[216>>2]|0;
  $1 = (($248) + -40000)|0;
  HEAP32[216>>2] = $1;
  $251 = (_i64Add(($249|0),($250|0),40000,0)|0);
  $252 = tempRet0;
  $253 = 389544;
  $254 = $253;
  HEAP32[$254>>2] = $251;
  $255 = (($253) + 4)|0;
  $256 = $255;
  HEAP32[$256>>2] = $252;
  $2 = ($1|0)>(39999);
  if ($2) {
   label = 3;
   break;
  }
  __render();
  $257 = HEAP8[128>>0]|0;
  $$not7 = ($257<<24>>24)==(0);
  $258 = 389544;
  $259 = $258;
  $260 = HEAP32[$259>>2]|0;
  $261 = (($258) + 4)|0;
  $262 = $261;
  $263 = HEAP32[$262>>2]|0;
  $264 = ($260|0)==(0);
  $265 = ($263|0)==(0);
  $266 = $264 & $265;
  $or$cond9 = $$not7 & $266;
  if (!($or$cond9)) {
   label = 105;
   break;
  }
  $3 = HEAP32[(389696)>>2]|0;
  $4 = ($3|0)==(0);
  if (!($4)) {
   HEAP8[128>>0] = 0;
  }
  $5 = (_score_ball()|0);
  if ((($5|0) == 5)) {
   $6 = HEAP8[382784>>0]|0;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    label = 10;
    break;
   }
  } else if (!((($5|0) == 0))) {
   $$pr = HEAP8[382784>>0]|0;
   $62 = ($$pr<<24>>24)==(0);
   if ($62) {
    label = 26;
    break;
   }
  }
  $65 = HEAP32[(394012)>>2]|0;
  $66 = ($65|0)>(0);
  $67 = HEAP8[382784>>0]|0;
  $68 = ($67<<24>>24)==(0);
  $or$cond11 = $66 & $68;
  if ($or$cond11) {
   label = 30;
   break;
  }
  $78 = HEAP32[(394008)>>2]|0;
  $79 = ($78|0)>(0);
  $or$cond13 = $68 & $79;
  if ($or$cond13) {
   label = 38;
   break;
  }
  $89 = HEAP32[(389556)>>2]|0;
  $90 = HEAP32[$89>>2]|0;
  $91 = ($90|0)==(2);
  if ($91) {
   $92 = HEAP32[(390064)>>2]|0;
   $93 = ($92|0)>(0);
   $94 = HEAP8[382784>>0]|0;
   $95 = ($94<<24>>24)==(0);
   $or$cond15 = $93 & $95;
   if ($or$cond15) {
    label = 47;
    break;
   }
   $99 = HEAP32[(390048)>>2]|0;
   $100 = ($99|0)>(0);
   $or$cond17 = $95 & $100;
   if ($or$cond17) {
    label = 51;
    break;
   }
  }
  $104 = HEAP32[(389556)>>2]|0;
  $105 = HEAP32[$104>>2]|0;
  $106 = ($105|0)<(2);
  if ($106) {
   label = 55;
   break;
  }
  $107 = HEAP32[8>>2]|0;
  $108 = ((($107)) + 8|0);
  $109 = +HEAPF32[$108>>2];
  $110 = (~~(($109)));
  HEAP32[382808>>2] = $110;
  $111 = HEAP8[382784>>0]|0;
  $112 = ($111<<24>>24)==(0);
  if ($112) {
   label = 59;
   break;
  } else {
   label = 72;
  }
 }
 switch (label|0) {
  case 3: {
   $ReallocAsyncCtx17 = (_emscripten_realloc_async_context(4)|0);
   __update();
   $IsAsync62 = ___async;
   if ($IsAsync62) {
    HEAP32[$ReallocAsyncCtx17>>2] = 94;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx17>>2] = 94;
   sp = STACKTOP;
   return;
   break;
  }
  case 10: {
   HEAP8[382784>>0] = 1;
   $8 = HEAP32[(389556)>>2]|0;
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(1);
   if ($10) {
    $11 = (_get_score(1)|0);
    $12 = ($11|0)==(5);
    if ($12) {
     $13 = 389544;
     $14 = $13;
     $15 = HEAP32[$14>>2]|0;
     $16 = (($13) + 4)|0;
     $17 = $16;
     $18 = HEAP32[$17>>2]|0;
     $19 = 382800;
     $20 = $19;
     HEAP32[$20>>2] = $15;
     $21 = (($19) + 4)|0;
     $22 = $21;
     HEAP32[$22>>2] = $18;
     $23 = HEAP32[(651920)>>2]|0;
     $24 = HEAP32[8>>2]|0;
     $25 = HEAP32[(389572)>>2]|0;
     $26 = (+($25|0));
     $27 = ((($24)) + 12|0);
     $28 = +HEAPF32[$27>>2];
     $ReallocAsyncCtx2 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vidd[$23 & 255]($24,$26,$28);
     $IsAsync4 = ___async;
     if ($IsAsync4) {
      HEAP32[$ReallocAsyncCtx2>>2] = 95;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx2>>2] = 95;
     sp = STACKTOP;
     return;
    } else {
     HEAP8[382784>>0] = 1;
     $29 = 389544;
     $30 = $29;
     $31 = HEAP32[$30>>2]|0;
     $32 = (($29) + 4)|0;
     $33 = $32;
     $34 = HEAP32[$33>>2]|0;
     $35 = 382800;
     $36 = $35;
     HEAP32[$36>>2] = $31;
     $37 = (($35) + 4)|0;
     $38 = $37;
     HEAP32[$38>>2] = $34;
     $39 = HEAP32[(651952)>>2]|0;
     $40 = HEAP32[35168>>2]|0;
     $ReallocAsyncCtx4 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vi[$39 & 255]($40);
     $IsAsync11 = ___async;
     if ($IsAsync11) {
      HEAP32[$ReallocAsyncCtx4>>2] = 97;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx4>>2] = 97;
     sp = STACKTOP;
     return;
    }
   } else {
    $41 = 389544;
    $42 = $41;
    $43 = HEAP32[$42>>2]|0;
    $44 = (($41) + 4)|0;
    $45 = $44;
    $46 = HEAP32[$45>>2]|0;
    $47 = 382800;
    $48 = $47;
    HEAP32[$48>>2] = $43;
    $49 = (($47) + 4)|0;
    $50 = $49;
    HEAP32[$50>>2] = $46;
    $51 = HEAP32[8>>2]|0;
    $52 = ((($51)) + 8|0);
    $53 = +HEAPF32[$52>>2];
    $54 = HEAP32[(389572)>>2]|0;
    $55 = (($54|0) / 2)&-1;
    $56 = (+($55|0));
    $57 = $53 > $56;
    $58 = HEAP32[(651920)>>2]|0;
    $59 = ((($51)) + 12|0);
    $60 = +HEAPF32[$59>>2];
    if ($57) {
     $61 = (+($54|0));
     $ReallocAsyncCtx6 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vidd[$58 & 255]($51,$61,$60);
     $IsAsync18 = ___async;
     if ($IsAsync18) {
      HEAP32[$ReallocAsyncCtx6>>2] = 99;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx6>>2] = 99;
     sp = STACKTOP;
     return;
    } else {
     $ReallocAsyncCtx7 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vidd[$58 & 255]($51,0.0,$60);
     $IsAsync22 = ___async;
     if ($IsAsync22) {
      HEAP32[$ReallocAsyncCtx7>>2] = 100;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx7>>2] = 100;
     sp = STACKTOP;
     return;
    }
   }
   break;
  }
  case 26: {
   $63 = HEAP32[(651952)>>2]|0;
   $64 = HEAP32[35128>>2]|0;
   $ReallocAsyncCtx9 = (_emscripten_realloc_async_context(4)|0);
   FUNCTION_TABLE_vi[$63 & 255]($64);
   $IsAsync30 = ___async;
   if ($IsAsync30) {
    HEAP32[$ReallocAsyncCtx9>>2] = 102;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx9>>2] = 102;
   sp = STACKTOP;
   return;
   break;
  }
  case 30: {
   $69 = HEAP32[(389556)>>2]|0;
   $70 = HEAP32[$69>>2]|0;
   $71 = ($70|0)==(1);
   if ($71) {
    $72 = HEAP32[56>>2]|0;
    $73 = HEAP32[(389576)>>2]|0;
    $74 = (($73|0) / 40)&-1;
    $ReallocAsyncCtx26 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($72,1106,$65,$74);
    $IsAsync97 = ___async;
    if ($IsAsync97) {
     HEAP32[$ReallocAsyncCtx26>>2] = 104;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx26>>2] = 104;
    sp = STACKTOP;
    return;
   } else {
    $75 = HEAP32[48>>2]|0;
    $76 = HEAP32[(389576)>>2]|0;
    $77 = (($76|0) / 40)&-1;
    $ReallocAsyncCtx25 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($75,1106,$65,$77);
    $IsAsync93 = ___async;
    if ($IsAsync93) {
     HEAP32[$ReallocAsyncCtx25>>2] = 105;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx25>>2] = 105;
    sp = STACKTOP;
    return;
   }
   break;
  }
  case 38: {
   $80 = HEAP32[(389556)>>2]|0;
   $81 = HEAP32[$80>>2]|0;
   $82 = ($81|0)==(1);
   if ($82) {
    $83 = HEAP32[56>>2]|0;
    $84 = HEAP32[(389576)>>2]|0;
    $85 = (($84|0) / 40)&-1;
    $ReallocAsyncCtx24 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($83,1105,$78,$85);
    $IsAsync89 = ___async;
    if ($IsAsync89) {
     HEAP32[$ReallocAsyncCtx24>>2] = 106;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx24>>2] = 106;
    sp = STACKTOP;
    return;
   } else {
    $86 = HEAP32[48>>2]|0;
    $87 = HEAP32[(389576)>>2]|0;
    $88 = (($87|0) / 40)&-1;
    $ReallocAsyncCtx23 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($86,1105,$78,$88);
    $IsAsync85 = ___async;
    if ($IsAsync85) {
     HEAP32[$ReallocAsyncCtx23>>2] = 107;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx23>>2] = 107;
    sp = STACKTOP;
    return;
   }
   break;
  }
  case 47: {
   $96 = HEAP32[56>>2]|0;
   $97 = HEAP32[(389576)>>2]|0;
   $98 = (($97|0) / 40)&-1;
   $ReallocAsyncCtx22 = (_emscripten_realloc_async_context(4)|0);
   _move_paddle($96,1106,$92,$98);
   $IsAsync81 = ___async;
   if ($IsAsync81) {
    HEAP32[$ReallocAsyncCtx22>>2] = 108;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx22>>2] = 108;
   sp = STACKTOP;
   return;
   break;
  }
  case 51: {
   $101 = HEAP32[56>>2]|0;
   $102 = HEAP32[(389576)>>2]|0;
   $103 = (($102|0) / 40)&-1;
   $ReallocAsyncCtx21 = (_emscripten_realloc_async_context(4)|0);
   _move_paddle($101,1105,$99,$103);
   $IsAsync77 = ___async;
   if ($IsAsync77) {
    HEAP32[$ReallocAsyncCtx21>>2] = 109;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx21>>2] = 109;
   sp = STACKTOP;
   return;
   break;
  }
  case 55: {
   $ReallocAsyncCtx20 = (_emscripten_realloc_async_context(4)|0);
   _paddle_ai(2);
   $IsAsync73 = ___async;
   if ($IsAsync73) {
    HEAP32[$ReallocAsyncCtx20>>2] = 110;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx20>>2] = 110;
   sp = STACKTOP;
   return;
   break;
  }
  case 59: {
   $113 = HEAP8[104>>0]|0;
   $114 = ($113<<24>>24)==(0);
   if ($114) {
    $ReallocAsyncCtx39 = (_emscripten_realloc_async_context(4)|0);
    $115 = (_collision_ball()|0);
    $IsAsync146 = ___async;
    if ($IsAsync146) {
     HEAP32[$ReallocAsyncCtx39>>2] = 111;
     sp = STACKTOP;
     return;
    }
    $116 = ___async_retval;
    $$expand_i1_val = $115&1;
    HEAP8[$116>>0] = $$expand_i1_val;
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx39>>2] = 111;
    sp = STACKTOP;
    return;
   } else {
    $ReallocAsyncCtx38 = (_emscripten_realloc_async_context(4)|0);
    _update_ball();
    $IsAsync142 = ___async;
    if ($IsAsync142) {
     HEAP32[$ReallocAsyncCtx38>>2] = 112;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx38>>2] = 112;
    sp = STACKTOP;
    return;
   }
   break;
  }
  case 77: {
   $ReallocAsyncCtx32 = (_emscripten_realloc_async_context(4)|0);
   _end_danger();
   $IsAsync120 = ___async;
   if ($IsAsync120) {
    HEAP32[$ReallocAsyncCtx32>>2] = 124;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx32>>2] = 124;
   sp = STACKTOP;
   return;
   break;
  }
  case 83: {
   $178 = HEAP32[(651924)>>2]|0;
   $179 = $173 * 1.2;
   $180 = $179;
   HEAPF32[$171>>2] = $180;
   $181 = ((($161)) + 36|0);
   $182 = +HEAPF32[$181>>2];
   $183 = $182;
   $184 = $183 * 1.2;
   $185 = $184;
   HEAPF32[$181>>2] = $185;
   $ReallocAsyncCtx15 = (_emscripten_realloc_async_context(8)|0);
   FUNCTION_TABLE_vidd[$178 & 255]($161,$180,$185);
   $IsAsync54 = ___async;
   if ($IsAsync54) {
    HEAP32[$ReallocAsyncCtx15>>2] = 125;
    $186 = ((($ReallocAsyncCtx15)) + 4|0);
    HEAP32[$186>>2] = $pad$0;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx15>>2] = 125;
   $186 = ((($ReallocAsyncCtx15)) + 4|0);
   HEAP32[$186>>2] = $pad$0;
   sp = STACKTOP;
   return;
   break;
  }
  case 88: {
   $194 = HEAP32[(651924)>>2]|0;
   $195 = $189 * 1.2;
   $196 = $195;
   HEAPF32[$187>>2] = $196;
   $197 = ((($pad$0)) + 36|0);
   $198 = +HEAPF32[$197>>2];
   $199 = $198;
   $200 = $199 * 1.1000000000000001;
   $201 = $200;
   HEAPF32[$197>>2] = $201;
   $ReallocAsyncCtx16 = (_emscripten_realloc_async_context(8)|0);
   FUNCTION_TABLE_vidd[$194 & 255]($pad$0,$196,$201);
   $IsAsync58 = ___async;
   if ($IsAsync58) {
    HEAP32[$ReallocAsyncCtx16>>2] = 126;
    $202 = ((($ReallocAsyncCtx16)) + 4|0);
    HEAP32[$202>>2] = $pad$0;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx16>>2] = 126;
   $202 = ((($ReallocAsyncCtx16)) + 4|0);
   HEAP32[$202>>2] = $pad$0;
   sp = STACKTOP;
   return;
   break;
  }
  case 105: {
   return;
   break;
  }
 }
}
function _pong__async_cb149($0) {
 $0 = $0|0;
 var $$expand_i1_val = 0, $$not2 = 0, $$not7 = 0, $$pr = 0, $$pr32 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0.0, $146 = 0.0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0.0, $211 = 0, $212 = 0, $213 = 0.0, $214 = 0, $215 = 0, $216 = 0.0, $217 = 0.0, $218 = 0, $219 = 0.0, $22 = 0;
 var $220 = 0.0, $221 = 0, $222 = 0, $223 = 0.0, $224 = 0.0, $225 = 0, $226 = 0.0, $227 = 0.0, $228 = 0.0, $229 = 0.0, $23 = 0, $230 = 0, $231 = 0, $232 = 0.0, $233 = 0.0, $234 = 0, $235 = 0.0, $236 = 0.0, $237 = 0, $238 = 0;
 var $239 = 0.0, $24 = 0, $240 = 0.0, $241 = 0, $242 = 0.0, $243 = 0.0, $244 = 0.0, $245 = 0.0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0.0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0.0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $IsAsync11 = 0, $IsAsync120 = 0, $IsAsync142 = 0, $IsAsync146 = 0, $IsAsync18 = 0;
 var $IsAsync22 = 0, $IsAsync30 = 0, $IsAsync38 = 0, $IsAsync4 = 0, $IsAsync42 = 0, $IsAsync46 = 0, $IsAsync50 = 0, $IsAsync54 = 0, $IsAsync58 = 0, $IsAsync62 = 0, $IsAsync73 = 0, $IsAsync77 = 0, $IsAsync81 = 0, $IsAsync85 = 0, $IsAsync89 = 0, $IsAsync93 = 0, $IsAsync97 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0;
 var $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx16 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx20 = 0, $ReallocAsyncCtx21 = 0, $ReallocAsyncCtx22 = 0, $ReallocAsyncCtx23 = 0, $ReallocAsyncCtx24 = 0, $ReallocAsyncCtx25 = 0, $ReallocAsyncCtx26 = 0, $ReallocAsyncCtx32 = 0, $ReallocAsyncCtx38 = 0, $ReallocAsyncCtx39 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx9 = 0, $or$cond11 = 0;
 var $or$cond13 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond27 = 0, $or$cond30 = 0, $or$cond4 = 0, $or$cond42 = 0, $or$cond44 = 0, $or$cond9 = 0, $pad$0 = 0, $paddle2$paddle1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $117 = HEAP8[382792>>0]|0;
 $118 = ($117<<24>>24)==(0);
 if ($118) {
  $119 = HEAP32[88>>2]|0;
  $120 = ((($119)) + 44|0);
  $121 = HEAP8[$120>>0]|0;
  $122 = HEAP8[35112>>0]|0;
  $123 = $122 | $121;
  $124 = ($123<<24>>24)==(0);
  if ($124) {
   $125 = HEAP32[(651832)>>2]|0;
   $ReallocAsyncCtx11 = (_emscripten_realloc_async_context(4)|0);
   $126 = (FUNCTION_TABLE_i[$125 & 255]()|0);
   $IsAsync38 = ___async;
   if ($IsAsync38) {
    HEAP32[$ReallocAsyncCtx11>>2] = 116;
    sp = STACKTOP;
    return;
   }
   $127 = ___async_retval;
   HEAP32[$127>>2] = $126;
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx11>>2] = 116;
   sp = STACKTOP;
   return;
  }
 }
 $128 = (_get_score(1)|0);
 $129 = ($128|0)==(4);
 if ($129) {
  $130 = HEAP32[96>>2]|0;
  $131 = ((($130)) + 44|0);
  $132 = HEAP8[$131>>0]|0;
  $133 = HEAP8[35112>>0]|0;
  $134 = $133 | $132;
  $135 = ($134<<24>>24)==(0);
  if ($135) {
   $136 = HEAP32[(651832)>>2]|0;
   $ReallocAsyncCtx12 = (_emscripten_realloc_async_context(4)|0);
   $137 = (FUNCTION_TABLE_i[$136 & 255]()|0);
   $IsAsync42 = ___async;
   if ($IsAsync42) {
    HEAP32[$ReallocAsyncCtx12>>2] = 118;
    sp = STACKTOP;
    return;
   }
   $138 = ___async_retval;
   HEAP32[$138>>2] = $137;
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx12>>2] = 118;
   sp = STACKTOP;
   return;
  }
 }
 $139 = HEAP32[382808>>2]|0;
 $140 = HEAP32[(389572)>>2]|0;
 $141 = (($140|0) / 2)&-1;
 $142 = ($139|0)<($141|0);
 if ($142) {
  $143 = HEAP32[8>>2]|0;
  $144 = ((($143)) + 8|0);
  $145 = +HEAPF32[$144>>2];
  $146 = (+($141|0));
  $147 = $145 >= $146;
  $148 = HEAP8[382784>>0]|0;
  $149 = ($148<<24>>24)==(0);
  $or$cond27 = $147 & $149;
  if ($or$cond27) {
   $150 = HEAP32[(389556)>>2]|0;
   $151 = HEAP32[$150>>2]|0;
   $152 = ($151|0)>(1);
   if ($152) {
    $153 = HEAP32[80>>2]|0;
    $154 = ((($153)) + 44|0);
    $155 = HEAP8[$154>>0]|0;
    $$not2 = ($155<<24>>24)==(0);
    $156 = HEAP32[35096>>2]|0;
    $157 = ($156|0)<(6);
    $or$cond4 = $$not2 & $157;
    if ($or$cond4) {
     $158 = HEAP32[(651832)>>2]|0;
     $ReallocAsyncCtx13 = (_emscripten_realloc_async_context(4)|0);
     $159 = (FUNCTION_TABLE_i[$158 & 255]()|0);
     $IsAsync46 = ___async;
     if ($IsAsync46) {
      HEAP32[$ReallocAsyncCtx13>>2] = 120;
      sp = STACKTOP;
      return;
     }
     $160 = ___async_retval;
     HEAP32[$160>>2] = $159;
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx13>>2] = 120;
     sp = STACKTOP;
     return;
    }
    $161 = HEAP8[382792>>0]|0;
    $162 = ($161<<24>>24)==(0);
    if ($162) {
     $163 = HEAP32[88>>2]|0;
     $164 = ((($163)) + 44|0);
     $165 = HEAP8[$164>>0]|0;
     $166 = HEAP8[35112>>0]|0;
     $167 = $166 | $165;
     $168 = ($167<<24>>24)==(0);
     if ($168) {
      $169 = HEAP32[(651832)>>2]|0;
      $ReallocAsyncCtx14 = (_emscripten_realloc_async_context(4)|0);
      $170 = (FUNCTION_TABLE_i[$169 & 255]()|0);
      $IsAsync50 = ___async;
      if ($IsAsync50) {
       HEAP32[$ReallocAsyncCtx14>>2] = 122;
       sp = STACKTOP;
       return;
      }
      $171 = ___async_retval;
      HEAP32[$171>>2] = $170;
      ___async_unwind = 0;
      HEAP32[$ReallocAsyncCtx14>>2] = 122;
      sp = STACKTOP;
      return;
     } else {
      $172 = $166;
     }
    } else {
     label = 89;
    }
   } else {
    label = 89;
   }
  } else {
   label = 89;
  }
 } else {
  label = 89;
 }
 L36: while(1) {
  if ((label|0) == 89) {
   label = 0;
   $$pr32 = HEAP8[35112>>0]|0;
   $172 = $$pr32;
  }
  $173 = ($172<<24>>24)==(0);
  if (!($173)) {
   $174 = 389544;
   $175 = $174;
   $176 = HEAP32[$175>>2]|0;
   $177 = (($174) + 4)|0;
   $178 = $177;
   $179 = HEAP32[$178>>2]|0;
   $180 = 35120;
   $181 = $180;
   $182 = HEAP32[$181>>2]|0;
   $183 = (($180) + 4)|0;
   $184 = $183;
   $185 = HEAP32[$184>>2]|0;
   $186 = (_i64Subtract(($176|0),($179|0),($182|0),($185|0))|0);
   $187 = tempRet0;
   $188 = ($187>>>0)>(0);
   $189 = ($186>>>0)>(10000000);
   $190 = ($187|0)==(0);
   $191 = $190 & $189;
   $192 = $188 | $191;
   if ($192) {
    label = 94;
    break;
   }
   $193 = HEAP32[(651780)>>2]|0;
   if ((($193|0) == 5) | (($193|0) == 15)) {
    $194 = HEAP32[40>>2]|0;
    $195 = ((($194)) + 4|0);
    $196 = HEAP32[$195>>2]|0;
    $197 = ($196|0)==(4);
    $198 = ($187>>>0)>(0);
    $199 = ($186>>>0)>(5000000);
    $200 = ($187|0)==(0);
    $201 = $200 & $199;
    $202 = $198 | $201;
    $or$cond30 = $202 & $197;
    if ($or$cond30) {
     label = 94;
     break;
    }
   }
  }
  $203 = HEAP8[104>>0]|0;
  $204 = ($203<<24>>24)==(0);
  do {
   if (!($204)) {
    $205 = HEAP32[96>>2]|0;
    $206 = ((($205)) + 44|0);
    $207 = HEAP8[$206>>0]|0;
    $208 = ($207<<24>>24)==(0);
    if (!($208)) {
     $209 = ((($205)) + 8|0);
     $210 = +HEAPF32[$209>>2];
     $211 = HEAP32[(389572)>>2]|0;
     $212 = (($211|0) / 2)&-1;
     $213 = (+($212|0));
     $214 = $210 > $213;
     $paddle2$paddle1 = $214 ? 48 : 56;
     $pad$0 = HEAP32[$paddle2$paddle1>>2]|0;
     $215 = ((($205)) + 40|0);
     $216 = +HEAPF32[$215>>2];
     $217 = $216;
     $218 = (($211|0) / 40)&-1;
     $219 = (+($218|0));
     $220 = $219 * 10.0;
     $221 = $217 < $220;
     if ($221) {
      label = 100;
      break L36;
     }
     HEAP8[$206>>0] = 0;
     $231 = ((($pad$0)) + 40|0);
     $232 = +HEAPF32[$231>>2];
     $233 = $232;
     $234 = (($211|0) / 40)&-1;
     $235 = (+($234|0));
     $236 = $235 * 20.0;
     $237 = $233 < $236;
     if ($237) {
      label = 105;
      break L36;
     }
     $247 = ((($pad$0)) + 44|0);
     HEAP8[$247>>0] = 0;
     $248 = ((($pad$0)) + 4|0);
     $249 = HEAP32[$248>>2]|0;
     if ((($249|0) == 10)) {
      HEAP32[$248>>2] = 11;
      break;
     } else if ((($249|0) == 0)) {
      HEAP32[$248>>2] = 1;
      break;
     } else {
      break;
     }
    }
   }
  } while(0);
  $250 = HEAP8[382784>>0]|0;
  $251 = ($250<<24>>24)==(0);
  if ($251) {
   $252 = 389544;
   $253 = $252;
   $254 = HEAP32[$253>>2]|0;
   $255 = (($252) + 4)|0;
   $256 = $255;
   $257 = HEAP32[$256>>2]|0;
   $293 = $254;$294 = $257;
  } else {
   $258 = HEAP8[104>>0]|0;
   $259 = ($258<<24>>24)==(0);
   $260 = 389544;
   $261 = $260;
   $262 = HEAP32[$261>>2]|0;
   $263 = (($260) + 4)|0;
   $264 = $263;
   $265 = HEAP32[$264>>2]|0;
   $266 = 382800;
   $267 = $266;
   $268 = HEAP32[$267>>2]|0;
   $269 = (($266) + 4)|0;
   $270 = $269;
   $271 = HEAP32[$270>>2]|0;
   $272 = (_i64Subtract(($262|0),($265|0),($268|0),($271|0))|0);
   $273 = tempRet0;
   $274 = ($273>>>0)>(0);
   $275 = ($272>>>0)>(3000000);
   $276 = ($273|0)==(0);
   $277 = $276 & $275;
   $278 = $274 | $277;
   $or$cond42 = $259 & $278;
   $279 = (_i64Subtract(($262|0),($265|0),($268|0),($271|0))|0);
   $280 = tempRet0;
   $281 = ($280>>>0)>(0);
   $282 = ($279>>>0)>(6000000);
   $283 = ($280|0)==(0);
   $284 = $283 & $282;
   $285 = $281 | $284;
   $or$cond44 = $or$cond42 | $285;
   if ($or$cond44) {
    $286 = HEAP32[35096>>2]|0;
    $287 = ($286|0)==(6);
    if ($287) {
     $288 = HEAP32[(389556)>>2]|0;
     $289 = HEAP32[$288>>2]|0;
     $290 = ($289|0)==(1);
     if ($290) {
      $291 = ((($288)) + 4|0);
      HEAP8[$291>>0] = 1;
     } else {
      label = 118;
     }
    } else {
     label = 118;
    }
    if ((label|0) == 118) {
     label = 0;
     HEAP32[(651780)>>2] = 0;
    }
    HEAP8[128>>0] = 0;
    $293 = $262;$294 = $265;
   } else {
    $293 = $262;$294 = $265;
   }
  }
  $292 = HEAP32[216>>2]|0;
  $1 = (($292) + -40000)|0;
  HEAP32[216>>2] = $1;
  $295 = (_i64Add(($293|0),($294|0),40000,0)|0);
  $296 = tempRet0;
  $297 = 389544;
  $298 = $297;
  HEAP32[$298>>2] = $295;
  $299 = (($297) + 4)|0;
  $300 = $299;
  HEAP32[$300>>2] = $296;
  $2 = ($1|0)>(39999);
  if ($2) {
   label = 3;
   break;
  }
  __render();
  $301 = HEAP8[128>>0]|0;
  $$not7 = ($301<<24>>24)==(0);
  $302 = 389544;
  $303 = $302;
  $304 = HEAP32[$303>>2]|0;
  $305 = (($302) + 4)|0;
  $306 = $305;
  $307 = HEAP32[$306>>2]|0;
  $308 = ($304|0)==(0);
  $309 = ($307|0)==(0);
  $310 = $308 & $309;
  $or$cond9 = $$not7 & $310;
  if (!($or$cond9)) {
   label = 122;
   break;
  }
  $3 = HEAP32[(389696)>>2]|0;
  $4 = ($3|0)==(0);
  if (!($4)) {
   HEAP8[128>>0] = 0;
  }
  $5 = (_score_ball()|0);
  if ((($5|0) == 5)) {
   $6 = HEAP8[382784>>0]|0;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    label = 10;
    break;
   }
  } else if (!((($5|0) == 0))) {
   $$pr = HEAP8[382784>>0]|0;
   $62 = ($$pr<<24>>24)==(0);
   if ($62) {
    label = 26;
    break;
   }
  }
  $65 = HEAP32[(394012)>>2]|0;
  $66 = ($65|0)>(0);
  $67 = HEAP8[382784>>0]|0;
  $68 = ($67<<24>>24)==(0);
  $or$cond11 = $66 & $68;
  if ($or$cond11) {
   label = 30;
   break;
  }
  $78 = HEAP32[(394008)>>2]|0;
  $79 = ($78|0)>(0);
  $or$cond13 = $68 & $79;
  if ($or$cond13) {
   label = 38;
   break;
  }
  $89 = HEAP32[(389556)>>2]|0;
  $90 = HEAP32[$89>>2]|0;
  $91 = ($90|0)==(2);
  if ($91) {
   $92 = HEAP32[(390064)>>2]|0;
   $93 = ($92|0)>(0);
   $94 = HEAP8[382784>>0]|0;
   $95 = ($94<<24>>24)==(0);
   $or$cond15 = $93 & $95;
   if ($or$cond15) {
    label = 47;
    break;
   }
   $99 = HEAP32[(390048)>>2]|0;
   $100 = ($99|0)>(0);
   $or$cond17 = $95 & $100;
   if ($or$cond17) {
    label = 51;
    break;
   }
  }
  $104 = HEAP32[(389556)>>2]|0;
  $105 = HEAP32[$104>>2]|0;
  $106 = ($105|0)<(2);
  if ($106) {
   label = 55;
   break;
  }
  $107 = HEAP32[8>>2]|0;
  $108 = ((($107)) + 8|0);
  $109 = +HEAPF32[$108>>2];
  $110 = (~~(($109)));
  HEAP32[382808>>2] = $110;
  $111 = HEAP8[382784>>0]|0;
  $112 = ($111<<24>>24)==(0);
  if ($112) {
   label = 59;
   break;
  } else {
   label = 89;
  }
 }
 switch (label|0) {
  case 3: {
   $ReallocAsyncCtx17 = (_emscripten_realloc_async_context(4)|0);
   __update();
   $IsAsync62 = ___async;
   if ($IsAsync62) {
    HEAP32[$ReallocAsyncCtx17>>2] = 94;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx17>>2] = 94;
   sp = STACKTOP;
   return;
   break;
  }
  case 10: {
   HEAP8[382784>>0] = 1;
   $8 = HEAP32[(389556)>>2]|0;
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(1);
   if ($10) {
    $11 = (_get_score(1)|0);
    $12 = ($11|0)==(5);
    if ($12) {
     $13 = 389544;
     $14 = $13;
     $15 = HEAP32[$14>>2]|0;
     $16 = (($13) + 4)|0;
     $17 = $16;
     $18 = HEAP32[$17>>2]|0;
     $19 = 382800;
     $20 = $19;
     HEAP32[$20>>2] = $15;
     $21 = (($19) + 4)|0;
     $22 = $21;
     HEAP32[$22>>2] = $18;
     $23 = HEAP32[(651920)>>2]|0;
     $24 = HEAP32[8>>2]|0;
     $25 = HEAP32[(389572)>>2]|0;
     $26 = (+($25|0));
     $27 = ((($24)) + 12|0);
     $28 = +HEAPF32[$27>>2];
     $ReallocAsyncCtx2 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vidd[$23 & 255]($24,$26,$28);
     $IsAsync4 = ___async;
     if ($IsAsync4) {
      HEAP32[$ReallocAsyncCtx2>>2] = 95;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx2>>2] = 95;
     sp = STACKTOP;
     return;
    } else {
     HEAP8[382784>>0] = 1;
     $29 = 389544;
     $30 = $29;
     $31 = HEAP32[$30>>2]|0;
     $32 = (($29) + 4)|0;
     $33 = $32;
     $34 = HEAP32[$33>>2]|0;
     $35 = 382800;
     $36 = $35;
     HEAP32[$36>>2] = $31;
     $37 = (($35) + 4)|0;
     $38 = $37;
     HEAP32[$38>>2] = $34;
     $39 = HEAP32[(651952)>>2]|0;
     $40 = HEAP32[35168>>2]|0;
     $ReallocAsyncCtx4 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vi[$39 & 255]($40);
     $IsAsync11 = ___async;
     if ($IsAsync11) {
      HEAP32[$ReallocAsyncCtx4>>2] = 97;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx4>>2] = 97;
     sp = STACKTOP;
     return;
    }
   } else {
    $41 = 389544;
    $42 = $41;
    $43 = HEAP32[$42>>2]|0;
    $44 = (($41) + 4)|0;
    $45 = $44;
    $46 = HEAP32[$45>>2]|0;
    $47 = 382800;
    $48 = $47;
    HEAP32[$48>>2] = $43;
    $49 = (($47) + 4)|0;
    $50 = $49;
    HEAP32[$50>>2] = $46;
    $51 = HEAP32[8>>2]|0;
    $52 = ((($51)) + 8|0);
    $53 = +HEAPF32[$52>>2];
    $54 = HEAP32[(389572)>>2]|0;
    $55 = (($54|0) / 2)&-1;
    $56 = (+($55|0));
    $57 = $53 > $56;
    $58 = HEAP32[(651920)>>2]|0;
    $59 = ((($51)) + 12|0);
    $60 = +HEAPF32[$59>>2];
    if ($57) {
     $61 = (+($54|0));
     $ReallocAsyncCtx6 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vidd[$58 & 255]($51,$61,$60);
     $IsAsync18 = ___async;
     if ($IsAsync18) {
      HEAP32[$ReallocAsyncCtx6>>2] = 99;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx6>>2] = 99;
     sp = STACKTOP;
     return;
    } else {
     $ReallocAsyncCtx7 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vidd[$58 & 255]($51,0.0,$60);
     $IsAsync22 = ___async;
     if ($IsAsync22) {
      HEAP32[$ReallocAsyncCtx7>>2] = 100;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx7>>2] = 100;
     sp = STACKTOP;
     return;
    }
   }
   break;
  }
  case 26: {
   $63 = HEAP32[(651952)>>2]|0;
   $64 = HEAP32[35128>>2]|0;
   $ReallocAsyncCtx9 = (_emscripten_realloc_async_context(4)|0);
   FUNCTION_TABLE_vi[$63 & 255]($64);
   $IsAsync30 = ___async;
   if ($IsAsync30) {
    HEAP32[$ReallocAsyncCtx9>>2] = 102;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx9>>2] = 102;
   sp = STACKTOP;
   return;
   break;
  }
  case 30: {
   $69 = HEAP32[(389556)>>2]|0;
   $70 = HEAP32[$69>>2]|0;
   $71 = ($70|0)==(1);
   if ($71) {
    $72 = HEAP32[56>>2]|0;
    $73 = HEAP32[(389576)>>2]|0;
    $74 = (($73|0) / 40)&-1;
    $ReallocAsyncCtx26 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($72,1106,$65,$74);
    $IsAsync97 = ___async;
    if ($IsAsync97) {
     HEAP32[$ReallocAsyncCtx26>>2] = 104;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx26>>2] = 104;
    sp = STACKTOP;
    return;
   } else {
    $75 = HEAP32[48>>2]|0;
    $76 = HEAP32[(389576)>>2]|0;
    $77 = (($76|0) / 40)&-1;
    $ReallocAsyncCtx25 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($75,1106,$65,$77);
    $IsAsync93 = ___async;
    if ($IsAsync93) {
     HEAP32[$ReallocAsyncCtx25>>2] = 105;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx25>>2] = 105;
    sp = STACKTOP;
    return;
   }
   break;
  }
  case 38: {
   $80 = HEAP32[(389556)>>2]|0;
   $81 = HEAP32[$80>>2]|0;
   $82 = ($81|0)==(1);
   if ($82) {
    $83 = HEAP32[56>>2]|0;
    $84 = HEAP32[(389576)>>2]|0;
    $85 = (($84|0) / 40)&-1;
    $ReallocAsyncCtx24 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($83,1105,$78,$85);
    $IsAsync89 = ___async;
    if ($IsAsync89) {
     HEAP32[$ReallocAsyncCtx24>>2] = 106;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx24>>2] = 106;
    sp = STACKTOP;
    return;
   } else {
    $86 = HEAP32[48>>2]|0;
    $87 = HEAP32[(389576)>>2]|0;
    $88 = (($87|0) / 40)&-1;
    $ReallocAsyncCtx23 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($86,1105,$78,$88);
    $IsAsync85 = ___async;
    if ($IsAsync85) {
     HEAP32[$ReallocAsyncCtx23>>2] = 107;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx23>>2] = 107;
    sp = STACKTOP;
    return;
   }
   break;
  }
  case 47: {
   $96 = HEAP32[56>>2]|0;
   $97 = HEAP32[(389576)>>2]|0;
   $98 = (($97|0) / 40)&-1;
   $ReallocAsyncCtx22 = (_emscripten_realloc_async_context(4)|0);
   _move_paddle($96,1106,$92,$98);
   $IsAsync81 = ___async;
   if ($IsAsync81) {
    HEAP32[$ReallocAsyncCtx22>>2] = 108;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx22>>2] = 108;
   sp = STACKTOP;
   return;
   break;
  }
  case 51: {
   $101 = HEAP32[56>>2]|0;
   $102 = HEAP32[(389576)>>2]|0;
   $103 = (($102|0) / 40)&-1;
   $ReallocAsyncCtx21 = (_emscripten_realloc_async_context(4)|0);
   _move_paddle($101,1105,$99,$103);
   $IsAsync77 = ___async;
   if ($IsAsync77) {
    HEAP32[$ReallocAsyncCtx21>>2] = 109;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx21>>2] = 109;
   sp = STACKTOP;
   return;
   break;
  }
  case 55: {
   $ReallocAsyncCtx20 = (_emscripten_realloc_async_context(4)|0);
   _paddle_ai(2);
   $IsAsync73 = ___async;
   if ($IsAsync73) {
    HEAP32[$ReallocAsyncCtx20>>2] = 110;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx20>>2] = 110;
   sp = STACKTOP;
   return;
   break;
  }
  case 59: {
   $113 = HEAP8[104>>0]|0;
   $114 = ($113<<24>>24)==(0);
   if ($114) {
    $ReallocAsyncCtx39 = (_emscripten_realloc_async_context(4)|0);
    $115 = (_collision_ball()|0);
    $IsAsync146 = ___async;
    if ($IsAsync146) {
     HEAP32[$ReallocAsyncCtx39>>2] = 111;
     sp = STACKTOP;
     return;
    }
    $116 = ___async_retval;
    $$expand_i1_val = $115&1;
    HEAP8[$116>>0] = $$expand_i1_val;
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx39>>2] = 111;
    sp = STACKTOP;
    return;
   } else {
    $ReallocAsyncCtx38 = (_emscripten_realloc_async_context(4)|0);
    _update_ball();
    $IsAsync142 = ___async;
    if ($IsAsync142) {
     HEAP32[$ReallocAsyncCtx38>>2] = 112;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx38>>2] = 112;
    sp = STACKTOP;
    return;
   }
   break;
  }
  case 94: {
   $ReallocAsyncCtx32 = (_emscripten_realloc_async_context(4)|0);
   _end_danger();
   $IsAsync120 = ___async;
   if ($IsAsync120) {
    HEAP32[$ReallocAsyncCtx32>>2] = 124;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx32>>2] = 124;
   sp = STACKTOP;
   return;
   break;
  }
  case 100: {
   $222 = HEAP32[(651924)>>2]|0;
   $223 = $217 * 1.2;
   $224 = $223;
   HEAPF32[$215>>2] = $224;
   $225 = ((($205)) + 36|0);
   $226 = +HEAPF32[$225>>2];
   $227 = $226;
   $228 = $227 * 1.2;
   $229 = $228;
   HEAPF32[$225>>2] = $229;
   $ReallocAsyncCtx15 = (_emscripten_realloc_async_context(8)|0);
   FUNCTION_TABLE_vidd[$222 & 255]($205,$224,$229);
   $IsAsync54 = ___async;
   if ($IsAsync54) {
    HEAP32[$ReallocAsyncCtx15>>2] = 125;
    $230 = ((($ReallocAsyncCtx15)) + 4|0);
    HEAP32[$230>>2] = $pad$0;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx15>>2] = 125;
   $230 = ((($ReallocAsyncCtx15)) + 4|0);
   HEAP32[$230>>2] = $pad$0;
   sp = STACKTOP;
   return;
   break;
  }
  case 105: {
   $238 = HEAP32[(651924)>>2]|0;
   $239 = $233 * 1.2;
   $240 = $239;
   HEAPF32[$231>>2] = $240;
   $241 = ((($pad$0)) + 36|0);
   $242 = +HEAPF32[$241>>2];
   $243 = $242;
   $244 = $243 * 1.1000000000000001;
   $245 = $244;
   HEAPF32[$241>>2] = $245;
   $ReallocAsyncCtx16 = (_emscripten_realloc_async_context(8)|0);
   FUNCTION_TABLE_vidd[$238 & 255]($pad$0,$240,$245);
   $IsAsync58 = ___async;
   if ($IsAsync58) {
    HEAP32[$ReallocAsyncCtx16>>2] = 126;
    $246 = ((($ReallocAsyncCtx16)) + 4|0);
    HEAP32[$246>>2] = $pad$0;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx16>>2] = 126;
   $246 = ((($ReallocAsyncCtx16)) + 4|0);
   HEAP32[$246>>2] = $pad$0;
   sp = STACKTOP;
   return;
   break;
  }
  case 122: {
   return;
   break;
  }
 }
}
function _pong__async_cb150($0) {
 $0 = $0|0;
 var $$expand_i1_val = 0, $$not = 0, $$not2 = 0, $$not7 = 0, $$pr = 0, $$pr32 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0.0, $165 = 0.0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0.0, $23 = 0, $230 = 0, $231 = 0, $232 = 0.0, $233 = 0, $234 = 0, $235 = 0.0, $236 = 0.0, $237 = 0;
 var $238 = 0.0, $239 = 0.0, $24 = 0, $240 = 0, $241 = 0, $242 = 0.0, $243 = 0.0, $244 = 0, $245 = 0.0, $246 = 0.0, $247 = 0.0, $248 = 0.0, $249 = 0, $25 = 0, $250 = 0, $251 = 0.0, $252 = 0.0, $253 = 0, $254 = 0.0, $255 = 0.0;
 var $256 = 0, $257 = 0, $258 = 0.0, $259 = 0.0, $26 = 0.0, $260 = 0, $261 = 0.0, $262 = 0.0, $263 = 0.0, $264 = 0.0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0.0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $IsAsync11 = 0, $IsAsync120 = 0, $IsAsync142 = 0, $IsAsync146 = 0, $IsAsync18 = 0;
 var $IsAsync22 = 0, $IsAsync30 = 0, $IsAsync34 = 0, $IsAsync38 = 0, $IsAsync4 = 0, $IsAsync42 = 0, $IsAsync46 = 0, $IsAsync50 = 0, $IsAsync54 = 0, $IsAsync58 = 0, $IsAsync62 = 0, $IsAsync73 = 0, $IsAsync77 = 0, $IsAsync81 = 0, $IsAsync85 = 0, $IsAsync89 = 0, $IsAsync93 = 0, $IsAsync97 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx11 = 0;
 var $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx16 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx20 = 0, $ReallocAsyncCtx21 = 0, $ReallocAsyncCtx22 = 0, $ReallocAsyncCtx23 = 0, $ReallocAsyncCtx24 = 0, $ReallocAsyncCtx25 = 0, $ReallocAsyncCtx26 = 0, $ReallocAsyncCtx32 = 0, $ReallocAsyncCtx38 = 0, $ReallocAsyncCtx39 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0;
 var $ReallocAsyncCtx9 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond21 = 0, $or$cond27 = 0, $or$cond30 = 0, $or$cond4 = 0, $or$cond42 = 0, $or$cond44 = 0, $or$cond9 = 0, $pad$0 = 0, $paddle2$paddle1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $117 = HEAP32[382808>>2]|0;
 $118 = HEAP32[(389572)>>2]|0;
 $119 = (($118|0) / 2)&-1;
 $120 = ($117|0)<($119|0);
 if (!($120)) {
  $121 = HEAP32[8>>2]|0;
  $122 = ((($121)) + 8|0);
  $123 = +HEAPF32[$122>>2];
  $124 = (+($119|0));
  $125 = $123 < $124;
  $126 = HEAP8[382784>>0]|0;
  $127 = ($126<<24>>24)==(0);
  $or$cond21 = $125 & $127;
  if ($or$cond21) {
   $128 = HEAP32[80>>2]|0;
   $129 = ((($128)) + 44|0);
   $130 = HEAP8[$129>>0]|0;
   $$not = ($130<<24>>24)==(0);
   $131 = HEAP32[35096>>2]|0;
   $132 = ($131|0)<(6);
   $or$cond = $$not & $132;
   if ($or$cond) {
    $133 = HEAP32[(651832)>>2]|0;
    $ReallocAsyncCtx10 = (_emscripten_realloc_async_context(4)|0);
    $134 = (FUNCTION_TABLE_i[$133 & 255]()|0);
    $IsAsync34 = ___async;
    if ($IsAsync34) {
     HEAP32[$ReallocAsyncCtx10>>2] = 114;
     sp = STACKTOP;
     return;
    }
    $135 = ___async_retval;
    HEAP32[$135>>2] = $134;
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx10>>2] = 114;
    sp = STACKTOP;
    return;
   }
   $136 = HEAP8[382792>>0]|0;
   $137 = ($136<<24>>24)==(0);
   if ($137) {
    $138 = HEAP32[88>>2]|0;
    $139 = ((($138)) + 44|0);
    $140 = HEAP8[$139>>0]|0;
    $141 = HEAP8[35112>>0]|0;
    $142 = $141 | $140;
    $143 = ($142<<24>>24)==(0);
    if ($143) {
     $144 = HEAP32[(651832)>>2]|0;
     $ReallocAsyncCtx11 = (_emscripten_realloc_async_context(4)|0);
     $145 = (FUNCTION_TABLE_i[$144 & 255]()|0);
     $IsAsync38 = ___async;
     if ($IsAsync38) {
      HEAP32[$ReallocAsyncCtx11>>2] = 116;
      sp = STACKTOP;
      return;
     }
     $146 = ___async_retval;
     HEAP32[$146>>2] = $145;
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx11>>2] = 116;
     sp = STACKTOP;
     return;
    }
   }
   $147 = (_get_score(1)|0);
   $148 = ($147|0)==(4);
   if ($148) {
    $149 = HEAP32[96>>2]|0;
    $150 = ((($149)) + 44|0);
    $151 = HEAP8[$150>>0]|0;
    $152 = HEAP8[35112>>0]|0;
    $153 = $152 | $151;
    $154 = ($153<<24>>24)==(0);
    if ($154) {
     $155 = HEAP32[(651832)>>2]|0;
     $ReallocAsyncCtx12 = (_emscripten_realloc_async_context(4)|0);
     $156 = (FUNCTION_TABLE_i[$155 & 255]()|0);
     $IsAsync42 = ___async;
     if ($IsAsync42) {
      HEAP32[$ReallocAsyncCtx12>>2] = 118;
      sp = STACKTOP;
      return;
     }
     $157 = ___async_retval;
     HEAP32[$157>>2] = $156;
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx12>>2] = 118;
     sp = STACKTOP;
     return;
    }
   }
  }
 }
 $158 = HEAP32[382808>>2]|0;
 $159 = HEAP32[(389572)>>2]|0;
 $160 = (($159|0) / 2)&-1;
 $161 = ($158|0)<($160|0);
 if ($161) {
  $162 = HEAP32[8>>2]|0;
  $163 = ((($162)) + 8|0);
  $164 = +HEAPF32[$163>>2];
  $165 = (+($160|0));
  $166 = $164 >= $165;
  $167 = HEAP8[382784>>0]|0;
  $168 = ($167<<24>>24)==(0);
  $or$cond27 = $166 & $168;
  if ($or$cond27) {
   $169 = HEAP32[(389556)>>2]|0;
   $170 = HEAP32[$169>>2]|0;
   $171 = ($170|0)>(1);
   if ($171) {
    $172 = HEAP32[80>>2]|0;
    $173 = ((($172)) + 44|0);
    $174 = HEAP8[$173>>0]|0;
    $$not2 = ($174<<24>>24)==(0);
    $175 = HEAP32[35096>>2]|0;
    $176 = ($175|0)<(6);
    $or$cond4 = $$not2 & $176;
    if ($or$cond4) {
     $177 = HEAP32[(651832)>>2]|0;
     $ReallocAsyncCtx13 = (_emscripten_realloc_async_context(4)|0);
     $178 = (FUNCTION_TABLE_i[$177 & 255]()|0);
     $IsAsync46 = ___async;
     if ($IsAsync46) {
      HEAP32[$ReallocAsyncCtx13>>2] = 120;
      sp = STACKTOP;
      return;
     }
     $179 = ___async_retval;
     HEAP32[$179>>2] = $178;
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx13>>2] = 120;
     sp = STACKTOP;
     return;
    }
    $180 = HEAP8[382792>>0]|0;
    $181 = ($180<<24>>24)==(0);
    if ($181) {
     $182 = HEAP32[88>>2]|0;
     $183 = ((($182)) + 44|0);
     $184 = HEAP8[$183>>0]|0;
     $185 = HEAP8[35112>>0]|0;
     $186 = $185 | $184;
     $187 = ($186<<24>>24)==(0);
     if ($187) {
      $188 = HEAP32[(651832)>>2]|0;
      $ReallocAsyncCtx14 = (_emscripten_realloc_async_context(4)|0);
      $189 = (FUNCTION_TABLE_i[$188 & 255]()|0);
      $IsAsync50 = ___async;
      if ($IsAsync50) {
       HEAP32[$ReallocAsyncCtx14>>2] = 122;
       sp = STACKTOP;
       return;
      }
      $190 = ___async_retval;
      HEAP32[$190>>2] = $189;
      ___async_unwind = 0;
      HEAP32[$ReallocAsyncCtx14>>2] = 122;
      sp = STACKTOP;
      return;
     } else {
      $191 = $185;
     }
    } else {
     label = 94;
    }
   } else {
    label = 94;
   }
  } else {
   label = 94;
  }
 } else {
  label = 94;
 }
 L44: while(1) {
  if ((label|0) == 94) {
   label = 0;
   $$pr32 = HEAP8[35112>>0]|0;
   $191 = $$pr32;
  }
  $192 = ($191<<24>>24)==(0);
  if (!($192)) {
   $193 = 389544;
   $194 = $193;
   $195 = HEAP32[$194>>2]|0;
   $196 = (($193) + 4)|0;
   $197 = $196;
   $198 = HEAP32[$197>>2]|0;
   $199 = 35120;
   $200 = $199;
   $201 = HEAP32[$200>>2]|0;
   $202 = (($199) + 4)|0;
   $203 = $202;
   $204 = HEAP32[$203>>2]|0;
   $205 = (_i64Subtract(($195|0),($198|0),($201|0),($204|0))|0);
   $206 = tempRet0;
   $207 = ($206>>>0)>(0);
   $208 = ($205>>>0)>(10000000);
   $209 = ($206|0)==(0);
   $210 = $209 & $208;
   $211 = $207 | $210;
   if ($211) {
    label = 99;
    break;
   }
   $212 = HEAP32[(651780)>>2]|0;
   if ((($212|0) == 5) | (($212|0) == 15)) {
    $213 = HEAP32[40>>2]|0;
    $214 = ((($213)) + 4|0);
    $215 = HEAP32[$214>>2]|0;
    $216 = ($215|0)==(4);
    $217 = ($206>>>0)>(0);
    $218 = ($205>>>0)>(5000000);
    $219 = ($206|0)==(0);
    $220 = $219 & $218;
    $221 = $217 | $220;
    $or$cond30 = $221 & $216;
    if ($or$cond30) {
     label = 99;
     break;
    }
   }
  }
  $222 = HEAP8[104>>0]|0;
  $223 = ($222<<24>>24)==(0);
  do {
   if (!($223)) {
    $224 = HEAP32[96>>2]|0;
    $225 = ((($224)) + 44|0);
    $226 = HEAP8[$225>>0]|0;
    $227 = ($226<<24>>24)==(0);
    if (!($227)) {
     $228 = ((($224)) + 8|0);
     $229 = +HEAPF32[$228>>2];
     $230 = HEAP32[(389572)>>2]|0;
     $231 = (($230|0) / 2)&-1;
     $232 = (+($231|0));
     $233 = $229 > $232;
     $paddle2$paddle1 = $233 ? 48 : 56;
     $pad$0 = HEAP32[$paddle2$paddle1>>2]|0;
     $234 = ((($224)) + 40|0);
     $235 = +HEAPF32[$234>>2];
     $236 = $235;
     $237 = (($230|0) / 40)&-1;
     $238 = (+($237|0));
     $239 = $238 * 10.0;
     $240 = $236 < $239;
     if ($240) {
      label = 105;
      break L44;
     }
     HEAP8[$225>>0] = 0;
     $250 = ((($pad$0)) + 40|0);
     $251 = +HEAPF32[$250>>2];
     $252 = $251;
     $253 = (($230|0) / 40)&-1;
     $254 = (+($253|0));
     $255 = $254 * 20.0;
     $256 = $252 < $255;
     if ($256) {
      label = 110;
      break L44;
     }
     $266 = ((($pad$0)) + 44|0);
     HEAP8[$266>>0] = 0;
     $267 = ((($pad$0)) + 4|0);
     $268 = HEAP32[$267>>2]|0;
     if ((($268|0) == 10)) {
      HEAP32[$267>>2] = 11;
      break;
     } else if ((($268|0) == 0)) {
      HEAP32[$267>>2] = 1;
      break;
     } else {
      break;
     }
    }
   }
  } while(0);
  $269 = HEAP8[382784>>0]|0;
  $270 = ($269<<24>>24)==(0);
  if ($270) {
   $271 = 389544;
   $272 = $271;
   $273 = HEAP32[$272>>2]|0;
   $274 = (($271) + 4)|0;
   $275 = $274;
   $276 = HEAP32[$275>>2]|0;
   $312 = $273;$313 = $276;
  } else {
   $277 = HEAP8[104>>0]|0;
   $278 = ($277<<24>>24)==(0);
   $279 = 389544;
   $280 = $279;
   $281 = HEAP32[$280>>2]|0;
   $282 = (($279) + 4)|0;
   $283 = $282;
   $284 = HEAP32[$283>>2]|0;
   $285 = 382800;
   $286 = $285;
   $287 = HEAP32[$286>>2]|0;
   $288 = (($285) + 4)|0;
   $289 = $288;
   $290 = HEAP32[$289>>2]|0;
   $291 = (_i64Subtract(($281|0),($284|0),($287|0),($290|0))|0);
   $292 = tempRet0;
   $293 = ($292>>>0)>(0);
   $294 = ($291>>>0)>(3000000);
   $295 = ($292|0)==(0);
   $296 = $295 & $294;
   $297 = $293 | $296;
   $or$cond42 = $278 & $297;
   $298 = (_i64Subtract(($281|0),($284|0),($287|0),($290|0))|0);
   $299 = tempRet0;
   $300 = ($299>>>0)>(0);
   $301 = ($298>>>0)>(6000000);
   $302 = ($299|0)==(0);
   $303 = $302 & $301;
   $304 = $300 | $303;
   $or$cond44 = $or$cond42 | $304;
   if ($or$cond44) {
    $305 = HEAP32[35096>>2]|0;
    $306 = ($305|0)==(6);
    if ($306) {
     $307 = HEAP32[(389556)>>2]|0;
     $308 = HEAP32[$307>>2]|0;
     $309 = ($308|0)==(1);
     if ($309) {
      $310 = ((($307)) + 4|0);
      HEAP8[$310>>0] = 1;
     } else {
      label = 123;
     }
    } else {
     label = 123;
    }
    if ((label|0) == 123) {
     label = 0;
     HEAP32[(651780)>>2] = 0;
    }
    HEAP8[128>>0] = 0;
    $312 = $281;$313 = $284;
   } else {
    $312 = $281;$313 = $284;
   }
  }
  $311 = HEAP32[216>>2]|0;
  $1 = (($311) + -40000)|0;
  HEAP32[216>>2] = $1;
  $314 = (_i64Add(($312|0),($313|0),40000,0)|0);
  $315 = tempRet0;
  $316 = 389544;
  $317 = $316;
  HEAP32[$317>>2] = $314;
  $318 = (($316) + 4)|0;
  $319 = $318;
  HEAP32[$319>>2] = $315;
  $2 = ($1|0)>(39999);
  if ($2) {
   label = 3;
   break;
  }
  __render();
  $320 = HEAP8[128>>0]|0;
  $$not7 = ($320<<24>>24)==(0);
  $321 = 389544;
  $322 = $321;
  $323 = HEAP32[$322>>2]|0;
  $324 = (($321) + 4)|0;
  $325 = $324;
  $326 = HEAP32[$325>>2]|0;
  $327 = ($323|0)==(0);
  $328 = ($326|0)==(0);
  $329 = $327 & $328;
  $or$cond9 = $$not7 & $329;
  if (!($or$cond9)) {
   label = 127;
   break;
  }
  $3 = HEAP32[(389696)>>2]|0;
  $4 = ($3|0)==(0);
  if (!($4)) {
   HEAP8[128>>0] = 0;
  }
  $5 = (_score_ball()|0);
  if ((($5|0) == 5)) {
   $6 = HEAP8[382784>>0]|0;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    label = 10;
    break;
   }
  } else if (!((($5|0) == 0))) {
   $$pr = HEAP8[382784>>0]|0;
   $62 = ($$pr<<24>>24)==(0);
   if ($62) {
    label = 26;
    break;
   }
  }
  $65 = HEAP32[(394012)>>2]|0;
  $66 = ($65|0)>(0);
  $67 = HEAP8[382784>>0]|0;
  $68 = ($67<<24>>24)==(0);
  $or$cond11 = $66 & $68;
  if ($or$cond11) {
   label = 30;
   break;
  }
  $78 = HEAP32[(394008)>>2]|0;
  $79 = ($78|0)>(0);
  $or$cond13 = $68 & $79;
  if ($or$cond13) {
   label = 38;
   break;
  }
  $89 = HEAP32[(389556)>>2]|0;
  $90 = HEAP32[$89>>2]|0;
  $91 = ($90|0)==(2);
  if ($91) {
   $92 = HEAP32[(390064)>>2]|0;
   $93 = ($92|0)>(0);
   $94 = HEAP8[382784>>0]|0;
   $95 = ($94<<24>>24)==(0);
   $or$cond15 = $93 & $95;
   if ($or$cond15) {
    label = 47;
    break;
   }
   $99 = HEAP32[(390048)>>2]|0;
   $100 = ($99|0)>(0);
   $or$cond17 = $95 & $100;
   if ($or$cond17) {
    label = 51;
    break;
   }
  }
  $104 = HEAP32[(389556)>>2]|0;
  $105 = HEAP32[$104>>2]|0;
  $106 = ($105|0)<(2);
  if ($106) {
   label = 55;
   break;
  }
  $107 = HEAP32[8>>2]|0;
  $108 = ((($107)) + 8|0);
  $109 = +HEAPF32[$108>>2];
  $110 = (~~(($109)));
  HEAP32[382808>>2] = $110;
  $111 = HEAP8[382784>>0]|0;
  $112 = ($111<<24>>24)==(0);
  if ($112) {
   label = 59;
   break;
  } else {
   label = 94;
  }
 }
 switch (label|0) {
  case 3: {
   $ReallocAsyncCtx17 = (_emscripten_realloc_async_context(4)|0);
   __update();
   $IsAsync62 = ___async;
   if ($IsAsync62) {
    HEAP32[$ReallocAsyncCtx17>>2] = 94;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx17>>2] = 94;
   sp = STACKTOP;
   return;
   break;
  }
  case 10: {
   HEAP8[382784>>0] = 1;
   $8 = HEAP32[(389556)>>2]|0;
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(1);
   if ($10) {
    $11 = (_get_score(1)|0);
    $12 = ($11|0)==(5);
    if ($12) {
     $13 = 389544;
     $14 = $13;
     $15 = HEAP32[$14>>2]|0;
     $16 = (($13) + 4)|0;
     $17 = $16;
     $18 = HEAP32[$17>>2]|0;
     $19 = 382800;
     $20 = $19;
     HEAP32[$20>>2] = $15;
     $21 = (($19) + 4)|0;
     $22 = $21;
     HEAP32[$22>>2] = $18;
     $23 = HEAP32[(651920)>>2]|0;
     $24 = HEAP32[8>>2]|0;
     $25 = HEAP32[(389572)>>2]|0;
     $26 = (+($25|0));
     $27 = ((($24)) + 12|0);
     $28 = +HEAPF32[$27>>2];
     $ReallocAsyncCtx2 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vidd[$23 & 255]($24,$26,$28);
     $IsAsync4 = ___async;
     if ($IsAsync4) {
      HEAP32[$ReallocAsyncCtx2>>2] = 95;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx2>>2] = 95;
     sp = STACKTOP;
     return;
    } else {
     HEAP8[382784>>0] = 1;
     $29 = 389544;
     $30 = $29;
     $31 = HEAP32[$30>>2]|0;
     $32 = (($29) + 4)|0;
     $33 = $32;
     $34 = HEAP32[$33>>2]|0;
     $35 = 382800;
     $36 = $35;
     HEAP32[$36>>2] = $31;
     $37 = (($35) + 4)|0;
     $38 = $37;
     HEAP32[$38>>2] = $34;
     $39 = HEAP32[(651952)>>2]|0;
     $40 = HEAP32[35168>>2]|0;
     $ReallocAsyncCtx4 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vi[$39 & 255]($40);
     $IsAsync11 = ___async;
     if ($IsAsync11) {
      HEAP32[$ReallocAsyncCtx4>>2] = 97;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx4>>2] = 97;
     sp = STACKTOP;
     return;
    }
   } else {
    $41 = 389544;
    $42 = $41;
    $43 = HEAP32[$42>>2]|0;
    $44 = (($41) + 4)|0;
    $45 = $44;
    $46 = HEAP32[$45>>2]|0;
    $47 = 382800;
    $48 = $47;
    HEAP32[$48>>2] = $43;
    $49 = (($47) + 4)|0;
    $50 = $49;
    HEAP32[$50>>2] = $46;
    $51 = HEAP32[8>>2]|0;
    $52 = ((($51)) + 8|0);
    $53 = +HEAPF32[$52>>2];
    $54 = HEAP32[(389572)>>2]|0;
    $55 = (($54|0) / 2)&-1;
    $56 = (+($55|0));
    $57 = $53 > $56;
    $58 = HEAP32[(651920)>>2]|0;
    $59 = ((($51)) + 12|0);
    $60 = +HEAPF32[$59>>2];
    if ($57) {
     $61 = (+($54|0));
     $ReallocAsyncCtx6 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vidd[$58 & 255]($51,$61,$60);
     $IsAsync18 = ___async;
     if ($IsAsync18) {
      HEAP32[$ReallocAsyncCtx6>>2] = 99;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx6>>2] = 99;
     sp = STACKTOP;
     return;
    } else {
     $ReallocAsyncCtx7 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vidd[$58 & 255]($51,0.0,$60);
     $IsAsync22 = ___async;
     if ($IsAsync22) {
      HEAP32[$ReallocAsyncCtx7>>2] = 100;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx7>>2] = 100;
     sp = STACKTOP;
     return;
    }
   }
   break;
  }
  case 26: {
   $63 = HEAP32[(651952)>>2]|0;
   $64 = HEAP32[35128>>2]|0;
   $ReallocAsyncCtx9 = (_emscripten_realloc_async_context(4)|0);
   FUNCTION_TABLE_vi[$63 & 255]($64);
   $IsAsync30 = ___async;
   if ($IsAsync30) {
    HEAP32[$ReallocAsyncCtx9>>2] = 102;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx9>>2] = 102;
   sp = STACKTOP;
   return;
   break;
  }
  case 30: {
   $69 = HEAP32[(389556)>>2]|0;
   $70 = HEAP32[$69>>2]|0;
   $71 = ($70|0)==(1);
   if ($71) {
    $72 = HEAP32[56>>2]|0;
    $73 = HEAP32[(389576)>>2]|0;
    $74 = (($73|0) / 40)&-1;
    $ReallocAsyncCtx26 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($72,1106,$65,$74);
    $IsAsync97 = ___async;
    if ($IsAsync97) {
     HEAP32[$ReallocAsyncCtx26>>2] = 104;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx26>>2] = 104;
    sp = STACKTOP;
    return;
   } else {
    $75 = HEAP32[48>>2]|0;
    $76 = HEAP32[(389576)>>2]|0;
    $77 = (($76|0) / 40)&-1;
    $ReallocAsyncCtx25 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($75,1106,$65,$77);
    $IsAsync93 = ___async;
    if ($IsAsync93) {
     HEAP32[$ReallocAsyncCtx25>>2] = 105;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx25>>2] = 105;
    sp = STACKTOP;
    return;
   }
   break;
  }
  case 38: {
   $80 = HEAP32[(389556)>>2]|0;
   $81 = HEAP32[$80>>2]|0;
   $82 = ($81|0)==(1);
   if ($82) {
    $83 = HEAP32[56>>2]|0;
    $84 = HEAP32[(389576)>>2]|0;
    $85 = (($84|0) / 40)&-1;
    $ReallocAsyncCtx24 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($83,1105,$78,$85);
    $IsAsync89 = ___async;
    if ($IsAsync89) {
     HEAP32[$ReallocAsyncCtx24>>2] = 106;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx24>>2] = 106;
    sp = STACKTOP;
    return;
   } else {
    $86 = HEAP32[48>>2]|0;
    $87 = HEAP32[(389576)>>2]|0;
    $88 = (($87|0) / 40)&-1;
    $ReallocAsyncCtx23 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($86,1105,$78,$88);
    $IsAsync85 = ___async;
    if ($IsAsync85) {
     HEAP32[$ReallocAsyncCtx23>>2] = 107;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx23>>2] = 107;
    sp = STACKTOP;
    return;
   }
   break;
  }
  case 47: {
   $96 = HEAP32[56>>2]|0;
   $97 = HEAP32[(389576)>>2]|0;
   $98 = (($97|0) / 40)&-1;
   $ReallocAsyncCtx22 = (_emscripten_realloc_async_context(4)|0);
   _move_paddle($96,1106,$92,$98);
   $IsAsync81 = ___async;
   if ($IsAsync81) {
    HEAP32[$ReallocAsyncCtx22>>2] = 108;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx22>>2] = 108;
   sp = STACKTOP;
   return;
   break;
  }
  case 51: {
   $101 = HEAP32[56>>2]|0;
   $102 = HEAP32[(389576)>>2]|0;
   $103 = (($102|0) / 40)&-1;
   $ReallocAsyncCtx21 = (_emscripten_realloc_async_context(4)|0);
   _move_paddle($101,1105,$99,$103);
   $IsAsync77 = ___async;
   if ($IsAsync77) {
    HEAP32[$ReallocAsyncCtx21>>2] = 109;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx21>>2] = 109;
   sp = STACKTOP;
   return;
   break;
  }
  case 55: {
   $ReallocAsyncCtx20 = (_emscripten_realloc_async_context(4)|0);
   _paddle_ai(2);
   $IsAsync73 = ___async;
   if ($IsAsync73) {
    HEAP32[$ReallocAsyncCtx20>>2] = 110;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx20>>2] = 110;
   sp = STACKTOP;
   return;
   break;
  }
  case 59: {
   $113 = HEAP8[104>>0]|0;
   $114 = ($113<<24>>24)==(0);
   if ($114) {
    $ReallocAsyncCtx39 = (_emscripten_realloc_async_context(4)|0);
    $115 = (_collision_ball()|0);
    $IsAsync146 = ___async;
    if ($IsAsync146) {
     HEAP32[$ReallocAsyncCtx39>>2] = 111;
     sp = STACKTOP;
     return;
    }
    $116 = ___async_retval;
    $$expand_i1_val = $115&1;
    HEAP8[$116>>0] = $$expand_i1_val;
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx39>>2] = 111;
    sp = STACKTOP;
    return;
   } else {
    $ReallocAsyncCtx38 = (_emscripten_realloc_async_context(4)|0);
    _update_ball();
    $IsAsync142 = ___async;
    if ($IsAsync142) {
     HEAP32[$ReallocAsyncCtx38>>2] = 112;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx38>>2] = 112;
    sp = STACKTOP;
    return;
   }
   break;
  }
  case 99: {
   $ReallocAsyncCtx32 = (_emscripten_realloc_async_context(4)|0);
   _end_danger();
   $IsAsync120 = ___async;
   if ($IsAsync120) {
    HEAP32[$ReallocAsyncCtx32>>2] = 124;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx32>>2] = 124;
   sp = STACKTOP;
   return;
   break;
  }
  case 105: {
   $241 = HEAP32[(651924)>>2]|0;
   $242 = $236 * 1.2;
   $243 = $242;
   HEAPF32[$234>>2] = $243;
   $244 = ((($224)) + 36|0);
   $245 = +HEAPF32[$244>>2];
   $246 = $245;
   $247 = $246 * 1.2;
   $248 = $247;
   HEAPF32[$244>>2] = $248;
   $ReallocAsyncCtx15 = (_emscripten_realloc_async_context(8)|0);
   FUNCTION_TABLE_vidd[$241 & 255]($224,$243,$248);
   $IsAsync54 = ___async;
   if ($IsAsync54) {
    HEAP32[$ReallocAsyncCtx15>>2] = 125;
    $249 = ((($ReallocAsyncCtx15)) + 4|0);
    HEAP32[$249>>2] = $pad$0;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx15>>2] = 125;
   $249 = ((($ReallocAsyncCtx15)) + 4|0);
   HEAP32[$249>>2] = $pad$0;
   sp = STACKTOP;
   return;
   break;
  }
  case 110: {
   $257 = HEAP32[(651924)>>2]|0;
   $258 = $252 * 1.2;
   $259 = $258;
   HEAPF32[$250>>2] = $259;
   $260 = ((($pad$0)) + 36|0);
   $261 = +HEAPF32[$260>>2];
   $262 = $261;
   $263 = $262 * 1.1000000000000001;
   $264 = $263;
   HEAPF32[$260>>2] = $264;
   $ReallocAsyncCtx16 = (_emscripten_realloc_async_context(8)|0);
   FUNCTION_TABLE_vidd[$257 & 255]($pad$0,$259,$264);
   $IsAsync58 = ___async;
   if ($IsAsync58) {
    HEAP32[$ReallocAsyncCtx16>>2] = 126;
    $265 = ((($ReallocAsyncCtx16)) + 4|0);
    HEAP32[$265>>2] = $pad$0;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx16>>2] = 126;
   $265 = ((($ReallocAsyncCtx16)) + 4|0);
   HEAP32[$265>>2] = $pad$0;
   sp = STACKTOP;
   return;
   break;
  }
  case 127: {
   return;
   break;
  }
 }
}
function _pong__async_cb151($0) {
 $0 = $0|0;
 var $IsAsync131 = 0, $ReallocAsyncCtx35 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ReallocAsyncCtx35 = (_emscripten_realloc_async_context(4)|0);
 _initialize_danger();
 $IsAsync131 = ___async;
 if (!($IsAsync131)) {
  ___async_unwind = 0;
 }
 HEAP32[$ReallocAsyncCtx35>>2] = 92;
 sp = STACKTOP;
 return;
}
function _pong__async_cb152($0) {
 $0 = $0|0;
 var $$expand_i1_val = 0, $$not7 = 0, $$pr = 0, $$pr32 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0.0, $158 = 0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0, $163 = 0.0, $164 = 0.0, $165 = 0, $166 = 0, $167 = 0.0;
 var $168 = 0.0, $169 = 0, $17 = 0, $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0, $175 = 0, $176 = 0.0, $177 = 0.0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0, $182 = 0, $183 = 0.0, $184 = 0.0, $185 = 0;
 var $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $26 = 0.0, $27 = 0, $28 = 0.0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $IsAsync11 = 0, $IsAsync120 = 0;
 var $IsAsync142 = 0, $IsAsync146 = 0, $IsAsync18 = 0, $IsAsync22 = 0, $IsAsync30 = 0, $IsAsync4 = 0, $IsAsync54 = 0, $IsAsync58 = 0, $IsAsync62 = 0, $IsAsync73 = 0, $IsAsync77 = 0, $IsAsync81 = 0, $IsAsync85 = 0, $IsAsync89 = 0, $IsAsync93 = 0, $IsAsync97 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx16 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx2 = 0;
 var $ReallocAsyncCtx20 = 0, $ReallocAsyncCtx21 = 0, $ReallocAsyncCtx22 = 0, $ReallocAsyncCtx23 = 0, $ReallocAsyncCtx24 = 0, $ReallocAsyncCtx25 = 0, $ReallocAsyncCtx26 = 0, $ReallocAsyncCtx32 = 0, $ReallocAsyncCtx38 = 0, $ReallocAsyncCtx39 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx9 = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond30 = 0, $or$cond42 = 0;
 var $or$cond44 = 0, $or$cond9 = 0, $pad$0 = 0, $paddle2$paddle1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[35112>>0] = 0;
 L2: while(1) {
  $147 = HEAP8[104>>0]|0;
  $148 = ($147<<24>>24)==(0);
  do {
   if (!($148)) {
    $149 = HEAP32[96>>2]|0;
    $150 = ((($149)) + 44|0);
    $151 = HEAP8[$150>>0]|0;
    $152 = ($151<<24>>24)==(0);
    if (!($152)) {
     $153 = ((($149)) + 8|0);
     $154 = +HEAPF32[$153>>2];
     $155 = HEAP32[(389572)>>2]|0;
     $156 = (($155|0) / 2)&-1;
     $157 = (+($156|0));
     $158 = $154 > $157;
     $paddle2$paddle1 = $158 ? 48 : 56;
     $pad$0 = HEAP32[$paddle2$paddle1>>2]|0;
     $159 = ((($149)) + 40|0);
     $160 = +HEAPF32[$159>>2];
     $161 = $160;
     $162 = (($155|0) / 40)&-1;
     $163 = (+($162|0));
     $164 = $163 * 10.0;
     $165 = $161 < $164;
     if ($165) {
      label = 78;
      break L2;
     }
     HEAP8[$150>>0] = 0;
     $175 = ((($pad$0)) + 40|0);
     $176 = +HEAPF32[$175>>2];
     $177 = $176;
     $178 = (($155|0) / 40)&-1;
     $179 = (+($178|0));
     $180 = $179 * 20.0;
     $181 = $177 < $180;
     if ($181) {
      label = 83;
      break L2;
     }
     $191 = ((($pad$0)) + 44|0);
     HEAP8[$191>>0] = 0;
     $192 = ((($pad$0)) + 4|0);
     $193 = HEAP32[$192>>2]|0;
     if ((($193|0) == 10)) {
      HEAP32[$192>>2] = 11;
      break;
     } else if ((($193|0) == 0)) {
      HEAP32[$192>>2] = 1;
      break;
     } else {
      break;
     }
    }
   }
  } while(0);
  $194 = HEAP8[382784>>0]|0;
  $195 = ($194<<24>>24)==(0);
  if ($195) {
   $196 = 389544;
   $197 = $196;
   $198 = HEAP32[$197>>2]|0;
   $199 = (($196) + 4)|0;
   $200 = $199;
   $201 = HEAP32[$200>>2]|0;
   $237 = $198;$238 = $201;
  } else {
   $202 = HEAP8[104>>0]|0;
   $203 = ($202<<24>>24)==(0);
   $204 = 389544;
   $205 = $204;
   $206 = HEAP32[$205>>2]|0;
   $207 = (($204) + 4)|0;
   $208 = $207;
   $209 = HEAP32[$208>>2]|0;
   $210 = 382800;
   $211 = $210;
   $212 = HEAP32[$211>>2]|0;
   $213 = (($210) + 4)|0;
   $214 = $213;
   $215 = HEAP32[$214>>2]|0;
   $216 = (_i64Subtract(($206|0),($209|0),($212|0),($215|0))|0);
   $217 = tempRet0;
   $218 = ($217>>>0)>(0);
   $219 = ($216>>>0)>(3000000);
   $220 = ($217|0)==(0);
   $221 = $220 & $219;
   $222 = $218 | $221;
   $or$cond42 = $203 & $222;
   $223 = (_i64Subtract(($206|0),($209|0),($212|0),($215|0))|0);
   $224 = tempRet0;
   $225 = ($224>>>0)>(0);
   $226 = ($223>>>0)>(6000000);
   $227 = ($224|0)==(0);
   $228 = $227 & $226;
   $229 = $225 | $228;
   $or$cond44 = $or$cond42 | $229;
   if ($or$cond44) {
    $230 = HEAP32[35096>>2]|0;
    $231 = ($230|0)==(6);
    if ($231) {
     $232 = HEAP32[(389556)>>2]|0;
     $233 = HEAP32[$232>>2]|0;
     $234 = ($233|0)==(1);
     if ($234) {
      $235 = ((($232)) + 4|0);
      HEAP8[$235>>0] = 1;
     } else {
      label = 96;
     }
    } else {
     label = 96;
    }
    if ((label|0) == 96) {
     label = 0;
     HEAP32[(651780)>>2] = 0;
    }
    HEAP8[128>>0] = 0;
    $237 = $206;$238 = $209;
   } else {
    $237 = $206;$238 = $209;
   }
  }
  $236 = HEAP32[216>>2]|0;
  $1 = (($236) + -40000)|0;
  HEAP32[216>>2] = $1;
  $239 = (_i64Add(($237|0),($238|0),40000,0)|0);
  $240 = tempRet0;
  $241 = 389544;
  $242 = $241;
  HEAP32[$242>>2] = $239;
  $243 = (($241) + 4)|0;
  $244 = $243;
  HEAP32[$244>>2] = $240;
  $2 = ($1|0)>(39999);
  if ($2) {
   label = 3;
   break;
  }
  __render();
  $245 = HEAP8[128>>0]|0;
  $$not7 = ($245<<24>>24)==(0);
  $246 = 389544;
  $247 = $246;
  $248 = HEAP32[$247>>2]|0;
  $249 = (($246) + 4)|0;
  $250 = $249;
  $251 = HEAP32[$250>>2]|0;
  $252 = ($248|0)==(0);
  $253 = ($251|0)==(0);
  $254 = $252 & $253;
  $or$cond9 = $$not7 & $254;
  if (!($or$cond9)) {
   label = 100;
   break;
  }
  $3 = HEAP32[(389696)>>2]|0;
  $4 = ($3|0)==(0);
  if (!($4)) {
   HEAP8[128>>0] = 0;
  }
  $5 = (_score_ball()|0);
  if ((($5|0) == 5)) {
   $6 = HEAP8[382784>>0]|0;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    label = 10;
    break;
   }
  } else if (!((($5|0) == 0))) {
   $$pr = HEAP8[382784>>0]|0;
   $62 = ($$pr<<24>>24)==(0);
   if ($62) {
    label = 26;
    break;
   }
  }
  $65 = HEAP32[(394012)>>2]|0;
  $66 = ($65|0)>(0);
  $67 = HEAP8[382784>>0]|0;
  $68 = ($67<<24>>24)==(0);
  $or$cond11 = $66 & $68;
  if ($or$cond11) {
   label = 30;
   break;
  }
  $78 = HEAP32[(394008)>>2]|0;
  $79 = ($78|0)>(0);
  $or$cond13 = $68 & $79;
  if ($or$cond13) {
   label = 38;
   break;
  }
  $89 = HEAP32[(389556)>>2]|0;
  $90 = HEAP32[$89>>2]|0;
  $91 = ($90|0)==(2);
  if ($91) {
   $92 = HEAP32[(390064)>>2]|0;
   $93 = ($92|0)>(0);
   $94 = HEAP8[382784>>0]|0;
   $95 = ($94<<24>>24)==(0);
   $or$cond15 = $93 & $95;
   if ($or$cond15) {
    label = 47;
    break;
   }
   $99 = HEAP32[(390048)>>2]|0;
   $100 = ($99|0)>(0);
   $or$cond17 = $95 & $100;
   if ($or$cond17) {
    label = 51;
    break;
   }
  }
  $104 = HEAP32[(389556)>>2]|0;
  $105 = HEAP32[$104>>2]|0;
  $106 = ($105|0)<(2);
  if ($106) {
   label = 55;
   break;
  }
  $107 = HEAP32[8>>2]|0;
  $108 = ((($107)) + 8|0);
  $109 = +HEAPF32[$108>>2];
  $110 = (~~(($109)));
  HEAP32[382808>>2] = $110;
  $111 = HEAP8[382784>>0]|0;
  $112 = ($111<<24>>24)==(0);
  if ($112) {
   label = 59;
   break;
  }
  $$pr32 = HEAP8[35112>>0]|0;
  $117 = ($$pr32<<24>>24)==(0);
  if ($117) {
   continue;
  }
  $118 = 389544;
  $119 = $118;
  $120 = HEAP32[$119>>2]|0;
  $121 = (($118) + 4)|0;
  $122 = $121;
  $123 = HEAP32[$122>>2]|0;
  $124 = 35120;
  $125 = $124;
  $126 = HEAP32[$125>>2]|0;
  $127 = (($124) + 4)|0;
  $128 = $127;
  $129 = HEAP32[$128>>2]|0;
  $130 = (_i64Subtract(($120|0),($123|0),($126|0),($129|0))|0);
  $131 = tempRet0;
  $132 = ($131>>>0)>(0);
  $133 = ($130>>>0)>(10000000);
  $134 = ($131|0)==(0);
  $135 = $134 & $133;
  $136 = $132 | $135;
  if ($136) {
   label = 71;
   break;
  }
  $137 = HEAP32[(651780)>>2]|0;
  if (!((($137|0) == 5) | (($137|0) == 15))) {
   continue;
  }
  $138 = HEAP32[40>>2]|0;
  $139 = ((($138)) + 4|0);
  $140 = HEAP32[$139>>2]|0;
  $141 = ($140|0)==(4);
  $142 = ($131>>>0)>(0);
  $143 = ($130>>>0)>(5000000);
  $144 = ($131|0)==(0);
  $145 = $144 & $143;
  $146 = $142 | $145;
  $or$cond30 = $146 & $141;
  if ($or$cond30) {
   label = 71;
   break;
  }
 }
 switch (label|0) {
  case 3: {
   $ReallocAsyncCtx17 = (_emscripten_realloc_async_context(4)|0);
   __update();
   $IsAsync62 = ___async;
   if ($IsAsync62) {
    HEAP32[$ReallocAsyncCtx17>>2] = 94;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx17>>2] = 94;
   sp = STACKTOP;
   return;
   break;
  }
  case 10: {
   HEAP8[382784>>0] = 1;
   $8 = HEAP32[(389556)>>2]|0;
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(1);
   if ($10) {
    $11 = (_get_score(1)|0);
    $12 = ($11|0)==(5);
    if ($12) {
     $13 = 389544;
     $14 = $13;
     $15 = HEAP32[$14>>2]|0;
     $16 = (($13) + 4)|0;
     $17 = $16;
     $18 = HEAP32[$17>>2]|0;
     $19 = 382800;
     $20 = $19;
     HEAP32[$20>>2] = $15;
     $21 = (($19) + 4)|0;
     $22 = $21;
     HEAP32[$22>>2] = $18;
     $23 = HEAP32[(651920)>>2]|0;
     $24 = HEAP32[8>>2]|0;
     $25 = HEAP32[(389572)>>2]|0;
     $26 = (+($25|0));
     $27 = ((($24)) + 12|0);
     $28 = +HEAPF32[$27>>2];
     $ReallocAsyncCtx2 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vidd[$23 & 255]($24,$26,$28);
     $IsAsync4 = ___async;
     if ($IsAsync4) {
      HEAP32[$ReallocAsyncCtx2>>2] = 95;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx2>>2] = 95;
     sp = STACKTOP;
     return;
    } else {
     HEAP8[382784>>0] = 1;
     $29 = 389544;
     $30 = $29;
     $31 = HEAP32[$30>>2]|0;
     $32 = (($29) + 4)|0;
     $33 = $32;
     $34 = HEAP32[$33>>2]|0;
     $35 = 382800;
     $36 = $35;
     HEAP32[$36>>2] = $31;
     $37 = (($35) + 4)|0;
     $38 = $37;
     HEAP32[$38>>2] = $34;
     $39 = HEAP32[(651952)>>2]|0;
     $40 = HEAP32[35168>>2]|0;
     $ReallocAsyncCtx4 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vi[$39 & 255]($40);
     $IsAsync11 = ___async;
     if ($IsAsync11) {
      HEAP32[$ReallocAsyncCtx4>>2] = 97;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx4>>2] = 97;
     sp = STACKTOP;
     return;
    }
   } else {
    $41 = 389544;
    $42 = $41;
    $43 = HEAP32[$42>>2]|0;
    $44 = (($41) + 4)|0;
    $45 = $44;
    $46 = HEAP32[$45>>2]|0;
    $47 = 382800;
    $48 = $47;
    HEAP32[$48>>2] = $43;
    $49 = (($47) + 4)|0;
    $50 = $49;
    HEAP32[$50>>2] = $46;
    $51 = HEAP32[8>>2]|0;
    $52 = ((($51)) + 8|0);
    $53 = +HEAPF32[$52>>2];
    $54 = HEAP32[(389572)>>2]|0;
    $55 = (($54|0) / 2)&-1;
    $56 = (+($55|0));
    $57 = $53 > $56;
    $58 = HEAP32[(651920)>>2]|0;
    $59 = ((($51)) + 12|0);
    $60 = +HEAPF32[$59>>2];
    if ($57) {
     $61 = (+($54|0));
     $ReallocAsyncCtx6 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vidd[$58 & 255]($51,$61,$60);
     $IsAsync18 = ___async;
     if ($IsAsync18) {
      HEAP32[$ReallocAsyncCtx6>>2] = 99;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx6>>2] = 99;
     sp = STACKTOP;
     return;
    } else {
     $ReallocAsyncCtx7 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vidd[$58 & 255]($51,0.0,$60);
     $IsAsync22 = ___async;
     if ($IsAsync22) {
      HEAP32[$ReallocAsyncCtx7>>2] = 100;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx7>>2] = 100;
     sp = STACKTOP;
     return;
    }
   }
   break;
  }
  case 26: {
   $63 = HEAP32[(651952)>>2]|0;
   $64 = HEAP32[35128>>2]|0;
   $ReallocAsyncCtx9 = (_emscripten_realloc_async_context(4)|0);
   FUNCTION_TABLE_vi[$63 & 255]($64);
   $IsAsync30 = ___async;
   if ($IsAsync30) {
    HEAP32[$ReallocAsyncCtx9>>2] = 102;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx9>>2] = 102;
   sp = STACKTOP;
   return;
   break;
  }
  case 30: {
   $69 = HEAP32[(389556)>>2]|0;
   $70 = HEAP32[$69>>2]|0;
   $71 = ($70|0)==(1);
   if ($71) {
    $72 = HEAP32[56>>2]|0;
    $73 = HEAP32[(389576)>>2]|0;
    $74 = (($73|0) / 40)&-1;
    $ReallocAsyncCtx26 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($72,1106,$65,$74);
    $IsAsync97 = ___async;
    if ($IsAsync97) {
     HEAP32[$ReallocAsyncCtx26>>2] = 104;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx26>>2] = 104;
    sp = STACKTOP;
    return;
   } else {
    $75 = HEAP32[48>>2]|0;
    $76 = HEAP32[(389576)>>2]|0;
    $77 = (($76|0) / 40)&-1;
    $ReallocAsyncCtx25 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($75,1106,$65,$77);
    $IsAsync93 = ___async;
    if ($IsAsync93) {
     HEAP32[$ReallocAsyncCtx25>>2] = 105;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx25>>2] = 105;
    sp = STACKTOP;
    return;
   }
   break;
  }
  case 38: {
   $80 = HEAP32[(389556)>>2]|0;
   $81 = HEAP32[$80>>2]|0;
   $82 = ($81|0)==(1);
   if ($82) {
    $83 = HEAP32[56>>2]|0;
    $84 = HEAP32[(389576)>>2]|0;
    $85 = (($84|0) / 40)&-1;
    $ReallocAsyncCtx24 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($83,1105,$78,$85);
    $IsAsync89 = ___async;
    if ($IsAsync89) {
     HEAP32[$ReallocAsyncCtx24>>2] = 106;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx24>>2] = 106;
    sp = STACKTOP;
    return;
   } else {
    $86 = HEAP32[48>>2]|0;
    $87 = HEAP32[(389576)>>2]|0;
    $88 = (($87|0) / 40)&-1;
    $ReallocAsyncCtx23 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($86,1105,$78,$88);
    $IsAsync85 = ___async;
    if ($IsAsync85) {
     HEAP32[$ReallocAsyncCtx23>>2] = 107;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx23>>2] = 107;
    sp = STACKTOP;
    return;
   }
   break;
  }
  case 47: {
   $96 = HEAP32[56>>2]|0;
   $97 = HEAP32[(389576)>>2]|0;
   $98 = (($97|0) / 40)&-1;
   $ReallocAsyncCtx22 = (_emscripten_realloc_async_context(4)|0);
   _move_paddle($96,1106,$92,$98);
   $IsAsync81 = ___async;
   if ($IsAsync81) {
    HEAP32[$ReallocAsyncCtx22>>2] = 108;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx22>>2] = 108;
   sp = STACKTOP;
   return;
   break;
  }
  case 51: {
   $101 = HEAP32[56>>2]|0;
   $102 = HEAP32[(389576)>>2]|0;
   $103 = (($102|0) / 40)&-1;
   $ReallocAsyncCtx21 = (_emscripten_realloc_async_context(4)|0);
   _move_paddle($101,1105,$99,$103);
   $IsAsync77 = ___async;
   if ($IsAsync77) {
    HEAP32[$ReallocAsyncCtx21>>2] = 109;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx21>>2] = 109;
   sp = STACKTOP;
   return;
   break;
  }
  case 55: {
   $ReallocAsyncCtx20 = (_emscripten_realloc_async_context(4)|0);
   _paddle_ai(2);
   $IsAsync73 = ___async;
   if ($IsAsync73) {
    HEAP32[$ReallocAsyncCtx20>>2] = 110;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx20>>2] = 110;
   sp = STACKTOP;
   return;
   break;
  }
  case 59: {
   $113 = HEAP8[104>>0]|0;
   $114 = ($113<<24>>24)==(0);
   if ($114) {
    $ReallocAsyncCtx39 = (_emscripten_realloc_async_context(4)|0);
    $115 = (_collision_ball()|0);
    $IsAsync146 = ___async;
    if ($IsAsync146) {
     HEAP32[$ReallocAsyncCtx39>>2] = 111;
     sp = STACKTOP;
     return;
    }
    $116 = ___async_retval;
    $$expand_i1_val = $115&1;
    HEAP8[$116>>0] = $$expand_i1_val;
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx39>>2] = 111;
    sp = STACKTOP;
    return;
   } else {
    $ReallocAsyncCtx38 = (_emscripten_realloc_async_context(4)|0);
    _update_ball();
    $IsAsync142 = ___async;
    if ($IsAsync142) {
     HEAP32[$ReallocAsyncCtx38>>2] = 112;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx38>>2] = 112;
    sp = STACKTOP;
    return;
   }
   break;
  }
  case 71: {
   $ReallocAsyncCtx32 = (_emscripten_realloc_async_context(4)|0);
   _end_danger();
   $IsAsync120 = ___async;
   if ($IsAsync120) {
    HEAP32[$ReallocAsyncCtx32>>2] = 124;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx32>>2] = 124;
   sp = STACKTOP;
   return;
   break;
  }
  case 78: {
   $166 = HEAP32[(651924)>>2]|0;
   $167 = $161 * 1.2;
   $168 = $167;
   HEAPF32[$159>>2] = $168;
   $169 = ((($149)) + 36|0);
   $170 = +HEAPF32[$169>>2];
   $171 = $170;
   $172 = $171 * 1.2;
   $173 = $172;
   HEAPF32[$169>>2] = $173;
   $ReallocAsyncCtx15 = (_emscripten_realloc_async_context(8)|0);
   FUNCTION_TABLE_vidd[$166 & 255]($149,$168,$173);
   $IsAsync54 = ___async;
   if ($IsAsync54) {
    HEAP32[$ReallocAsyncCtx15>>2] = 125;
    $174 = ((($ReallocAsyncCtx15)) + 4|0);
    HEAP32[$174>>2] = $pad$0;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx15>>2] = 125;
   $174 = ((($ReallocAsyncCtx15)) + 4|0);
   HEAP32[$174>>2] = $pad$0;
   sp = STACKTOP;
   return;
   break;
  }
  case 83: {
   $182 = HEAP32[(651924)>>2]|0;
   $183 = $177 * 1.2;
   $184 = $183;
   HEAPF32[$175>>2] = $184;
   $185 = ((($pad$0)) + 36|0);
   $186 = +HEAPF32[$185>>2];
   $187 = $186;
   $188 = $187 * 1.1000000000000001;
   $189 = $188;
   HEAPF32[$185>>2] = $189;
   $ReallocAsyncCtx16 = (_emscripten_realloc_async_context(8)|0);
   FUNCTION_TABLE_vidd[$182 & 255]($pad$0,$184,$189);
   $IsAsync58 = ___async;
   if ($IsAsync58) {
    HEAP32[$ReallocAsyncCtx16>>2] = 126;
    $190 = ((($ReallocAsyncCtx16)) + 4|0);
    HEAP32[$190>>2] = $pad$0;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx16>>2] = 126;
   $190 = ((($ReallocAsyncCtx16)) + 4|0);
   HEAP32[$190>>2] = $pad$0;
   sp = STACKTOP;
   return;
   break;
  }
  case 100: {
   return;
   break;
  }
 }
}
function _pong__async_cb153($0) {
 $0 = $0|0;
 var $$expand_i1_val = 0, $$not7 = 0, $$pr = 0, $$pr32 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0.0, $158 = 0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0, $163 = 0.0, $164 = 0.0, $165 = 0, $166 = 0, $167 = 0.0;
 var $168 = 0.0, $169 = 0, $17 = 0, $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0, $175 = 0, $176 = 0.0, $177 = 0.0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0, $182 = 0, $183 = 0.0, $184 = 0.0, $185 = 0;
 var $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $26 = 0.0, $27 = 0, $28 = 0.0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $IsAsync11 = 0, $IsAsync120 = 0;
 var $IsAsync142 = 0, $IsAsync146 = 0, $IsAsync18 = 0, $IsAsync22 = 0, $IsAsync30 = 0, $IsAsync4 = 0, $IsAsync54 = 0, $IsAsync58 = 0, $IsAsync62 = 0, $IsAsync73 = 0, $IsAsync77 = 0, $IsAsync81 = 0, $IsAsync85 = 0, $IsAsync89 = 0, $IsAsync93 = 0, $IsAsync97 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx16 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx2 = 0;
 var $ReallocAsyncCtx20 = 0, $ReallocAsyncCtx21 = 0, $ReallocAsyncCtx22 = 0, $ReallocAsyncCtx23 = 0, $ReallocAsyncCtx24 = 0, $ReallocAsyncCtx25 = 0, $ReallocAsyncCtx26 = 0, $ReallocAsyncCtx32 = 0, $ReallocAsyncCtx38 = 0, $ReallocAsyncCtx39 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx9 = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond30 = 0, $or$cond42 = 0;
 var $or$cond44 = 0, $or$cond9 = 0, $pad$0 = 0, $paddle2$paddle1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 L2: while(1) {
  $$pr32 = HEAP8[35112>>0]|0;
  $117 = ($$pr32<<24>>24)==(0);
  if (!($117)) {
   $118 = 389544;
   $119 = $118;
   $120 = HEAP32[$119>>2]|0;
   $121 = (($118) + 4)|0;
   $122 = $121;
   $123 = HEAP32[$122>>2]|0;
   $124 = 35120;
   $125 = $124;
   $126 = HEAP32[$125>>2]|0;
   $127 = (($124) + 4)|0;
   $128 = $127;
   $129 = HEAP32[$128>>2]|0;
   $130 = (_i64Subtract(($120|0),($123|0),($126|0),($129|0))|0);
   $131 = tempRet0;
   $132 = ($131>>>0)>(0);
   $133 = ($130>>>0)>(10000000);
   $134 = ($131|0)==(0);
   $135 = $134 & $133;
   $136 = $132 | $135;
   if ($136) {
    label = 72;
    break;
   }
   $137 = HEAP32[(651780)>>2]|0;
   if ((($137|0) == 5) | (($137|0) == 15)) {
    $138 = HEAP32[40>>2]|0;
    $139 = ((($138)) + 4|0);
    $140 = HEAP32[$139>>2]|0;
    $141 = ($140|0)==(4);
    $142 = ($131>>>0)>(0);
    $143 = ($130>>>0)>(5000000);
    $144 = ($131|0)==(0);
    $145 = $144 & $143;
    $146 = $142 | $145;
    $or$cond30 = $146 & $141;
    if ($or$cond30) {
     label = 72;
     break;
    }
   }
  }
  $147 = HEAP8[104>>0]|0;
  $148 = ($147<<24>>24)==(0);
  do {
   if (!($148)) {
    $149 = HEAP32[96>>2]|0;
    $150 = ((($149)) + 44|0);
    $151 = HEAP8[$150>>0]|0;
    $152 = ($151<<24>>24)==(0);
    if (!($152)) {
     $153 = ((($149)) + 8|0);
     $154 = +HEAPF32[$153>>2];
     $155 = HEAP32[(389572)>>2]|0;
     $156 = (($155|0) / 2)&-1;
     $157 = (+($156|0));
     $158 = $154 > $157;
     $paddle2$paddle1 = $158 ? 48 : 56;
     $pad$0 = HEAP32[$paddle2$paddle1>>2]|0;
     $159 = ((($149)) + 40|0);
     $160 = +HEAPF32[$159>>2];
     $161 = $160;
     $162 = (($155|0) / 40)&-1;
     $163 = (+($162|0));
     $164 = $163 * 10.0;
     $165 = $161 < $164;
     if ($165) {
      label = 78;
      break L2;
     }
     HEAP8[$150>>0] = 0;
     $175 = ((($pad$0)) + 40|0);
     $176 = +HEAPF32[$175>>2];
     $177 = $176;
     $178 = (($155|0) / 40)&-1;
     $179 = (+($178|0));
     $180 = $179 * 20.0;
     $181 = $177 < $180;
     if ($181) {
      label = 83;
      break L2;
     }
     $191 = ((($pad$0)) + 44|0);
     HEAP8[$191>>0] = 0;
     $192 = ((($pad$0)) + 4|0);
     $193 = HEAP32[$192>>2]|0;
     if ((($193|0) == 10)) {
      HEAP32[$192>>2] = 11;
      break;
     } else if ((($193|0) == 0)) {
      HEAP32[$192>>2] = 1;
      break;
     } else {
      break;
     }
    }
   }
  } while(0);
  $194 = HEAP8[382784>>0]|0;
  $195 = ($194<<24>>24)==(0);
  if ($195) {
   $196 = 389544;
   $197 = $196;
   $198 = HEAP32[$197>>2]|0;
   $199 = (($196) + 4)|0;
   $200 = $199;
   $201 = HEAP32[$200>>2]|0;
   $237 = $198;$238 = $201;
  } else {
   $202 = HEAP8[104>>0]|0;
   $203 = ($202<<24>>24)==(0);
   $204 = 389544;
   $205 = $204;
   $206 = HEAP32[$205>>2]|0;
   $207 = (($204) + 4)|0;
   $208 = $207;
   $209 = HEAP32[$208>>2]|0;
   $210 = 382800;
   $211 = $210;
   $212 = HEAP32[$211>>2]|0;
   $213 = (($210) + 4)|0;
   $214 = $213;
   $215 = HEAP32[$214>>2]|0;
   $216 = (_i64Subtract(($206|0),($209|0),($212|0),($215|0))|0);
   $217 = tempRet0;
   $218 = ($217>>>0)>(0);
   $219 = ($216>>>0)>(3000000);
   $220 = ($217|0)==(0);
   $221 = $220 & $219;
   $222 = $218 | $221;
   $or$cond42 = $203 & $222;
   $223 = (_i64Subtract(($206|0),($209|0),($212|0),($215|0))|0);
   $224 = tempRet0;
   $225 = ($224>>>0)>(0);
   $226 = ($223>>>0)>(6000000);
   $227 = ($224|0)==(0);
   $228 = $227 & $226;
   $229 = $225 | $228;
   $or$cond44 = $or$cond42 | $229;
   if ($or$cond44) {
    $230 = HEAP32[35096>>2]|0;
    $231 = ($230|0)==(6);
    if ($231) {
     $232 = HEAP32[(389556)>>2]|0;
     $233 = HEAP32[$232>>2]|0;
     $234 = ($233|0)==(1);
     if ($234) {
      $235 = ((($232)) + 4|0);
      HEAP8[$235>>0] = 1;
     } else {
      label = 96;
     }
    } else {
     label = 96;
    }
    if ((label|0) == 96) {
     label = 0;
     HEAP32[(651780)>>2] = 0;
    }
    HEAP8[128>>0] = 0;
    $237 = $206;$238 = $209;
   } else {
    $237 = $206;$238 = $209;
   }
  }
  $236 = HEAP32[216>>2]|0;
  $1 = (($236) + -40000)|0;
  HEAP32[216>>2] = $1;
  $239 = (_i64Add(($237|0),($238|0),40000,0)|0);
  $240 = tempRet0;
  $241 = 389544;
  $242 = $241;
  HEAP32[$242>>2] = $239;
  $243 = (($241) + 4)|0;
  $244 = $243;
  HEAP32[$244>>2] = $240;
  $2 = ($1|0)>(39999);
  if ($2) {
   label = 3;
   break;
  }
  __render();
  $245 = HEAP8[128>>0]|0;
  $$not7 = ($245<<24>>24)==(0);
  $246 = 389544;
  $247 = $246;
  $248 = HEAP32[$247>>2]|0;
  $249 = (($246) + 4)|0;
  $250 = $249;
  $251 = HEAP32[$250>>2]|0;
  $252 = ($248|0)==(0);
  $253 = ($251|0)==(0);
  $254 = $252 & $253;
  $or$cond9 = $$not7 & $254;
  if (!($or$cond9)) {
   label = 100;
   break;
  }
  $3 = HEAP32[(389696)>>2]|0;
  $4 = ($3|0)==(0);
  if (!($4)) {
   HEAP8[128>>0] = 0;
  }
  $5 = (_score_ball()|0);
  if ((($5|0) == 5)) {
   $6 = HEAP8[382784>>0]|0;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    label = 10;
    break;
   }
  } else if (!((($5|0) == 0))) {
   $$pr = HEAP8[382784>>0]|0;
   $62 = ($$pr<<24>>24)==(0);
   if ($62) {
    label = 26;
    break;
   }
  }
  $65 = HEAP32[(394012)>>2]|0;
  $66 = ($65|0)>(0);
  $67 = HEAP8[382784>>0]|0;
  $68 = ($67<<24>>24)==(0);
  $or$cond11 = $66 & $68;
  if ($or$cond11) {
   label = 30;
   break;
  }
  $78 = HEAP32[(394008)>>2]|0;
  $79 = ($78|0)>(0);
  $or$cond13 = $68 & $79;
  if ($or$cond13) {
   label = 38;
   break;
  }
  $89 = HEAP32[(389556)>>2]|0;
  $90 = HEAP32[$89>>2]|0;
  $91 = ($90|0)==(2);
  if ($91) {
   $92 = HEAP32[(390064)>>2]|0;
   $93 = ($92|0)>(0);
   $94 = HEAP8[382784>>0]|0;
   $95 = ($94<<24>>24)==(0);
   $or$cond15 = $93 & $95;
   if ($or$cond15) {
    label = 47;
    break;
   }
   $99 = HEAP32[(390048)>>2]|0;
   $100 = ($99|0)>(0);
   $or$cond17 = $95 & $100;
   if ($or$cond17) {
    label = 51;
    break;
   }
  }
  $104 = HEAP32[(389556)>>2]|0;
  $105 = HEAP32[$104>>2]|0;
  $106 = ($105|0)<(2);
  if ($106) {
   label = 55;
   break;
  }
  $107 = HEAP32[8>>2]|0;
  $108 = ((($107)) + 8|0);
  $109 = +HEAPF32[$108>>2];
  $110 = (~~(($109)));
  HEAP32[382808>>2] = $110;
  $111 = HEAP8[382784>>0]|0;
  $112 = ($111<<24>>24)==(0);
  if ($112) {
   label = 59;
   break;
  }
 }
 switch (label|0) {
  case 3: {
   $ReallocAsyncCtx17 = (_emscripten_realloc_async_context(4)|0);
   __update();
   $IsAsync62 = ___async;
   if ($IsAsync62) {
    HEAP32[$ReallocAsyncCtx17>>2] = 94;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx17>>2] = 94;
   sp = STACKTOP;
   return;
   break;
  }
  case 10: {
   HEAP8[382784>>0] = 1;
   $8 = HEAP32[(389556)>>2]|0;
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(1);
   if ($10) {
    $11 = (_get_score(1)|0);
    $12 = ($11|0)==(5);
    if ($12) {
     $13 = 389544;
     $14 = $13;
     $15 = HEAP32[$14>>2]|0;
     $16 = (($13) + 4)|0;
     $17 = $16;
     $18 = HEAP32[$17>>2]|0;
     $19 = 382800;
     $20 = $19;
     HEAP32[$20>>2] = $15;
     $21 = (($19) + 4)|0;
     $22 = $21;
     HEAP32[$22>>2] = $18;
     $23 = HEAP32[(651920)>>2]|0;
     $24 = HEAP32[8>>2]|0;
     $25 = HEAP32[(389572)>>2]|0;
     $26 = (+($25|0));
     $27 = ((($24)) + 12|0);
     $28 = +HEAPF32[$27>>2];
     $ReallocAsyncCtx2 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vidd[$23 & 255]($24,$26,$28);
     $IsAsync4 = ___async;
     if ($IsAsync4) {
      HEAP32[$ReallocAsyncCtx2>>2] = 95;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx2>>2] = 95;
     sp = STACKTOP;
     return;
    } else {
     HEAP8[382784>>0] = 1;
     $29 = 389544;
     $30 = $29;
     $31 = HEAP32[$30>>2]|0;
     $32 = (($29) + 4)|0;
     $33 = $32;
     $34 = HEAP32[$33>>2]|0;
     $35 = 382800;
     $36 = $35;
     HEAP32[$36>>2] = $31;
     $37 = (($35) + 4)|0;
     $38 = $37;
     HEAP32[$38>>2] = $34;
     $39 = HEAP32[(651952)>>2]|0;
     $40 = HEAP32[35168>>2]|0;
     $ReallocAsyncCtx4 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vi[$39 & 255]($40);
     $IsAsync11 = ___async;
     if ($IsAsync11) {
      HEAP32[$ReallocAsyncCtx4>>2] = 97;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx4>>2] = 97;
     sp = STACKTOP;
     return;
    }
   } else {
    $41 = 389544;
    $42 = $41;
    $43 = HEAP32[$42>>2]|0;
    $44 = (($41) + 4)|0;
    $45 = $44;
    $46 = HEAP32[$45>>2]|0;
    $47 = 382800;
    $48 = $47;
    HEAP32[$48>>2] = $43;
    $49 = (($47) + 4)|0;
    $50 = $49;
    HEAP32[$50>>2] = $46;
    $51 = HEAP32[8>>2]|0;
    $52 = ((($51)) + 8|0);
    $53 = +HEAPF32[$52>>2];
    $54 = HEAP32[(389572)>>2]|0;
    $55 = (($54|0) / 2)&-1;
    $56 = (+($55|0));
    $57 = $53 > $56;
    $58 = HEAP32[(651920)>>2]|0;
    $59 = ((($51)) + 12|0);
    $60 = +HEAPF32[$59>>2];
    if ($57) {
     $61 = (+($54|0));
     $ReallocAsyncCtx6 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vidd[$58 & 255]($51,$61,$60);
     $IsAsync18 = ___async;
     if ($IsAsync18) {
      HEAP32[$ReallocAsyncCtx6>>2] = 99;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx6>>2] = 99;
     sp = STACKTOP;
     return;
    } else {
     $ReallocAsyncCtx7 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vidd[$58 & 255]($51,0.0,$60);
     $IsAsync22 = ___async;
     if ($IsAsync22) {
      HEAP32[$ReallocAsyncCtx7>>2] = 100;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx7>>2] = 100;
     sp = STACKTOP;
     return;
    }
   }
   break;
  }
  case 26: {
   $63 = HEAP32[(651952)>>2]|0;
   $64 = HEAP32[35128>>2]|0;
   $ReallocAsyncCtx9 = (_emscripten_realloc_async_context(4)|0);
   FUNCTION_TABLE_vi[$63 & 255]($64);
   $IsAsync30 = ___async;
   if ($IsAsync30) {
    HEAP32[$ReallocAsyncCtx9>>2] = 102;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx9>>2] = 102;
   sp = STACKTOP;
   return;
   break;
  }
  case 30: {
   $69 = HEAP32[(389556)>>2]|0;
   $70 = HEAP32[$69>>2]|0;
   $71 = ($70|0)==(1);
   if ($71) {
    $72 = HEAP32[56>>2]|0;
    $73 = HEAP32[(389576)>>2]|0;
    $74 = (($73|0) / 40)&-1;
    $ReallocAsyncCtx26 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($72,1106,$65,$74);
    $IsAsync97 = ___async;
    if ($IsAsync97) {
     HEAP32[$ReallocAsyncCtx26>>2] = 104;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx26>>2] = 104;
    sp = STACKTOP;
    return;
   } else {
    $75 = HEAP32[48>>2]|0;
    $76 = HEAP32[(389576)>>2]|0;
    $77 = (($76|0) / 40)&-1;
    $ReallocAsyncCtx25 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($75,1106,$65,$77);
    $IsAsync93 = ___async;
    if ($IsAsync93) {
     HEAP32[$ReallocAsyncCtx25>>2] = 105;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx25>>2] = 105;
    sp = STACKTOP;
    return;
   }
   break;
  }
  case 38: {
   $80 = HEAP32[(389556)>>2]|0;
   $81 = HEAP32[$80>>2]|0;
   $82 = ($81|0)==(1);
   if ($82) {
    $83 = HEAP32[56>>2]|0;
    $84 = HEAP32[(389576)>>2]|0;
    $85 = (($84|0) / 40)&-1;
    $ReallocAsyncCtx24 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($83,1105,$78,$85);
    $IsAsync89 = ___async;
    if ($IsAsync89) {
     HEAP32[$ReallocAsyncCtx24>>2] = 106;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx24>>2] = 106;
    sp = STACKTOP;
    return;
   } else {
    $86 = HEAP32[48>>2]|0;
    $87 = HEAP32[(389576)>>2]|0;
    $88 = (($87|0) / 40)&-1;
    $ReallocAsyncCtx23 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($86,1105,$78,$88);
    $IsAsync85 = ___async;
    if ($IsAsync85) {
     HEAP32[$ReallocAsyncCtx23>>2] = 107;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx23>>2] = 107;
    sp = STACKTOP;
    return;
   }
   break;
  }
  case 47: {
   $96 = HEAP32[56>>2]|0;
   $97 = HEAP32[(389576)>>2]|0;
   $98 = (($97|0) / 40)&-1;
   $ReallocAsyncCtx22 = (_emscripten_realloc_async_context(4)|0);
   _move_paddle($96,1106,$92,$98);
   $IsAsync81 = ___async;
   if ($IsAsync81) {
    HEAP32[$ReallocAsyncCtx22>>2] = 108;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx22>>2] = 108;
   sp = STACKTOP;
   return;
   break;
  }
  case 51: {
   $101 = HEAP32[56>>2]|0;
   $102 = HEAP32[(389576)>>2]|0;
   $103 = (($102|0) / 40)&-1;
   $ReallocAsyncCtx21 = (_emscripten_realloc_async_context(4)|0);
   _move_paddle($101,1105,$99,$103);
   $IsAsync77 = ___async;
   if ($IsAsync77) {
    HEAP32[$ReallocAsyncCtx21>>2] = 109;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx21>>2] = 109;
   sp = STACKTOP;
   return;
   break;
  }
  case 55: {
   $ReallocAsyncCtx20 = (_emscripten_realloc_async_context(4)|0);
   _paddle_ai(2);
   $IsAsync73 = ___async;
   if ($IsAsync73) {
    HEAP32[$ReallocAsyncCtx20>>2] = 110;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx20>>2] = 110;
   sp = STACKTOP;
   return;
   break;
  }
  case 59: {
   $113 = HEAP8[104>>0]|0;
   $114 = ($113<<24>>24)==(0);
   if ($114) {
    $ReallocAsyncCtx39 = (_emscripten_realloc_async_context(4)|0);
    $115 = (_collision_ball()|0);
    $IsAsync146 = ___async;
    if ($IsAsync146) {
     HEAP32[$ReallocAsyncCtx39>>2] = 111;
     sp = STACKTOP;
     return;
    }
    $116 = ___async_retval;
    $$expand_i1_val = $115&1;
    HEAP8[$116>>0] = $$expand_i1_val;
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx39>>2] = 111;
    sp = STACKTOP;
    return;
   } else {
    $ReallocAsyncCtx38 = (_emscripten_realloc_async_context(4)|0);
    _update_ball();
    $IsAsync142 = ___async;
    if ($IsAsync142) {
     HEAP32[$ReallocAsyncCtx38>>2] = 112;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx38>>2] = 112;
    sp = STACKTOP;
    return;
   }
   break;
  }
  case 72: {
   $ReallocAsyncCtx32 = (_emscripten_realloc_async_context(4)|0);
   _end_danger();
   $IsAsync120 = ___async;
   if ($IsAsync120) {
    HEAP32[$ReallocAsyncCtx32>>2] = 124;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx32>>2] = 124;
   sp = STACKTOP;
   return;
   break;
  }
  case 78: {
   $166 = HEAP32[(651924)>>2]|0;
   $167 = $161 * 1.2;
   $168 = $167;
   HEAPF32[$159>>2] = $168;
   $169 = ((($149)) + 36|0);
   $170 = +HEAPF32[$169>>2];
   $171 = $170;
   $172 = $171 * 1.2;
   $173 = $172;
   HEAPF32[$169>>2] = $173;
   $ReallocAsyncCtx15 = (_emscripten_realloc_async_context(8)|0);
   FUNCTION_TABLE_vidd[$166 & 255]($149,$168,$173);
   $IsAsync54 = ___async;
   if ($IsAsync54) {
    HEAP32[$ReallocAsyncCtx15>>2] = 125;
    $174 = ((($ReallocAsyncCtx15)) + 4|0);
    HEAP32[$174>>2] = $pad$0;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx15>>2] = 125;
   $174 = ((($ReallocAsyncCtx15)) + 4|0);
   HEAP32[$174>>2] = $pad$0;
   sp = STACKTOP;
   return;
   break;
  }
  case 83: {
   $182 = HEAP32[(651924)>>2]|0;
   $183 = $177 * 1.2;
   $184 = $183;
   HEAPF32[$175>>2] = $184;
   $185 = ((($pad$0)) + 36|0);
   $186 = +HEAPF32[$185>>2];
   $187 = $186;
   $188 = $187 * 1.1000000000000001;
   $189 = $188;
   HEAPF32[$185>>2] = $189;
   $ReallocAsyncCtx16 = (_emscripten_realloc_async_context(8)|0);
   FUNCTION_TABLE_vidd[$182 & 255]($pad$0,$184,$189);
   $IsAsync58 = ___async;
   if ($IsAsync58) {
    HEAP32[$ReallocAsyncCtx16>>2] = 126;
    $190 = ((($ReallocAsyncCtx16)) + 4|0);
    HEAP32[$190>>2] = $pad$0;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx16>>2] = 126;
   $190 = ((($ReallocAsyncCtx16)) + 4|0);
   HEAP32[$190>>2] = $pad$0;
   sp = STACKTOP;
   return;
   break;
  }
  case 100: {
   return;
   break;
  }
 }
}
function _pong__async_cb154($0) {
 $0 = $0|0;
 var $$expand_i1_val = 0, $$not2 = 0, $$not7 = 0, $$pr = 0, $$pr32 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0.0, $135 = 0.0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0.0, $203 = 0, $204 = 0, $205 = 0.0, $206 = 0.0, $207 = 0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0, $211 = 0, $212 = 0.0, $213 = 0.0, $214 = 0, $215 = 0.0, $216 = 0.0, $217 = 0.0, $218 = 0.0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0.0, $222 = 0.0, $223 = 0, $224 = 0.0, $225 = 0.0, $226 = 0, $227 = 0, $228 = 0.0, $229 = 0.0, $23 = 0, $230 = 0, $231 = 0.0, $232 = 0.0, $233 = 0.0, $234 = 0.0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0.0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0.0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $IsAsync11 = 0, $IsAsync120 = 0, $IsAsync142 = 0, $IsAsync146 = 0, $IsAsync18 = 0, $IsAsync22 = 0, $IsAsync30 = 0, $IsAsync4 = 0, $IsAsync42 = 0, $IsAsync46 = 0, $IsAsync50 = 0, $IsAsync54 = 0, $IsAsync58 = 0, $IsAsync62 = 0, $IsAsync73 = 0, $IsAsync77 = 0;
 var $IsAsync81 = 0, $IsAsync85 = 0, $IsAsync89 = 0, $IsAsync93 = 0, $IsAsync97 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx16 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx20 = 0, $ReallocAsyncCtx21 = 0, $ReallocAsyncCtx22 = 0, $ReallocAsyncCtx23 = 0, $ReallocAsyncCtx24 = 0, $ReallocAsyncCtx25 = 0, $ReallocAsyncCtx26 = 0, $ReallocAsyncCtx32 = 0;
 var $ReallocAsyncCtx38 = 0, $ReallocAsyncCtx39 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx9 = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond27 = 0, $or$cond30 = 0, $or$cond4 = 0, $or$cond42 = 0, $or$cond44 = 0, $or$cond9 = 0, $pad$0 = 0, $paddle2$paddle1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $117 = (_get_score(1)|0);
 $118 = ($117|0)==(4);
 if ($118) {
  $119 = HEAP32[96>>2]|0;
  $120 = ((($119)) + 44|0);
  $121 = HEAP8[$120>>0]|0;
  $122 = HEAP8[35112>>0]|0;
  $123 = $122 | $121;
  $124 = ($123<<24>>24)==(0);
  if ($124) {
   $125 = HEAP32[(651832)>>2]|0;
   $ReallocAsyncCtx12 = (_emscripten_realloc_async_context(4)|0);
   $126 = (FUNCTION_TABLE_i[$125 & 255]()|0);
   $IsAsync42 = ___async;
   if ($IsAsync42) {
    HEAP32[$ReallocAsyncCtx12>>2] = 118;
    sp = STACKTOP;
    return;
   }
   $127 = ___async_retval;
   HEAP32[$127>>2] = $126;
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx12>>2] = 118;
   sp = STACKTOP;
   return;
  }
 }
 $128 = HEAP32[382808>>2]|0;
 $129 = HEAP32[(389572)>>2]|0;
 $130 = (($129|0) / 2)&-1;
 $131 = ($128|0)<($130|0);
 if ($131) {
  $132 = HEAP32[8>>2]|0;
  $133 = ((($132)) + 8|0);
  $134 = +HEAPF32[$133>>2];
  $135 = (+($130|0));
  $136 = $134 >= $135;
  $137 = HEAP8[382784>>0]|0;
  $138 = ($137<<24>>24)==(0);
  $or$cond27 = $136 & $138;
  if ($or$cond27) {
   $139 = HEAP32[(389556)>>2]|0;
   $140 = HEAP32[$139>>2]|0;
   $141 = ($140|0)>(1);
   if ($141) {
    $142 = HEAP32[80>>2]|0;
    $143 = ((($142)) + 44|0);
    $144 = HEAP8[$143>>0]|0;
    $$not2 = ($144<<24>>24)==(0);
    $145 = HEAP32[35096>>2]|0;
    $146 = ($145|0)<(6);
    $or$cond4 = $$not2 & $146;
    if ($or$cond4) {
     $147 = HEAP32[(651832)>>2]|0;
     $ReallocAsyncCtx13 = (_emscripten_realloc_async_context(4)|0);
     $148 = (FUNCTION_TABLE_i[$147 & 255]()|0);
     $IsAsync46 = ___async;
     if ($IsAsync46) {
      HEAP32[$ReallocAsyncCtx13>>2] = 120;
      sp = STACKTOP;
      return;
     }
     $149 = ___async_retval;
     HEAP32[$149>>2] = $148;
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx13>>2] = 120;
     sp = STACKTOP;
     return;
    }
    $150 = HEAP8[382792>>0]|0;
    $151 = ($150<<24>>24)==(0);
    if ($151) {
     $152 = HEAP32[88>>2]|0;
     $153 = ((($152)) + 44|0);
     $154 = HEAP8[$153>>0]|0;
     $155 = HEAP8[35112>>0]|0;
     $156 = $155 | $154;
     $157 = ($156<<24>>24)==(0);
     if ($157) {
      $158 = HEAP32[(651832)>>2]|0;
      $ReallocAsyncCtx14 = (_emscripten_realloc_async_context(4)|0);
      $159 = (FUNCTION_TABLE_i[$158 & 255]()|0);
      $IsAsync50 = ___async;
      if ($IsAsync50) {
       HEAP32[$ReallocAsyncCtx14>>2] = 122;
       sp = STACKTOP;
       return;
      }
      $160 = ___async_retval;
      HEAP32[$160>>2] = $159;
      ___async_unwind = 0;
      HEAP32[$ReallocAsyncCtx14>>2] = 122;
      sp = STACKTOP;
      return;
     } else {
      $161 = $155;
     }
    } else {
     label = 84;
    }
   } else {
    label = 84;
   }
  } else {
   label = 84;
  }
 } else {
  label = 84;
 }
 L28: while(1) {
  if ((label|0) == 84) {
   label = 0;
   $$pr32 = HEAP8[35112>>0]|0;
   $161 = $$pr32;
  }
  $162 = ($161<<24>>24)==(0);
  if (!($162)) {
   $163 = 389544;
   $164 = $163;
   $165 = HEAP32[$164>>2]|0;
   $166 = (($163) + 4)|0;
   $167 = $166;
   $168 = HEAP32[$167>>2]|0;
   $169 = 35120;
   $170 = $169;
   $171 = HEAP32[$170>>2]|0;
   $172 = (($169) + 4)|0;
   $173 = $172;
   $174 = HEAP32[$173>>2]|0;
   $175 = (_i64Subtract(($165|0),($168|0),($171|0),($174|0))|0);
   $176 = tempRet0;
   $177 = ($176>>>0)>(0);
   $178 = ($175>>>0)>(10000000);
   $179 = ($176|0)==(0);
   $180 = $179 & $178;
   $181 = $177 | $180;
   if ($181) {
    label = 89;
    break;
   }
   $182 = HEAP32[(651780)>>2]|0;
   if ((($182|0) == 5) | (($182|0) == 15)) {
    $183 = HEAP32[40>>2]|0;
    $184 = ((($183)) + 4|0);
    $185 = HEAP32[$184>>2]|0;
    $186 = ($185|0)==(4);
    $187 = ($176>>>0)>(0);
    $188 = ($175>>>0)>(5000000);
    $189 = ($176|0)==(0);
    $190 = $189 & $188;
    $191 = $187 | $190;
    $or$cond30 = $191 & $186;
    if ($or$cond30) {
     label = 89;
     break;
    }
   }
  }
  $192 = HEAP8[104>>0]|0;
  $193 = ($192<<24>>24)==(0);
  do {
   if (!($193)) {
    $194 = HEAP32[96>>2]|0;
    $195 = ((($194)) + 44|0);
    $196 = HEAP8[$195>>0]|0;
    $197 = ($196<<24>>24)==(0);
    if (!($197)) {
     $198 = ((($194)) + 8|0);
     $199 = +HEAPF32[$198>>2];
     $200 = HEAP32[(389572)>>2]|0;
     $201 = (($200|0) / 2)&-1;
     $202 = (+($201|0));
     $203 = $199 > $202;
     $paddle2$paddle1 = $203 ? 48 : 56;
     $pad$0 = HEAP32[$paddle2$paddle1>>2]|0;
     $204 = ((($194)) + 40|0);
     $205 = +HEAPF32[$204>>2];
     $206 = $205;
     $207 = (($200|0) / 40)&-1;
     $208 = (+($207|0));
     $209 = $208 * 10.0;
     $210 = $206 < $209;
     if ($210) {
      label = 95;
      break L28;
     }
     HEAP8[$195>>0] = 0;
     $220 = ((($pad$0)) + 40|0);
     $221 = +HEAPF32[$220>>2];
     $222 = $221;
     $223 = (($200|0) / 40)&-1;
     $224 = (+($223|0));
     $225 = $224 * 20.0;
     $226 = $222 < $225;
     if ($226) {
      label = 100;
      break L28;
     }
     $236 = ((($pad$0)) + 44|0);
     HEAP8[$236>>0] = 0;
     $237 = ((($pad$0)) + 4|0);
     $238 = HEAP32[$237>>2]|0;
     if ((($238|0) == 10)) {
      HEAP32[$237>>2] = 11;
      break;
     } else if ((($238|0) == 0)) {
      HEAP32[$237>>2] = 1;
      break;
     } else {
      break;
     }
    }
   }
  } while(0);
  $239 = HEAP8[382784>>0]|0;
  $240 = ($239<<24>>24)==(0);
  if ($240) {
   $241 = 389544;
   $242 = $241;
   $243 = HEAP32[$242>>2]|0;
   $244 = (($241) + 4)|0;
   $245 = $244;
   $246 = HEAP32[$245>>2]|0;
   $282 = $243;$283 = $246;
  } else {
   $247 = HEAP8[104>>0]|0;
   $248 = ($247<<24>>24)==(0);
   $249 = 389544;
   $250 = $249;
   $251 = HEAP32[$250>>2]|0;
   $252 = (($249) + 4)|0;
   $253 = $252;
   $254 = HEAP32[$253>>2]|0;
   $255 = 382800;
   $256 = $255;
   $257 = HEAP32[$256>>2]|0;
   $258 = (($255) + 4)|0;
   $259 = $258;
   $260 = HEAP32[$259>>2]|0;
   $261 = (_i64Subtract(($251|0),($254|0),($257|0),($260|0))|0);
   $262 = tempRet0;
   $263 = ($262>>>0)>(0);
   $264 = ($261>>>0)>(3000000);
   $265 = ($262|0)==(0);
   $266 = $265 & $264;
   $267 = $263 | $266;
   $or$cond42 = $248 & $267;
   $268 = (_i64Subtract(($251|0),($254|0),($257|0),($260|0))|0);
   $269 = tempRet0;
   $270 = ($269>>>0)>(0);
   $271 = ($268>>>0)>(6000000);
   $272 = ($269|0)==(0);
   $273 = $272 & $271;
   $274 = $270 | $273;
   $or$cond44 = $or$cond42 | $274;
   if ($or$cond44) {
    $275 = HEAP32[35096>>2]|0;
    $276 = ($275|0)==(6);
    if ($276) {
     $277 = HEAP32[(389556)>>2]|0;
     $278 = HEAP32[$277>>2]|0;
     $279 = ($278|0)==(1);
     if ($279) {
      $280 = ((($277)) + 4|0);
      HEAP8[$280>>0] = 1;
     } else {
      label = 113;
     }
    } else {
     label = 113;
    }
    if ((label|0) == 113) {
     label = 0;
     HEAP32[(651780)>>2] = 0;
    }
    HEAP8[128>>0] = 0;
    $282 = $251;$283 = $254;
   } else {
    $282 = $251;$283 = $254;
   }
  }
  $281 = HEAP32[216>>2]|0;
  $1 = (($281) + -40000)|0;
  HEAP32[216>>2] = $1;
  $284 = (_i64Add(($282|0),($283|0),40000,0)|0);
  $285 = tempRet0;
  $286 = 389544;
  $287 = $286;
  HEAP32[$287>>2] = $284;
  $288 = (($286) + 4)|0;
  $289 = $288;
  HEAP32[$289>>2] = $285;
  $2 = ($1|0)>(39999);
  if ($2) {
   label = 3;
   break;
  }
  __render();
  $290 = HEAP8[128>>0]|0;
  $$not7 = ($290<<24>>24)==(0);
  $291 = 389544;
  $292 = $291;
  $293 = HEAP32[$292>>2]|0;
  $294 = (($291) + 4)|0;
  $295 = $294;
  $296 = HEAP32[$295>>2]|0;
  $297 = ($293|0)==(0);
  $298 = ($296|0)==(0);
  $299 = $297 & $298;
  $or$cond9 = $$not7 & $299;
  if (!($or$cond9)) {
   label = 117;
   break;
  }
  $3 = HEAP32[(389696)>>2]|0;
  $4 = ($3|0)==(0);
  if (!($4)) {
   HEAP8[128>>0] = 0;
  }
  $5 = (_score_ball()|0);
  if ((($5|0) == 5)) {
   $6 = HEAP8[382784>>0]|0;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    label = 10;
    break;
   }
  } else if (!((($5|0) == 0))) {
   $$pr = HEAP8[382784>>0]|0;
   $62 = ($$pr<<24>>24)==(0);
   if ($62) {
    label = 26;
    break;
   }
  }
  $65 = HEAP32[(394012)>>2]|0;
  $66 = ($65|0)>(0);
  $67 = HEAP8[382784>>0]|0;
  $68 = ($67<<24>>24)==(0);
  $or$cond11 = $66 & $68;
  if ($or$cond11) {
   label = 30;
   break;
  }
  $78 = HEAP32[(394008)>>2]|0;
  $79 = ($78|0)>(0);
  $or$cond13 = $68 & $79;
  if ($or$cond13) {
   label = 38;
   break;
  }
  $89 = HEAP32[(389556)>>2]|0;
  $90 = HEAP32[$89>>2]|0;
  $91 = ($90|0)==(2);
  if ($91) {
   $92 = HEAP32[(390064)>>2]|0;
   $93 = ($92|0)>(0);
   $94 = HEAP8[382784>>0]|0;
   $95 = ($94<<24>>24)==(0);
   $or$cond15 = $93 & $95;
   if ($or$cond15) {
    label = 47;
    break;
   }
   $99 = HEAP32[(390048)>>2]|0;
   $100 = ($99|0)>(0);
   $or$cond17 = $95 & $100;
   if ($or$cond17) {
    label = 51;
    break;
   }
  }
  $104 = HEAP32[(389556)>>2]|0;
  $105 = HEAP32[$104>>2]|0;
  $106 = ($105|0)<(2);
  if ($106) {
   label = 55;
   break;
  }
  $107 = HEAP32[8>>2]|0;
  $108 = ((($107)) + 8|0);
  $109 = +HEAPF32[$108>>2];
  $110 = (~~(($109)));
  HEAP32[382808>>2] = $110;
  $111 = HEAP8[382784>>0]|0;
  $112 = ($111<<24>>24)==(0);
  if ($112) {
   label = 59;
   break;
  } else {
   label = 84;
  }
 }
 switch (label|0) {
  case 3: {
   $ReallocAsyncCtx17 = (_emscripten_realloc_async_context(4)|0);
   __update();
   $IsAsync62 = ___async;
   if ($IsAsync62) {
    HEAP32[$ReallocAsyncCtx17>>2] = 94;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx17>>2] = 94;
   sp = STACKTOP;
   return;
   break;
  }
  case 10: {
   HEAP8[382784>>0] = 1;
   $8 = HEAP32[(389556)>>2]|0;
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(1);
   if ($10) {
    $11 = (_get_score(1)|0);
    $12 = ($11|0)==(5);
    if ($12) {
     $13 = 389544;
     $14 = $13;
     $15 = HEAP32[$14>>2]|0;
     $16 = (($13) + 4)|0;
     $17 = $16;
     $18 = HEAP32[$17>>2]|0;
     $19 = 382800;
     $20 = $19;
     HEAP32[$20>>2] = $15;
     $21 = (($19) + 4)|0;
     $22 = $21;
     HEAP32[$22>>2] = $18;
     $23 = HEAP32[(651920)>>2]|0;
     $24 = HEAP32[8>>2]|0;
     $25 = HEAP32[(389572)>>2]|0;
     $26 = (+($25|0));
     $27 = ((($24)) + 12|0);
     $28 = +HEAPF32[$27>>2];
     $ReallocAsyncCtx2 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vidd[$23 & 255]($24,$26,$28);
     $IsAsync4 = ___async;
     if ($IsAsync4) {
      HEAP32[$ReallocAsyncCtx2>>2] = 95;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx2>>2] = 95;
     sp = STACKTOP;
     return;
    } else {
     HEAP8[382784>>0] = 1;
     $29 = 389544;
     $30 = $29;
     $31 = HEAP32[$30>>2]|0;
     $32 = (($29) + 4)|0;
     $33 = $32;
     $34 = HEAP32[$33>>2]|0;
     $35 = 382800;
     $36 = $35;
     HEAP32[$36>>2] = $31;
     $37 = (($35) + 4)|0;
     $38 = $37;
     HEAP32[$38>>2] = $34;
     $39 = HEAP32[(651952)>>2]|0;
     $40 = HEAP32[35168>>2]|0;
     $ReallocAsyncCtx4 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vi[$39 & 255]($40);
     $IsAsync11 = ___async;
     if ($IsAsync11) {
      HEAP32[$ReallocAsyncCtx4>>2] = 97;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx4>>2] = 97;
     sp = STACKTOP;
     return;
    }
   } else {
    $41 = 389544;
    $42 = $41;
    $43 = HEAP32[$42>>2]|0;
    $44 = (($41) + 4)|0;
    $45 = $44;
    $46 = HEAP32[$45>>2]|0;
    $47 = 382800;
    $48 = $47;
    HEAP32[$48>>2] = $43;
    $49 = (($47) + 4)|0;
    $50 = $49;
    HEAP32[$50>>2] = $46;
    $51 = HEAP32[8>>2]|0;
    $52 = ((($51)) + 8|0);
    $53 = +HEAPF32[$52>>2];
    $54 = HEAP32[(389572)>>2]|0;
    $55 = (($54|0) / 2)&-1;
    $56 = (+($55|0));
    $57 = $53 > $56;
    $58 = HEAP32[(651920)>>2]|0;
    $59 = ((($51)) + 12|0);
    $60 = +HEAPF32[$59>>2];
    if ($57) {
     $61 = (+($54|0));
     $ReallocAsyncCtx6 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vidd[$58 & 255]($51,$61,$60);
     $IsAsync18 = ___async;
     if ($IsAsync18) {
      HEAP32[$ReallocAsyncCtx6>>2] = 99;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx6>>2] = 99;
     sp = STACKTOP;
     return;
    } else {
     $ReallocAsyncCtx7 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vidd[$58 & 255]($51,0.0,$60);
     $IsAsync22 = ___async;
     if ($IsAsync22) {
      HEAP32[$ReallocAsyncCtx7>>2] = 100;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx7>>2] = 100;
     sp = STACKTOP;
     return;
    }
   }
   break;
  }
  case 26: {
   $63 = HEAP32[(651952)>>2]|0;
   $64 = HEAP32[35128>>2]|0;
   $ReallocAsyncCtx9 = (_emscripten_realloc_async_context(4)|0);
   FUNCTION_TABLE_vi[$63 & 255]($64);
   $IsAsync30 = ___async;
   if ($IsAsync30) {
    HEAP32[$ReallocAsyncCtx9>>2] = 102;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx9>>2] = 102;
   sp = STACKTOP;
   return;
   break;
  }
  case 30: {
   $69 = HEAP32[(389556)>>2]|0;
   $70 = HEAP32[$69>>2]|0;
   $71 = ($70|0)==(1);
   if ($71) {
    $72 = HEAP32[56>>2]|0;
    $73 = HEAP32[(389576)>>2]|0;
    $74 = (($73|0) / 40)&-1;
    $ReallocAsyncCtx26 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($72,1106,$65,$74);
    $IsAsync97 = ___async;
    if ($IsAsync97) {
     HEAP32[$ReallocAsyncCtx26>>2] = 104;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx26>>2] = 104;
    sp = STACKTOP;
    return;
   } else {
    $75 = HEAP32[48>>2]|0;
    $76 = HEAP32[(389576)>>2]|0;
    $77 = (($76|0) / 40)&-1;
    $ReallocAsyncCtx25 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($75,1106,$65,$77);
    $IsAsync93 = ___async;
    if ($IsAsync93) {
     HEAP32[$ReallocAsyncCtx25>>2] = 105;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx25>>2] = 105;
    sp = STACKTOP;
    return;
   }
   break;
  }
  case 38: {
   $80 = HEAP32[(389556)>>2]|0;
   $81 = HEAP32[$80>>2]|0;
   $82 = ($81|0)==(1);
   if ($82) {
    $83 = HEAP32[56>>2]|0;
    $84 = HEAP32[(389576)>>2]|0;
    $85 = (($84|0) / 40)&-1;
    $ReallocAsyncCtx24 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($83,1105,$78,$85);
    $IsAsync89 = ___async;
    if ($IsAsync89) {
     HEAP32[$ReallocAsyncCtx24>>2] = 106;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx24>>2] = 106;
    sp = STACKTOP;
    return;
   } else {
    $86 = HEAP32[48>>2]|0;
    $87 = HEAP32[(389576)>>2]|0;
    $88 = (($87|0) / 40)&-1;
    $ReallocAsyncCtx23 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($86,1105,$78,$88);
    $IsAsync85 = ___async;
    if ($IsAsync85) {
     HEAP32[$ReallocAsyncCtx23>>2] = 107;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx23>>2] = 107;
    sp = STACKTOP;
    return;
   }
   break;
  }
  case 47: {
   $96 = HEAP32[56>>2]|0;
   $97 = HEAP32[(389576)>>2]|0;
   $98 = (($97|0) / 40)&-1;
   $ReallocAsyncCtx22 = (_emscripten_realloc_async_context(4)|0);
   _move_paddle($96,1106,$92,$98);
   $IsAsync81 = ___async;
   if ($IsAsync81) {
    HEAP32[$ReallocAsyncCtx22>>2] = 108;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx22>>2] = 108;
   sp = STACKTOP;
   return;
   break;
  }
  case 51: {
   $101 = HEAP32[56>>2]|0;
   $102 = HEAP32[(389576)>>2]|0;
   $103 = (($102|0) / 40)&-1;
   $ReallocAsyncCtx21 = (_emscripten_realloc_async_context(4)|0);
   _move_paddle($101,1105,$99,$103);
   $IsAsync77 = ___async;
   if ($IsAsync77) {
    HEAP32[$ReallocAsyncCtx21>>2] = 109;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx21>>2] = 109;
   sp = STACKTOP;
   return;
   break;
  }
  case 55: {
   $ReallocAsyncCtx20 = (_emscripten_realloc_async_context(4)|0);
   _paddle_ai(2);
   $IsAsync73 = ___async;
   if ($IsAsync73) {
    HEAP32[$ReallocAsyncCtx20>>2] = 110;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx20>>2] = 110;
   sp = STACKTOP;
   return;
   break;
  }
  case 59: {
   $113 = HEAP8[104>>0]|0;
   $114 = ($113<<24>>24)==(0);
   if ($114) {
    $ReallocAsyncCtx39 = (_emscripten_realloc_async_context(4)|0);
    $115 = (_collision_ball()|0);
    $IsAsync146 = ___async;
    if ($IsAsync146) {
     HEAP32[$ReallocAsyncCtx39>>2] = 111;
     sp = STACKTOP;
     return;
    }
    $116 = ___async_retval;
    $$expand_i1_val = $115&1;
    HEAP8[$116>>0] = $$expand_i1_val;
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx39>>2] = 111;
    sp = STACKTOP;
    return;
   } else {
    $ReallocAsyncCtx38 = (_emscripten_realloc_async_context(4)|0);
    _update_ball();
    $IsAsync142 = ___async;
    if ($IsAsync142) {
     HEAP32[$ReallocAsyncCtx38>>2] = 112;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx38>>2] = 112;
    sp = STACKTOP;
    return;
   }
   break;
  }
  case 89: {
   $ReallocAsyncCtx32 = (_emscripten_realloc_async_context(4)|0);
   _end_danger();
   $IsAsync120 = ___async;
   if ($IsAsync120) {
    HEAP32[$ReallocAsyncCtx32>>2] = 124;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx32>>2] = 124;
   sp = STACKTOP;
   return;
   break;
  }
  case 95: {
   $211 = HEAP32[(651924)>>2]|0;
   $212 = $206 * 1.2;
   $213 = $212;
   HEAPF32[$204>>2] = $213;
   $214 = ((($194)) + 36|0);
   $215 = +HEAPF32[$214>>2];
   $216 = $215;
   $217 = $216 * 1.2;
   $218 = $217;
   HEAPF32[$214>>2] = $218;
   $ReallocAsyncCtx15 = (_emscripten_realloc_async_context(8)|0);
   FUNCTION_TABLE_vidd[$211 & 255]($194,$213,$218);
   $IsAsync54 = ___async;
   if ($IsAsync54) {
    HEAP32[$ReallocAsyncCtx15>>2] = 125;
    $219 = ((($ReallocAsyncCtx15)) + 4|0);
    HEAP32[$219>>2] = $pad$0;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx15>>2] = 125;
   $219 = ((($ReallocAsyncCtx15)) + 4|0);
   HEAP32[$219>>2] = $pad$0;
   sp = STACKTOP;
   return;
   break;
  }
  case 100: {
   $227 = HEAP32[(651924)>>2]|0;
   $228 = $222 * 1.2;
   $229 = $228;
   HEAPF32[$220>>2] = $229;
   $230 = ((($pad$0)) + 36|0);
   $231 = +HEAPF32[$230>>2];
   $232 = $231;
   $233 = $232 * 1.1000000000000001;
   $234 = $233;
   HEAPF32[$230>>2] = $234;
   $ReallocAsyncCtx16 = (_emscripten_realloc_async_context(8)|0);
   FUNCTION_TABLE_vidd[$227 & 255]($pad$0,$229,$234);
   $IsAsync58 = ___async;
   if ($IsAsync58) {
    HEAP32[$ReallocAsyncCtx16>>2] = 126;
    $235 = ((($ReallocAsyncCtx16)) + 4|0);
    HEAP32[$235>>2] = $pad$0;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx16>>2] = 126;
   $235 = ((($ReallocAsyncCtx16)) + 4|0);
   HEAP32[$235>>2] = $pad$0;
   sp = STACKTOP;
   return;
   break;
  }
  case 117: {
   return;
   break;
  }
 }
}
function _pong__async_cb155($0) {
 $0 = $0|0;
 var $IsAsync138 = 0, $ReallocAsyncCtx37 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ReallocAsyncCtx37 = (_emscripten_realloc_async_context(4)|0);
 _initialize_bomb();
 $IsAsync138 = ___async;
 if (!($IsAsync138)) {
  ___async_unwind = 0;
 }
 HEAP32[$ReallocAsyncCtx37>>2] = 93;
 sp = STACKTOP;
 return;
}
function _pong__async_cb156($0) {
 $0 = $0|0;
 var $$expand_i1_val = 0, $$not2 = 0, $$not7 = 0, $$pr = 0, $$pr32 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0.0, $189 = 0, $19 = 0, $190 = 0, $191 = 0.0, $192 = 0, $193 = 0, $194 = 0.0, $195 = 0.0, $196 = 0, $197 = 0.0, $198 = 0.0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0.0;
 var $202 = 0.0, $203 = 0, $204 = 0.0, $205 = 0.0, $206 = 0.0, $207 = 0.0, $208 = 0, $209 = 0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0, $213 = 0.0, $214 = 0.0, $215 = 0, $216 = 0, $217 = 0.0, $218 = 0.0, $219 = 0, $22 = 0;
 var $220 = 0.0, $221 = 0.0, $222 = 0.0, $223 = 0.0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0.0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0.0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $IsAsync11 = 0, $IsAsync120 = 0, $IsAsync142 = 0, $IsAsync146 = 0, $IsAsync18 = 0, $IsAsync22 = 0, $IsAsync30 = 0;
 var $IsAsync4 = 0, $IsAsync46 = 0, $IsAsync50 = 0, $IsAsync54 = 0, $IsAsync58 = 0, $IsAsync62 = 0, $IsAsync73 = 0, $IsAsync77 = 0, $IsAsync81 = 0, $IsAsync85 = 0, $IsAsync89 = 0, $IsAsync93 = 0, $IsAsync97 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx16 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx20 = 0;
 var $ReallocAsyncCtx21 = 0, $ReallocAsyncCtx22 = 0, $ReallocAsyncCtx23 = 0, $ReallocAsyncCtx24 = 0, $ReallocAsyncCtx25 = 0, $ReallocAsyncCtx26 = 0, $ReallocAsyncCtx32 = 0, $ReallocAsyncCtx38 = 0, $ReallocAsyncCtx39 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx9 = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond27 = 0, $or$cond30 = 0, $or$cond4 = 0;
 var $or$cond42 = 0, $or$cond44 = 0, $or$cond9 = 0, $pad$0 = 0, $paddle2$paddle1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $117 = HEAP32[382808>>2]|0;
 $118 = HEAP32[(389572)>>2]|0;
 $119 = (($118|0) / 2)&-1;
 $120 = ($117|0)<($119|0);
 if ($120) {
  $121 = HEAP32[8>>2]|0;
  $122 = ((($121)) + 8|0);
  $123 = +HEAPF32[$122>>2];
  $124 = (+($119|0));
  $125 = $123 >= $124;
  $126 = HEAP8[382784>>0]|0;
  $127 = ($126<<24>>24)==(0);
  $or$cond27 = $125 & $127;
  if ($or$cond27) {
   $128 = HEAP32[(389556)>>2]|0;
   $129 = HEAP32[$128>>2]|0;
   $130 = ($129|0)>(1);
   if ($130) {
    $131 = HEAP32[80>>2]|0;
    $132 = ((($131)) + 44|0);
    $133 = HEAP8[$132>>0]|0;
    $$not2 = ($133<<24>>24)==(0);
    $134 = HEAP32[35096>>2]|0;
    $135 = ($134|0)<(6);
    $or$cond4 = $$not2 & $135;
    if ($or$cond4) {
     $136 = HEAP32[(651832)>>2]|0;
     $ReallocAsyncCtx13 = (_emscripten_realloc_async_context(4)|0);
     $137 = (FUNCTION_TABLE_i[$136 & 255]()|0);
     $IsAsync46 = ___async;
     if ($IsAsync46) {
      HEAP32[$ReallocAsyncCtx13>>2] = 120;
      sp = STACKTOP;
      return;
     }
     $138 = ___async_retval;
     HEAP32[$138>>2] = $137;
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx13>>2] = 120;
     sp = STACKTOP;
     return;
    }
    $139 = HEAP8[382792>>0]|0;
    $140 = ($139<<24>>24)==(0);
    if ($140) {
     $141 = HEAP32[88>>2]|0;
     $142 = ((($141)) + 44|0);
     $143 = HEAP8[$142>>0]|0;
     $144 = HEAP8[35112>>0]|0;
     $145 = $144 | $143;
     $146 = ($145<<24>>24)==(0);
     if ($146) {
      $147 = HEAP32[(651832)>>2]|0;
      $ReallocAsyncCtx14 = (_emscripten_realloc_async_context(4)|0);
      $148 = (FUNCTION_TABLE_i[$147 & 255]()|0);
      $IsAsync50 = ___async;
      if ($IsAsync50) {
       HEAP32[$ReallocAsyncCtx14>>2] = 122;
       sp = STACKTOP;
       return;
      }
      $149 = ___async_retval;
      HEAP32[$149>>2] = $148;
      ___async_unwind = 0;
      HEAP32[$ReallocAsyncCtx14>>2] = 122;
      sp = STACKTOP;
      return;
     } else {
      $150 = $144;
     }
    } else {
     label = 79;
    }
   } else {
    label = 79;
   }
  } else {
   label = 79;
  }
 } else {
  label = 79;
 }
 L20: while(1) {
  if ((label|0) == 79) {
   label = 0;
   $$pr32 = HEAP8[35112>>0]|0;
   $150 = $$pr32;
  }
  $151 = ($150<<24>>24)==(0);
  if (!($151)) {
   $152 = 389544;
   $153 = $152;
   $154 = HEAP32[$153>>2]|0;
   $155 = (($152) + 4)|0;
   $156 = $155;
   $157 = HEAP32[$156>>2]|0;
   $158 = 35120;
   $159 = $158;
   $160 = HEAP32[$159>>2]|0;
   $161 = (($158) + 4)|0;
   $162 = $161;
   $163 = HEAP32[$162>>2]|0;
   $164 = (_i64Subtract(($154|0),($157|0),($160|0),($163|0))|0);
   $165 = tempRet0;
   $166 = ($165>>>0)>(0);
   $167 = ($164>>>0)>(10000000);
   $168 = ($165|0)==(0);
   $169 = $168 & $167;
   $170 = $166 | $169;
   if ($170) {
    label = 84;
    break;
   }
   $171 = HEAP32[(651780)>>2]|0;
   if ((($171|0) == 5) | (($171|0) == 15)) {
    $172 = HEAP32[40>>2]|0;
    $173 = ((($172)) + 4|0);
    $174 = HEAP32[$173>>2]|0;
    $175 = ($174|0)==(4);
    $176 = ($165>>>0)>(0);
    $177 = ($164>>>0)>(5000000);
    $178 = ($165|0)==(0);
    $179 = $178 & $177;
    $180 = $176 | $179;
    $or$cond30 = $180 & $175;
    if ($or$cond30) {
     label = 84;
     break;
    }
   }
  }
  $181 = HEAP8[104>>0]|0;
  $182 = ($181<<24>>24)==(0);
  do {
   if (!($182)) {
    $183 = HEAP32[96>>2]|0;
    $184 = ((($183)) + 44|0);
    $185 = HEAP8[$184>>0]|0;
    $186 = ($185<<24>>24)==(0);
    if (!($186)) {
     $187 = ((($183)) + 8|0);
     $188 = +HEAPF32[$187>>2];
     $189 = HEAP32[(389572)>>2]|0;
     $190 = (($189|0) / 2)&-1;
     $191 = (+($190|0));
     $192 = $188 > $191;
     $paddle2$paddle1 = $192 ? 48 : 56;
     $pad$0 = HEAP32[$paddle2$paddle1>>2]|0;
     $193 = ((($183)) + 40|0);
     $194 = +HEAPF32[$193>>2];
     $195 = $194;
     $196 = (($189|0) / 40)&-1;
     $197 = (+($196|0));
     $198 = $197 * 10.0;
     $199 = $195 < $198;
     if ($199) {
      label = 90;
      break L20;
     }
     HEAP8[$184>>0] = 0;
     $209 = ((($pad$0)) + 40|0);
     $210 = +HEAPF32[$209>>2];
     $211 = $210;
     $212 = (($189|0) / 40)&-1;
     $213 = (+($212|0));
     $214 = $213 * 20.0;
     $215 = $211 < $214;
     if ($215) {
      label = 95;
      break L20;
     }
     $225 = ((($pad$0)) + 44|0);
     HEAP8[$225>>0] = 0;
     $226 = ((($pad$0)) + 4|0);
     $227 = HEAP32[$226>>2]|0;
     if ((($227|0) == 0)) {
      HEAP32[$226>>2] = 1;
      break;
     } else if ((($227|0) == 10)) {
      HEAP32[$226>>2] = 11;
      break;
     } else {
      break;
     }
    }
   }
  } while(0);
  $228 = HEAP8[382784>>0]|0;
  $229 = ($228<<24>>24)==(0);
  if ($229) {
   $230 = 389544;
   $231 = $230;
   $232 = HEAP32[$231>>2]|0;
   $233 = (($230) + 4)|0;
   $234 = $233;
   $235 = HEAP32[$234>>2]|0;
   $271 = $232;$272 = $235;
  } else {
   $236 = HEAP8[104>>0]|0;
   $237 = ($236<<24>>24)==(0);
   $238 = 389544;
   $239 = $238;
   $240 = HEAP32[$239>>2]|0;
   $241 = (($238) + 4)|0;
   $242 = $241;
   $243 = HEAP32[$242>>2]|0;
   $244 = 382800;
   $245 = $244;
   $246 = HEAP32[$245>>2]|0;
   $247 = (($244) + 4)|0;
   $248 = $247;
   $249 = HEAP32[$248>>2]|0;
   $250 = (_i64Subtract(($240|0),($243|0),($246|0),($249|0))|0);
   $251 = tempRet0;
   $252 = ($251>>>0)>(0);
   $253 = ($250>>>0)>(3000000);
   $254 = ($251|0)==(0);
   $255 = $254 & $253;
   $256 = $252 | $255;
   $or$cond42 = $237 & $256;
   $257 = (_i64Subtract(($240|0),($243|0),($246|0),($249|0))|0);
   $258 = tempRet0;
   $259 = ($258>>>0)>(0);
   $260 = ($257>>>0)>(6000000);
   $261 = ($258|0)==(0);
   $262 = $261 & $260;
   $263 = $259 | $262;
   $or$cond44 = $or$cond42 | $263;
   if ($or$cond44) {
    $264 = HEAP32[35096>>2]|0;
    $265 = ($264|0)==(6);
    if ($265) {
     $266 = HEAP32[(389556)>>2]|0;
     $267 = HEAP32[$266>>2]|0;
     $268 = ($267|0)==(1);
     if ($268) {
      $269 = ((($266)) + 4|0);
      HEAP8[$269>>0] = 1;
     } else {
      label = 108;
     }
    } else {
     label = 108;
    }
    if ((label|0) == 108) {
     label = 0;
     HEAP32[(651780)>>2] = 0;
    }
    HEAP8[128>>0] = 0;
    $271 = $240;$272 = $243;
   } else {
    $271 = $240;$272 = $243;
   }
  }
  $270 = HEAP32[216>>2]|0;
  $1 = (($270) + -40000)|0;
  HEAP32[216>>2] = $1;
  $273 = (_i64Add(($271|0),($272|0),40000,0)|0);
  $274 = tempRet0;
  $275 = 389544;
  $276 = $275;
  HEAP32[$276>>2] = $273;
  $277 = (($275) + 4)|0;
  $278 = $277;
  HEAP32[$278>>2] = $274;
  $2 = ($1|0)>(39999);
  if ($2) {
   label = 3;
   break;
  }
  __render();
  $279 = HEAP8[128>>0]|0;
  $$not7 = ($279<<24>>24)==(0);
  $280 = 389544;
  $281 = $280;
  $282 = HEAP32[$281>>2]|0;
  $283 = (($280) + 4)|0;
  $284 = $283;
  $285 = HEAP32[$284>>2]|0;
  $286 = ($282|0)==(0);
  $287 = ($285|0)==(0);
  $288 = $286 & $287;
  $or$cond9 = $$not7 & $288;
  if (!($or$cond9)) {
   label = 112;
   break;
  }
  $3 = HEAP32[(389696)>>2]|0;
  $4 = ($3|0)==(0);
  if (!($4)) {
   HEAP8[128>>0] = 0;
  }
  $5 = (_score_ball()|0);
  if ((($5|0) == 5)) {
   $6 = HEAP8[382784>>0]|0;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    label = 10;
    break;
   }
  } else if (!((($5|0) == 0))) {
   $$pr = HEAP8[382784>>0]|0;
   $62 = ($$pr<<24>>24)==(0);
   if ($62) {
    label = 26;
    break;
   }
  }
  $65 = HEAP32[(394012)>>2]|0;
  $66 = ($65|0)>(0);
  $67 = HEAP8[382784>>0]|0;
  $68 = ($67<<24>>24)==(0);
  $or$cond11 = $66 & $68;
  if ($or$cond11) {
   label = 30;
   break;
  }
  $78 = HEAP32[(394008)>>2]|0;
  $79 = ($78|0)>(0);
  $or$cond13 = $68 & $79;
  if ($or$cond13) {
   label = 38;
   break;
  }
  $89 = HEAP32[(389556)>>2]|0;
  $90 = HEAP32[$89>>2]|0;
  $91 = ($90|0)==(2);
  if ($91) {
   $92 = HEAP32[(390064)>>2]|0;
   $93 = ($92|0)>(0);
   $94 = HEAP8[382784>>0]|0;
   $95 = ($94<<24>>24)==(0);
   $or$cond15 = $93 & $95;
   if ($or$cond15) {
    label = 47;
    break;
   }
   $99 = HEAP32[(390048)>>2]|0;
   $100 = ($99|0)>(0);
   $or$cond17 = $95 & $100;
   if ($or$cond17) {
    label = 51;
    break;
   }
  }
  $104 = HEAP32[(389556)>>2]|0;
  $105 = HEAP32[$104>>2]|0;
  $106 = ($105|0)<(2);
  if ($106) {
   label = 55;
   break;
  }
  $107 = HEAP32[8>>2]|0;
  $108 = ((($107)) + 8|0);
  $109 = +HEAPF32[$108>>2];
  $110 = (~~(($109)));
  HEAP32[382808>>2] = $110;
  $111 = HEAP8[382784>>0]|0;
  $112 = ($111<<24>>24)==(0);
  if ($112) {
   label = 59;
   break;
  } else {
   label = 79;
  }
 }
 switch (label|0) {
  case 3: {
   $ReallocAsyncCtx17 = (_emscripten_realloc_async_context(4)|0);
   __update();
   $IsAsync62 = ___async;
   if ($IsAsync62) {
    HEAP32[$ReallocAsyncCtx17>>2] = 94;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx17>>2] = 94;
   sp = STACKTOP;
   return;
   break;
  }
  case 10: {
   HEAP8[382784>>0] = 1;
   $8 = HEAP32[(389556)>>2]|0;
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(1);
   if ($10) {
    $11 = (_get_score(1)|0);
    $12 = ($11|0)==(5);
    if ($12) {
     $13 = 389544;
     $14 = $13;
     $15 = HEAP32[$14>>2]|0;
     $16 = (($13) + 4)|0;
     $17 = $16;
     $18 = HEAP32[$17>>2]|0;
     $19 = 382800;
     $20 = $19;
     HEAP32[$20>>2] = $15;
     $21 = (($19) + 4)|0;
     $22 = $21;
     HEAP32[$22>>2] = $18;
     $23 = HEAP32[(651920)>>2]|0;
     $24 = HEAP32[8>>2]|0;
     $25 = HEAP32[(389572)>>2]|0;
     $26 = (+($25|0));
     $27 = ((($24)) + 12|0);
     $28 = +HEAPF32[$27>>2];
     $ReallocAsyncCtx2 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vidd[$23 & 255]($24,$26,$28);
     $IsAsync4 = ___async;
     if ($IsAsync4) {
      HEAP32[$ReallocAsyncCtx2>>2] = 95;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx2>>2] = 95;
     sp = STACKTOP;
     return;
    } else {
     HEAP8[382784>>0] = 1;
     $29 = 389544;
     $30 = $29;
     $31 = HEAP32[$30>>2]|0;
     $32 = (($29) + 4)|0;
     $33 = $32;
     $34 = HEAP32[$33>>2]|0;
     $35 = 382800;
     $36 = $35;
     HEAP32[$36>>2] = $31;
     $37 = (($35) + 4)|0;
     $38 = $37;
     HEAP32[$38>>2] = $34;
     $39 = HEAP32[(651952)>>2]|0;
     $40 = HEAP32[35168>>2]|0;
     $ReallocAsyncCtx4 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vi[$39 & 255]($40);
     $IsAsync11 = ___async;
     if ($IsAsync11) {
      HEAP32[$ReallocAsyncCtx4>>2] = 97;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx4>>2] = 97;
     sp = STACKTOP;
     return;
    }
   } else {
    $41 = 389544;
    $42 = $41;
    $43 = HEAP32[$42>>2]|0;
    $44 = (($41) + 4)|0;
    $45 = $44;
    $46 = HEAP32[$45>>2]|0;
    $47 = 382800;
    $48 = $47;
    HEAP32[$48>>2] = $43;
    $49 = (($47) + 4)|0;
    $50 = $49;
    HEAP32[$50>>2] = $46;
    $51 = HEAP32[8>>2]|0;
    $52 = ((($51)) + 8|0);
    $53 = +HEAPF32[$52>>2];
    $54 = HEAP32[(389572)>>2]|0;
    $55 = (($54|0) / 2)&-1;
    $56 = (+($55|0));
    $57 = $53 > $56;
    $58 = HEAP32[(651920)>>2]|0;
    $59 = ((($51)) + 12|0);
    $60 = +HEAPF32[$59>>2];
    if ($57) {
     $61 = (+($54|0));
     $ReallocAsyncCtx6 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vidd[$58 & 255]($51,$61,$60);
     $IsAsync18 = ___async;
     if ($IsAsync18) {
      HEAP32[$ReallocAsyncCtx6>>2] = 99;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx6>>2] = 99;
     sp = STACKTOP;
     return;
    } else {
     $ReallocAsyncCtx7 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vidd[$58 & 255]($51,0.0,$60);
     $IsAsync22 = ___async;
     if ($IsAsync22) {
      HEAP32[$ReallocAsyncCtx7>>2] = 100;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx7>>2] = 100;
     sp = STACKTOP;
     return;
    }
   }
   break;
  }
  case 26: {
   $63 = HEAP32[(651952)>>2]|0;
   $64 = HEAP32[35128>>2]|0;
   $ReallocAsyncCtx9 = (_emscripten_realloc_async_context(4)|0);
   FUNCTION_TABLE_vi[$63 & 255]($64);
   $IsAsync30 = ___async;
   if ($IsAsync30) {
    HEAP32[$ReallocAsyncCtx9>>2] = 102;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx9>>2] = 102;
   sp = STACKTOP;
   return;
   break;
  }
  case 30: {
   $69 = HEAP32[(389556)>>2]|0;
   $70 = HEAP32[$69>>2]|0;
   $71 = ($70|0)==(1);
   if ($71) {
    $72 = HEAP32[56>>2]|0;
    $73 = HEAP32[(389576)>>2]|0;
    $74 = (($73|0) / 40)&-1;
    $ReallocAsyncCtx26 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($72,1106,$65,$74);
    $IsAsync97 = ___async;
    if ($IsAsync97) {
     HEAP32[$ReallocAsyncCtx26>>2] = 104;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx26>>2] = 104;
    sp = STACKTOP;
    return;
   } else {
    $75 = HEAP32[48>>2]|0;
    $76 = HEAP32[(389576)>>2]|0;
    $77 = (($76|0) / 40)&-1;
    $ReallocAsyncCtx25 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($75,1106,$65,$77);
    $IsAsync93 = ___async;
    if ($IsAsync93) {
     HEAP32[$ReallocAsyncCtx25>>2] = 105;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx25>>2] = 105;
    sp = STACKTOP;
    return;
   }
   break;
  }
  case 38: {
   $80 = HEAP32[(389556)>>2]|0;
   $81 = HEAP32[$80>>2]|0;
   $82 = ($81|0)==(1);
   if ($82) {
    $83 = HEAP32[56>>2]|0;
    $84 = HEAP32[(389576)>>2]|0;
    $85 = (($84|0) / 40)&-1;
    $ReallocAsyncCtx24 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($83,1105,$78,$85);
    $IsAsync89 = ___async;
    if ($IsAsync89) {
     HEAP32[$ReallocAsyncCtx24>>2] = 106;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx24>>2] = 106;
    sp = STACKTOP;
    return;
   } else {
    $86 = HEAP32[48>>2]|0;
    $87 = HEAP32[(389576)>>2]|0;
    $88 = (($87|0) / 40)&-1;
    $ReallocAsyncCtx23 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($86,1105,$78,$88);
    $IsAsync85 = ___async;
    if ($IsAsync85) {
     HEAP32[$ReallocAsyncCtx23>>2] = 107;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx23>>2] = 107;
    sp = STACKTOP;
    return;
   }
   break;
  }
  case 47: {
   $96 = HEAP32[56>>2]|0;
   $97 = HEAP32[(389576)>>2]|0;
   $98 = (($97|0) / 40)&-1;
   $ReallocAsyncCtx22 = (_emscripten_realloc_async_context(4)|0);
   _move_paddle($96,1106,$92,$98);
   $IsAsync81 = ___async;
   if ($IsAsync81) {
    HEAP32[$ReallocAsyncCtx22>>2] = 108;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx22>>2] = 108;
   sp = STACKTOP;
   return;
   break;
  }
  case 51: {
   $101 = HEAP32[56>>2]|0;
   $102 = HEAP32[(389576)>>2]|0;
   $103 = (($102|0) / 40)&-1;
   $ReallocAsyncCtx21 = (_emscripten_realloc_async_context(4)|0);
   _move_paddle($101,1105,$99,$103);
   $IsAsync77 = ___async;
   if ($IsAsync77) {
    HEAP32[$ReallocAsyncCtx21>>2] = 109;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx21>>2] = 109;
   sp = STACKTOP;
   return;
   break;
  }
  case 55: {
   $ReallocAsyncCtx20 = (_emscripten_realloc_async_context(4)|0);
   _paddle_ai(2);
   $IsAsync73 = ___async;
   if ($IsAsync73) {
    HEAP32[$ReallocAsyncCtx20>>2] = 110;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx20>>2] = 110;
   sp = STACKTOP;
   return;
   break;
  }
  case 59: {
   $113 = HEAP8[104>>0]|0;
   $114 = ($113<<24>>24)==(0);
   if ($114) {
    $ReallocAsyncCtx39 = (_emscripten_realloc_async_context(4)|0);
    $115 = (_collision_ball()|0);
    $IsAsync146 = ___async;
    if ($IsAsync146) {
     HEAP32[$ReallocAsyncCtx39>>2] = 111;
     sp = STACKTOP;
     return;
    }
    $116 = ___async_retval;
    $$expand_i1_val = $115&1;
    HEAP8[$116>>0] = $$expand_i1_val;
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx39>>2] = 111;
    sp = STACKTOP;
    return;
   } else {
    $ReallocAsyncCtx38 = (_emscripten_realloc_async_context(4)|0);
    _update_ball();
    $IsAsync142 = ___async;
    if ($IsAsync142) {
     HEAP32[$ReallocAsyncCtx38>>2] = 112;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx38>>2] = 112;
    sp = STACKTOP;
    return;
   }
   break;
  }
  case 84: {
   $ReallocAsyncCtx32 = (_emscripten_realloc_async_context(4)|0);
   _end_danger();
   $IsAsync120 = ___async;
   if ($IsAsync120) {
    HEAP32[$ReallocAsyncCtx32>>2] = 124;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx32>>2] = 124;
   sp = STACKTOP;
   return;
   break;
  }
  case 90: {
   $200 = HEAP32[(651924)>>2]|0;
   $201 = $195 * 1.2;
   $202 = $201;
   HEAPF32[$193>>2] = $202;
   $203 = ((($183)) + 36|0);
   $204 = +HEAPF32[$203>>2];
   $205 = $204;
   $206 = $205 * 1.2;
   $207 = $206;
   HEAPF32[$203>>2] = $207;
   $ReallocAsyncCtx15 = (_emscripten_realloc_async_context(8)|0);
   FUNCTION_TABLE_vidd[$200 & 255]($183,$202,$207);
   $IsAsync54 = ___async;
   if ($IsAsync54) {
    HEAP32[$ReallocAsyncCtx15>>2] = 125;
    $208 = ((($ReallocAsyncCtx15)) + 4|0);
    HEAP32[$208>>2] = $pad$0;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx15>>2] = 125;
   $208 = ((($ReallocAsyncCtx15)) + 4|0);
   HEAP32[$208>>2] = $pad$0;
   sp = STACKTOP;
   return;
   break;
  }
  case 95: {
   $216 = HEAP32[(651924)>>2]|0;
   $217 = $211 * 1.2;
   $218 = $217;
   HEAPF32[$209>>2] = $218;
   $219 = ((($pad$0)) + 36|0);
   $220 = +HEAPF32[$219>>2];
   $221 = $220;
   $222 = $221 * 1.1000000000000001;
   $223 = $222;
   HEAPF32[$219>>2] = $223;
   $ReallocAsyncCtx16 = (_emscripten_realloc_async_context(8)|0);
   FUNCTION_TABLE_vidd[$216 & 255]($pad$0,$218,$223);
   $IsAsync58 = ___async;
   if ($IsAsync58) {
    HEAP32[$ReallocAsyncCtx16>>2] = 126;
    $224 = ((($ReallocAsyncCtx16)) + 4|0);
    HEAP32[$224>>2] = $pad$0;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx16>>2] = 126;
   $224 = ((($ReallocAsyncCtx16)) + 4|0);
   HEAP32[$224>>2] = $pad$0;
   sp = STACKTOP;
   return;
   break;
  }
  case 112: {
   return;
   break;
  }
 }
}
function _pong__async_cb157($0) {
 $0 = $0|0;
 var $$expand_i1_val = 0, $$not7 = 0, $$pr = 0, $$pr32 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0.0, $172 = 0, $173 = 0, $174 = 0.0, $175 = 0, $176 = 0, $177 = 0.0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0, $183 = 0, $184 = 0.0, $185 = 0.0;
 var $186 = 0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0.0, $191 = 0, $192 = 0, $193 = 0.0, $194 = 0.0, $195 = 0, $196 = 0.0, $197 = 0.0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0.0, $201 = 0.0, $202 = 0;
 var $203 = 0.0, $204 = 0.0, $205 = 0.0, $206 = 0.0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $IsAsync11 = 0, $IsAsync120 = 0, $IsAsync142 = 0, $IsAsync146 = 0;
 var $IsAsync18 = 0, $IsAsync22 = 0, $IsAsync30 = 0, $IsAsync4 = 0, $IsAsync54 = 0, $IsAsync58 = 0, $IsAsync62 = 0, $IsAsync73 = 0, $IsAsync77 = 0, $IsAsync81 = 0, $IsAsync85 = 0, $IsAsync89 = 0, $IsAsync93 = 0, $IsAsync97 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx16 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx20 = 0, $ReallocAsyncCtx21 = 0;
 var $ReallocAsyncCtx22 = 0, $ReallocAsyncCtx23 = 0, $ReallocAsyncCtx24 = 0, $ReallocAsyncCtx25 = 0, $ReallocAsyncCtx26 = 0, $ReallocAsyncCtx32 = 0, $ReallocAsyncCtx38 = 0, $ReallocAsyncCtx39 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx9 = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond30 = 0, $or$cond42 = 0, $or$cond44 = 0, $or$cond9 = 0;
 var $pad$0 = 0, $paddle2$paddle1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[(389556)>>2]|0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  HEAP32[(651780)>>2] = 0;
 } else {
  HEAP32[(651780)>>2] = 1;
  $5 = HEAP32[56>>2]|0;
  $6 = ((($5)) + 4|0);
  HEAP32[$6>>2] = 10;
  $7 = HEAP32[48>>2]|0;
  $8 = ((($7)) + 4|0);
  HEAP32[$8>>2] = 10;
  $9 = HEAP32[8>>2]|0;
  $10 = ((($9)) + 4|0);
  HEAP32[$10>>2] = 1;
  $11 = HEAP32[40>>2]|0;
  $12 = ((($11)) + 4|0);
  HEAP32[$12>>2] = 10;
  $13 = HEAP32[35104>>2]|0;
  $14 = ((($13)) + 4|0);
  HEAP32[$14>>2] = 10;
 }
 HEAP8[120>>0] = 0;
 $15 = (__update_time()|0);
 $16 = HEAP32[216>>2]|0;
 $17 = (($16) + ($15))|0;
 HEAP32[216>>2] = $17;
 $18 = $17;
 L7: while(1) {
  $19 = ($18|0)>(39999);
  if ($19) {
   label = 8;
   break;
  }
  __render();
  $263 = HEAP8[128>>0]|0;
  $$not7 = ($263<<24>>24)==(0);
  $264 = 389544;
  $265 = $264;
  $266 = HEAP32[$265>>2]|0;
  $267 = (($264) + 4)|0;
  $268 = $267;
  $269 = HEAP32[$268>>2]|0;
  $270 = ($266|0)==(0);
  $271 = ($269|0)==(0);
  $272 = $270 & $271;
  $or$cond9 = $$not7 & $272;
  if (!($or$cond9)) {
   label = 104;
   break;
  }
  $20 = HEAP32[(389696)>>2]|0;
  $21 = ($20|0)==(0);
  if (!($21)) {
   HEAP8[128>>0] = 0;
  }
  $22 = (_score_ball()|0);
  if ((($22|0) == 5)) {
   $23 = HEAP8[382784>>0]|0;
   $24 = ($23<<24>>24)==(0);
   if ($24) {
    label = 15;
    break;
   }
  } else if (!((($22|0) == 0))) {
   $$pr = HEAP8[382784>>0]|0;
   $79 = ($$pr<<24>>24)==(0);
   if ($79) {
    label = 31;
    break;
   }
  }
  $82 = HEAP32[(394012)>>2]|0;
  $83 = ($82|0)>(0);
  $84 = HEAP8[382784>>0]|0;
  $85 = ($84<<24>>24)==(0);
  $or$cond11 = $83 & $85;
  if ($or$cond11) {
   label = 35;
   break;
  }
  $95 = HEAP32[(394008)>>2]|0;
  $96 = ($95|0)>(0);
  $or$cond13 = $85 & $96;
  if ($or$cond13) {
   label = 43;
   break;
  }
  $106 = HEAP32[(389556)>>2]|0;
  $107 = HEAP32[$106>>2]|0;
  $108 = ($107|0)==(2);
  if ($108) {
   $109 = HEAP32[(390064)>>2]|0;
   $110 = ($109|0)>(0);
   $111 = HEAP8[382784>>0]|0;
   $112 = ($111<<24>>24)==(0);
   $or$cond15 = $110 & $112;
   if ($or$cond15) {
    label = 52;
    break;
   }
   $116 = HEAP32[(390048)>>2]|0;
   $117 = ($116|0)>(0);
   $or$cond17 = $112 & $117;
   if ($or$cond17) {
    label = 56;
    break;
   }
  }
  $121 = HEAP32[(389556)>>2]|0;
  $122 = HEAP32[$121>>2]|0;
  $123 = ($122|0)<(2);
  if ($123) {
   label = 60;
   break;
  }
  $124 = HEAP32[8>>2]|0;
  $125 = ((($124)) + 8|0);
  $126 = +HEAPF32[$125>>2];
  $127 = (~~(($126)));
  HEAP32[382808>>2] = $127;
  $128 = HEAP8[382784>>0]|0;
  $129 = ($128<<24>>24)==(0);
  if ($129) {
   label = 64;
   break;
  }
  $$pr32 = HEAP8[35112>>0]|0;
  $134 = ($$pr32<<24>>24)==(0);
  if (!($134)) {
   $135 = 389544;
   $136 = $135;
   $137 = HEAP32[$136>>2]|0;
   $138 = (($135) + 4)|0;
   $139 = $138;
   $140 = HEAP32[$139>>2]|0;
   $141 = 35120;
   $142 = $141;
   $143 = HEAP32[$142>>2]|0;
   $144 = (($141) + 4)|0;
   $145 = $144;
   $146 = HEAP32[$145>>2]|0;
   $147 = (_i64Subtract(($137|0),($140|0),($143|0),($146|0))|0);
   $148 = tempRet0;
   $149 = ($148>>>0)>(0);
   $150 = ($147>>>0)>(10000000);
   $151 = ($148|0)==(0);
   $152 = $151 & $150;
   $153 = $149 | $152;
   if ($153) {
    label = 76;
    break;
   }
   $154 = HEAP32[(651780)>>2]|0;
   if ((($154|0) == 5) | (($154|0) == 15)) {
    $155 = HEAP32[40>>2]|0;
    $156 = ((($155)) + 4|0);
    $157 = HEAP32[$156>>2]|0;
    $158 = ($157|0)==(4);
    $159 = ($148>>>0)>(0);
    $160 = ($147>>>0)>(5000000);
    $161 = ($148|0)==(0);
    $162 = $161 & $160;
    $163 = $159 | $162;
    $or$cond30 = $163 & $158;
    if ($or$cond30) {
     label = 76;
     break;
    }
   }
  }
  $164 = HEAP8[104>>0]|0;
  $165 = ($164<<24>>24)==(0);
  do {
   if (!($165)) {
    $166 = HEAP32[96>>2]|0;
    $167 = ((($166)) + 44|0);
    $168 = HEAP8[$167>>0]|0;
    $169 = ($168<<24>>24)==(0);
    if (!($169)) {
     $170 = ((($166)) + 8|0);
     $171 = +HEAPF32[$170>>2];
     $172 = HEAP32[(389572)>>2]|0;
     $173 = (($172|0) / 2)&-1;
     $174 = (+($173|0));
     $175 = $171 > $174;
     $paddle2$paddle1 = $175 ? 48 : 56;
     $pad$0 = HEAP32[$paddle2$paddle1>>2]|0;
     $176 = ((($166)) + 40|0);
     $177 = +HEAPF32[$176>>2];
     $178 = $177;
     $179 = (($172|0) / 40)&-1;
     $180 = (+($179|0));
     $181 = $180 * 10.0;
     $182 = $178 < $181;
     if ($182) {
      label = 82;
      break L7;
     }
     HEAP8[$167>>0] = 0;
     $192 = ((($pad$0)) + 40|0);
     $193 = +HEAPF32[$192>>2];
     $194 = $193;
     $195 = (($172|0) / 40)&-1;
     $196 = (+($195|0));
     $197 = $196 * 20.0;
     $198 = $194 < $197;
     if ($198) {
      label = 87;
      break L7;
     }
     $208 = ((($pad$0)) + 44|0);
     HEAP8[$208>>0] = 0;
     $209 = ((($pad$0)) + 4|0);
     $210 = HEAP32[$209>>2]|0;
     if ((($210|0) == 10)) {
      HEAP32[$209>>2] = 11;
      break;
     } else if ((($210|0) == 0)) {
      HEAP32[$209>>2] = 1;
      break;
     } else {
      break;
     }
    }
   }
  } while(0);
  $211 = HEAP8[382784>>0]|0;
  $212 = ($211<<24>>24)==(0);
  if ($212) {
   $213 = 389544;
   $214 = $213;
   $215 = HEAP32[$214>>2]|0;
   $216 = (($213) + 4)|0;
   $217 = $216;
   $218 = HEAP32[$217>>2]|0;
   $255 = $215;$256 = $218;
  } else {
   $219 = HEAP8[104>>0]|0;
   $220 = ($219<<24>>24)==(0);
   $221 = 389544;
   $222 = $221;
   $223 = HEAP32[$222>>2]|0;
   $224 = (($221) + 4)|0;
   $225 = $224;
   $226 = HEAP32[$225>>2]|0;
   $227 = 382800;
   $228 = $227;
   $229 = HEAP32[$228>>2]|0;
   $230 = (($227) + 4)|0;
   $231 = $230;
   $232 = HEAP32[$231>>2]|0;
   $233 = (_i64Subtract(($223|0),($226|0),($229|0),($232|0))|0);
   $234 = tempRet0;
   $235 = ($234>>>0)>(0);
   $236 = ($233>>>0)>(3000000);
   $237 = ($234|0)==(0);
   $238 = $237 & $236;
   $239 = $235 | $238;
   $or$cond42 = $220 & $239;
   $240 = (_i64Subtract(($223|0),($226|0),($229|0),($232|0))|0);
   $241 = tempRet0;
   $242 = ($241>>>0)>(0);
   $243 = ($240>>>0)>(6000000);
   $244 = ($241|0)==(0);
   $245 = $244 & $243;
   $246 = $242 | $245;
   $or$cond44 = $or$cond42 | $246;
   if ($or$cond44) {
    $247 = HEAP32[35096>>2]|0;
    $248 = ($247|0)==(6);
    if ($248) {
     $249 = HEAP32[(389556)>>2]|0;
     $250 = HEAP32[$249>>2]|0;
     $251 = ($250|0)==(1);
     if ($251) {
      $252 = ((($249)) + 4|0);
      HEAP8[$252>>0] = 1;
     } else {
      label = 100;
     }
    } else {
     label = 100;
    }
    if ((label|0) == 100) {
     label = 0;
     HEAP32[(651780)>>2] = 0;
    }
    HEAP8[128>>0] = 0;
    $255 = $223;$256 = $226;
   } else {
    $255 = $223;$256 = $226;
   }
  }
  $253 = HEAP32[216>>2]|0;
  $254 = (($253) + -40000)|0;
  HEAP32[216>>2] = $254;
  $257 = (_i64Add(($255|0),($256|0),40000,0)|0);
  $258 = tempRet0;
  $259 = 389544;
  $260 = $259;
  HEAP32[$260>>2] = $257;
  $261 = (($259) + 4)|0;
  $262 = $261;
  HEAP32[$262>>2] = $258;
  $18 = $254;
 }
 switch (label|0) {
  case 8: {
   $ReallocAsyncCtx17 = (_emscripten_realloc_async_context(4)|0);
   __update();
   $IsAsync62 = ___async;
   if ($IsAsync62) {
    HEAP32[$ReallocAsyncCtx17>>2] = 94;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx17>>2] = 94;
   sp = STACKTOP;
   return;
   break;
  }
  case 15: {
   HEAP8[382784>>0] = 1;
   $25 = HEAP32[(389556)>>2]|0;
   $26 = HEAP32[$25>>2]|0;
   $27 = ($26|0)==(1);
   if ($27) {
    $28 = (_get_score(1)|0);
    $29 = ($28|0)==(5);
    if ($29) {
     $30 = 389544;
     $31 = $30;
     $32 = HEAP32[$31>>2]|0;
     $33 = (($30) + 4)|0;
     $34 = $33;
     $35 = HEAP32[$34>>2]|0;
     $36 = 382800;
     $37 = $36;
     HEAP32[$37>>2] = $32;
     $38 = (($36) + 4)|0;
     $39 = $38;
     HEAP32[$39>>2] = $35;
     $40 = HEAP32[(651920)>>2]|0;
     $41 = HEAP32[8>>2]|0;
     $42 = HEAP32[(389572)>>2]|0;
     $43 = (+($42|0));
     $44 = ((($41)) + 12|0);
     $45 = +HEAPF32[$44>>2];
     $ReallocAsyncCtx2 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vidd[$40 & 255]($41,$43,$45);
     $IsAsync4 = ___async;
     if ($IsAsync4) {
      HEAP32[$ReallocAsyncCtx2>>2] = 95;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx2>>2] = 95;
     sp = STACKTOP;
     return;
    } else {
     HEAP8[382784>>0] = 1;
     $46 = 389544;
     $47 = $46;
     $48 = HEAP32[$47>>2]|0;
     $49 = (($46) + 4)|0;
     $50 = $49;
     $51 = HEAP32[$50>>2]|0;
     $52 = 382800;
     $53 = $52;
     HEAP32[$53>>2] = $48;
     $54 = (($52) + 4)|0;
     $55 = $54;
     HEAP32[$55>>2] = $51;
     $56 = HEAP32[(651952)>>2]|0;
     $57 = HEAP32[35168>>2]|0;
     $ReallocAsyncCtx4 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vi[$56 & 255]($57);
     $IsAsync11 = ___async;
     if ($IsAsync11) {
      HEAP32[$ReallocAsyncCtx4>>2] = 97;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx4>>2] = 97;
     sp = STACKTOP;
     return;
    }
   } else {
    $58 = 389544;
    $59 = $58;
    $60 = HEAP32[$59>>2]|0;
    $61 = (($58) + 4)|0;
    $62 = $61;
    $63 = HEAP32[$62>>2]|0;
    $64 = 382800;
    $65 = $64;
    HEAP32[$65>>2] = $60;
    $66 = (($64) + 4)|0;
    $67 = $66;
    HEAP32[$67>>2] = $63;
    $68 = HEAP32[8>>2]|0;
    $69 = ((($68)) + 8|0);
    $70 = +HEAPF32[$69>>2];
    $71 = HEAP32[(389572)>>2]|0;
    $72 = (($71|0) / 2)&-1;
    $73 = (+($72|0));
    $74 = $70 > $73;
    $75 = HEAP32[(651920)>>2]|0;
    $76 = ((($68)) + 12|0);
    $77 = +HEAPF32[$76>>2];
    if ($74) {
     $78 = (+($71|0));
     $ReallocAsyncCtx6 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vidd[$75 & 255]($68,$78,$77);
     $IsAsync18 = ___async;
     if ($IsAsync18) {
      HEAP32[$ReallocAsyncCtx6>>2] = 99;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx6>>2] = 99;
     sp = STACKTOP;
     return;
    } else {
     $ReallocAsyncCtx7 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vidd[$75 & 255]($68,0.0,$77);
     $IsAsync22 = ___async;
     if ($IsAsync22) {
      HEAP32[$ReallocAsyncCtx7>>2] = 100;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx7>>2] = 100;
     sp = STACKTOP;
     return;
    }
   }
   break;
  }
  case 31: {
   $80 = HEAP32[(651952)>>2]|0;
   $81 = HEAP32[35128>>2]|0;
   $ReallocAsyncCtx9 = (_emscripten_realloc_async_context(4)|0);
   FUNCTION_TABLE_vi[$80 & 255]($81);
   $IsAsync30 = ___async;
   if ($IsAsync30) {
    HEAP32[$ReallocAsyncCtx9>>2] = 102;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx9>>2] = 102;
   sp = STACKTOP;
   return;
   break;
  }
  case 35: {
   $86 = HEAP32[(389556)>>2]|0;
   $87 = HEAP32[$86>>2]|0;
   $88 = ($87|0)==(1);
   if ($88) {
    $89 = HEAP32[56>>2]|0;
    $90 = HEAP32[(389576)>>2]|0;
    $91 = (($90|0) / 40)&-1;
    $ReallocAsyncCtx26 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($89,1106,$82,$91);
    $IsAsync97 = ___async;
    if ($IsAsync97) {
     HEAP32[$ReallocAsyncCtx26>>2] = 104;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx26>>2] = 104;
    sp = STACKTOP;
    return;
   } else {
    $92 = HEAP32[48>>2]|0;
    $93 = HEAP32[(389576)>>2]|0;
    $94 = (($93|0) / 40)&-1;
    $ReallocAsyncCtx25 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($92,1106,$82,$94);
    $IsAsync93 = ___async;
    if ($IsAsync93) {
     HEAP32[$ReallocAsyncCtx25>>2] = 105;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx25>>2] = 105;
    sp = STACKTOP;
    return;
   }
   break;
  }
  case 43: {
   $97 = HEAP32[(389556)>>2]|0;
   $98 = HEAP32[$97>>2]|0;
   $99 = ($98|0)==(1);
   if ($99) {
    $100 = HEAP32[56>>2]|0;
    $101 = HEAP32[(389576)>>2]|0;
    $102 = (($101|0) / 40)&-1;
    $ReallocAsyncCtx24 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($100,1105,$95,$102);
    $IsAsync89 = ___async;
    if ($IsAsync89) {
     HEAP32[$ReallocAsyncCtx24>>2] = 106;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx24>>2] = 106;
    sp = STACKTOP;
    return;
   } else {
    $103 = HEAP32[48>>2]|0;
    $104 = HEAP32[(389576)>>2]|0;
    $105 = (($104|0) / 40)&-1;
    $ReallocAsyncCtx23 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($103,1105,$95,$105);
    $IsAsync85 = ___async;
    if ($IsAsync85) {
     HEAP32[$ReallocAsyncCtx23>>2] = 107;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx23>>2] = 107;
    sp = STACKTOP;
    return;
   }
   break;
  }
  case 52: {
   $113 = HEAP32[56>>2]|0;
   $114 = HEAP32[(389576)>>2]|0;
   $115 = (($114|0) / 40)&-1;
   $ReallocAsyncCtx22 = (_emscripten_realloc_async_context(4)|0);
   _move_paddle($113,1106,$109,$115);
   $IsAsync81 = ___async;
   if ($IsAsync81) {
    HEAP32[$ReallocAsyncCtx22>>2] = 108;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx22>>2] = 108;
   sp = STACKTOP;
   return;
   break;
  }
  case 56: {
   $118 = HEAP32[56>>2]|0;
   $119 = HEAP32[(389576)>>2]|0;
   $120 = (($119|0) / 40)&-1;
   $ReallocAsyncCtx21 = (_emscripten_realloc_async_context(4)|0);
   _move_paddle($118,1105,$116,$120);
   $IsAsync77 = ___async;
   if ($IsAsync77) {
    HEAP32[$ReallocAsyncCtx21>>2] = 109;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx21>>2] = 109;
   sp = STACKTOP;
   return;
   break;
  }
  case 60: {
   $ReallocAsyncCtx20 = (_emscripten_realloc_async_context(4)|0);
   _paddle_ai(2);
   $IsAsync73 = ___async;
   if ($IsAsync73) {
    HEAP32[$ReallocAsyncCtx20>>2] = 110;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx20>>2] = 110;
   sp = STACKTOP;
   return;
   break;
  }
  case 64: {
   $130 = HEAP8[104>>0]|0;
   $131 = ($130<<24>>24)==(0);
   if ($131) {
    $ReallocAsyncCtx39 = (_emscripten_realloc_async_context(4)|0);
    $132 = (_collision_ball()|0);
    $IsAsync146 = ___async;
    if ($IsAsync146) {
     HEAP32[$ReallocAsyncCtx39>>2] = 111;
     sp = STACKTOP;
     return;
    }
    $133 = ___async_retval;
    $$expand_i1_val = $132&1;
    HEAP8[$133>>0] = $$expand_i1_val;
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx39>>2] = 111;
    sp = STACKTOP;
    return;
   } else {
    $ReallocAsyncCtx38 = (_emscripten_realloc_async_context(4)|0);
    _update_ball();
    $IsAsync142 = ___async;
    if ($IsAsync142) {
     HEAP32[$ReallocAsyncCtx38>>2] = 112;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx38>>2] = 112;
    sp = STACKTOP;
    return;
   }
   break;
  }
  case 76: {
   $ReallocAsyncCtx32 = (_emscripten_realloc_async_context(4)|0);
   _end_danger();
   $IsAsync120 = ___async;
   if ($IsAsync120) {
    HEAP32[$ReallocAsyncCtx32>>2] = 124;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx32>>2] = 124;
   sp = STACKTOP;
   return;
   break;
  }
  case 82: {
   $183 = HEAP32[(651924)>>2]|0;
   $184 = $178 * 1.2;
   $185 = $184;
   HEAPF32[$176>>2] = $185;
   $186 = ((($166)) + 36|0);
   $187 = +HEAPF32[$186>>2];
   $188 = $187;
   $189 = $188 * 1.2;
   $190 = $189;
   HEAPF32[$186>>2] = $190;
   $ReallocAsyncCtx15 = (_emscripten_realloc_async_context(8)|0);
   FUNCTION_TABLE_vidd[$183 & 255]($166,$185,$190);
   $IsAsync54 = ___async;
   if ($IsAsync54) {
    HEAP32[$ReallocAsyncCtx15>>2] = 125;
    $191 = ((($ReallocAsyncCtx15)) + 4|0);
    HEAP32[$191>>2] = $pad$0;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx15>>2] = 125;
   $191 = ((($ReallocAsyncCtx15)) + 4|0);
   HEAP32[$191>>2] = $pad$0;
   sp = STACKTOP;
   return;
   break;
  }
  case 87: {
   $199 = HEAP32[(651924)>>2]|0;
   $200 = $194 * 1.2;
   $201 = $200;
   HEAPF32[$192>>2] = $201;
   $202 = ((($pad$0)) + 36|0);
   $203 = +HEAPF32[$202>>2];
   $204 = $203;
   $205 = $204 * 1.1000000000000001;
   $206 = $205;
   HEAPF32[$202>>2] = $206;
   $ReallocAsyncCtx16 = (_emscripten_realloc_async_context(8)|0);
   FUNCTION_TABLE_vidd[$199 & 255]($pad$0,$201,$206);
   $IsAsync58 = ___async;
   if ($IsAsync58) {
    HEAP32[$ReallocAsyncCtx16>>2] = 126;
    $207 = ((($ReallocAsyncCtx16)) + 4|0);
    HEAP32[$207>>2] = $pad$0;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx16>>2] = 126;
   $207 = ((($ReallocAsyncCtx16)) + 4|0);
   HEAP32[$207>>2] = $pad$0;
   sp = STACKTOP;
   return;
   break;
  }
  case 104: {
   return;
   break;
  }
 }
}
function _pong__async_cb158($0) {
 $0 = $0|0;
 var $IsAsync113 = 0, $ReallocAsyncCtx30 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ReallocAsyncCtx30 = (_emscripten_realloc_async_context(4)|0);
 _update_item();
 $IsAsync113 = ___async;
 if (!($IsAsync113)) {
  ___async_unwind = 0;
 }
 HEAP32[$ReallocAsyncCtx30>>2] = 113;
 sp = STACKTOP;
 return;
}
function _pong__async_cb159($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0;
 var $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0;
 var $64 = 0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0, $8 = 0, $9 = 0.0, $AsyncRetVal = 0, $AsyncRetVal$pre_trunc = 0, $IsAsync113 = 0, $IsAsync142 = 0;
 var $ReallocAsyncCtx30 = 0, $ReallocAsyncCtx38 = 0, $or$cond19 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ___async_retval;
 $AsyncRetVal$pre_trunc = HEAP8[$1>>0]|0;
 $AsyncRetVal = $AsyncRetVal$pre_trunc&1;
 if (!($AsyncRetVal)) {
  $ReallocAsyncCtx38 = (_emscripten_realloc_async_context(4)|0);
  _update_ball();
  $IsAsync142 = ___async;
  if ($IsAsync142) {
   HEAP32[$ReallocAsyncCtx38>>2] = 112;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx38>>2] = 112;
  sp = STACKTOP;
  return;
 }
 $2 = HEAP8[382792>>0]|0;
 $3 = ($2<<24>>24)!=(0);
 $4 = +HEAPF32[32>>2];
 $5 = $4 != 0.0;
 $or$cond19 = $3 & $5;
 if ($or$cond19) {
  HEAP8[382792>>0] = 0;
  label = 6;
 } else {
  $6 = ($2<<24>>24)==(0);
  if ($6) {
   label = 6;
  }
 }
 do {
  if ((label|0) == 6) {
   $7 = HEAP32[8>>2]|0;
   $8 = ((($7)) + 8|0);
   $9 = +HEAPF32[$8>>2];
   $10 = HEAP32[(389572)>>2]|0;
   $11 = (($10|0) / 2)&-1;
   $12 = (+($11|0));
   $13 = $9 > $12;
   if ($13) {
    $14 = HEAP32[80>>2]|0;
    $15 = ((($14)) + 8|0);
    $16 = +HEAPF32[$15>>2];
    $17 = $16 > $12;
    if ($17) {
     _hide_item();
     break;
    }
   }
   $18 = HEAP32[8>>2]|0;
   $19 = ((($18)) + 8|0);
   $20 = +HEAPF32[$19>>2];
   $21 = HEAP32[(389572)>>2]|0;
   $22 = (($21|0) / 2)&-1;
   $23 = (+($22|0));
   $24 = $20 < $23;
   if ($24) {
    $25 = HEAP32[80>>2]|0;
    $26 = ((($25)) + 8|0);
    $27 = +HEAPF32[$26>>2];
    $28 = $27 < $23;
    if ($28) {
     _hide_item();
    }
   }
  }
 } while(0);
 $29 = HEAP32[88>>2]|0;
 $30 = ((($29)) + 44|0);
 $31 = HEAP8[$30>>0]|0;
 $32 = ($31<<24>>24)==(0);
 do {
  if (!($32)) {
   $33 = HEAP32[8>>2]|0;
   $34 = ((($33)) + 8|0);
   $35 = +HEAPF32[$34>>2];
   $36 = HEAP32[(389572)>>2]|0;
   $37 = (($36|0) / 2)&-1;
   $38 = (+($37|0));
   $39 = $35 > $38;
   if ($39) {
    $40 = ((($29)) + 8|0);
    $41 = +HEAPF32[$40>>2];
    $42 = $41 > $38;
    if ($42) {
     _hide_danger();
     break;
    }
   }
   $43 = HEAP32[8>>2]|0;
   $44 = ((($43)) + 8|0);
   $45 = +HEAPF32[$44>>2];
   $46 = HEAP32[(389572)>>2]|0;
   $47 = (($46|0) / 2)&-1;
   $48 = (+($47|0));
   $49 = $45 < $48;
   if ($49) {
    $50 = ((($29)) + 8|0);
    $51 = +HEAPF32[$50>>2];
    $52 = $51 < $48;
    if ($52) {
     _hide_danger();
    }
   }
  }
 } while(0);
 $53 = HEAP32[96>>2]|0;
 $54 = ((($53)) + 44|0);
 $55 = HEAP8[$54>>0]|0;
 $56 = ($55<<24>>24)==(0);
 do {
  if (!($56)) {
   $57 = HEAP32[8>>2]|0;
   $58 = ((($57)) + 8|0);
   $59 = +HEAPF32[$58>>2];
   $60 = HEAP32[(389572)>>2]|0;
   $61 = (($60|0) / 2)&-1;
   $62 = (+($61|0));
   $63 = $59 > $62;
   if ($63) {
    $64 = ((($53)) + 8|0);
    $65 = +HEAPF32[$64>>2];
    $66 = $65 > $62;
    if ($66) {
     _hide_bomb();
     break;
    }
   }
   $67 = HEAP32[8>>2]|0;
   $68 = ((($67)) + 8|0);
   $69 = +HEAPF32[$68>>2];
   $70 = HEAP32[(389572)>>2]|0;
   $71 = (($70|0) / 2)&-1;
   $72 = (+($71|0));
   $73 = $69 < $72;
   if ($73) {
    $74 = ((($53)) + 8|0);
    $75 = +HEAPF32[$74>>2];
    $76 = $75 < $72;
    if ($76) {
     _hide_bomb();
    }
   }
  }
 } while(0);
 $ReallocAsyncCtx30 = (_emscripten_realloc_async_context(4)|0);
 _update_item();
 $IsAsync113 = ___async;
 if ($IsAsync113) {
  HEAP32[$ReallocAsyncCtx30>>2] = 113;
  sp = STACKTOP;
  return;
 }
 ___async_unwind = 0;
 HEAP32[$ReallocAsyncCtx30>>2] = 113;
 sp = STACKTOP;
 return;
}
function _pong__async_cb160($0) {
 $0 = $0|0;
 var $$expand_i1_val = 0, $$not7 = 0, $$pr = 0, $$pr32 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0.0, $158 = 0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0, $163 = 0.0, $164 = 0.0, $165 = 0, $166 = 0, $167 = 0.0;
 var $168 = 0.0, $169 = 0, $17 = 0, $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0, $175 = 0, $176 = 0.0, $177 = 0.0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0, $182 = 0, $183 = 0.0, $184 = 0.0, $185 = 0;
 var $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $26 = 0.0, $27 = 0, $28 = 0.0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $IsAsync11 = 0, $IsAsync120 = 0;
 var $IsAsync142 = 0, $IsAsync146 = 0, $IsAsync18 = 0, $IsAsync22 = 0, $IsAsync30 = 0, $IsAsync4 = 0, $IsAsync54 = 0, $IsAsync58 = 0, $IsAsync62 = 0, $IsAsync73 = 0, $IsAsync77 = 0, $IsAsync81 = 0, $IsAsync85 = 0, $IsAsync89 = 0, $IsAsync93 = 0, $IsAsync97 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx16 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx2 = 0;
 var $ReallocAsyncCtx20 = 0, $ReallocAsyncCtx21 = 0, $ReallocAsyncCtx22 = 0, $ReallocAsyncCtx23 = 0, $ReallocAsyncCtx24 = 0, $ReallocAsyncCtx25 = 0, $ReallocAsyncCtx26 = 0, $ReallocAsyncCtx32 = 0, $ReallocAsyncCtx38 = 0, $ReallocAsyncCtx39 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx9 = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond30 = 0, $or$cond42 = 0;
 var $or$cond44 = 0, $or$cond9 = 0, $pad$0 = 0, $paddle2$paddle1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 L2: while(1) {
  $65 = HEAP32[(394012)>>2]|0;
  $66 = ($65|0)>(0);
  $67 = HEAP8[382784>>0]|0;
  $68 = ($67<<24>>24)==(0);
  $or$cond11 = $66 & $68;
  if ($or$cond11) {
   label = 31;
   break;
  }
  $78 = HEAP32[(394008)>>2]|0;
  $79 = ($78|0)>(0);
  $or$cond13 = $68 & $79;
  if ($or$cond13) {
   label = 39;
   break;
  }
  $89 = HEAP32[(389556)>>2]|0;
  $90 = HEAP32[$89>>2]|0;
  $91 = ($90|0)==(2);
  if ($91) {
   $92 = HEAP32[(390064)>>2]|0;
   $93 = ($92|0)>(0);
   $94 = HEAP8[382784>>0]|0;
   $95 = ($94<<24>>24)==(0);
   $or$cond15 = $93 & $95;
   if ($or$cond15) {
    label = 48;
    break;
   }
   $99 = HEAP32[(390048)>>2]|0;
   $100 = ($99|0)>(0);
   $or$cond17 = $95 & $100;
   if ($or$cond17) {
    label = 52;
    break;
   }
  }
  $104 = HEAP32[(389556)>>2]|0;
  $105 = HEAP32[$104>>2]|0;
  $106 = ($105|0)<(2);
  if ($106) {
   label = 56;
   break;
  }
  $107 = HEAP32[8>>2]|0;
  $108 = ((($107)) + 8|0);
  $109 = +HEAPF32[$108>>2];
  $110 = (~~(($109)));
  HEAP32[382808>>2] = $110;
  $111 = HEAP8[382784>>0]|0;
  $112 = ($111<<24>>24)==(0);
  if ($112) {
   label = 60;
   break;
  }
  $$pr32 = HEAP8[35112>>0]|0;
  $117 = ($$pr32<<24>>24)==(0);
  if (!($117)) {
   $118 = 389544;
   $119 = $118;
   $120 = HEAP32[$119>>2]|0;
   $121 = (($118) + 4)|0;
   $122 = $121;
   $123 = HEAP32[$122>>2]|0;
   $124 = 35120;
   $125 = $124;
   $126 = HEAP32[$125>>2]|0;
   $127 = (($124) + 4)|0;
   $128 = $127;
   $129 = HEAP32[$128>>2]|0;
   $130 = (_i64Subtract(($120|0),($123|0),($126|0),($129|0))|0);
   $131 = tempRet0;
   $132 = ($131>>>0)>(0);
   $133 = ($130>>>0)>(10000000);
   $134 = ($131|0)==(0);
   $135 = $134 & $133;
   $136 = $132 | $135;
   if ($136) {
    label = 72;
    break;
   }
   $137 = HEAP32[(651780)>>2]|0;
   if ((($137|0) == 5) | (($137|0) == 15)) {
    $138 = HEAP32[40>>2]|0;
    $139 = ((($138)) + 4|0);
    $140 = HEAP32[$139>>2]|0;
    $141 = ($140|0)==(4);
    $142 = ($131>>>0)>(0);
    $143 = ($130>>>0)>(5000000);
    $144 = ($131|0)==(0);
    $145 = $144 & $143;
    $146 = $142 | $145;
    $or$cond30 = $146 & $141;
    if ($or$cond30) {
     label = 72;
     break;
    }
   }
  }
  $147 = HEAP8[104>>0]|0;
  $148 = ($147<<24>>24)==(0);
  do {
   if (!($148)) {
    $149 = HEAP32[96>>2]|0;
    $150 = ((($149)) + 44|0);
    $151 = HEAP8[$150>>0]|0;
    $152 = ($151<<24>>24)==(0);
    if (!($152)) {
     $153 = ((($149)) + 8|0);
     $154 = +HEAPF32[$153>>2];
     $155 = HEAP32[(389572)>>2]|0;
     $156 = (($155|0) / 2)&-1;
     $157 = (+($156|0));
     $158 = $154 > $157;
     $paddle2$paddle1 = $158 ? 48 : 56;
     $pad$0 = HEAP32[$paddle2$paddle1>>2]|0;
     $159 = ((($149)) + 40|0);
     $160 = +HEAPF32[$159>>2];
     $161 = $160;
     $162 = (($155|0) / 40)&-1;
     $163 = (+($162|0));
     $164 = $163 * 10.0;
     $165 = $161 < $164;
     if ($165) {
      label = 78;
      break L2;
     }
     HEAP8[$150>>0] = 0;
     $175 = ((($pad$0)) + 40|0);
     $176 = +HEAPF32[$175>>2];
     $177 = $176;
     $178 = (($155|0) / 40)&-1;
     $179 = (+($178|0));
     $180 = $179 * 20.0;
     $181 = $177 < $180;
     if ($181) {
      label = 83;
      break L2;
     }
     $191 = ((($pad$0)) + 44|0);
     HEAP8[$191>>0] = 0;
     $192 = ((($pad$0)) + 4|0);
     $193 = HEAP32[$192>>2]|0;
     if ((($193|0) == 0)) {
      HEAP32[$192>>2] = 1;
      break;
     } else if ((($193|0) == 10)) {
      HEAP32[$192>>2] = 11;
      break;
     } else {
      break;
     }
    }
   }
  } while(0);
  $194 = HEAP8[382784>>0]|0;
  $195 = ($194<<24>>24)==(0);
  if ($195) {
   $196 = 389544;
   $197 = $196;
   $198 = HEAP32[$197>>2]|0;
   $199 = (($196) + 4)|0;
   $200 = $199;
   $201 = HEAP32[$200>>2]|0;
   $237 = $198;$238 = $201;
  } else {
   $202 = HEAP8[104>>0]|0;
   $203 = ($202<<24>>24)==(0);
   $204 = 389544;
   $205 = $204;
   $206 = HEAP32[$205>>2]|0;
   $207 = (($204) + 4)|0;
   $208 = $207;
   $209 = HEAP32[$208>>2]|0;
   $210 = 382800;
   $211 = $210;
   $212 = HEAP32[$211>>2]|0;
   $213 = (($210) + 4)|0;
   $214 = $213;
   $215 = HEAP32[$214>>2]|0;
   $216 = (_i64Subtract(($206|0),($209|0),($212|0),($215|0))|0);
   $217 = tempRet0;
   $218 = ($217>>>0)>(0);
   $219 = ($216>>>0)>(3000000);
   $220 = ($217|0)==(0);
   $221 = $220 & $219;
   $222 = $218 | $221;
   $or$cond42 = $203 & $222;
   $223 = (_i64Subtract(($206|0),($209|0),($212|0),($215|0))|0);
   $224 = tempRet0;
   $225 = ($224>>>0)>(0);
   $226 = ($223>>>0)>(6000000);
   $227 = ($224|0)==(0);
   $228 = $227 & $226;
   $229 = $225 | $228;
   $or$cond44 = $or$cond42 | $229;
   if ($or$cond44) {
    $230 = HEAP32[35096>>2]|0;
    $231 = ($230|0)==(6);
    if ($231) {
     $232 = HEAP32[(389556)>>2]|0;
     $233 = HEAP32[$232>>2]|0;
     $234 = ($233|0)==(1);
     if ($234) {
      $235 = ((($232)) + 4|0);
      HEAP8[$235>>0] = 1;
     } else {
      label = 96;
     }
    } else {
     label = 96;
    }
    if ((label|0) == 96) {
     label = 0;
     HEAP32[(651780)>>2] = 0;
    }
    HEAP8[128>>0] = 0;
    $237 = $206;$238 = $209;
   } else {
    $237 = $206;$238 = $209;
   }
  }
  $236 = HEAP32[216>>2]|0;
  $1 = (($236) + -40000)|0;
  HEAP32[216>>2] = $1;
  $239 = (_i64Add(($237|0),($238|0),40000,0)|0);
  $240 = tempRet0;
  $241 = 389544;
  $242 = $241;
  HEAP32[$242>>2] = $239;
  $243 = (($241) + 4)|0;
  $244 = $243;
  HEAP32[$244>>2] = $240;
  $2 = ($1|0)>(39999);
  if ($2) {
   label = 3;
   break;
  }
  __render();
  $245 = HEAP8[128>>0]|0;
  $$not7 = ($245<<24>>24)==(0);
  $246 = 389544;
  $247 = $246;
  $248 = HEAP32[$247>>2]|0;
  $249 = (($246) + 4)|0;
  $250 = $249;
  $251 = HEAP32[$250>>2]|0;
  $252 = ($248|0)==(0);
  $253 = ($251|0)==(0);
  $254 = $252 & $253;
  $or$cond9 = $$not7 & $254;
  if (!($or$cond9)) {
   label = 100;
   break;
  }
  $3 = HEAP32[(389696)>>2]|0;
  $4 = ($3|0)==(0);
  if (!($4)) {
   HEAP8[128>>0] = 0;
  }
  $5 = (_score_ball()|0);
  if ((($5|0) == 0)) {
   continue;
  } else if ((($5|0) == 5)) {
   $6 = HEAP8[382784>>0]|0;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    label = 10;
    break;
   } else {
    continue;
   }
  } else {
   $$pr = HEAP8[382784>>0]|0;
   $62 = ($$pr<<24>>24)==(0);
   if ($62) {
    label = 26;
    break;
   } else {
    continue;
   }
  }
 }
 switch (label|0) {
  case 3: {
   $ReallocAsyncCtx17 = (_emscripten_realloc_async_context(4)|0);
   __update();
   $IsAsync62 = ___async;
   if ($IsAsync62) {
    HEAP32[$ReallocAsyncCtx17>>2] = 94;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx17>>2] = 94;
   sp = STACKTOP;
   return;
   break;
  }
  case 10: {
   HEAP8[382784>>0] = 1;
   $8 = HEAP32[(389556)>>2]|0;
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(1);
   if ($10) {
    $11 = (_get_score(1)|0);
    $12 = ($11|0)==(5);
    if ($12) {
     $13 = 389544;
     $14 = $13;
     $15 = HEAP32[$14>>2]|0;
     $16 = (($13) + 4)|0;
     $17 = $16;
     $18 = HEAP32[$17>>2]|0;
     $19 = 382800;
     $20 = $19;
     HEAP32[$20>>2] = $15;
     $21 = (($19) + 4)|0;
     $22 = $21;
     HEAP32[$22>>2] = $18;
     $23 = HEAP32[(651920)>>2]|0;
     $24 = HEAP32[8>>2]|0;
     $25 = HEAP32[(389572)>>2]|0;
     $26 = (+($25|0));
     $27 = ((($24)) + 12|0);
     $28 = +HEAPF32[$27>>2];
     $ReallocAsyncCtx2 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vidd[$23 & 255]($24,$26,$28);
     $IsAsync4 = ___async;
     if ($IsAsync4) {
      HEAP32[$ReallocAsyncCtx2>>2] = 95;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx2>>2] = 95;
     sp = STACKTOP;
     return;
    } else {
     HEAP8[382784>>0] = 1;
     $29 = 389544;
     $30 = $29;
     $31 = HEAP32[$30>>2]|0;
     $32 = (($29) + 4)|0;
     $33 = $32;
     $34 = HEAP32[$33>>2]|0;
     $35 = 382800;
     $36 = $35;
     HEAP32[$36>>2] = $31;
     $37 = (($35) + 4)|0;
     $38 = $37;
     HEAP32[$38>>2] = $34;
     $39 = HEAP32[(651952)>>2]|0;
     $40 = HEAP32[35168>>2]|0;
     $ReallocAsyncCtx4 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vi[$39 & 255]($40);
     $IsAsync11 = ___async;
     if ($IsAsync11) {
      HEAP32[$ReallocAsyncCtx4>>2] = 97;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx4>>2] = 97;
     sp = STACKTOP;
     return;
    }
   } else {
    $41 = 389544;
    $42 = $41;
    $43 = HEAP32[$42>>2]|0;
    $44 = (($41) + 4)|0;
    $45 = $44;
    $46 = HEAP32[$45>>2]|0;
    $47 = 382800;
    $48 = $47;
    HEAP32[$48>>2] = $43;
    $49 = (($47) + 4)|0;
    $50 = $49;
    HEAP32[$50>>2] = $46;
    $51 = HEAP32[8>>2]|0;
    $52 = ((($51)) + 8|0);
    $53 = +HEAPF32[$52>>2];
    $54 = HEAP32[(389572)>>2]|0;
    $55 = (($54|0) / 2)&-1;
    $56 = (+($55|0));
    $57 = $53 > $56;
    $58 = HEAP32[(651920)>>2]|0;
    $59 = ((($51)) + 12|0);
    $60 = +HEAPF32[$59>>2];
    if ($57) {
     $61 = (+($54|0));
     $ReallocAsyncCtx6 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vidd[$58 & 255]($51,$61,$60);
     $IsAsync18 = ___async;
     if ($IsAsync18) {
      HEAP32[$ReallocAsyncCtx6>>2] = 99;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx6>>2] = 99;
     sp = STACKTOP;
     return;
    } else {
     $ReallocAsyncCtx7 = (_emscripten_realloc_async_context(4)|0);
     FUNCTION_TABLE_vidd[$58 & 255]($51,0.0,$60);
     $IsAsync22 = ___async;
     if ($IsAsync22) {
      HEAP32[$ReallocAsyncCtx7>>2] = 100;
      sp = STACKTOP;
      return;
     }
     ___async_unwind = 0;
     HEAP32[$ReallocAsyncCtx7>>2] = 100;
     sp = STACKTOP;
     return;
    }
   }
   break;
  }
  case 26: {
   $63 = HEAP32[(651952)>>2]|0;
   $64 = HEAP32[35128>>2]|0;
   $ReallocAsyncCtx9 = (_emscripten_realloc_async_context(4)|0);
   FUNCTION_TABLE_vi[$63 & 255]($64);
   $IsAsync30 = ___async;
   if ($IsAsync30) {
    HEAP32[$ReallocAsyncCtx9>>2] = 102;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx9>>2] = 102;
   sp = STACKTOP;
   return;
   break;
  }
  case 31: {
   $69 = HEAP32[(389556)>>2]|0;
   $70 = HEAP32[$69>>2]|0;
   $71 = ($70|0)==(1);
   if ($71) {
    $72 = HEAP32[56>>2]|0;
    $73 = HEAP32[(389576)>>2]|0;
    $74 = (($73|0) / 40)&-1;
    $ReallocAsyncCtx26 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($72,1106,$65,$74);
    $IsAsync97 = ___async;
    if ($IsAsync97) {
     HEAP32[$ReallocAsyncCtx26>>2] = 104;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx26>>2] = 104;
    sp = STACKTOP;
    return;
   } else {
    $75 = HEAP32[48>>2]|0;
    $76 = HEAP32[(389576)>>2]|0;
    $77 = (($76|0) / 40)&-1;
    $ReallocAsyncCtx25 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($75,1106,$65,$77);
    $IsAsync93 = ___async;
    if ($IsAsync93) {
     HEAP32[$ReallocAsyncCtx25>>2] = 105;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx25>>2] = 105;
    sp = STACKTOP;
    return;
   }
   break;
  }
  case 39: {
   $80 = HEAP32[(389556)>>2]|0;
   $81 = HEAP32[$80>>2]|0;
   $82 = ($81|0)==(1);
   if ($82) {
    $83 = HEAP32[56>>2]|0;
    $84 = HEAP32[(389576)>>2]|0;
    $85 = (($84|0) / 40)&-1;
    $ReallocAsyncCtx24 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($83,1105,$78,$85);
    $IsAsync89 = ___async;
    if ($IsAsync89) {
     HEAP32[$ReallocAsyncCtx24>>2] = 106;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx24>>2] = 106;
    sp = STACKTOP;
    return;
   } else {
    $86 = HEAP32[48>>2]|0;
    $87 = HEAP32[(389576)>>2]|0;
    $88 = (($87|0) / 40)&-1;
    $ReallocAsyncCtx23 = (_emscripten_realloc_async_context(4)|0);
    _move_paddle($86,1105,$78,$88);
    $IsAsync85 = ___async;
    if ($IsAsync85) {
     HEAP32[$ReallocAsyncCtx23>>2] = 107;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx23>>2] = 107;
    sp = STACKTOP;
    return;
   }
   break;
  }
  case 48: {
   $96 = HEAP32[56>>2]|0;
   $97 = HEAP32[(389576)>>2]|0;
   $98 = (($97|0) / 40)&-1;
   $ReallocAsyncCtx22 = (_emscripten_realloc_async_context(4)|0);
   _move_paddle($96,1106,$92,$98);
   $IsAsync81 = ___async;
   if ($IsAsync81) {
    HEAP32[$ReallocAsyncCtx22>>2] = 108;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx22>>2] = 108;
   sp = STACKTOP;
   return;
   break;
  }
  case 52: {
   $101 = HEAP32[56>>2]|0;
   $102 = HEAP32[(389576)>>2]|0;
   $103 = (($102|0) / 40)&-1;
   $ReallocAsyncCtx21 = (_emscripten_realloc_async_context(4)|0);
   _move_paddle($101,1105,$99,$103);
   $IsAsync77 = ___async;
   if ($IsAsync77) {
    HEAP32[$ReallocAsyncCtx21>>2] = 109;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx21>>2] = 109;
   sp = STACKTOP;
   return;
   break;
  }
  case 56: {
   $ReallocAsyncCtx20 = (_emscripten_realloc_async_context(4)|0);
   _paddle_ai(2);
   $IsAsync73 = ___async;
   if ($IsAsync73) {
    HEAP32[$ReallocAsyncCtx20>>2] = 110;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx20>>2] = 110;
   sp = STACKTOP;
   return;
   break;
  }
  case 60: {
   $113 = HEAP8[104>>0]|0;
   $114 = ($113<<24>>24)==(0);
   if ($114) {
    $ReallocAsyncCtx39 = (_emscripten_realloc_async_context(4)|0);
    $115 = (_collision_ball()|0);
    $IsAsync146 = ___async;
    if ($IsAsync146) {
     HEAP32[$ReallocAsyncCtx39>>2] = 111;
     sp = STACKTOP;
     return;
    }
    $116 = ___async_retval;
    $$expand_i1_val = $115&1;
    HEAP8[$116>>0] = $$expand_i1_val;
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx39>>2] = 111;
    sp = STACKTOP;
    return;
   } else {
    $ReallocAsyncCtx38 = (_emscripten_realloc_async_context(4)|0);
    _update_ball();
    $IsAsync142 = ___async;
    if ($IsAsync142) {
     HEAP32[$ReallocAsyncCtx38>>2] = 112;
     sp = STACKTOP;
     return;
    }
    ___async_unwind = 0;
    HEAP32[$ReallocAsyncCtx38>>2] = 112;
    sp = STACKTOP;
    return;
   }
   break;
  }
  case 72: {
   $ReallocAsyncCtx32 = (_emscripten_realloc_async_context(4)|0);
   _end_danger();
   $IsAsync120 = ___async;
   if ($IsAsync120) {
    HEAP32[$ReallocAsyncCtx32>>2] = 124;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx32>>2] = 124;
   sp = STACKTOP;
   return;
   break;
  }
  case 78: {
   $166 = HEAP32[(651924)>>2]|0;
   $167 = $161 * 1.2;
   $168 = $167;
   HEAPF32[$159>>2] = $168;
   $169 = ((($149)) + 36|0);
   $170 = +HEAPF32[$169>>2];
   $171 = $170;
   $172 = $171 * 1.2;
   $173 = $172;
   HEAPF32[$169>>2] = $173;
   $ReallocAsyncCtx15 = (_emscripten_realloc_async_context(8)|0);
   FUNCTION_TABLE_vidd[$166 & 255]($149,$168,$173);
   $IsAsync54 = ___async;
   if ($IsAsync54) {
    HEAP32[$ReallocAsyncCtx15>>2] = 125;
    $174 = ((($ReallocAsyncCtx15)) + 4|0);
    HEAP32[$174>>2] = $pad$0;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx15>>2] = 125;
   $174 = ((($ReallocAsyncCtx15)) + 4|0);
   HEAP32[$174>>2] = $pad$0;
   sp = STACKTOP;
   return;
   break;
  }
  case 83: {
   $182 = HEAP32[(651924)>>2]|0;
   $183 = $177 * 1.2;
   $184 = $183;
   HEAPF32[$175>>2] = $184;
   $185 = ((($pad$0)) + 36|0);
   $186 = +HEAPF32[$185>>2];
   $187 = $186;
   $188 = $187 * 1.1000000000000001;
   $189 = $188;
   HEAPF32[$185>>2] = $189;
   $ReallocAsyncCtx16 = (_emscripten_realloc_async_context(8)|0);
   FUNCTION_TABLE_vidd[$182 & 255]($pad$0,$184,$189);
   $IsAsync58 = ___async;
   if ($IsAsync58) {
    HEAP32[$ReallocAsyncCtx16>>2] = 126;
    $190 = ((($ReallocAsyncCtx16)) + 4|0);
    HEAP32[$190>>2] = $pad$0;
    sp = STACKTOP;
    return;
   }
   ___async_unwind = 0;
   HEAP32[$ReallocAsyncCtx16>>2] = 126;
   $190 = ((($ReallocAsyncCtx16)) + 4|0);
   HEAP32[$190>>2] = $pad$0;
   sp = STACKTOP;
   return;
   break;
  }
  case 100: {
   return;
   break;
  }
 }
}
function _pong__async_cb161($0) {
 $0 = $0|0;
 var $IsAsync116 = 0, $ReallocAsyncCtx31 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ReallocAsyncCtx31 = (_emscripten_realloc_async_context(4)|0);
 _initialize_item();
 $IsAsync116 = ___async;
 if (!($IsAsync116)) {
  ___async_unwind = 0;
 }
 HEAP32[$ReallocAsyncCtx31>>2] = 91;
 sp = STACKTOP;
 return;
}
function _initialize_score__async_cb($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $AsyncRetVal = 0, $IsAsync6 = 0, $ReallocAsyncCtx2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ___async_retval;
 $AsyncRetVal = HEAP32[$7>>2]|0;
 HEAP32[40>>2] = $AsyncRetVal;
 $8 = HEAP32[(651908)>>2]|0;
 $9 = HEAP32[(389572)>>2]|0;
 $10 = (+($9|0));
 $11 = $10 * 0.625;
 $12 = (~~(($11)));
 $13 = HEAP32[(389576)>>2]|0;
 $14 = (($13) + -100)|0;
 $15 = (($9|0) / 40)&-1;
 $16 = ($15*3)|0;
 $17 = ($13*5)|0;
 $18 = (($17|0) / 27)&-1;
 $ReallocAsyncCtx2 = (_emscripten_realloc_async_context(8)|0);
 $19 = (FUNCTION_TABLE_iiiiiii[$8 & 255](8,$12,$14,$16,$18,$4)|0);
 $IsAsync6 = ___async;
 if ($IsAsync6) {
  HEAP32[$ReallocAsyncCtx2>>2] = 128;
  $20 = ((($ReallocAsyncCtx2)) + 4|0);
  HEAP32[$20>>2] = $6;
  sp = STACKTOP;
  return;
 }
 $21 = ___async_retval;
 HEAP32[$21>>2] = $19;
 ___async_unwind = 0;
 HEAP32[$ReallocAsyncCtx2>>2] = 128;
 $20 = ((($ReallocAsyncCtx2)) + 4|0);
 HEAP32[$20>>2] = $6;
 sp = STACKTOP;
 return;
}
function _initialize_score__async_cb162($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ___async_retval;
 $AsyncRetVal = HEAP32[$3>>2]|0;
 HEAP32[35104>>2] = $AsyncRetVal;
 $4 = HEAP32[(389556)>>2]|0;
 $5 = ((($4)) + 4|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)==(0);
 $8 = HEAP32[40>>2]|0;
 $9 = ((($8)) + 4|0);
 if ($7) {
  HEAP32[$9>>2] = 0;
  $11 = ((($AsyncRetVal)) + 4|0);
  HEAP32[$11>>2] = 0;
  return;
 } else {
  HEAP32[$9>>2] = 10;
  $10 = ((($AsyncRetVal)) + 4|0);
  HEAP32[$10>>2] = 10;
  return;
 }
}
function _show_item__async_cb($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, $IsAsync3 = 0, $ReallocAsyncCtx2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = +HEAPF32[$3>>2];
 $5 = ((($0)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ___async_retval;
 $AsyncRetVal = HEAP32[$7>>2]|0;
 $8 = HEAP32[(389576)>>2]|0;
 $9 = (($AsyncRetVal>>>0) % ($8>>>0))&-1;
 $10 = (+($9>>>0));
 $ReallocAsyncCtx2 = (_emscripten_realloc_async_context(4)|0);
 FUNCTION_TABLE_vidd[$6 & 255]($2,$4,$10);
 $IsAsync3 = ___async;
 if ($IsAsync3) {
  HEAP32[$ReallocAsyncCtx2>>2] = 53;
  sp = STACKTOP;
  return;
 }
 ___async_unwind = 0;
 HEAP32[$ReallocAsyncCtx2>>2] = 53;
 sp = STACKTOP;
 return;
}
function _show_item__async_cb163($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __Wresize_window__async_cb($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, $IsAsync3 = 0;
 var $ReallocAsyncCtx2 = 0, $new_height$0 = 0.0, $new_width$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 12|0);
 $6 = +HEAPF32[$5>>2];
 $7 = ((($0)) + 16|0);
 $8 = +HEAPF32[$7>>2];
 $9 = ((($0)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($0)) + 24|0);
 $12 = +HEAPF32[$11>>2];
 $13 = ((($0)) + 28|0);
 $14 = +HEAPF32[$13>>2];
 $15 = ((($0)) + 32|0);
 $16 = +HEAPF32[$15>>2];
 $17 = ((($0)) + 36|0);
 $18 = +HEAPF32[$17>>2];
 $19 = ((((2280 + (($2*1856)|0)|0) + (($4*116)|0)|0)) + 45|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = ($20<<24>>24)==(0);
 $22 = ((((2280 + (($2*1856)|0)|0) + (($4*116)|0)|0)) + 40|0);
 $23 = +HEAPF32[$22>>2];
 $24 = $23 * $6;
 $new_width$0 = $21 ? $23 : $24;
 $25 = ((((2280 + (($2*1856)|0)|0) + (($4*116)|0)|0)) + 46|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = ($26<<24>>24)==(0);
 $28 = ((((2280 + (($2*1856)|0)|0) + (($4*116)|0)|0)) + 36|0);
 $29 = +HEAPF32[$28>>2];
 $30 = $29 * $8;
 $new_height$0 = $27 ? $29 : $30;
 $31 = HEAP32[(651924)>>2]|0;
 $ReallocAsyncCtx2 = (_emscripten_realloc_async_context(36)|0);
 FUNCTION_TABLE_vidd[$31 & 255]($10,$new_width$0,$new_height$0);
 $IsAsync3 = ___async;
 if (!($IsAsync3)) {
  ___async_unwind = 0;
 }
 HEAP32[$ReallocAsyncCtx2>>2] = 152;
 $32 = ((($ReallocAsyncCtx2)) + 4|0);
 HEAP32[$32>>2] = $4;
 $33 = ((($ReallocAsyncCtx2)) + 8|0);
 HEAP32[$33>>2] = $2;
 $34 = ((($ReallocAsyncCtx2)) + 12|0);
 HEAPF32[$34>>2] = $12;
 $35 = ((($ReallocAsyncCtx2)) + 16|0);
 HEAPF32[$35>>2] = $14;
 $36 = ((($ReallocAsyncCtx2)) + 20|0);
 HEAPF32[$36>>2] = $16;
 $37 = ((($ReallocAsyncCtx2)) + 24|0);
 HEAPF32[$37>>2] = $18;
 $38 = ((($ReallocAsyncCtx2)) + 28|0);
 HEAPF32[$38>>2] = $6;
 $39 = ((($ReallocAsyncCtx2)) + 32|0);
 HEAPF32[$39>>2] = $8;
 sp = STACKTOP;
 return;
}
function __Wresize_window__async_cb164($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0;
 var $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, $IsAsync = 0;
 var $ReallocAsyncCtx = 0, $exitcond = 0, $exitcond3 = 0, $i$02$reg2mem$0 = 0, $i$02$reg2mem$1 = 0, $j$01 = 0, $j$01$reg2mem$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 12|0);
 $6 = +HEAPF32[$5>>2];
 $7 = ((($0)) + 16|0);
 $8 = +HEAPF32[$7>>2];
 $9 = ((($0)) + 20|0);
 $10 = +HEAPF32[$9>>2];
 $11 = ((($0)) + 24|0);
 $12 = +HEAPF32[$11>>2];
 $13 = ((($0)) + 28|0);
 $14 = +HEAPF32[$13>>2];
 $15 = ((($0)) + 32|0);
 $16 = +HEAPF32[$15>>2];
 $i$02$reg2mem$1 = $4;$j$01$reg2mem$0 = $2;
 while(1) {
  $38 = (($j$01$reg2mem$0) + 1)|0;
  $exitcond = ($38|0)==(16);
  if ($exitcond) {
   $39 = (($i$02$reg2mem$1) + 1)|0;
   $exitcond3 = ($39|0)==(16);
   if ($exitcond3) {
    label = 10;
    break;
   }
   $i$02$reg2mem$0 = $39;$j$01 = 0;
  } else {
   $i$02$reg2mem$0 = $i$02$reg2mem$1;$j$01 = $38;
  }
  $17 = ((2280 + (($i$02$reg2mem$0*1856)|0)|0) + (($j$01*116)|0)|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)==(0);
  if ($19) {
   $i$02$reg2mem$1 = $i$02$reg2mem$0;$j$01$reg2mem$0 = $j$01;
  } else {
   break;
  }
 }
 if ((label|0) == 10) {
  return;
 }
 $20 = HEAP32[(651920)>>2]|0;
 $21 = ((((2280 + (($i$02$reg2mem$0*1856)|0)|0) + (($j$01*116)|0)|0)) + 8|0);
 $22 = +HEAPF32[$21>>2];
 $23 = $6 * $22;
 $24 = $23 / $8;
 $25 = ((((2280 + (($i$02$reg2mem$0*1856)|0)|0) + (($j$01*116)|0)|0)) + 12|0);
 $26 = +HEAPF32[$25>>2];
 $27 = $10 * $26;
 $28 = $27 / $12;
 $ReallocAsyncCtx = (_emscripten_realloc_async_context(40)|0);
 FUNCTION_TABLE_vidd[$20 & 255]($17,$24,$28);
 $IsAsync = ___async;
 if (!($IsAsync)) {
  ___async_unwind = 0;
 }
 HEAP32[$ReallocAsyncCtx>>2] = 151;
 $29 = ((($ReallocAsyncCtx)) + 4|0);
 HEAP32[$29>>2] = $i$02$reg2mem$0;
 $30 = ((($ReallocAsyncCtx)) + 8|0);
 HEAP32[$30>>2] = $j$01;
 $31 = ((($ReallocAsyncCtx)) + 12|0);
 HEAPF32[$31>>2] = $14;
 $32 = ((($ReallocAsyncCtx)) + 16|0);
 HEAPF32[$32>>2] = $16;
 $33 = ((($ReallocAsyncCtx)) + 20|0);
 HEAP32[$33>>2] = $17;
 $34 = ((($ReallocAsyncCtx)) + 24|0);
 HEAPF32[$34>>2] = $6;
 $35 = ((($ReallocAsyncCtx)) + 28|0);
 HEAPF32[$35>>2] = $8;
 $36 = ((($ReallocAsyncCtx)) + 32|0);
 HEAPF32[$36>>2] = $10;
 $37 = ((($ReallocAsyncCtx)) + 36|0);
 HEAPF32[$37>>2] = $12;
 sp = STACKTOP;
 return;
}
function __new_sound__async_cb($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, $IsAsync7 = 0, $ReallocAsyncCtx2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($0)) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ___async_retval;
 $AsyncRetVal = HEAP32[$13>>2]|0;
 $14 = ($AsyncRetVal|0)==(0|0);
 if ($14) {
  HEAP32[$2>>2] = $4;
  (_printf((388936|0),($2|0))|0);
  $29 = ___async_retval;
  HEAP32[$29>>2] = 0;
  return;
 }
 $15 = ((($AsyncRetVal)) + 20|0);
 HEAP8[$15>>0] = 0;
 $16 = HEAP32[(651820)>>2]|0;
 $17 = (_strlen(($4|0))|0);
 $18 = (_strlen(($8|0))|0);
 $19 = (($17) + 1)|0;
 $20 = (($19) + ($18))|0;
 $ReallocAsyncCtx2 = (_emscripten_realloc_async_context(28)|0);
 $21 = (FUNCTION_TABLE_ii[$16 & 255]($20)|0);
 $IsAsync7 = ___async;
 if (!($IsAsync7)) {
  $28 = ___async_retval;
  HEAP32[$28>>2] = $21;
  ___async_unwind = 0;
 }
 HEAP32[$ReallocAsyncCtx2>>2] = 171;
 $22 = ((($ReallocAsyncCtx2)) + 4|0);
 HEAP32[$22>>2] = $AsyncRetVal;
 $23 = ((($ReallocAsyncCtx2)) + 8|0);
 HEAP32[$23>>2] = $8;
 $24 = ((($ReallocAsyncCtx2)) + 12|0);
 HEAP32[$24>>2] = $4;
 $25 = ((($ReallocAsyncCtx2)) + 16|0);
 HEAP32[$25>>2] = $AsyncRetVal;
 $26 = ((($ReallocAsyncCtx2)) + 20|0);
 HEAP32[$26>>2] = $10;
 $27 = ((($ReallocAsyncCtx2)) + 24|0);
 HEAP32[$27>>2] = $12;
 sp = STACKTOP;
 return;
}
function __new_sound__async_cb165($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $AsyncRetVal = 0, $IsAsync11 = 0, $IsAsync15 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($0)) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ___async_retval;
 $AsyncRetVal = HEAP32[$13>>2]|0;
 $14 = ($AsyncRetVal|0)==(0|0);
 if ($14) {
  $15 = HEAP32[(651808)>>2]|0;
  $ReallocAsyncCtx3 = (_emscripten_realloc_async_context(16)|0);
  FUNCTION_TABLE_vi[$15 & 255]($2);
  $IsAsync11 = ___async;
  if ($IsAsync11) {
   HEAP32[$ReallocAsyncCtx3>>2] = 172;
   $16 = ((($ReallocAsyncCtx3)) + 4|0);
   HEAP32[$16>>2] = $10;
   $17 = ((($ReallocAsyncCtx3)) + 8|0);
   HEAP32[$17>>2] = $6;
   $18 = ((($ReallocAsyncCtx3)) + 12|0);
   HEAP32[$18>>2] = $12;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx3>>2] = 172;
  $16 = ((($ReallocAsyncCtx3)) + 4|0);
  HEAP32[$16>>2] = $10;
  $17 = ((($ReallocAsyncCtx3)) + 8|0);
  HEAP32[$17>>2] = $6;
  $18 = ((($ReallocAsyncCtx3)) + 12|0);
  HEAP32[$18>>2] = $12;
  sp = STACKTOP;
  return;
 } else {
  (_strcpy(($AsyncRetVal|0),($4|0))|0);
  (_strcat(($AsyncRetVal|0),($6|0))|0);
  (_mkdir((388928|0),511)|0);
  $19 = HEAP32[(651792)>>2]|0;
  $20 = (($19) + 1)|0;
  HEAP32[(651792)>>2] = $20;
  (_emscripten_async_wget2(($AsyncRetVal|0),($AsyncRetVal|0),(388992|0),(389000|0),($2|0),(173|0),(174|0),(175|0))|0);
  $21 = HEAP32[(651808)>>2]|0;
  $ReallocAsyncCtx4 = (_emscripten_realloc_async_context(8)|0);
  FUNCTION_TABLE_vi[$21 & 255]($AsyncRetVal);
  $IsAsync15 = ___async;
  if ($IsAsync15) {
   HEAP32[$ReallocAsyncCtx4>>2] = 176;
   $22 = ((($ReallocAsyncCtx4)) + 4|0);
   HEAP32[$22>>2] = $8;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx4>>2] = 176;
  $22 = ((($ReallocAsyncCtx4)) + 4|0);
  HEAP32[$22>>2] = $8;
  sp = STACKTOP;
  return;
 }
}
function __new_sound__async_cb166($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$2>>2] = $4;
 (_printf((388936|0),($2|0))|0);
 $7 = ___async_retval;
 HEAP32[$7>>2] = 0;
 return;
}
function __new_sound__async_cb167($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ___async_retval;
 HEAP32[$3>>2] = $2;
 return;
}
function _show_danger__async_cb($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, $IsAsync3 = 0, $ReallocAsyncCtx2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = +HEAPF32[$3>>2];
 $5 = ((($0)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ___async_retval;
 $AsyncRetVal = HEAP32[$7>>2]|0;
 $8 = HEAP32[(389576)>>2]|0;
 $9 = (($AsyncRetVal>>>0) % ($8>>>0))&-1;
 $10 = (+($9>>>0));
 $ReallocAsyncCtx2 = (_emscripten_realloc_async_context(4)|0);
 FUNCTION_TABLE_vidd[$6 & 255]($2,$4,$10);
 $IsAsync3 = ___async;
 if ($IsAsync3) {
  HEAP32[$ReallocAsyncCtx2>>2] = 36;
  sp = STACKTOP;
  return;
 }
 ___async_unwind = 0;
 HEAP32[$ReallocAsyncCtx2>>2] = 36;
 sp = STACKTOP;
 return;
}
function _show_danger__async_cb168($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _Wsubloop__async_cb($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $IsAsync3 = 0, $ReallocAsyncCtx2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP8[120>>0] = 1;
 $5 = HEAP32[144>>2]|0;
 $6 = (($5) + 1)|0;
 HEAP32[144>>2] = $6;
 HEAP32[216>>2] = 0;
 $7 = HEAP32[(651852)>>2]|0;
 $ReallocAsyncCtx2 = (_emscripten_realloc_async_context(12)|0);
 FUNCTION_TABLE_v[$7 & 255]();
 $IsAsync3 = ___async;
 if (!($IsAsync3)) {
  ___async_unwind = 0;
 }
 HEAP32[$ReallocAsyncCtx2>>2] = 193;
 $8 = ((($ReallocAsyncCtx2)) + 4|0);
 HEAP32[$8>>2] = $2;
 $9 = ((($ReallocAsyncCtx2)) + 8|0);
 HEAP32[$9>>2] = $4;
 sp = STACKTOP;
 return;
}
function _Wsubloop__async_cb169($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[144>>2]|0;
 $6 = (152 + ($5<<2)|0);
 HEAP32[$6>>2] = $2;
 HEAP8[128>>0] = 1;
 (_gettimeofday(($4|0),(0|0))|0);
 $7 = ((($4)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(116)>>2]|0;
 $10 = ($9|0)>($8|0);
 if ($10) {
  $11 = (($9) - ($8))|0;
  $12 = (($11|0) / 1000000)&-1;
  $13 = (($12) + 1)|0;
  $14 = Math_imul($13, -1000000)|0;
  $15 = (($9) + ($14))|0;
  HEAP32[(116)>>2] = $15;
  $16 = HEAP32[112>>2]|0;
  $17 = (($16) + ($13))|0;
  HEAP32[112>>2] = $17;
  $19 = $15;
 } else {
  $19 = $9;
 }
 $18 = (($8) - ($19))|0;
 $20 = ($18|0)>(1000000);
 if ($20) {
  $21 = (($18|0) / 1000000)&-1;
  $22 = ($21*1000000)|0;
  $23 = (($22) + ($19))|0;
  HEAP32[(116)>>2] = $23;
  $24 = HEAP32[112>>2]|0;
  $25 = (($24) - ($21))|0;
  HEAP32[112>>2] = $25;
 }
 $26 = HEAP32[$4>>2]|0;
 HEAP32[112>>2] = $26;
 HEAP32[(116)>>2] = $8;
 while(1) {
  _emscripten_set_main_loop(($2|0),0,1);
 }
}
function __update__async_cb($0) {
 $0 = $0|0;
 var $$pre = 0, $$pre118 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $15$phi = 0, $16 = 0, $17 = 0, $17$phi = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $IsAsync = 0, $IsAsync4 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $i10$042$reg2mem$0 = 0, $i11$041 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $$pre = HEAP32[35080>>2]|0;
 $15 = $$pre;$i10$042$reg2mem$0 = $2;
 while(1) {
  $5 = (($i10$042$reg2mem$0) + 1)|0;
  $14 = ($5|0)<($15|0);
  if (!($14)) {
   break;
  }
  $3 = HEAP32[35072>>2]|0;
  $4 = (((($3) + (($5*156)|0)|0)) + 153|0);
  $6 = HEAP8[$4>>0]|0;
  $7 = ($6<<24>>24)==(0);
  if ($7) {
   $15$phi = $15;$i10$042$reg2mem$0 = $5;$15 = $15$phi;
   continue;
  }
  $8 = (((($3) + (($5*156)|0)|0)) + 152|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = ($9<<24>>24)==(0);
  if ($10) {
   $15$phi = $15;$i10$042$reg2mem$0 = $5;$15 = $15$phi;
  } else {
   label = 5;
   break;
  }
 }
 if ((label|0) == 5) {
  $11 = (((($3) + (($5*156)|0)|0)) + 136|0);
  $12 = HEAP32[$11>>2]|0;
  $ReallocAsyncCtx = (_emscripten_realloc_async_context(8)|0);
  FUNCTION_TABLE_vi[$12 & 255](389544);
  $IsAsync = ___async;
  if ($IsAsync) {
   HEAP32[$ReallocAsyncCtx>>2] = 246;
   $13 = ((($ReallocAsyncCtx)) + 4|0);
   HEAP32[$13>>2] = $5;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx>>2] = 246;
  $13 = ((($ReallocAsyncCtx)) + 4|0);
  HEAP32[$13>>2] = $5;
  sp = STACKTOP;
  return;
 }
 $$pre118 = HEAP32[144>>2]|0;
 $17 = $$pre118;$i11$041 = 0;
 while(1) {
  $16 = ((((232 + ($17<<7)|0) + ($i11$041<<4)|0)) + 12|0);
  $18 = HEAP32[$16>>2]|0;
  $19 = ($18|0)==(0|0);
  if ($19) {
   label = 16;
   break;
  }
  $20 = ((((232 + ($17<<7)|0) + ($i11$041<<4)|0)) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = 389544;
  $23 = $22;
  $24 = HEAP32[$23>>2]|0;
  $25 = (($22) + 4)|0;
  $26 = $25;
  $27 = HEAP32[$26>>2]|0;
  $28 = ((((232 + ($17<<7)|0) + ($i11$041<<4)|0)) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (_i64Subtract(($24|0),($27|0),($29|0),0)|0);
  $31 = tempRet0;
  $32 = (0)<($31>>>0);
  $33 = ($21>>>0)<($30>>>0);
  $34 = (0)==($31|0);
  $35 = $34 & $33;
  $36 = $32 | $35;
  if ($36) {
   label = 12;
   break;
  }
  $38 = (($i11$041) + 1)|0;
  $39 = ($38|0)<(8);
  if ($39) {
   $17$phi = $17;$i11$041 = $38;$17 = $17$phi;
  } else {
   label = 16;
   break;
  }
 }
 if ((label|0) == 12) {
  $ReallocAsyncCtx2 = (_emscripten_realloc_async_context(8)|0);
  FUNCTION_TABLE_v[$18 & 255]();
  $IsAsync4 = ___async;
  if ($IsAsync4) {
   HEAP32[$ReallocAsyncCtx2>>2] = 247;
   $37 = ((($ReallocAsyncCtx2)) + 4|0);
   HEAP32[$37>>2] = $i11$041;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx2>>2] = 247;
  $37 = ((($ReallocAsyncCtx2)) + 4|0);
  HEAP32[$37>>2] = $i11$041;
  sp = STACKTOP;
  return;
 }
 else if ((label|0) == 16) {
  return;
 }
}
function __update__async_cb170($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $4$phi = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $IsAsync4 = 0, $ReallocAsyncCtx2 = 0, $i11$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $26 = 389544;
 $27 = $26;
 $28 = HEAP32[$27>>2]|0;
 $29 = (($26) + 4)|0;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = HEAP32[144>>2]|0;
 $33 = ((((232 + ($32<<7)|0) + ($2<<4)|0)) + 4|0);
 HEAP32[$33>>2] = $28;
 $34 = ((232 + ($32<<7)|0) + ($2<<4)|0);
 $35 = HEAP8[$34>>0]|0;
 $36 = ($35<<24>>24)==(0);
 if ($36) {
  $37 = ((((232 + ($32<<7)|0) + ($2<<4)|0)) + 12|0);
  HEAP32[$37>>2] = 0;
  $38 = (($2) + -1)|0;
  $4 = $32;$i11$1 = $38;
 } else {
  $4 = $32;$i11$1 = $2;
 }
 while(1) {
  $5 = (($i11$1) + 1)|0;
  $39 = ($5|0)<(8);
  if (!($39)) {
   label = 10;
   break;
  }
  $3 = ((((232 + ($4<<7)|0) + ($5<<4)|0)) + 12|0);
  $6 = HEAP32[$3>>2]|0;
  $7 = ($6|0)==(0|0);
  if ($7) {
   label = 10;
   break;
  }
  $8 = ((((232 + ($4<<7)|0) + ($5<<4)|0)) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = 389544;
  $11 = $10;
  $12 = HEAP32[$11>>2]|0;
  $13 = (($10) + 4)|0;
  $14 = $13;
  $15 = HEAP32[$14>>2]|0;
  $16 = ((((232 + ($4<<7)|0) + ($5<<4)|0)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (_i64Subtract(($12|0),($15|0),($17|0),0)|0);
  $19 = tempRet0;
  $20 = (0)<($19>>>0);
  $21 = ($9>>>0)<($18>>>0);
  $22 = (0)==($19|0);
  $23 = $22 & $21;
  $24 = $20 | $23;
  if ($24) {
   label = 4;
   break;
  } else {
   $4$phi = $4;$i11$1 = $5;$4 = $4$phi;
  }
 }
 if ((label|0) == 4) {
  $ReallocAsyncCtx2 = (_emscripten_realloc_async_context(8)|0);
  FUNCTION_TABLE_v[$6 & 255]();
  $IsAsync4 = ___async;
  if ($IsAsync4) {
   HEAP32[$ReallocAsyncCtx2>>2] = 247;
   $25 = ((($ReallocAsyncCtx2)) + 4|0);
   HEAP32[$25>>2] = $5;
   sp = STACKTOP;
   return;
  }
  ___async_unwind = 0;
  HEAP32[$ReallocAsyncCtx2>>2] = 247;
  $25 = ((($ReallocAsyncCtx2)) + 4|0);
  HEAP32[$25>>2] = $5;
  sp = STACKTOP;
  return;
 }
 else if ((label|0) == 10) {
  return;
 }
}
function _copyleft_loop__async_cb($0) {
 $0 = $0|0;
 var $$not = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $IsAsync4 = 0, $ReallocAsyncCtx2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = +HEAPF32[$1>>2];
 $3 = HEAP32[382760>>2]|0;
 $4 = (($3) + 1)|0;
 HEAP32[382760>>2] = $4;
 _glClear(16384);
 _glClear(256);
 $5 = $2;
 $6 = $2 < 3.5;
 if ($6) {
  $7 = HEAP32[382640>>2]|0;
  _glUniform1i(($7|0),1);
  _glDrawElements(5,391,5125,(0|0));
  _glDrawElements(5,388,5125,((1568)|0));
  $8 = HEAP32[382760>>2]|0;
  $$not = ($8|0)<(2);
  if (!($$not)) {
   $9 = HEAP32[382640>>2]|0;
   _glUniform1i(($9|0),2);
   $10 = HEAP32[382464>>2]|0;
   $11 = $5 + -1.0;
   $12 = $11 / 2.5;
   $13 = $12;
   _glUniform1f(($10|0),(+$13));
   $14 = HEAP32[382648>>2]|0;
   _glBindTexture(3553,($14|0));
   _glDrawElements(5,4,5125,((3124)|0));
   $15 = HEAP32[382464>>2]|0;
   _glUniform1f(($15|0),1.0);
  }
 }
 $16 = $2 > 3.5;
 if ($16) {
  $17 = HEAP32[382640>>2]|0;
  _glUniform1i(($17|0),2);
  $18 = HEAP32[382656>>2]|0;
  _glBindTexture(3553,($18|0));
  _glDrawElements(5,4,5125,((3140)|0));
 }
 $19 = $2 > 7.0;
 if (!($19)) {
  return;
 }
 $20 = HEAP32[382704>>2]|0;
 _glDisableVertexAttribArray(($20|0));
 $21 = HEAP32[382720>>2]|0;
 _glDisableVertexAttribArray(($21|0));
 $22 = HEAP32[382744>>2]|0;
 _glDisableVertexAttribArray(($22|0));
 _glBindBuffer(34962,0);
 _glDeleteVertexArrays(1,(382664|0));
 _glDeleteBuffers(1,(382680|0));
 _glDeleteBuffers(1,(382672|0));
 _glBindVertexArray(0);
 _glBindBuffer(34963,0);
 _glBindTexture(3553,0);
 _glDeleteTextures(1,(382648|0));
 _glDeleteTextures(1,(382656|0));
 $23 = HEAP32[(651956)>>2]|0;
 $24 = HEAP32[381960>>2]|0;
 $ReallocAsyncCtx2 = (_emscripten_realloc_async_context(4)|0);
 FUNCTION_TABLE_vi[$23 & 255]($24);
 $IsAsync4 = ___async;
 if ($IsAsync4) {
  HEAP32[$ReallocAsyncCtx2>>2] = 31;
  sp = STACKTOP;
  return;
 }
 ___async_unwind = 0;
 HEAP32[$ReallocAsyncCtx2>>2] = 31;
 sp = STACKTOP;
 return;
}
function _copyleft_loop__async_cb171($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _glEnable(2884);
 $1 = HEAP32[382432>>2]|0;
 $2 = HEAP32[381968>>2]|0;
 _glDetachShader(($1|0),($2|0));
 $3 = HEAP32[382432>>2]|0;
 $4 = HEAP32[381976>>2]|0;
 _glDetachShader(($3|0),($4|0));
 $5 = HEAP32[382432>>2]|0;
 _glDeleteProgram(($5|0));
 $6 = HEAP32[381968>>2]|0;
 _glDeleteShader(($6|0));
 $7 = HEAP32[381976>>2]|0;
 _glDeleteShader(($7|0));
 _emscripten_cancel_main_loop();
 (_alGetError()|0);
 (_emscripten_realloc_async_context(4)|0);
 _Wloop(32);
 // unreachable;
}
function _copyleft_loop__async_cb172($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 // unreachable;
}
function runPostSets() {

}
function _emscripten_alloc_async_context(len, sp) {
    len = len|0;
    sp = sp|0;
    // len is the size of ctx
    // we also need to store prev_frame, stack pointer before ctx
    var new_frame = 0; new_frame = stackAlloc((len + 8)|0)|0;
    // save sp
    HEAP32[(((new_frame)+(4))>>2)]=sp;
    // link the frame with previous one
    HEAP32[((new_frame)>>2)]=___async_cur_frame;
    ___async_cur_frame = new_frame;
    return (___async_cur_frame + 8)|0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _strlen(ptr) {
    ptr = ptr|0;
    var curr = 0;
    curr = ptr;
    while (((HEAP8[((curr)>>0)])|0)) {
      curr = (curr + 1)|0;
    }
    return (curr - ptr)|0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _strcat(pdest, psrc) {
    pdest = pdest|0; psrc = psrc|0;
    var i = 0;
    var pdestEnd = 0;
    pdestEnd = (pdest + (_strlen(pdest)|0))|0;
    do {
      HEAP8[((pdestEnd+i)>>0)]=HEAP8[((psrc+i)>>0)];
      i = (i+1)|0;
    } while (((HEAP8[(((psrc)+(i-1))>>0)])|0));
    return pdest|0;
}
function _strcpy(pdest, psrc) {
    pdest = pdest|0; psrc = psrc|0;
    var i = 0;
    do {
      HEAP8[(((pdest+i)|0)>>0)]=HEAP8[(((psrc+i)|0)>>0)];
      i = (i+1)|0;
    } while (((HEAP8[(((psrc)+(i-1))>>0)])|0));
    return pdest|0;
}
function _emscripten_free_async_context(ctx) {
    //  this function is called when a possibly async function turned out to be sync
    //  just undo a recent emscripten_alloc_async_context
    ctx = ctx|0;
    assert((((___async_cur_frame + 8)|0) == (ctx|0))|0);
    stackRestore(___async_cur_frame | 0);
    ___async_cur_frame = ((HEAP32[((___async_cur_frame)>>2)])|0);
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _emscripten_async_resume() {
    var callback = 0;
    ___async = 0;
    ___async_unwind = 1;
    while (1) {
      if (!___async_cur_frame) return;
      callback = ((HEAP32[(((___async_cur_frame)+(8))>>2)])|0);
      // the signature of callback is always vi
      // the only argument is ctx
      dynCall_vi(callback | 0, (___async_cur_frame + 8)|0);
      if (___async) return; // that was an async call
      if (!___async_unwind) {
        // keep the async stack
        ___async_unwind = 1;
        continue;
      }
      // unwind normal stack frame
      stackRestore(((HEAP32[(((___async_cur_frame)+(4))>>2)])|0));
      // pop the last async stack frame
      ___async_cur_frame = ((HEAP32[((___async_cur_frame)>>2)])|0);
    }
}
function _emscripten_realloc_async_context(len) {
    len = len|0;
    // assuming that we have on the stacktop
    stackRestore(___async_cur_frame | 0);
    return ((stackAlloc((len + 8)|0)|0) + 8)|0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return $10$0 | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return $1$0 | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



  
function dynCall_vid(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=+a2;
  FUNCTION_TABLE_vid[index&255](a1|0,+a2);
}


function dynCall_di(index,a1) {
  index = index|0;
  a1=a1|0;
  return +FUNCTION_TABLE_di[index&255](a1|0);
}


function dynCall_i(index) {
  index = index|0;
  
  return FUNCTION_TABLE_i[index&255]()|0;
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&255](a1|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&255](a1|0,a2|0);
}


function dynCall_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return FUNCTION_TABLE_iiiiiii[index&255](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
}


function dynCall_vidd(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=+a3;
  FUNCTION_TABLE_vidd[index&255](a1|0,+a2,+a3);
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&255](a1|0)|0;
}


function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&255](a1|0,a2|0,a3|0);
}


function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&255]();
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&255](a1|0,a2|0)|0;
}

function b0(p0,p1) { p0 = p0|0;p1 = +p1; nullFunc_vid(0); }
function b1(p0) { p0 = p0|0; nullFunc_di(1);return +0; }
function b2() { ; nullFunc_i(2);return 0; }
function b3(p0) { p0 = p0|0; nullFunc_vi(3); }
function b4(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(4); }
function b5(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iiiiiii(5);return 0; }
function b6(p0,p1,p2) { p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(6); }
function b7(p0) { p0 = p0|0; nullFunc_ii(7);return 0; }
function b8(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(8); }
function b9() { ; nullFunc_v(9); }
function b10(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(10);return 0; }

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_vid = [b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,__run_periodically,__run_futurelly,b0,b0,b0,b0,b0,b0,b0,__rotate_interface,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0];
var FUNCTION_TABLE_di = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,__period,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1];
var FUNCTION_TABLE_i = [b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__Wbreakpoint,b2,__random,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,__current_sound_device,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2];
var FUNCTION_TABLE_vi = [b3,_initialize_ball__async_cb,_reset_ball__async_cb,_collision_ball__async_cb,_collision_ball__async_cb3,_collision_ball__async_cb4,_collision_ball__async_cb5,_update_ball__async_cb,_update_ball__async_cb108,_update_ball__async_cb109,_update_ball__async_cb110,_update_ball__async_cb111,_update_ball__async_cb112,_update_ball__async_cb113,_update_ball__async_cb114,_update_ball__async_cb115,_update_ball__async_cb116,_initialize_bomb__async_cb,_initialize_bomb__async_cb77,_show_bomb__async_cb,_show_bomb__async_cb117,_show_bomb__async_cb118,_show_bomb__async_cb119,_blow_up_bomb__async_cb,b3,_blow_up_bomb__async_cb102,_copyleft__async_cb,_copyleft__async_cb1,_copyleft__async_cb2
,b3,_copyleft_loop__async_cb,_copyleft_loop__async_cb171,b3,_initialize_danger__async_cb,_initialize_danger__async_cb103,_show_danger__async_cb,_show_danger__async_cb168,_get_danger__async_cb,_get_danger__async_cb70,_get_danger__async_cb71,_get_danger__async_cb72,_end_danger__async_cb,_end_danger__async_cb89,_end_danger__async_cb90,_main__async_cb104,_main__async_cb,_main__async_cb105,_initialize_item__async_cb,_initialize_item__async_cb73,_initialize_item__async_cb74,_initialize_item__async_cb75,_update_item__async_cb,_show_item__async_cb,_show_item__async_cb163,_get_item__async_cb,_initialize_paddle__async_cb,_initialize_paddle__async_cb107,_move_paddle__async_cb,_move_paddle__async_cb78
,_move_paddle__async_cb79,_move_paddle__async_cb80,_move_paddle__async_cb81,_move_paddle__async_cb82,_paddle_ai__async_cb,_paddle_ai__async_cb30,_paddle_ai__async_cb31,_paddle_ai__async_cb32,_paddle_ai__async_cb33,_paddle_ai__async_cb34,_paddle_ai__async_cb35,_paddle_ai__async_cb36,_paddle_ai__async_cb37,_paddle_ai__async_cb38,_paddle_ai__async_cb39,_paddle_ai__async_cb40,_paddle_ai__async_cb41,_paddle_ai__async_cb42,_paddle_ai__async_cb43,_paddle_ai__async_cb44,_paddle_ai__async_cb45,_paddle_ai__async_cb46,_paddle_ai__async_cb47,_paddle_ai__async_cb48,_paddle_ai__async_cb49,_paddle_ai__async_cb50,_paddle_ai__async_cb51,_paddle_ai__async_cb52,_pong__async_cb,_pong__async_cb147
,_pong__async_cb139,_pong__async_cb161,_pong__async_cb151,_pong__async_cb155,_pong__async_cb157,_pong__async_cb137,_pong__async_cb122,_pong__async_cb123,_pong__async_cb124,_pong__async_cb125,_pong__async_cb126,_pong__async_cb127,_pong__async_cb128,_pong__async_cb129,_pong__async_cb160,_pong__async_cb146,_pong__async_cb145,_pong__async_cb144,_pong__async_cb143,_pong__async_cb142,_pong__async_cb141,_pong__async_cb140,_pong__async_cb159,_pong__async_cb158,_pong__async_cb150,_pong__async_cb130,_pong__async_cb149,_pong__async_cb131,_pong__async_cb154,_pong__async_cb132
,_pong__async_cb156,_pong__async_cb133,_pong__async_cb148,_pong__async_cb134,_pong__async_cb153,_pong__async_cb152,_pong__async_cb135,_pong__async_cb136,_initialize_score__async_cb,_initialize_score__async_cb162,_title__async_cb,_title__async_cb7,_title__async_cb8,_title__async_cb9,_title__async_cb10,_title__async_cb11,_title__async_cb12,_title__async_cb13,_title__async_cb14,_title__async_cb15,_title__async_cb16,_title__async_cb17,_title__async_cb18,_title__async_cb19,_title__async_cb20,_title__async_cb26,_title__async_cb21,_title__async_cb22,_title__async_cb23,_title__async_cb24
,_title__async_cb25,b3,__Wresize_window__async_cb,__Wresize_window__async_cb164,__initialize_memory__async_cb,__initialize_memory__async_cb106,__compile_shader__async_cb,__link_and_clean_shaders__async_cb,__compile_and_insert_new_shader__async_cb,__compile_and_insert_new_shader__async_cb91,__compile_and_insert_new_shader__async_cb98,__compile_and_insert_new_shader__async_cb97,__compile_and_insert_new_shader__async_cb96,__compile_and_insert_new_shader__async_cb95,__compile_and_insert_new_shader__async_cb94,__compile_and_insert_new_shader__async_cb92,__compile_and_insert_new_shader__async_cb93,__change_resolution__async_cb,__change_resolution__async_cb120,__change_resolution__async_cb121,__initialize_sound__async_cb,__new_sound__async_cb,__new_sound__async_cb165,__new_sound__async_cb166,b3,b3,b3,__new_sound__async_cb167,__destroy_sound__async_cb76,__destroy_sound__async_cb
,_onload_sound__async_cb,_onload_sound__async_cb83,_onload_sound__async_cb84,_onload_sound__async_cb85,_Wloop__async_cb,_Wloop__async_cb99,_Wloop__async_cb100,_Wloop__async_cb101,__exit_loop__async_cb,__exit_loop__async_cb88,__exit_loop__async_cb86,__may_the_weaver_sleep__async_cb,__may_the_weaver_sleep__async_cb6,_Wsubloop__async_cb,_Wsubloop__async_cb169,b3,b3,b3,__free,b3,_Wtrash_arena,__awake_the_weaver__async_cb69,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,__cancel,b3,b3,b3,b3,b3,b3,b3,__awake_the_weaver__async_cb68,__awake_the_weaver__async_cb67,__awake_the_weaver__async_cb64,__awake_the_weaver__async_cb62,__awake_the_weaver__async_cb61,__awake_the_weaver__async_cb60,__awake_the_weaver__async_cb59,__awake_the_weaver__async_cb58,__awake_the_weaver__async_cb57,__awake_the_weaver__async_cb56,__awake_the_weaver__async_cb55,__awake_the_weaver__async_cb54,__awake_the_weaver__async_cb66,__awake_the_weaver__async_cb65,__awake_the_weaver__async_cb63,b3,__change_final_shader
,__awake_the_weaver__async_cb53,b3,b3,b3,__play_sound,__destroy_sound,__awake_the_weaver__async_cb,__update__async_cb,__update__async_cb170,b3,b3,b3,b3,b3,b3,b3,b3];
var FUNCTION_TABLE_vii = [b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__Wresize_window,__Wmove_window,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__change_resolution,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4];
var FUNCTION_TABLE_iiiiiii = [b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,__new_interface,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5];
var FUNCTION_TABLE_vidd = [b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__move_interface,__resize_interface,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6];
var FUNCTION_TABLE_ii = [b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__Wcreate_arena,_Wdestroy_arena,b7,b7,__new_breakpoint,b7,b7,__Walloc,b7,b7,b7,b7,b7,b7,b7
,b7,b7,__reload_plugin,b7,b7,b7,b7,b7,__destroy_interface,__copy_interface,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,__select_sound_device,b7,__new_sound,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7];
var FUNCTION_TABLE_viii = [b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,_onload_sound,_onerror_sound,_onprogress_sound,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8];
var FUNCTION_TABLE_v = [b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,_restore_screen_after_explosion,b9,b9,b9,b9
,_copyleft_loop,b9,b9,_title,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,_pong,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__Wtrash,b9,b9,b9,b9,__Werase_key_translations
,__Wflush_input,__Whide_cursor,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9];
var FUNCTION_TABLE_iii = [b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__alloc,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__Wkey_translate,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10];

  return { _emscripten_free_async_context: _emscripten_free_async_context, _strlen: _strlen, _strcat: _strcat, _free: _free, _main: _main, _i64Add: _i64Add, _memset: _memset, _malloc: _malloc, _emscripten_alloc_async_context: _emscripten_alloc_async_context, _memcpy: _memcpy, _emscripten_realloc_async_context: _emscripten_realloc_async_context, _bitshift64Lshr: _bitshift64Lshr, _i64Subtract: _i64Subtract, _strcpy: _strcpy, _emscripten_async_resume: _emscripten_async_resume, _bitshift64Shl: _bitshift64Shl, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, setAsync: setAsync, dynCall_vid: dynCall_vid, dynCall_di: dynCall_di, dynCall_i: dynCall_i, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_vidd: dynCall_vidd, dynCall_ii: dynCall_ii, dynCall_viii: dynCall_viii, dynCall_v: dynCall_v, dynCall_iii: dynCall_iii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var real__emscripten_free_async_context = asm["_emscripten_free_async_context"]; asm["_emscripten_free_async_context"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_free_async_context.apply(null, arguments);
};

var real__strlen = asm["_strlen"]; asm["_strlen"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strlen.apply(null, arguments);
};

var real__strcat = asm["_strcat"]; asm["_strcat"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strcat.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__free.apply(null, arguments);
};

var real__main = asm["_main"]; asm["_main"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__main.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__malloc.apply(null, arguments);
};

var real__emscripten_alloc_async_context = asm["_emscripten_alloc_async_context"]; asm["_emscripten_alloc_async_context"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_alloc_async_context.apply(null, arguments);
};

var real__emscripten_realloc_async_context = asm["_emscripten_realloc_async_context"]; asm["_emscripten_realloc_async_context"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_realloc_async_context.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real__strcpy = asm["_strcpy"]; asm["_strcpy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strcpy.apply(null, arguments);
};

var real__emscripten_async_resume = asm["_emscripten_async_resume"]; asm["_emscripten_async_resume"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_async_resume.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};
var _emscripten_free_async_context = Module["_emscripten_free_async_context"] = asm["_emscripten_free_async_context"];
var _strlen = Module["_strlen"] = asm["_strlen"];
var _strcat = Module["_strcat"] = asm["_strcat"];
var _free = Module["_free"] = asm["_free"];
var _main = Module["_main"] = asm["_main"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _memset = Module["_memset"] = asm["_memset"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _emscripten_alloc_async_context = Module["_emscripten_alloc_async_context"] = asm["_emscripten_alloc_async_context"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _emscripten_realloc_async_context = Module["_emscripten_realloc_async_context"] = asm["_emscripten_realloc_async_context"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _strcpy = Module["_strcpy"] = asm["_strcpy"];
var _emscripten_async_resume = Module["_emscripten_async_resume"] = asm["_emscripten_async_resume"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var dynCall_vid = Module["dynCall_vid"] = asm["dynCall_vid"];
var dynCall_di = Module["dynCall_di"] = asm["dynCall_di"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_vidd = Module["dynCall_vidd"] = asm["dynCall_vidd"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
;

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.establishStackSpace = asm['establishStackSpace'];

Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];


// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===


function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') implicitly called by end of main(), but noExitRuntime, so not exiting the runtime (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)');
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



